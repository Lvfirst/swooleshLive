Index	application\index\controller\Index.php	/^class Index$/;"	c
hello	application\index\controller\Index.php	/^    public function hello($name = 'ThinkPHP5')$/;"	f
index	application\index\controller\Index.php	/^    public function index()$/;"	f
APP_PATH	public\index.php	/^define('APP_PATH', __DIR__ . '\/..\/application\/');$/;"	d
IEContentLoaded.polling	public\static\live\assert\iconfont\iconfont.js	/^(function(window){var svgSprite='<svg><symbol id="icon-shijian" viewBox="0 0 1024 1024"><path d="M512 64c-256 0-460.8 208-460.8 460.8s208 460.8 460.8 460.8 460.8-208 460.8-460.8S768 64 512 64zM512 940.8c-227.2 0-412.8-185.6-412.8-412.8s185.6-412.8 412.8-412.8 412.8 185.6 412.8 412.8S742.4 940.8 512 940.8z"  ><\/path><path d="M809.6 544l-278.4 0 0-281.6c0-12.8-9.6-22.4-22.4-22.4-12.8 0-22.4 9.6-22.4 22.4l0 307.2c0 12.8 9.6 22.4 22.4 22.4 0 0 3.2 0 3.2 0l297.6 0c12.8 0 22.4-9.6 22.4-22.4C832 553.6 822.4 544 809.6 544z"  ><\/path><\/symbol><symbol id="icon-browse" viewBox="0 0 1024 1024"><path d="M812.896 528.896C812.16 530.944 730.816 736 504.16 736c-225.44 0-305.248-198.24-309.696-209.376-3.2-6.4-2.944-21.28 1.376-29.92C196.736 494.656 287.776 288 504.16 288c215.296 0 304.384 199.776 309.248 210.752 3.296 6.176 3.552 21.344-0.512 30.144m58.112-57.888C866.72 460.928 762.24 224 504.16 224 246.08 224 141.344 461.44 137.92 469.568c-12.704 24.896-13.056 60.896-1.984 82.752 0.96 2.496 98.048 247.68 368.224 247.68 270.144 0 367.552-245.696 367.552-246.016 11.712-24.832 10.912-61.6-0.704-82.976"  ><\/path><path d="M568.16 551.968a64.064 64.064 0 0 1-64 64.032c-35.296 0-64-28.704-64-64.032v-71.904c0-35.328 28.704-64.064 64-64.064s64 28.736 64 64.064v71.904z m-64-199.968c-70.592 0-128 57.44-128 128.064v71.904a128.16 128.16 0 0 0 128 128.032c70.592 0 128-57.44 128-128.032v-71.904a128.16 128.16 0 0 0-128-128.064z"  ><\/path><\/symbol><symbol id="icon-xihuan" viewBox="0 0 1024 1024"><path d="M669.781333 130.752c71.637333-11.093333 138.901333 11.477333 193.344 64.533333 55.317333 53.930667 81.834667 124.992 74.282667 199.530667-7.466667 73.642667-46.549333 146.368-112.32 210.474667-18.346667 17.898667-67.669333 66.218667-138.453333 135.637333-31.829333 31.232-65.706667 64.448-99.84 97.984L553.6 871.466667l-13.184 12.949333a40.554667 40.554667 0 0 1-56.832 0l-114.602667-112.64-24.213333-23.722667a677626.346667 677626.346667 0 0 0-145.856-142.762666C133.141333 541.184 94.08 468.48 86.613333 394.816c-7.552-74.538667 18.944-145.6 74.282667-199.530667 54.442667-53.056 121.706667-75.605333 193.344-64.533333 53.162667 8.213333 107.093333 34.688 157.781333 76.949333 50.709333-42.24 104.618667-68.736 157.781334-76.949333z" fill="#3D3D3D" ><\/path><\/symbol><symbol id="icon-xihuan1" viewBox="0 0 1024 1024"><path d="M523.733333 841.024l33.173334-32.576 99.690666-97.813333c70.976-69.632 120.32-117.973333 138.709334-135.893334 59.008-57.514667 93.248-121.28 99.626666-184.234666 6.250667-61.44-15.488-119.744-61.589333-164.672-44.992-43.84-98.88-61.909333-157.034667-52.906667-49.365333 7.616-101.034667 34.624-150.016 78.848a21.333333 21.333333 0 0 1-28.586666 0c-48.981333-44.224-100.650667-71.232-150.016-78.869333-58.154667-8.96-112.042667 9.088-157.034667 52.928-46.101333 44.928-67.84 103.210667-61.610667 164.693333 6.4 62.933333 40.64 126.72 99.648 184.213333a100207.573333 100207.573333 0 0 1 145.92 142.826667l24.256 23.765333L512 852.522667l11.733333-11.498667z m-11.733333 11.52l-1.493333 1.429333A2.133333 2.133333 0 0 1 512 853.333333c0.512 0 1.045333 0.213333 1.493333 0.64l-1.493333-1.450666z m157.781333-721.792c71.637333-11.093333 138.901333 11.477333 193.344 64.533333 55.317333 53.930667 81.834667 124.992 74.282667 199.530667-7.466667 73.642667-46.549333 146.368-112.32 210.474667-18.346667 17.898667-67.669333 66.218667-138.453333 135.637333-31.829333 31.232-65.706667 64.448-99.84 97.984L553.6 871.466667l-13.184 12.949333a40.554667 40.554667 0 0 1-56.832 0l-114.602667-112.64-24.213333-23.722667a677626.346667 677626.346667 0 0 0-145.856-142.762666C133.141333 541.184 94.08 468.48 86.613333 394.816c-7.552-74.538667 18.944-145.6 74.282667-199.530667 54.442667-53.056 121.706667-75.605333 193.344-64.533333 53.162667 8.213333 107.093333 34.688 157.781333 76.949333 50.709333-42.24 104.618667-68.736 157.781334-76.949333z" fill="#3D3D3D" ><\/path><\/symbol><symbol id="icon-zan" viewBox="0 0 1024 1024"><path d="M710.549333 384.810667a12409.045333 12409.045333 0 0 0 47.466667-0.32l8.746667-0.085334c83.989333-0.618667 141.44 67.584 126.72 150.229334L847.296 794.026667c-10.026667 56.448-63.914667 101.546667-121.130667 101.589333L298.624 896a42.730667 42.730667 0 0 1-42.666667-42.410667l-0.810666-383.978666a42.666667 42.666667 0 0 1 42.026666-42.666667l3.157334-0.064c5.226667-0.042667 11.797333-0.042667 19.626666 0 91.946667 0.768 170.88-86.698667 170.709334-170.944-0.149333-86.741333 39.786667-126.762667 106.453333-127.573333 62.250667-0.746667 106.602667 59.605333 107.349333 149.12 0.213333 26.602667-6.293333 73.237333-14.506666 107.434666 6.186667 0 13.077333-0.042667 20.586666-0.085333z m-497.706666 63.232L213.333333 874.624A21.312 21.312 0 0 1 191.786667 896H149.525333A21.333333 21.333333 0 0 1 128 874.624l0.042667-426.581333A21.269333 21.269333 0 0 1 149.44 426.666667h41.984c11.669333 0 21.418667 9.578667 21.418667 21.376z" fill="#3D3D3D" ><\/path><\/symbol><symbol id="icon-zan1" viewBox="0 0 1024 1024"><path d="M757.76 852.906667c36.906667-0.021333 72.832-30.208 79.296-66.56l51.093333-287.04c10.069333-56.469333-27.093333-100.522667-84.373333-100.096l-10.261333 0.085333a19972.266667 19972.266667 0 0 1-52.842667 0.362667 3552.853333 3552.853333 0 0 1-56.746667 0l-30.997333-0.426667 11.498667-28.8c10.24-25.642667 21.76-95.744 21.504-128.021333-0.618667-73.045333-31.36-114.858667-69.290667-114.410667-46.613333 0.554667-69.461333 23.466667-69.333333 91.136 0.213333 112.661333-102.144 226.112-225.130667 225.109333a1214.08 1214.08 0 0 0-20.629333 0l-3.52 0.042667c-0.192 0 0.64 409.109333 0.64 409.109333 0-0.085333 459.093333-0.490667 459.093333-0.490666z m-17.301333-495.914667a15332.288 15332.288 0 0 0 52.693333-0.362667l10.282667-0.085333c84.010667-0.618667 141.44 67.52 126.72 150.250667L879.061333 793.813333c-10.090667 56.661333-63.68 101.696-121.258666 101.76l-458.922667 0.384A42.666667 42.666667 0 0 1 256 853.546667l-0.853333-409.173334a42.624 42.624 0 0 1 42.346666-42.730666l3.669334-0.042667c5.909333-0.064 13.12-0.064 21.333333 0 98.176 0.789333 182.293333-92.437333 182.144-182.378667C504.469333 128.021333 546.24 86.186667 616.106667 85.333333c65.173333-0.768 111.68 62.506667 112.448 156.714667 0.256 28.48-6.848 78.826667-15.701334 115.050667 8.021333 0 17.28-0.042667 27.584-0.106667zM170.666667 448v405.333333h23.466666a21.333333 21.333333 0 0 1 0 42.666667H154.837333A26.709333 26.709333 0 0 1 128 869.333333v-437.333333c0-14.784 12.074667-26.666667 26.773333-26.666667h38.912a21.333333 21.333333 0 0 1 0 42.666667H170.666667z" fill="#3D3D3D" ><\/path><\/symbol><symbol id="icon-paihang" viewBox="0 0 1024 1024"><path d="M405.333333 761.6c-8.533333 0-17.066667-2.133333-23.466666-8.533333-12.8-8.533333-19.2-23.466667-17.066667-38.4l19.2-106.666667-76.8-74.666667c-10.666667-10.666667-14.933333-27.733333-10.666667-40.533333 4.266667-14.933333 17.066667-25.6 32-27.733333l106.666667-14.933334 46.933333-96c6.4-14.933333 21.333333-23.466667 36.266667-23.466666s29.866667 8.533333 36.266667 23.466666l46.933333 96 106.666667 14.933334c14.933333 2.133333 27.733333 12.8 32 27.733333 4.266667 14.933333 0 29.866667-10.666667 40.533333l-76.8 74.666667 19.2 106.666667c2.133333 14.933333-4.266667 29.866667-17.066667 38.4-12.8 8.533333-29.866667 10.666667-42.666666 2.133333L516.266667 704l-96 51.2c-2.133333 4.266667-8.533333 6.4-14.933334 6.4z m-66.133333-256l89.6 87.466667-21.333333 123.733333 110.933333-57.6 110.933333 57.6-21.333333-123.733333 89.6-87.466667-121.6-19.2-55.466667-113.066667-55.466666 113.066667-125.866667 19.2z" fill="#3D3D3D" ><\/path><path d="M236.8 940.8c-12.8 0-25.6-4.266667-34.133333-10.666667-14.933333-10.666667-21.333333-27.733333-21.333334-46.933333V170.666667c0-38.4 32-70.4 70.4-70.4h541.866667c38.4 0 70.4 32 70.4 70.4v710.4c0 19.2-8.533333 36.266667-21.333333 46.933333-14.933333 10.666667-34.133333 14.933333-51.2 8.533333L561.066667 874.666667c-21.333333-6.4-61.866667-6.4-83.2 0l-224 61.866666c-6.4 2.133333-12.8 4.266667-17.066667 4.266667z m12.8-797.866667c-14.933333 0-27.733333 12.8-27.733333 27.733334v710.4c0 6.4 2.133333 10.666667 6.4 14.933333 4.266667 2.133333 8.533333 4.266667 14.933333 2.133333l224-61.866666c29.866667-8.533333 76.8-8.533333 106.666667 0L797.866667 896c6.4 2.133333 10.666667 2.133333 14.933333-2.133333 4.266667-2.133333 6.4-8.533333 6.4-14.933334V170.666667c0-14.933333-12.8-27.733333-27.733333-27.733334H249.6z" fill="#3D3D3D" ><\/path><path d="M840.533333 270.933333h-640c-12.8 0-21.333333-8.533333-21.333333-21.333333s8.533333-21.333333 21.333333-21.333333h640c12.8 0 21.333333 8.533333 21.333334 21.333333s-10.666667 21.333333-21.333334 21.333333z" fill="#3D3D3D" ><\/path><\/symbol><symbol id="icon-fanhui" viewBox="0 0 1024 1024"><path d="M710.153924 8.980397L266.007127 460.692524a81.118646 81.118646 0 0 0 0.861532 114.476097l446.192936 441.050666a26.922883 26.922883 0 0 0 37.853573-38.284339L304.722232 536.884282a27.27288 27.27288 0 0 1-0.323074-38.445877L748.545955 46.726278A26.922883 26.922883 0 1 0 710.180847 9.00732z"  ><\/path><\/symbol><symbol id="icon-wode" viewBox="0 0 1024 1024"><path d="M512 563.2c-127.9744 0-230.4-115.2512-230.4-256s102.4256-256 230.4-256 230.4 115.2512 230.4 256-102.4256 256-230.4 256z m0-51.2c98.2528 0 179.2-91.0592 179.2-204.8s-80.9472-204.8-179.2-204.8-179.2 91.0592-179.2 204.8 80.9472 204.8 179.2 204.8zM128 793.6a179.2 179.2 0 0 1 179.3792-179.2h409.2416C815.6416 614.4 896 694.7328 896 793.6a179.2 179.2 0 0 1-179.3792 179.2H307.3792C208.3584 972.8 128 892.4672 128 793.6z m51.2 0c0 70.5792 57.4464 128 128.1792 128h409.2416A128 128 0 0 0 844.8 793.6c0-70.5792-57.4464-128-128.1792-128H307.3792A128 128 0 0 0 179.2 793.6z"  ><\/path><\/symbol><symbol id="icon-huanyihuan" viewBox="0 0 1024 1024"><path d="M838.695385 374.153846A354.619077 354.619077 0 0 0 512 157.538462a354.461538 354.461538 0 1 0 0 708.923076 354.579692 354.579692 0 0 0 330.161231-225.20123 39.384615 39.384615 0 1 1 73.334154 28.750769A433.309538 433.309538 0 0 1 512 945.230769C272.738462 945.230769 78.769231 751.261538 78.769231 512S272.738462 78.769231 512 78.769231c144.423385 0 275.140923 71.286154 354.461538 183.965538V177.230769a39.384615 39.384615 0 0 1 78.769231 0v236.307693a39.266462 39.266462 0 0 1-39.384615 39.384615h-196.923077a39.384615 39.384615 0 0 1 0-78.769231h129.772308z"  ><\/path><\/symbol><symbol id="icon-remen" viewBox="0 0 1024 1024"><path d="M493.789998 1023.53089C254.799718 1023.53089 85.536259 856.015932 85.536259 625.384341c0-122.523033 72.584129-254.513561 75.782607-259.92965a32.11272 32.11272 0 0 1 31.728902-16.162976c12.879205 1.705855 23.156981 11.088057 26.69663 23.540799 0.255878 0.682342 19.87321 74.887033 45.631621 115.955491 17.271782 27.720143 34.970027 47.16689 54.80059 60.81373-13.433608-58.724057-23.626091-147.129991-6.951359-237.668243C358.771578 63.305131 552.514055 3.642853 560.787452 1.21201a31.814195 31.814195 0 0 1 39.831713 36.93176c-0.213232 1.705855-32.325952 175.95894 35.481784 324.410968 6.183724 13.518901 14.712999 29.084827 23.967262 44.906632a422.199104 422.199104 0 0 1 13.135083-66.698929c24.990775-88.022116 89.344154-118.130456 92.116168-119.281909a31.64361 31.64361 0 0 1 32.496537 4.008759c9.382202 7.249884 13.732132 19.276161 11.64246 31.046561-0.341171 2.217611-9.382202 62.178413 41.196398 147.12999 45.674267 76.678181 58.681411 126.403853 58.68141 221.931731C909.123036 856.143872 734.614073 1023.53089 493.789998 1023.53089zM187.247861 475.269104a407.699336 407.699336 0 0 0-28.10396 147.129991c0 187.814632 138.43013 324.069797 334.774036 324.069797 197.879176 0 341.469517-136.255165 341.469518-324.112443 0-81.198696-9.936605-118.684859-48.275696-183.294116-25.587824-43.072838-38.381737-81.795746-44.181643-112.714367a144.272684 144.272684 0 0 0-15.864451 36.803821c-18.721758 66.10188-13.902718 143.718281-13.902718 144.571208a31.259792 31.259792 0 0 1-20.47026 31.259792 30.278926 30.278926 0 0 1-35.225905-11.301289c-2.430843-3.241124-56.975556-81.454575-81.028111-134.336078-49.896258-109.217364-49.213916-227.475759-44.181643-295.539373-50.5786 29.767169-128.408232 96.423452-153.526947 231.868336-24.308433 131.990528 22.943749 269.951548 23.412859 271.23094a31.430378 31.430378 0 0 1-5.586675 31.728902 30.278926 30.278926 0 0 1-30.278925 9.723373c-3.752881-0.93822-96.551391-23.668738-152.460788-112.970245a376.951301 376.951301 0 0 1-26.568691-54.118249z" fill="#3D3D3D" ><\/path><\/symbol><\/svg>';var script=function(){var scripts=document.getElementsByTagName("script");return scripts[scripts.length-1]}();var shouldInjectCss=script.getAttribute("data-injectcss");var ready=function(fn){if(document.addEventListener){if(~["complete","loaded","interactive"].indexOf(document.readyState)){setTimeout(fn,0)}else{var loadFn=function(){document.removeEventListener("DOMContentLoaded",loadFn,false);fn()};document.addEventListener("DOMContentLoaded",loadFn,false)}}else if(document.attachEvent){IEContentLoaded(window,fn)}function IEContentLoaded(w,fn){var d=w.document,done=false,init=function(){if(!done){done=true;fn()}};var polling=function(){try{d.documentElement.doScroll("left")}catch(e){setTimeout(polling,50);return}init()};polling();d.onreadystatechange=function(){if(d.readyState=="complete"){d.onreadystatechange=null;init()}}}};var before=function(el,target){target.parentNode.insertBefore(el,target)};var prepend=function(el,target){if(target.firstChild){before(el,target.firstChild)}else{target.appendChild(el)}};function appendSvg(){var div,svg;div=document.createElement("div");div.innerHTML=svgSprite;svgSprite=null;svg=div.getElementsByTagName("svg")[0];if(svg){svg.setAttribute("aria-hidden","true");svg.style.position="absolute";svg.style.width=0;svg.style.height=0;svg.style.overflow="hidden";prepend(svg,document.body)}}if(shouldInjectCss&&!window.__iconfont__svg__cssinject__){window.__iconfont__svg__cssinject__=true;try{document.write("<style>.svgfont {display: inline-block;width: 1em;height: 1em;fill: currentColor;vertical-align: -0.1em;font-size:16px;}<\/style>")}catch(e){console&&console.log(e)}}ready(appendSvg)})(window)/;"	f
appendSvg	public\static\live\assert\iconfont\iconfont.js	/^(function(window){var svgSprite='<svg><symbol id="icon-shijian" viewBox="0 0 1024 1024"><path d="M512 64c-256 0-460.8 208-460.8 460.8s208 460.8 460.8 460.8 460.8-208 460.8-460.8S768 64 512 64zM512 940.8c-227.2 0-412.8-185.6-412.8-412.8s185.6-412.8 412.8-412.8 412.8 185.6 412.8 412.8S742.4 940.8 512 940.8z"  ><\/path><path d="M809.6 544l-278.4 0 0-281.6c0-12.8-9.6-22.4-22.4-22.4-12.8 0-22.4 9.6-22.4 22.4l0 307.2c0 12.8 9.6 22.4 22.4 22.4 0 0 3.2 0 3.2 0l297.6 0c12.8 0 22.4-9.6 22.4-22.4C832 553.6 822.4 544 809.6 544z"  ><\/path><\/symbol><symbol id="icon-browse" viewBox="0 0 1024 1024"><path d="M812.896 528.896C812.16 530.944 730.816 736 504.16 736c-225.44 0-305.248-198.24-309.696-209.376-3.2-6.4-2.944-21.28 1.376-29.92C196.736 494.656 287.776 288 504.16 288c215.296 0 304.384 199.776 309.248 210.752 3.296 6.176 3.552 21.344-0.512 30.144m58.112-57.888C866.72 460.928 762.24 224 504.16 224 246.08 224 141.344 461.44 137.92 469.568c-12.704 24.896-13.056 60.896-1.984 82.752 0.96 2.496 98.048 247.68 368.224 247.68 270.144 0 367.552-245.696 367.552-246.016 11.712-24.832 10.912-61.6-0.704-82.976"  ><\/path><path d="M568.16 551.968a64.064 64.064 0 0 1-64 64.032c-35.296 0-64-28.704-64-64.032v-71.904c0-35.328 28.704-64.064 64-64.064s64 28.736 64 64.064v71.904z m-64-199.968c-70.592 0-128 57.44-128 128.064v71.904a128.16 128.16 0 0 0 128 128.032c70.592 0 128-57.44 128-128.032v-71.904a128.16 128.16 0 0 0-128-128.064z"  ><\/path><\/symbol><symbol id="icon-xihuan" viewBox="0 0 1024 1024"><path d="M669.781333 130.752c71.637333-11.093333 138.901333 11.477333 193.344 64.533333 55.317333 53.930667 81.834667 124.992 74.282667 199.530667-7.466667 73.642667-46.549333 146.368-112.32 210.474667-18.346667 17.898667-67.669333 66.218667-138.453333 135.637333-31.829333 31.232-65.706667 64.448-99.84 97.984L553.6 871.466667l-13.184 12.949333a40.554667 40.554667 0 0 1-56.832 0l-114.602667-112.64-24.213333-23.722667a677626.346667 677626.346667 0 0 0-145.856-142.762666C133.141333 541.184 94.08 468.48 86.613333 394.816c-7.552-74.538667 18.944-145.6 74.282667-199.530667 54.442667-53.056 121.706667-75.605333 193.344-64.533333 53.162667 8.213333 107.093333 34.688 157.781333 76.949333 50.709333-42.24 104.618667-68.736 157.781334-76.949333z" fill="#3D3D3D" ><\/path><\/symbol><symbol id="icon-xihuan1" viewBox="0 0 1024 1024"><path d="M523.733333 841.024l33.173334-32.576 99.690666-97.813333c70.976-69.632 120.32-117.973333 138.709334-135.893334 59.008-57.514667 93.248-121.28 99.626666-184.234666 6.250667-61.44-15.488-119.744-61.589333-164.672-44.992-43.84-98.88-61.909333-157.034667-52.906667-49.365333 7.616-101.034667 34.624-150.016 78.848a21.333333 21.333333 0 0 1-28.586666 0c-48.981333-44.224-100.650667-71.232-150.016-78.869333-58.154667-8.96-112.042667 9.088-157.034667 52.928-46.101333 44.928-67.84 103.210667-61.610667 164.693333 6.4 62.933333 40.64 126.72 99.648 184.213333a100207.573333 100207.573333 0 0 1 145.92 142.826667l24.256 23.765333L512 852.522667l11.733333-11.498667z m-11.733333 11.52l-1.493333 1.429333A2.133333 2.133333 0 0 1 512 853.333333c0.512 0 1.045333 0.213333 1.493333 0.64l-1.493333-1.450666z m157.781333-721.792c71.637333-11.093333 138.901333 11.477333 193.344 64.533333 55.317333 53.930667 81.834667 124.992 74.282667 199.530667-7.466667 73.642667-46.549333 146.368-112.32 210.474667-18.346667 17.898667-67.669333 66.218667-138.453333 135.637333-31.829333 31.232-65.706667 64.448-99.84 97.984L553.6 871.466667l-13.184 12.949333a40.554667 40.554667 0 0 1-56.832 0l-114.602667-112.64-24.213333-23.722667a677626.346667 677626.346667 0 0 0-145.856-142.762666C133.141333 541.184 94.08 468.48 86.613333 394.816c-7.552-74.538667 18.944-145.6 74.282667-199.530667 54.442667-53.056 121.706667-75.605333 193.344-64.533333 53.162667 8.213333 107.093333 34.688 157.781333 76.949333 50.709333-42.24 104.618667-68.736 157.781334-76.949333z" fill="#3D3D3D" ><\/path><\/symbol><symbol id="icon-zan" viewBox="0 0 1024 1024"><path d="M710.549333 384.810667a12409.045333 12409.045333 0 0 0 47.466667-0.32l8.746667-0.085334c83.989333-0.618667 141.44 67.584 126.72 150.229334L847.296 794.026667c-10.026667 56.448-63.914667 101.546667-121.130667 101.589333L298.624 896a42.730667 42.730667 0 0 1-42.666667-42.410667l-0.810666-383.978666a42.666667 42.666667 0 0 1 42.026666-42.666667l3.157334-0.064c5.226667-0.042667 11.797333-0.042667 19.626666 0 91.946667 0.768 170.88-86.698667 170.709334-170.944-0.149333-86.741333 39.786667-126.762667 106.453333-127.573333 62.250667-0.746667 106.602667 59.605333 107.349333 149.12 0.213333 26.602667-6.293333 73.237333-14.506666 107.434666 6.186667 0 13.077333-0.042667 20.586666-0.085333z m-497.706666 63.232L213.333333 874.624A21.312 21.312 0 0 1 191.786667 896H149.525333A21.333333 21.333333 0 0 1 128 874.624l0.042667-426.581333A21.269333 21.269333 0 0 1 149.44 426.666667h41.984c11.669333 0 21.418667 9.578667 21.418667 21.376z" fill="#3D3D3D" ><\/path><\/symbol><symbol id="icon-zan1" viewBox="0 0 1024 1024"><path d="M757.76 852.906667c36.906667-0.021333 72.832-30.208 79.296-66.56l51.093333-287.04c10.069333-56.469333-27.093333-100.522667-84.373333-100.096l-10.261333 0.085333a19972.266667 19972.266667 0 0 1-52.842667 0.362667 3552.853333 3552.853333 0 0 1-56.746667 0l-30.997333-0.426667 11.498667-28.8c10.24-25.642667 21.76-95.744 21.504-128.021333-0.618667-73.045333-31.36-114.858667-69.290667-114.410667-46.613333 0.554667-69.461333 23.466667-69.333333 91.136 0.213333 112.661333-102.144 226.112-225.130667 225.109333a1214.08 1214.08 0 0 0-20.629333 0l-3.52 0.042667c-0.192 0 0.64 409.109333 0.64 409.109333 0-0.085333 459.093333-0.490667 459.093333-0.490666z m-17.301333-495.914667a15332.288 15332.288 0 0 0 52.693333-0.362667l10.282667-0.085333c84.010667-0.618667 141.44 67.52 126.72 150.250667L879.061333 793.813333c-10.090667 56.661333-63.68 101.696-121.258666 101.76l-458.922667 0.384A42.666667 42.666667 0 0 1 256 853.546667l-0.853333-409.173334a42.624 42.624 0 0 1 42.346666-42.730666l3.669334-0.042667c5.909333-0.064 13.12-0.064 21.333333 0 98.176 0.789333 182.293333-92.437333 182.144-182.378667C504.469333 128.021333 546.24 86.186667 616.106667 85.333333c65.173333-0.768 111.68 62.506667 112.448 156.714667 0.256 28.48-6.848 78.826667-15.701334 115.050667 8.021333 0 17.28-0.042667 27.584-0.106667zM170.666667 448v405.333333h23.466666a21.333333 21.333333 0 0 1 0 42.666667H154.837333A26.709333 26.709333 0 0 1 128 869.333333v-437.333333c0-14.784 12.074667-26.666667 26.773333-26.666667h38.912a21.333333 21.333333 0 0 1 0 42.666667H170.666667z" fill="#3D3D3D" ><\/path><\/symbol><symbol id="icon-paihang" viewBox="0 0 1024 1024"><path d="M405.333333 761.6c-8.533333 0-17.066667-2.133333-23.466666-8.533333-12.8-8.533333-19.2-23.466667-17.066667-38.4l19.2-106.666667-76.8-74.666667c-10.666667-10.666667-14.933333-27.733333-10.666667-40.533333 4.266667-14.933333 17.066667-25.6 32-27.733333l106.666667-14.933334 46.933333-96c6.4-14.933333 21.333333-23.466667 36.266667-23.466666s29.866667 8.533333 36.266667 23.466666l46.933333 96 106.666667 14.933334c14.933333 2.133333 27.733333 12.8 32 27.733333 4.266667 14.933333 0 29.866667-10.666667 40.533333l-76.8 74.666667 19.2 106.666667c2.133333 14.933333-4.266667 29.866667-17.066667 38.4-12.8 8.533333-29.866667 10.666667-42.666666 2.133333L516.266667 704l-96 51.2c-2.133333 4.266667-8.533333 6.4-14.933334 6.4z m-66.133333-256l89.6 87.466667-21.333333 123.733333 110.933333-57.6 110.933333 57.6-21.333333-123.733333 89.6-87.466667-121.6-19.2-55.466667-113.066667-55.466666 113.066667-125.866667 19.2z" fill="#3D3D3D" ><\/path><path d="M236.8 940.8c-12.8 0-25.6-4.266667-34.133333-10.666667-14.933333-10.666667-21.333333-27.733333-21.333334-46.933333V170.666667c0-38.4 32-70.4 70.4-70.4h541.866667c38.4 0 70.4 32 70.4 70.4v710.4c0 19.2-8.533333 36.266667-21.333333 46.933333-14.933333 10.666667-34.133333 14.933333-51.2 8.533333L561.066667 874.666667c-21.333333-6.4-61.866667-6.4-83.2 0l-224 61.866666c-6.4 2.133333-12.8 4.266667-17.066667 4.266667z m12.8-797.866667c-14.933333 0-27.733333 12.8-27.733333 27.733334v710.4c0 6.4 2.133333 10.666667 6.4 14.933333 4.266667 2.133333 8.533333 4.266667 14.933333 2.133333l224-61.866666c29.866667-8.533333 76.8-8.533333 106.666667 0L797.866667 896c6.4 2.133333 10.666667 2.133333 14.933333-2.133333 4.266667-2.133333 6.4-8.533333 6.4-14.933334V170.666667c0-14.933333-12.8-27.733333-27.733333-27.733334H249.6z" fill="#3D3D3D" ><\/path><path d="M840.533333 270.933333h-640c-12.8 0-21.333333-8.533333-21.333333-21.333333s8.533333-21.333333 21.333333-21.333333h640c12.8 0 21.333333 8.533333 21.333334 21.333333s-10.666667 21.333333-21.333334 21.333333z" fill="#3D3D3D" ><\/path><\/symbol><symbol id="icon-fanhui" viewBox="0 0 1024 1024"><path d="M710.153924 8.980397L266.007127 460.692524a81.118646 81.118646 0 0 0 0.861532 114.476097l446.192936 441.050666a26.922883 26.922883 0 0 0 37.853573-38.284339L304.722232 536.884282a27.27288 27.27288 0 0 1-0.323074-38.445877L748.545955 46.726278A26.922883 26.922883 0 1 0 710.180847 9.00732z"  ><\/path><\/symbol><symbol id="icon-wode" viewBox="0 0 1024 1024"><path d="M512 563.2c-127.9744 0-230.4-115.2512-230.4-256s102.4256-256 230.4-256 230.4 115.2512 230.4 256-102.4256 256-230.4 256z m0-51.2c98.2528 0 179.2-91.0592 179.2-204.8s-80.9472-204.8-179.2-204.8-179.2 91.0592-179.2 204.8 80.9472 204.8 179.2 204.8zM128 793.6a179.2 179.2 0 0 1 179.3792-179.2h409.2416C815.6416 614.4 896 694.7328 896 793.6a179.2 179.2 0 0 1-179.3792 179.2H307.3792C208.3584 972.8 128 892.4672 128 793.6z m51.2 0c0 70.5792 57.4464 128 128.1792 128h409.2416A128 128 0 0 0 844.8 793.6c0-70.5792-57.4464-128-128.1792-128H307.3792A128 128 0 0 0 179.2 793.6z"  ><\/path><\/symbol><symbol id="icon-huanyihuan" viewBox="0 0 1024 1024"><path d="M838.695385 374.153846A354.619077 354.619077 0 0 0 512 157.538462a354.461538 354.461538 0 1 0 0 708.923076 354.579692 354.579692 0 0 0 330.161231-225.20123 39.384615 39.384615 0 1 1 73.334154 28.750769A433.309538 433.309538 0 0 1 512 945.230769C272.738462 945.230769 78.769231 751.261538 78.769231 512S272.738462 78.769231 512 78.769231c144.423385 0 275.140923 71.286154 354.461538 183.965538V177.230769a39.384615 39.384615 0 0 1 78.769231 0v236.307693a39.266462 39.266462 0 0 1-39.384615 39.384615h-196.923077a39.384615 39.384615 0 0 1 0-78.769231h129.772308z"  ><\/path><\/symbol><symbol id="icon-remen" viewBox="0 0 1024 1024"><path d="M493.789998 1023.53089C254.799718 1023.53089 85.536259 856.015932 85.536259 625.384341c0-122.523033 72.584129-254.513561 75.782607-259.92965a32.11272 32.11272 0 0 1 31.728902-16.162976c12.879205 1.705855 23.156981 11.088057 26.69663 23.540799 0.255878 0.682342 19.87321 74.887033 45.631621 115.955491 17.271782 27.720143 34.970027 47.16689 54.80059 60.81373-13.433608-58.724057-23.626091-147.129991-6.951359-237.668243C358.771578 63.305131 552.514055 3.642853 560.787452 1.21201a31.814195 31.814195 0 0 1 39.831713 36.93176c-0.213232 1.705855-32.325952 175.95894 35.481784 324.410968 6.183724 13.518901 14.712999 29.084827 23.967262 44.906632a422.199104 422.199104 0 0 1 13.135083-66.698929c24.990775-88.022116 89.344154-118.130456 92.116168-119.281909a31.64361 31.64361 0 0 1 32.496537 4.008759c9.382202 7.249884 13.732132 19.276161 11.64246 31.046561-0.341171 2.217611-9.382202 62.178413 41.196398 147.12999 45.674267 76.678181 58.681411 126.403853 58.68141 221.931731C909.123036 856.143872 734.614073 1023.53089 493.789998 1023.53089zM187.247861 475.269104a407.699336 407.699336 0 0 0-28.10396 147.129991c0 187.814632 138.43013 324.069797 334.774036 324.069797 197.879176 0 341.469517-136.255165 341.469518-324.112443 0-81.198696-9.936605-118.684859-48.275696-183.294116-25.587824-43.072838-38.381737-81.795746-44.181643-112.714367a144.272684 144.272684 0 0 0-15.864451 36.803821c-18.721758 66.10188-13.902718 143.718281-13.902718 144.571208a31.259792 31.259792 0 0 1-20.47026 31.259792 30.278926 30.278926 0 0 1-35.225905-11.301289c-2.430843-3.241124-56.975556-81.454575-81.028111-134.336078-49.896258-109.217364-49.213916-227.475759-44.181643-295.539373-50.5786 29.767169-128.408232 96.423452-153.526947 231.868336-24.308433 131.990528 22.943749 269.951548 23.412859 271.23094a31.430378 31.430378 0 0 1-5.586675 31.728902 30.278926 30.278926 0 0 1-30.278925 9.723373c-3.752881-0.93822-96.551391-23.668738-152.460788-112.970245a376.951301 376.951301 0 0 1-26.568691-54.118249z" fill="#3D3D3D" ><\/path><\/symbol><\/svg>';var script=function(){var scripts=document.getElementsByTagName("script");return scripts[scripts.length-1]}();var shouldInjectCss=script.getAttribute("data-injectcss");var ready=function(fn){if(document.addEventListener){if(~["complete","loaded","interactive"].indexOf(document.readyState)){setTimeout(fn,0)}else{var loadFn=function(){document.removeEventListener("DOMContentLoaded",loadFn,false);fn()};document.addEventListener("DOMContentLoaded",loadFn,false)}}else if(document.attachEvent){IEContentLoaded(window,fn)}function IEContentLoaded(w,fn){var d=w.document,done=false,init=function(){if(!done){done=true;fn()}};var polling=function(){try{d.documentElement.doScroll("left")}catch(e){setTimeout(polling,50);return}init()};polling();d.onreadystatechange=function(){if(d.readyState=="complete"){d.onreadystatechange=null;init()}}}};var before=function(el,target){target.parentNode.insertBefore(el,target)};var prepend=function(el,target){if(target.firstChild){before(el,target.firstChild)}else{target.appendChild(el)}};function appendSvg(){var div,svg;div=document.createElement("div");div.innerHTML=svgSprite;svgSprite=null;svg=div.getElementsByTagName("svg")[0];if(svg){svg.setAttribute("aria-hidden","true");svg.style.position="absolute";svg.style.width=0;svg.style.height=0;svg.style.overflow="hidden";prepend(svg,document.body)}}if(shouldInjectCss&&!window.__iconfont__svg__cssinject__){window.__iconfont__svg__cssinject__=true;try{document.write("<style>.svgfont {display: inline-block;width: 1em;height: 1em;fill: currentColor;vertical-align: -0.1em;font-size:16px;}<\/style>")}catch(e){console&&console.log(e)}}ready(appendSvg)})(window)/;"	f
before	public\static\live\assert\iconfont\iconfont.js	/^(function(window){var svgSprite='<svg><symbol id="icon-shijian" viewBox="0 0 1024 1024"><path d="M512 64c-256 0-460.8 208-460.8 460.8s208 460.8 460.8 460.8 460.8-208 460.8-460.8S768 64 512 64zM512 940.8c-227.2 0-412.8-185.6-412.8-412.8s185.6-412.8 412.8-412.8 412.8 185.6 412.8 412.8S742.4 940.8 512 940.8z"  ><\/path><path d="M809.6 544l-278.4 0 0-281.6c0-12.8-9.6-22.4-22.4-22.4-12.8 0-22.4 9.6-22.4 22.4l0 307.2c0 12.8 9.6 22.4 22.4 22.4 0 0 3.2 0 3.2 0l297.6 0c12.8 0 22.4-9.6 22.4-22.4C832 553.6 822.4 544 809.6 544z"  ><\/path><\/symbol><symbol id="icon-browse" viewBox="0 0 1024 1024"><path d="M812.896 528.896C812.16 530.944 730.816 736 504.16 736c-225.44 0-305.248-198.24-309.696-209.376-3.2-6.4-2.944-21.28 1.376-29.92C196.736 494.656 287.776 288 504.16 288c215.296 0 304.384 199.776 309.248 210.752 3.296 6.176 3.552 21.344-0.512 30.144m58.112-57.888C866.72 460.928 762.24 224 504.16 224 246.08 224 141.344 461.44 137.92 469.568c-12.704 24.896-13.056 60.896-1.984 82.752 0.96 2.496 98.048 247.68 368.224 247.68 270.144 0 367.552-245.696 367.552-246.016 11.712-24.832 10.912-61.6-0.704-82.976"  ><\/path><path d="M568.16 551.968a64.064 64.064 0 0 1-64 64.032c-35.296 0-64-28.704-64-64.032v-71.904c0-35.328 28.704-64.064 64-64.064s64 28.736 64 64.064v71.904z m-64-199.968c-70.592 0-128 57.44-128 128.064v71.904a128.16 128.16 0 0 0 128 128.032c70.592 0 128-57.44 128-128.032v-71.904a128.16 128.16 0 0 0-128-128.064z"  ><\/path><\/symbol><symbol id="icon-xihuan" viewBox="0 0 1024 1024"><path d="M669.781333 130.752c71.637333-11.093333 138.901333 11.477333 193.344 64.533333 55.317333 53.930667 81.834667 124.992 74.282667 199.530667-7.466667 73.642667-46.549333 146.368-112.32 210.474667-18.346667 17.898667-67.669333 66.218667-138.453333 135.637333-31.829333 31.232-65.706667 64.448-99.84 97.984L553.6 871.466667l-13.184 12.949333a40.554667 40.554667 0 0 1-56.832 0l-114.602667-112.64-24.213333-23.722667a677626.346667 677626.346667 0 0 0-145.856-142.762666C133.141333 541.184 94.08 468.48 86.613333 394.816c-7.552-74.538667 18.944-145.6 74.282667-199.530667 54.442667-53.056 121.706667-75.605333 193.344-64.533333 53.162667 8.213333 107.093333 34.688 157.781333 76.949333 50.709333-42.24 104.618667-68.736 157.781334-76.949333z" fill="#3D3D3D" ><\/path><\/symbol><symbol id="icon-xihuan1" viewBox="0 0 1024 1024"><path d="M523.733333 841.024l33.173334-32.576 99.690666-97.813333c70.976-69.632 120.32-117.973333 138.709334-135.893334 59.008-57.514667 93.248-121.28 99.626666-184.234666 6.250667-61.44-15.488-119.744-61.589333-164.672-44.992-43.84-98.88-61.909333-157.034667-52.906667-49.365333 7.616-101.034667 34.624-150.016 78.848a21.333333 21.333333 0 0 1-28.586666 0c-48.981333-44.224-100.650667-71.232-150.016-78.869333-58.154667-8.96-112.042667 9.088-157.034667 52.928-46.101333 44.928-67.84 103.210667-61.610667 164.693333 6.4 62.933333 40.64 126.72 99.648 184.213333a100207.573333 100207.573333 0 0 1 145.92 142.826667l24.256 23.765333L512 852.522667l11.733333-11.498667z m-11.733333 11.52l-1.493333 1.429333A2.133333 2.133333 0 0 1 512 853.333333c0.512 0 1.045333 0.213333 1.493333 0.64l-1.493333-1.450666z m157.781333-721.792c71.637333-11.093333 138.901333 11.477333 193.344 64.533333 55.317333 53.930667 81.834667 124.992 74.282667 199.530667-7.466667 73.642667-46.549333 146.368-112.32 210.474667-18.346667 17.898667-67.669333 66.218667-138.453333 135.637333-31.829333 31.232-65.706667 64.448-99.84 97.984L553.6 871.466667l-13.184 12.949333a40.554667 40.554667 0 0 1-56.832 0l-114.602667-112.64-24.213333-23.722667a677626.346667 677626.346667 0 0 0-145.856-142.762666C133.141333 541.184 94.08 468.48 86.613333 394.816c-7.552-74.538667 18.944-145.6 74.282667-199.530667 54.442667-53.056 121.706667-75.605333 193.344-64.533333 53.162667 8.213333 107.093333 34.688 157.781333 76.949333 50.709333-42.24 104.618667-68.736 157.781334-76.949333z" fill="#3D3D3D" ><\/path><\/symbol><symbol id="icon-zan" viewBox="0 0 1024 1024"><path d="M710.549333 384.810667a12409.045333 12409.045333 0 0 0 47.466667-0.32l8.746667-0.085334c83.989333-0.618667 141.44 67.584 126.72 150.229334L847.296 794.026667c-10.026667 56.448-63.914667 101.546667-121.130667 101.589333L298.624 896a42.730667 42.730667 0 0 1-42.666667-42.410667l-0.810666-383.978666a42.666667 42.666667 0 0 1 42.026666-42.666667l3.157334-0.064c5.226667-0.042667 11.797333-0.042667 19.626666 0 91.946667 0.768 170.88-86.698667 170.709334-170.944-0.149333-86.741333 39.786667-126.762667 106.453333-127.573333 62.250667-0.746667 106.602667 59.605333 107.349333 149.12 0.213333 26.602667-6.293333 73.237333-14.506666 107.434666 6.186667 0 13.077333-0.042667 20.586666-0.085333z m-497.706666 63.232L213.333333 874.624A21.312 21.312 0 0 1 191.786667 896H149.525333A21.333333 21.333333 0 0 1 128 874.624l0.042667-426.581333A21.269333 21.269333 0 0 1 149.44 426.666667h41.984c11.669333 0 21.418667 9.578667 21.418667 21.376z" fill="#3D3D3D" ><\/path><\/symbol><symbol id="icon-zan1" viewBox="0 0 1024 1024"><path d="M757.76 852.906667c36.906667-0.021333 72.832-30.208 79.296-66.56l51.093333-287.04c10.069333-56.469333-27.093333-100.522667-84.373333-100.096l-10.261333 0.085333a19972.266667 19972.266667 0 0 1-52.842667 0.362667 3552.853333 3552.853333 0 0 1-56.746667 0l-30.997333-0.426667 11.498667-28.8c10.24-25.642667 21.76-95.744 21.504-128.021333-0.618667-73.045333-31.36-114.858667-69.290667-114.410667-46.613333 0.554667-69.461333 23.466667-69.333333 91.136 0.213333 112.661333-102.144 226.112-225.130667 225.109333a1214.08 1214.08 0 0 0-20.629333 0l-3.52 0.042667c-0.192 0 0.64 409.109333 0.64 409.109333 0-0.085333 459.093333-0.490667 459.093333-0.490666z m-17.301333-495.914667a15332.288 15332.288 0 0 0 52.693333-0.362667l10.282667-0.085333c84.010667-0.618667 141.44 67.52 126.72 150.250667L879.061333 793.813333c-10.090667 56.661333-63.68 101.696-121.258666 101.76l-458.922667 0.384A42.666667 42.666667 0 0 1 256 853.546667l-0.853333-409.173334a42.624 42.624 0 0 1 42.346666-42.730666l3.669334-0.042667c5.909333-0.064 13.12-0.064 21.333333 0 98.176 0.789333 182.293333-92.437333 182.144-182.378667C504.469333 128.021333 546.24 86.186667 616.106667 85.333333c65.173333-0.768 111.68 62.506667 112.448 156.714667 0.256 28.48-6.848 78.826667-15.701334 115.050667 8.021333 0 17.28-0.042667 27.584-0.106667zM170.666667 448v405.333333h23.466666a21.333333 21.333333 0 0 1 0 42.666667H154.837333A26.709333 26.709333 0 0 1 128 869.333333v-437.333333c0-14.784 12.074667-26.666667 26.773333-26.666667h38.912a21.333333 21.333333 0 0 1 0 42.666667H170.666667z" fill="#3D3D3D" ><\/path><\/symbol><symbol id="icon-paihang" viewBox="0 0 1024 1024"><path d="M405.333333 761.6c-8.533333 0-17.066667-2.133333-23.466666-8.533333-12.8-8.533333-19.2-23.466667-17.066667-38.4l19.2-106.666667-76.8-74.666667c-10.666667-10.666667-14.933333-27.733333-10.666667-40.533333 4.266667-14.933333 17.066667-25.6 32-27.733333l106.666667-14.933334 46.933333-96c6.4-14.933333 21.333333-23.466667 36.266667-23.466666s29.866667 8.533333 36.266667 23.466666l46.933333 96 106.666667 14.933334c14.933333 2.133333 27.733333 12.8 32 27.733333 4.266667 14.933333 0 29.866667-10.666667 40.533333l-76.8 74.666667 19.2 106.666667c2.133333 14.933333-4.266667 29.866667-17.066667 38.4-12.8 8.533333-29.866667 10.666667-42.666666 2.133333L516.266667 704l-96 51.2c-2.133333 4.266667-8.533333 6.4-14.933334 6.4z m-66.133333-256l89.6 87.466667-21.333333 123.733333 110.933333-57.6 110.933333 57.6-21.333333-123.733333 89.6-87.466667-121.6-19.2-55.466667-113.066667-55.466666 113.066667-125.866667 19.2z" fill="#3D3D3D" ><\/path><path d="M236.8 940.8c-12.8 0-25.6-4.266667-34.133333-10.666667-14.933333-10.666667-21.333333-27.733333-21.333334-46.933333V170.666667c0-38.4 32-70.4 70.4-70.4h541.866667c38.4 0 70.4 32 70.4 70.4v710.4c0 19.2-8.533333 36.266667-21.333333 46.933333-14.933333 10.666667-34.133333 14.933333-51.2 8.533333L561.066667 874.666667c-21.333333-6.4-61.866667-6.4-83.2 0l-224 61.866666c-6.4 2.133333-12.8 4.266667-17.066667 4.266667z m12.8-797.866667c-14.933333 0-27.733333 12.8-27.733333 27.733334v710.4c0 6.4 2.133333 10.666667 6.4 14.933333 4.266667 2.133333 8.533333 4.266667 14.933333 2.133333l224-61.866666c29.866667-8.533333 76.8-8.533333 106.666667 0L797.866667 896c6.4 2.133333 10.666667 2.133333 14.933333-2.133333 4.266667-2.133333 6.4-8.533333 6.4-14.933334V170.666667c0-14.933333-12.8-27.733333-27.733333-27.733334H249.6z" fill="#3D3D3D" ><\/path><path d="M840.533333 270.933333h-640c-12.8 0-21.333333-8.533333-21.333333-21.333333s8.533333-21.333333 21.333333-21.333333h640c12.8 0 21.333333 8.533333 21.333334 21.333333s-10.666667 21.333333-21.333334 21.333333z" fill="#3D3D3D" ><\/path><\/symbol><symbol id="icon-fanhui" viewBox="0 0 1024 1024"><path d="M710.153924 8.980397L266.007127 460.692524a81.118646 81.118646 0 0 0 0.861532 114.476097l446.192936 441.050666a26.922883 26.922883 0 0 0 37.853573-38.284339L304.722232 536.884282a27.27288 27.27288 0 0 1-0.323074-38.445877L748.545955 46.726278A26.922883 26.922883 0 1 0 710.180847 9.00732z"  ><\/path><\/symbol><symbol id="icon-wode" viewBox="0 0 1024 1024"><path d="M512 563.2c-127.9744 0-230.4-115.2512-230.4-256s102.4256-256 230.4-256 230.4 115.2512 230.4 256-102.4256 256-230.4 256z m0-51.2c98.2528 0 179.2-91.0592 179.2-204.8s-80.9472-204.8-179.2-204.8-179.2 91.0592-179.2 204.8 80.9472 204.8 179.2 204.8zM128 793.6a179.2 179.2 0 0 1 179.3792-179.2h409.2416C815.6416 614.4 896 694.7328 896 793.6a179.2 179.2 0 0 1-179.3792 179.2H307.3792C208.3584 972.8 128 892.4672 128 793.6z m51.2 0c0 70.5792 57.4464 128 128.1792 128h409.2416A128 128 0 0 0 844.8 793.6c0-70.5792-57.4464-128-128.1792-128H307.3792A128 128 0 0 0 179.2 793.6z"  ><\/path><\/symbol><symbol id="icon-huanyihuan" viewBox="0 0 1024 1024"><path d="M838.695385 374.153846A354.619077 354.619077 0 0 0 512 157.538462a354.461538 354.461538 0 1 0 0 708.923076 354.579692 354.579692 0 0 0 330.161231-225.20123 39.384615 39.384615 0 1 1 73.334154 28.750769A433.309538 433.309538 0 0 1 512 945.230769C272.738462 945.230769 78.769231 751.261538 78.769231 512S272.738462 78.769231 512 78.769231c144.423385 0 275.140923 71.286154 354.461538 183.965538V177.230769a39.384615 39.384615 0 0 1 78.769231 0v236.307693a39.266462 39.266462 0 0 1-39.384615 39.384615h-196.923077a39.384615 39.384615 0 0 1 0-78.769231h129.772308z"  ><\/path><\/symbol><symbol id="icon-remen" viewBox="0 0 1024 1024"><path d="M493.789998 1023.53089C254.799718 1023.53089 85.536259 856.015932 85.536259 625.384341c0-122.523033 72.584129-254.513561 75.782607-259.92965a32.11272 32.11272 0 0 1 31.728902-16.162976c12.879205 1.705855 23.156981 11.088057 26.69663 23.540799 0.255878 0.682342 19.87321 74.887033 45.631621 115.955491 17.271782 27.720143 34.970027 47.16689 54.80059 60.81373-13.433608-58.724057-23.626091-147.129991-6.951359-237.668243C358.771578 63.305131 552.514055 3.642853 560.787452 1.21201a31.814195 31.814195 0 0 1 39.831713 36.93176c-0.213232 1.705855-32.325952 175.95894 35.481784 324.410968 6.183724 13.518901 14.712999 29.084827 23.967262 44.906632a422.199104 422.199104 0 0 1 13.135083-66.698929c24.990775-88.022116 89.344154-118.130456 92.116168-119.281909a31.64361 31.64361 0 0 1 32.496537 4.008759c9.382202 7.249884 13.732132 19.276161 11.64246 31.046561-0.341171 2.217611-9.382202 62.178413 41.196398 147.12999 45.674267 76.678181 58.681411 126.403853 58.68141 221.931731C909.123036 856.143872 734.614073 1023.53089 493.789998 1023.53089zM187.247861 475.269104a407.699336 407.699336 0 0 0-28.10396 147.129991c0 187.814632 138.43013 324.069797 334.774036 324.069797 197.879176 0 341.469517-136.255165 341.469518-324.112443 0-81.198696-9.936605-118.684859-48.275696-183.294116-25.587824-43.072838-38.381737-81.795746-44.181643-112.714367a144.272684 144.272684 0 0 0-15.864451 36.803821c-18.721758 66.10188-13.902718 143.718281-13.902718 144.571208a31.259792 31.259792 0 0 1-20.47026 31.259792 30.278926 30.278926 0 0 1-35.225905-11.301289c-2.430843-3.241124-56.975556-81.454575-81.028111-134.336078-49.896258-109.217364-49.213916-227.475759-44.181643-295.539373-50.5786 29.767169-128.408232 96.423452-153.526947 231.868336-24.308433 131.990528 22.943749 269.951548 23.412859 271.23094a31.430378 31.430378 0 0 1-5.586675 31.728902 30.278926 30.278926 0 0 1-30.278925 9.723373c-3.752881-0.93822-96.551391-23.668738-152.460788-112.970245a376.951301 376.951301 0 0 1-26.568691-54.118249z" fill="#3D3D3D" ><\/path><\/symbol><\/svg>';var script=function(){var scripts=document.getElementsByTagName("script");return scripts[scripts.length-1]}();var shouldInjectCss=script.getAttribute("data-injectcss");var ready=function(fn){if(document.addEventListener){if(~["complete","loaded","interactive"].indexOf(document.readyState)){setTimeout(fn,0)}else{var loadFn=function(){document.removeEventListener("DOMContentLoaded",loadFn,false);fn()};document.addEventListener("DOMContentLoaded",loadFn,false)}}else if(document.attachEvent){IEContentLoaded(window,fn)}function IEContentLoaded(w,fn){var d=w.document,done=false,init=function(){if(!done){done=true;fn()}};var polling=function(){try{d.documentElement.doScroll("left")}catch(e){setTimeout(polling,50);return}init()};polling();d.onreadystatechange=function(){if(d.readyState=="complete"){d.onreadystatechange=null;init()}}}};var before=function(el,target){target.parentNode.insertBefore(el,target)};var prepend=function(el,target){if(target.firstChild){before(el,target.firstChild)}else{target.appendChild(el)}};function appendSvg(){var div,svg;div=document.createElement("div");div.innerHTML=svgSprite;svgSprite=null;svg=div.getElementsByTagName("svg")[0];if(svg){svg.setAttribute("aria-hidden","true");svg.style.position="absolute";svg.style.width=0;svg.style.height=0;svg.style.overflow="hidden";prepend(svg,document.body)}}if(shouldInjectCss&&!window.__iconfont__svg__cssinject__){window.__iconfont__svg__cssinject__=true;try{document.write("<style>.svgfont {display: inline-block;width: 1em;height: 1em;fill: currentColor;vertical-align: -0.1em;font-size:16px;}<\/style>")}catch(e){console&&console.log(e)}}ready(appendSvg)})(window)/;"	f
d.onreadystatechange	public\static\live\assert\iconfont\iconfont.js	/^(function(window){var svgSprite='<svg><symbol id="icon-shijian" viewBox="0 0 1024 1024"><path d="M512 64c-256 0-460.8 208-460.8 460.8s208 460.8 460.8 460.8 460.8-208 460.8-460.8S768 64 512 64zM512 940.8c-227.2 0-412.8-185.6-412.8-412.8s185.6-412.8 412.8-412.8 412.8 185.6 412.8 412.8S742.4 940.8 512 940.8z"  ><\/path><path d="M809.6 544l-278.4 0 0-281.6c0-12.8-9.6-22.4-22.4-22.4-12.8 0-22.4 9.6-22.4 22.4l0 307.2c0 12.8 9.6 22.4 22.4 22.4 0 0 3.2 0 3.2 0l297.6 0c12.8 0 22.4-9.6 22.4-22.4C832 553.6 822.4 544 809.6 544z"  ><\/path><\/symbol><symbol id="icon-browse" viewBox="0 0 1024 1024"><path d="M812.896 528.896C812.16 530.944 730.816 736 504.16 736c-225.44 0-305.248-198.24-309.696-209.376-3.2-6.4-2.944-21.28 1.376-29.92C196.736 494.656 287.776 288 504.16 288c215.296 0 304.384 199.776 309.248 210.752 3.296 6.176 3.552 21.344-0.512 30.144m58.112-57.888C866.72 460.928 762.24 224 504.16 224 246.08 224 141.344 461.44 137.92 469.568c-12.704 24.896-13.056 60.896-1.984 82.752 0.96 2.496 98.048 247.68 368.224 247.68 270.144 0 367.552-245.696 367.552-246.016 11.712-24.832 10.912-61.6-0.704-82.976"  ><\/path><path d="M568.16 551.968a64.064 64.064 0 0 1-64 64.032c-35.296 0-64-28.704-64-64.032v-71.904c0-35.328 28.704-64.064 64-64.064s64 28.736 64 64.064v71.904z m-64-199.968c-70.592 0-128 57.44-128 128.064v71.904a128.16 128.16 0 0 0 128 128.032c70.592 0 128-57.44 128-128.032v-71.904a128.16 128.16 0 0 0-128-128.064z"  ><\/path><\/symbol><symbol id="icon-xihuan" viewBox="0 0 1024 1024"><path d="M669.781333 130.752c71.637333-11.093333 138.901333 11.477333 193.344 64.533333 55.317333 53.930667 81.834667 124.992 74.282667 199.530667-7.466667 73.642667-46.549333 146.368-112.32 210.474667-18.346667 17.898667-67.669333 66.218667-138.453333 135.637333-31.829333 31.232-65.706667 64.448-99.84 97.984L553.6 871.466667l-13.184 12.949333a40.554667 40.554667 0 0 1-56.832 0l-114.602667-112.64-24.213333-23.722667a677626.346667 677626.346667 0 0 0-145.856-142.762666C133.141333 541.184 94.08 468.48 86.613333 394.816c-7.552-74.538667 18.944-145.6 74.282667-199.530667 54.442667-53.056 121.706667-75.605333 193.344-64.533333 53.162667 8.213333 107.093333 34.688 157.781333 76.949333 50.709333-42.24 104.618667-68.736 157.781334-76.949333z" fill="#3D3D3D" ><\/path><\/symbol><symbol id="icon-xihuan1" viewBox="0 0 1024 1024"><path d="M523.733333 841.024l33.173334-32.576 99.690666-97.813333c70.976-69.632 120.32-117.973333 138.709334-135.893334 59.008-57.514667 93.248-121.28 99.626666-184.234666 6.250667-61.44-15.488-119.744-61.589333-164.672-44.992-43.84-98.88-61.909333-157.034667-52.906667-49.365333 7.616-101.034667 34.624-150.016 78.848a21.333333 21.333333 0 0 1-28.586666 0c-48.981333-44.224-100.650667-71.232-150.016-78.869333-58.154667-8.96-112.042667 9.088-157.034667 52.928-46.101333 44.928-67.84 103.210667-61.610667 164.693333 6.4 62.933333 40.64 126.72 99.648 184.213333a100207.573333 100207.573333 0 0 1 145.92 142.826667l24.256 23.765333L512 852.522667l11.733333-11.498667z m-11.733333 11.52l-1.493333 1.429333A2.133333 2.133333 0 0 1 512 853.333333c0.512 0 1.045333 0.213333 1.493333 0.64l-1.493333-1.450666z m157.781333-721.792c71.637333-11.093333 138.901333 11.477333 193.344 64.533333 55.317333 53.930667 81.834667 124.992 74.282667 199.530667-7.466667 73.642667-46.549333 146.368-112.32 210.474667-18.346667 17.898667-67.669333 66.218667-138.453333 135.637333-31.829333 31.232-65.706667 64.448-99.84 97.984L553.6 871.466667l-13.184 12.949333a40.554667 40.554667 0 0 1-56.832 0l-114.602667-112.64-24.213333-23.722667a677626.346667 677626.346667 0 0 0-145.856-142.762666C133.141333 541.184 94.08 468.48 86.613333 394.816c-7.552-74.538667 18.944-145.6 74.282667-199.530667 54.442667-53.056 121.706667-75.605333 193.344-64.533333 53.162667 8.213333 107.093333 34.688 157.781333 76.949333 50.709333-42.24 104.618667-68.736 157.781334-76.949333z" fill="#3D3D3D" ><\/path><\/symbol><symbol id="icon-zan" viewBox="0 0 1024 1024"><path d="M710.549333 384.810667a12409.045333 12409.045333 0 0 0 47.466667-0.32l8.746667-0.085334c83.989333-0.618667 141.44 67.584 126.72 150.229334L847.296 794.026667c-10.026667 56.448-63.914667 101.546667-121.130667 101.589333L298.624 896a42.730667 42.730667 0 0 1-42.666667-42.410667l-0.810666-383.978666a42.666667 42.666667 0 0 1 42.026666-42.666667l3.157334-0.064c5.226667-0.042667 11.797333-0.042667 19.626666 0 91.946667 0.768 170.88-86.698667 170.709334-170.944-0.149333-86.741333 39.786667-126.762667 106.453333-127.573333 62.250667-0.746667 106.602667 59.605333 107.349333 149.12 0.213333 26.602667-6.293333 73.237333-14.506666 107.434666 6.186667 0 13.077333-0.042667 20.586666-0.085333z m-497.706666 63.232L213.333333 874.624A21.312 21.312 0 0 1 191.786667 896H149.525333A21.333333 21.333333 0 0 1 128 874.624l0.042667-426.581333A21.269333 21.269333 0 0 1 149.44 426.666667h41.984c11.669333 0 21.418667 9.578667 21.418667 21.376z" fill="#3D3D3D" ><\/path><\/symbol><symbol id="icon-zan1" viewBox="0 0 1024 1024"><path d="M757.76 852.906667c36.906667-0.021333 72.832-30.208 79.296-66.56l51.093333-287.04c10.069333-56.469333-27.093333-100.522667-84.373333-100.096l-10.261333 0.085333a19972.266667 19972.266667 0 0 1-52.842667 0.362667 3552.853333 3552.853333 0 0 1-56.746667 0l-30.997333-0.426667 11.498667-28.8c10.24-25.642667 21.76-95.744 21.504-128.021333-0.618667-73.045333-31.36-114.858667-69.290667-114.410667-46.613333 0.554667-69.461333 23.466667-69.333333 91.136 0.213333 112.661333-102.144 226.112-225.130667 225.109333a1214.08 1214.08 0 0 0-20.629333 0l-3.52 0.042667c-0.192 0 0.64 409.109333 0.64 409.109333 0-0.085333 459.093333-0.490667 459.093333-0.490666z m-17.301333-495.914667a15332.288 15332.288 0 0 0 52.693333-0.362667l10.282667-0.085333c84.010667-0.618667 141.44 67.52 126.72 150.250667L879.061333 793.813333c-10.090667 56.661333-63.68 101.696-121.258666 101.76l-458.922667 0.384A42.666667 42.666667 0 0 1 256 853.546667l-0.853333-409.173334a42.624 42.624 0 0 1 42.346666-42.730666l3.669334-0.042667c5.909333-0.064 13.12-0.064 21.333333 0 98.176 0.789333 182.293333-92.437333 182.144-182.378667C504.469333 128.021333 546.24 86.186667 616.106667 85.333333c65.173333-0.768 111.68 62.506667 112.448 156.714667 0.256 28.48-6.848 78.826667-15.701334 115.050667 8.021333 0 17.28-0.042667 27.584-0.106667zM170.666667 448v405.333333h23.466666a21.333333 21.333333 0 0 1 0 42.666667H154.837333A26.709333 26.709333 0 0 1 128 869.333333v-437.333333c0-14.784 12.074667-26.666667 26.773333-26.666667h38.912a21.333333 21.333333 0 0 1 0 42.666667H170.666667z" fill="#3D3D3D" ><\/path><\/symbol><symbol id="icon-paihang" viewBox="0 0 1024 1024"><path d="M405.333333 761.6c-8.533333 0-17.066667-2.133333-23.466666-8.533333-12.8-8.533333-19.2-23.466667-17.066667-38.4l19.2-106.666667-76.8-74.666667c-10.666667-10.666667-14.933333-27.733333-10.666667-40.533333 4.266667-14.933333 17.066667-25.6 32-27.733333l106.666667-14.933334 46.933333-96c6.4-14.933333 21.333333-23.466667 36.266667-23.466666s29.866667 8.533333 36.266667 23.466666l46.933333 96 106.666667 14.933334c14.933333 2.133333 27.733333 12.8 32 27.733333 4.266667 14.933333 0 29.866667-10.666667 40.533333l-76.8 74.666667 19.2 106.666667c2.133333 14.933333-4.266667 29.866667-17.066667 38.4-12.8 8.533333-29.866667 10.666667-42.666666 2.133333L516.266667 704l-96 51.2c-2.133333 4.266667-8.533333 6.4-14.933334 6.4z m-66.133333-256l89.6 87.466667-21.333333 123.733333 110.933333-57.6 110.933333 57.6-21.333333-123.733333 89.6-87.466667-121.6-19.2-55.466667-113.066667-55.466666 113.066667-125.866667 19.2z" fill="#3D3D3D" ><\/path><path d="M236.8 940.8c-12.8 0-25.6-4.266667-34.133333-10.666667-14.933333-10.666667-21.333333-27.733333-21.333334-46.933333V170.666667c0-38.4 32-70.4 70.4-70.4h541.866667c38.4 0 70.4 32 70.4 70.4v710.4c0 19.2-8.533333 36.266667-21.333333 46.933333-14.933333 10.666667-34.133333 14.933333-51.2 8.533333L561.066667 874.666667c-21.333333-6.4-61.866667-6.4-83.2 0l-224 61.866666c-6.4 2.133333-12.8 4.266667-17.066667 4.266667z m12.8-797.866667c-14.933333 0-27.733333 12.8-27.733333 27.733334v710.4c0 6.4 2.133333 10.666667 6.4 14.933333 4.266667 2.133333 8.533333 4.266667 14.933333 2.133333l224-61.866666c29.866667-8.533333 76.8-8.533333 106.666667 0L797.866667 896c6.4 2.133333 10.666667 2.133333 14.933333-2.133333 4.266667-2.133333 6.4-8.533333 6.4-14.933334V170.666667c0-14.933333-12.8-27.733333-27.733333-27.733334H249.6z" fill="#3D3D3D" ><\/path><path d="M840.533333 270.933333h-640c-12.8 0-21.333333-8.533333-21.333333-21.333333s8.533333-21.333333 21.333333-21.333333h640c12.8 0 21.333333 8.533333 21.333334 21.333333s-10.666667 21.333333-21.333334 21.333333z" fill="#3D3D3D" ><\/path><\/symbol><symbol id="icon-fanhui" viewBox="0 0 1024 1024"><path d="M710.153924 8.980397L266.007127 460.692524a81.118646 81.118646 0 0 0 0.861532 114.476097l446.192936 441.050666a26.922883 26.922883 0 0 0 37.853573-38.284339L304.722232 536.884282a27.27288 27.27288 0 0 1-0.323074-38.445877L748.545955 46.726278A26.922883 26.922883 0 1 0 710.180847 9.00732z"  ><\/path><\/symbol><symbol id="icon-wode" viewBox="0 0 1024 1024"><path d="M512 563.2c-127.9744 0-230.4-115.2512-230.4-256s102.4256-256 230.4-256 230.4 115.2512 230.4 256-102.4256 256-230.4 256z m0-51.2c98.2528 0 179.2-91.0592 179.2-204.8s-80.9472-204.8-179.2-204.8-179.2 91.0592-179.2 204.8 80.9472 204.8 179.2 204.8zM128 793.6a179.2 179.2 0 0 1 179.3792-179.2h409.2416C815.6416 614.4 896 694.7328 896 793.6a179.2 179.2 0 0 1-179.3792 179.2H307.3792C208.3584 972.8 128 892.4672 128 793.6z m51.2 0c0 70.5792 57.4464 128 128.1792 128h409.2416A128 128 0 0 0 844.8 793.6c0-70.5792-57.4464-128-128.1792-128H307.3792A128 128 0 0 0 179.2 793.6z"  ><\/path><\/symbol><symbol id="icon-huanyihuan" viewBox="0 0 1024 1024"><path d="M838.695385 374.153846A354.619077 354.619077 0 0 0 512 157.538462a354.461538 354.461538 0 1 0 0 708.923076 354.579692 354.579692 0 0 0 330.161231-225.20123 39.384615 39.384615 0 1 1 73.334154 28.750769A433.309538 433.309538 0 0 1 512 945.230769C272.738462 945.230769 78.769231 751.261538 78.769231 512S272.738462 78.769231 512 78.769231c144.423385 0 275.140923 71.286154 354.461538 183.965538V177.230769a39.384615 39.384615 0 0 1 78.769231 0v236.307693a39.266462 39.266462 0 0 1-39.384615 39.384615h-196.923077a39.384615 39.384615 0 0 1 0-78.769231h129.772308z"  ><\/path><\/symbol><symbol id="icon-remen" viewBox="0 0 1024 1024"><path d="M493.789998 1023.53089C254.799718 1023.53089 85.536259 856.015932 85.536259 625.384341c0-122.523033 72.584129-254.513561 75.782607-259.92965a32.11272 32.11272 0 0 1 31.728902-16.162976c12.879205 1.705855 23.156981 11.088057 26.69663 23.540799 0.255878 0.682342 19.87321 74.887033 45.631621 115.955491 17.271782 27.720143 34.970027 47.16689 54.80059 60.81373-13.433608-58.724057-23.626091-147.129991-6.951359-237.668243C358.771578 63.305131 552.514055 3.642853 560.787452 1.21201a31.814195 31.814195 0 0 1 39.831713 36.93176c-0.213232 1.705855-32.325952 175.95894 35.481784 324.410968 6.183724 13.518901 14.712999 29.084827 23.967262 44.906632a422.199104 422.199104 0 0 1 13.135083-66.698929c24.990775-88.022116 89.344154-118.130456 92.116168-119.281909a31.64361 31.64361 0 0 1 32.496537 4.008759c9.382202 7.249884 13.732132 19.276161 11.64246 31.046561-0.341171 2.217611-9.382202 62.178413 41.196398 147.12999 45.674267 76.678181 58.681411 126.403853 58.68141 221.931731C909.123036 856.143872 734.614073 1023.53089 493.789998 1023.53089zM187.247861 475.269104a407.699336 407.699336 0 0 0-28.10396 147.129991c0 187.814632 138.43013 324.069797 334.774036 324.069797 197.879176 0 341.469517-136.255165 341.469518-324.112443 0-81.198696-9.936605-118.684859-48.275696-183.294116-25.587824-43.072838-38.381737-81.795746-44.181643-112.714367a144.272684 144.272684 0 0 0-15.864451 36.803821c-18.721758 66.10188-13.902718 143.718281-13.902718 144.571208a31.259792 31.259792 0 0 1-20.47026 31.259792 30.278926 30.278926 0 0 1-35.225905-11.301289c-2.430843-3.241124-56.975556-81.454575-81.028111-134.336078-49.896258-109.217364-49.213916-227.475759-44.181643-295.539373-50.5786 29.767169-128.408232 96.423452-153.526947 231.868336-24.308433 131.990528 22.943749 269.951548 23.412859 271.23094a31.430378 31.430378 0 0 1-5.586675 31.728902 30.278926 30.278926 0 0 1-30.278925 9.723373c-3.752881-0.93822-96.551391-23.668738-152.460788-112.970245a376.951301 376.951301 0 0 1-26.568691-54.118249z" fill="#3D3D3D" ><\/path><\/symbol><\/svg>';var script=function(){var scripts=document.getElementsByTagName("script");return scripts[scripts.length-1]}();var shouldInjectCss=script.getAttribute("data-injectcss");var ready=function(fn){if(document.addEventListener){if(~["complete","loaded","interactive"].indexOf(document.readyState)){setTimeout(fn,0)}else{var loadFn=function(){document.removeEventListener("DOMContentLoaded",loadFn,false);fn()};document.addEventListener("DOMContentLoaded",loadFn,false)}}else if(document.attachEvent){IEContentLoaded(window,fn)}function IEContentLoaded(w,fn){var d=w.document,done=false,init=function(){if(!done){done=true;fn()}};var polling=function(){try{d.documentElement.doScroll("left")}catch(e){setTimeout(polling,50);return}init()};polling();d.onreadystatechange=function(){if(d.readyState=="complete"){d.onreadystatechange=null;init()}}}};var before=function(el,target){target.parentNode.insertBefore(el,target)};var prepend=function(el,target){if(target.firstChild){before(el,target.firstChild)}else{target.appendChild(el)}};function appendSvg(){var div,svg;div=document.createElement("div");div.innerHTML=svgSprite;svgSprite=null;svg=div.getElementsByTagName("svg")[0];if(svg){svg.setAttribute("aria-hidden","true");svg.style.position="absolute";svg.style.width=0;svg.style.height=0;svg.style.overflow="hidden";prepend(svg,document.body)}}if(shouldInjectCss&&!window.__iconfont__svg__cssinject__){window.__iconfont__svg__cssinject__=true;try{document.write("<style>.svgfont {display: inline-block;width: 1em;height: 1em;fill: currentColor;vertical-align: -0.1em;font-size:16px;}<\/style>")}catch(e){console&&console.log(e)}}ready(appendSvg)})(window)/;"	f
prepend	public\static\live\assert\iconfont\iconfont.js	/^(function(window){var svgSprite='<svg><symbol id="icon-shijian" viewBox="0 0 1024 1024"><path d="M512 64c-256 0-460.8 208-460.8 460.8s208 460.8 460.8 460.8 460.8-208 460.8-460.8S768 64 512 64zM512 940.8c-227.2 0-412.8-185.6-412.8-412.8s185.6-412.8 412.8-412.8 412.8 185.6 412.8 412.8S742.4 940.8 512 940.8z"  ><\/path><path d="M809.6 544l-278.4 0 0-281.6c0-12.8-9.6-22.4-22.4-22.4-12.8 0-22.4 9.6-22.4 22.4l0 307.2c0 12.8 9.6 22.4 22.4 22.4 0 0 3.2 0 3.2 0l297.6 0c12.8 0 22.4-9.6 22.4-22.4C832 553.6 822.4 544 809.6 544z"  ><\/path><\/symbol><symbol id="icon-browse" viewBox="0 0 1024 1024"><path d="M812.896 528.896C812.16 530.944 730.816 736 504.16 736c-225.44 0-305.248-198.24-309.696-209.376-3.2-6.4-2.944-21.28 1.376-29.92C196.736 494.656 287.776 288 504.16 288c215.296 0 304.384 199.776 309.248 210.752 3.296 6.176 3.552 21.344-0.512 30.144m58.112-57.888C866.72 460.928 762.24 224 504.16 224 246.08 224 141.344 461.44 137.92 469.568c-12.704 24.896-13.056 60.896-1.984 82.752 0.96 2.496 98.048 247.68 368.224 247.68 270.144 0 367.552-245.696 367.552-246.016 11.712-24.832 10.912-61.6-0.704-82.976"  ><\/path><path d="M568.16 551.968a64.064 64.064 0 0 1-64 64.032c-35.296 0-64-28.704-64-64.032v-71.904c0-35.328 28.704-64.064 64-64.064s64 28.736 64 64.064v71.904z m-64-199.968c-70.592 0-128 57.44-128 128.064v71.904a128.16 128.16 0 0 0 128 128.032c70.592 0 128-57.44 128-128.032v-71.904a128.16 128.16 0 0 0-128-128.064z"  ><\/path><\/symbol><symbol id="icon-xihuan" viewBox="0 0 1024 1024"><path d="M669.781333 130.752c71.637333-11.093333 138.901333 11.477333 193.344 64.533333 55.317333 53.930667 81.834667 124.992 74.282667 199.530667-7.466667 73.642667-46.549333 146.368-112.32 210.474667-18.346667 17.898667-67.669333 66.218667-138.453333 135.637333-31.829333 31.232-65.706667 64.448-99.84 97.984L553.6 871.466667l-13.184 12.949333a40.554667 40.554667 0 0 1-56.832 0l-114.602667-112.64-24.213333-23.722667a677626.346667 677626.346667 0 0 0-145.856-142.762666C133.141333 541.184 94.08 468.48 86.613333 394.816c-7.552-74.538667 18.944-145.6 74.282667-199.530667 54.442667-53.056 121.706667-75.605333 193.344-64.533333 53.162667 8.213333 107.093333 34.688 157.781333 76.949333 50.709333-42.24 104.618667-68.736 157.781334-76.949333z" fill="#3D3D3D" ><\/path><\/symbol><symbol id="icon-xihuan1" viewBox="0 0 1024 1024"><path d="M523.733333 841.024l33.173334-32.576 99.690666-97.813333c70.976-69.632 120.32-117.973333 138.709334-135.893334 59.008-57.514667 93.248-121.28 99.626666-184.234666 6.250667-61.44-15.488-119.744-61.589333-164.672-44.992-43.84-98.88-61.909333-157.034667-52.906667-49.365333 7.616-101.034667 34.624-150.016 78.848a21.333333 21.333333 0 0 1-28.586666 0c-48.981333-44.224-100.650667-71.232-150.016-78.869333-58.154667-8.96-112.042667 9.088-157.034667 52.928-46.101333 44.928-67.84 103.210667-61.610667 164.693333 6.4 62.933333 40.64 126.72 99.648 184.213333a100207.573333 100207.573333 0 0 1 145.92 142.826667l24.256 23.765333L512 852.522667l11.733333-11.498667z m-11.733333 11.52l-1.493333 1.429333A2.133333 2.133333 0 0 1 512 853.333333c0.512 0 1.045333 0.213333 1.493333 0.64l-1.493333-1.450666z m157.781333-721.792c71.637333-11.093333 138.901333 11.477333 193.344 64.533333 55.317333 53.930667 81.834667 124.992 74.282667 199.530667-7.466667 73.642667-46.549333 146.368-112.32 210.474667-18.346667 17.898667-67.669333 66.218667-138.453333 135.637333-31.829333 31.232-65.706667 64.448-99.84 97.984L553.6 871.466667l-13.184 12.949333a40.554667 40.554667 0 0 1-56.832 0l-114.602667-112.64-24.213333-23.722667a677626.346667 677626.346667 0 0 0-145.856-142.762666C133.141333 541.184 94.08 468.48 86.613333 394.816c-7.552-74.538667 18.944-145.6 74.282667-199.530667 54.442667-53.056 121.706667-75.605333 193.344-64.533333 53.162667 8.213333 107.093333 34.688 157.781333 76.949333 50.709333-42.24 104.618667-68.736 157.781334-76.949333z" fill="#3D3D3D" ><\/path><\/symbol><symbol id="icon-zan" viewBox="0 0 1024 1024"><path d="M710.549333 384.810667a12409.045333 12409.045333 0 0 0 47.466667-0.32l8.746667-0.085334c83.989333-0.618667 141.44 67.584 126.72 150.229334L847.296 794.026667c-10.026667 56.448-63.914667 101.546667-121.130667 101.589333L298.624 896a42.730667 42.730667 0 0 1-42.666667-42.410667l-0.810666-383.978666a42.666667 42.666667 0 0 1 42.026666-42.666667l3.157334-0.064c5.226667-0.042667 11.797333-0.042667 19.626666 0 91.946667 0.768 170.88-86.698667 170.709334-170.944-0.149333-86.741333 39.786667-126.762667 106.453333-127.573333 62.250667-0.746667 106.602667 59.605333 107.349333 149.12 0.213333 26.602667-6.293333 73.237333-14.506666 107.434666 6.186667 0 13.077333-0.042667 20.586666-0.085333z m-497.706666 63.232L213.333333 874.624A21.312 21.312 0 0 1 191.786667 896H149.525333A21.333333 21.333333 0 0 1 128 874.624l0.042667-426.581333A21.269333 21.269333 0 0 1 149.44 426.666667h41.984c11.669333 0 21.418667 9.578667 21.418667 21.376z" fill="#3D3D3D" ><\/path><\/symbol><symbol id="icon-zan1" viewBox="0 0 1024 1024"><path d="M757.76 852.906667c36.906667-0.021333 72.832-30.208 79.296-66.56l51.093333-287.04c10.069333-56.469333-27.093333-100.522667-84.373333-100.096l-10.261333 0.085333a19972.266667 19972.266667 0 0 1-52.842667 0.362667 3552.853333 3552.853333 0 0 1-56.746667 0l-30.997333-0.426667 11.498667-28.8c10.24-25.642667 21.76-95.744 21.504-128.021333-0.618667-73.045333-31.36-114.858667-69.290667-114.410667-46.613333 0.554667-69.461333 23.466667-69.333333 91.136 0.213333 112.661333-102.144 226.112-225.130667 225.109333a1214.08 1214.08 0 0 0-20.629333 0l-3.52 0.042667c-0.192 0 0.64 409.109333 0.64 409.109333 0-0.085333 459.093333-0.490667 459.093333-0.490666z m-17.301333-495.914667a15332.288 15332.288 0 0 0 52.693333-0.362667l10.282667-0.085333c84.010667-0.618667 141.44 67.52 126.72 150.250667L879.061333 793.813333c-10.090667 56.661333-63.68 101.696-121.258666 101.76l-458.922667 0.384A42.666667 42.666667 0 0 1 256 853.546667l-0.853333-409.173334a42.624 42.624 0 0 1 42.346666-42.730666l3.669334-0.042667c5.909333-0.064 13.12-0.064 21.333333 0 98.176 0.789333 182.293333-92.437333 182.144-182.378667C504.469333 128.021333 546.24 86.186667 616.106667 85.333333c65.173333-0.768 111.68 62.506667 112.448 156.714667 0.256 28.48-6.848 78.826667-15.701334 115.050667 8.021333 0 17.28-0.042667 27.584-0.106667zM170.666667 448v405.333333h23.466666a21.333333 21.333333 0 0 1 0 42.666667H154.837333A26.709333 26.709333 0 0 1 128 869.333333v-437.333333c0-14.784 12.074667-26.666667 26.773333-26.666667h38.912a21.333333 21.333333 0 0 1 0 42.666667H170.666667z" fill="#3D3D3D" ><\/path><\/symbol><symbol id="icon-paihang" viewBox="0 0 1024 1024"><path d="M405.333333 761.6c-8.533333 0-17.066667-2.133333-23.466666-8.533333-12.8-8.533333-19.2-23.466667-17.066667-38.4l19.2-106.666667-76.8-74.666667c-10.666667-10.666667-14.933333-27.733333-10.666667-40.533333 4.266667-14.933333 17.066667-25.6 32-27.733333l106.666667-14.933334 46.933333-96c6.4-14.933333 21.333333-23.466667 36.266667-23.466666s29.866667 8.533333 36.266667 23.466666l46.933333 96 106.666667 14.933334c14.933333 2.133333 27.733333 12.8 32 27.733333 4.266667 14.933333 0 29.866667-10.666667 40.533333l-76.8 74.666667 19.2 106.666667c2.133333 14.933333-4.266667 29.866667-17.066667 38.4-12.8 8.533333-29.866667 10.666667-42.666666 2.133333L516.266667 704l-96 51.2c-2.133333 4.266667-8.533333 6.4-14.933334 6.4z m-66.133333-256l89.6 87.466667-21.333333 123.733333 110.933333-57.6 110.933333 57.6-21.333333-123.733333 89.6-87.466667-121.6-19.2-55.466667-113.066667-55.466666 113.066667-125.866667 19.2z" fill="#3D3D3D" ><\/path><path d="M236.8 940.8c-12.8 0-25.6-4.266667-34.133333-10.666667-14.933333-10.666667-21.333333-27.733333-21.333334-46.933333V170.666667c0-38.4 32-70.4 70.4-70.4h541.866667c38.4 0 70.4 32 70.4 70.4v710.4c0 19.2-8.533333 36.266667-21.333333 46.933333-14.933333 10.666667-34.133333 14.933333-51.2 8.533333L561.066667 874.666667c-21.333333-6.4-61.866667-6.4-83.2 0l-224 61.866666c-6.4 2.133333-12.8 4.266667-17.066667 4.266667z m12.8-797.866667c-14.933333 0-27.733333 12.8-27.733333 27.733334v710.4c0 6.4 2.133333 10.666667 6.4 14.933333 4.266667 2.133333 8.533333 4.266667 14.933333 2.133333l224-61.866666c29.866667-8.533333 76.8-8.533333 106.666667 0L797.866667 896c6.4 2.133333 10.666667 2.133333 14.933333-2.133333 4.266667-2.133333 6.4-8.533333 6.4-14.933334V170.666667c0-14.933333-12.8-27.733333-27.733333-27.733334H249.6z" fill="#3D3D3D" ><\/path><path d="M840.533333 270.933333h-640c-12.8 0-21.333333-8.533333-21.333333-21.333333s8.533333-21.333333 21.333333-21.333333h640c12.8 0 21.333333 8.533333 21.333334 21.333333s-10.666667 21.333333-21.333334 21.333333z" fill="#3D3D3D" ><\/path><\/symbol><symbol id="icon-fanhui" viewBox="0 0 1024 1024"><path d="M710.153924 8.980397L266.007127 460.692524a81.118646 81.118646 0 0 0 0.861532 114.476097l446.192936 441.050666a26.922883 26.922883 0 0 0 37.853573-38.284339L304.722232 536.884282a27.27288 27.27288 0 0 1-0.323074-38.445877L748.545955 46.726278A26.922883 26.922883 0 1 0 710.180847 9.00732z"  ><\/path><\/symbol><symbol id="icon-wode" viewBox="0 0 1024 1024"><path d="M512 563.2c-127.9744 0-230.4-115.2512-230.4-256s102.4256-256 230.4-256 230.4 115.2512 230.4 256-102.4256 256-230.4 256z m0-51.2c98.2528 0 179.2-91.0592 179.2-204.8s-80.9472-204.8-179.2-204.8-179.2 91.0592-179.2 204.8 80.9472 204.8 179.2 204.8zM128 793.6a179.2 179.2 0 0 1 179.3792-179.2h409.2416C815.6416 614.4 896 694.7328 896 793.6a179.2 179.2 0 0 1-179.3792 179.2H307.3792C208.3584 972.8 128 892.4672 128 793.6z m51.2 0c0 70.5792 57.4464 128 128.1792 128h409.2416A128 128 0 0 0 844.8 793.6c0-70.5792-57.4464-128-128.1792-128H307.3792A128 128 0 0 0 179.2 793.6z"  ><\/path><\/symbol><symbol id="icon-huanyihuan" viewBox="0 0 1024 1024"><path d="M838.695385 374.153846A354.619077 354.619077 0 0 0 512 157.538462a354.461538 354.461538 0 1 0 0 708.923076 354.579692 354.579692 0 0 0 330.161231-225.20123 39.384615 39.384615 0 1 1 73.334154 28.750769A433.309538 433.309538 0 0 1 512 945.230769C272.738462 945.230769 78.769231 751.261538 78.769231 512S272.738462 78.769231 512 78.769231c144.423385 0 275.140923 71.286154 354.461538 183.965538V177.230769a39.384615 39.384615 0 0 1 78.769231 0v236.307693a39.266462 39.266462 0 0 1-39.384615 39.384615h-196.923077a39.384615 39.384615 0 0 1 0-78.769231h129.772308z"  ><\/path><\/symbol><symbol id="icon-remen" viewBox="0 0 1024 1024"><path d="M493.789998 1023.53089C254.799718 1023.53089 85.536259 856.015932 85.536259 625.384341c0-122.523033 72.584129-254.513561 75.782607-259.92965a32.11272 32.11272 0 0 1 31.728902-16.162976c12.879205 1.705855 23.156981 11.088057 26.69663 23.540799 0.255878 0.682342 19.87321 74.887033 45.631621 115.955491 17.271782 27.720143 34.970027 47.16689 54.80059 60.81373-13.433608-58.724057-23.626091-147.129991-6.951359-237.668243C358.771578 63.305131 552.514055 3.642853 560.787452 1.21201a31.814195 31.814195 0 0 1 39.831713 36.93176c-0.213232 1.705855-32.325952 175.95894 35.481784 324.410968 6.183724 13.518901 14.712999 29.084827 23.967262 44.906632a422.199104 422.199104 0 0 1 13.135083-66.698929c24.990775-88.022116 89.344154-118.130456 92.116168-119.281909a31.64361 31.64361 0 0 1 32.496537 4.008759c9.382202 7.249884 13.732132 19.276161 11.64246 31.046561-0.341171 2.217611-9.382202 62.178413 41.196398 147.12999 45.674267 76.678181 58.681411 126.403853 58.68141 221.931731C909.123036 856.143872 734.614073 1023.53089 493.789998 1023.53089zM187.247861 475.269104a407.699336 407.699336 0 0 0-28.10396 147.129991c0 187.814632 138.43013 324.069797 334.774036 324.069797 197.879176 0 341.469517-136.255165 341.469518-324.112443 0-81.198696-9.936605-118.684859-48.275696-183.294116-25.587824-43.072838-38.381737-81.795746-44.181643-112.714367a144.272684 144.272684 0 0 0-15.864451 36.803821c-18.721758 66.10188-13.902718 143.718281-13.902718 144.571208a31.259792 31.259792 0 0 1-20.47026 31.259792 30.278926 30.278926 0 0 1-35.225905-11.301289c-2.430843-3.241124-56.975556-81.454575-81.028111-134.336078-49.896258-109.217364-49.213916-227.475759-44.181643-295.539373-50.5786 29.767169-128.408232 96.423452-153.526947 231.868336-24.308433 131.990528 22.943749 269.951548 23.412859 271.23094a31.430378 31.430378 0 0 1-5.586675 31.728902 30.278926 30.278926 0 0 1-30.278925 9.723373c-3.752881-0.93822-96.551391-23.668738-152.460788-112.970245a376.951301 376.951301 0 0 1-26.568691-54.118249z" fill="#3D3D3D" ><\/path><\/symbol><\/svg>';var script=function(){var scripts=document.getElementsByTagName("script");return scripts[scripts.length-1]}();var shouldInjectCss=script.getAttribute("data-injectcss");var ready=function(fn){if(document.addEventListener){if(~["complete","loaded","interactive"].indexOf(document.readyState)){setTimeout(fn,0)}else{var loadFn=function(){document.removeEventListener("DOMContentLoaded",loadFn,false);fn()};document.addEventListener("DOMContentLoaded",loadFn,false)}}else if(document.attachEvent){IEContentLoaded(window,fn)}function IEContentLoaded(w,fn){var d=w.document,done=false,init=function(){if(!done){done=true;fn()}};var polling=function(){try{d.documentElement.doScroll("left")}catch(e){setTimeout(polling,50);return}init()};polling();d.onreadystatechange=function(){if(d.readyState=="complete"){d.onreadystatechange=null;init()}}}};var before=function(el,target){target.parentNode.insertBefore(el,target)};var prepend=function(el,target){if(target.firstChild){before(el,target.firstChild)}else{target.appendChild(el)}};function appendSvg(){var div,svg;div=document.createElement("div");div.innerHTML=svgSprite;svgSprite=null;svg=div.getElementsByTagName("svg")[0];if(svg){svg.setAttribute("aria-hidden","true");svg.style.position="absolute";svg.style.width=0;svg.style.height=0;svg.style.overflow="hidden";prepend(svg,document.body)}}if(shouldInjectCss&&!window.__iconfont__svg__cssinject__){window.__iconfont__svg__cssinject__=true;try{document.write("<style>.svgfont {display: inline-block;width: 1em;height: 1em;fill: currentColor;vertical-align: -0.1em;font-size:16px;}<\/style>")}catch(e){console&&console.log(e)}}ready(appendSvg)})(window)/;"	f
ready	public\static\live\assert\iconfont\iconfont.js	/^(function(window){var svgSprite='<svg><symbol id="icon-shijian" viewBox="0 0 1024 1024"><path d="M512 64c-256 0-460.8 208-460.8 460.8s208 460.8 460.8 460.8 460.8-208 460.8-460.8S768 64 512 64zM512 940.8c-227.2 0-412.8-185.6-412.8-412.8s185.6-412.8 412.8-412.8 412.8 185.6 412.8 412.8S742.4 940.8 512 940.8z"  ><\/path><path d="M809.6 544l-278.4 0 0-281.6c0-12.8-9.6-22.4-22.4-22.4-12.8 0-22.4 9.6-22.4 22.4l0 307.2c0 12.8 9.6 22.4 22.4 22.4 0 0 3.2 0 3.2 0l297.6 0c12.8 0 22.4-9.6 22.4-22.4C832 553.6 822.4 544 809.6 544z"  ><\/path><\/symbol><symbol id="icon-browse" viewBox="0 0 1024 1024"><path d="M812.896 528.896C812.16 530.944 730.816 736 504.16 736c-225.44 0-305.248-198.24-309.696-209.376-3.2-6.4-2.944-21.28 1.376-29.92C196.736 494.656 287.776 288 504.16 288c215.296 0 304.384 199.776 309.248 210.752 3.296 6.176 3.552 21.344-0.512 30.144m58.112-57.888C866.72 460.928 762.24 224 504.16 224 246.08 224 141.344 461.44 137.92 469.568c-12.704 24.896-13.056 60.896-1.984 82.752 0.96 2.496 98.048 247.68 368.224 247.68 270.144 0 367.552-245.696 367.552-246.016 11.712-24.832 10.912-61.6-0.704-82.976"  ><\/path><path d="M568.16 551.968a64.064 64.064 0 0 1-64 64.032c-35.296 0-64-28.704-64-64.032v-71.904c0-35.328 28.704-64.064 64-64.064s64 28.736 64 64.064v71.904z m-64-199.968c-70.592 0-128 57.44-128 128.064v71.904a128.16 128.16 0 0 0 128 128.032c70.592 0 128-57.44 128-128.032v-71.904a128.16 128.16 0 0 0-128-128.064z"  ><\/path><\/symbol><symbol id="icon-xihuan" viewBox="0 0 1024 1024"><path d="M669.781333 130.752c71.637333-11.093333 138.901333 11.477333 193.344 64.533333 55.317333 53.930667 81.834667 124.992 74.282667 199.530667-7.466667 73.642667-46.549333 146.368-112.32 210.474667-18.346667 17.898667-67.669333 66.218667-138.453333 135.637333-31.829333 31.232-65.706667 64.448-99.84 97.984L553.6 871.466667l-13.184 12.949333a40.554667 40.554667 0 0 1-56.832 0l-114.602667-112.64-24.213333-23.722667a677626.346667 677626.346667 0 0 0-145.856-142.762666C133.141333 541.184 94.08 468.48 86.613333 394.816c-7.552-74.538667 18.944-145.6 74.282667-199.530667 54.442667-53.056 121.706667-75.605333 193.344-64.533333 53.162667 8.213333 107.093333 34.688 157.781333 76.949333 50.709333-42.24 104.618667-68.736 157.781334-76.949333z" fill="#3D3D3D" ><\/path><\/symbol><symbol id="icon-xihuan1" viewBox="0 0 1024 1024"><path d="M523.733333 841.024l33.173334-32.576 99.690666-97.813333c70.976-69.632 120.32-117.973333 138.709334-135.893334 59.008-57.514667 93.248-121.28 99.626666-184.234666 6.250667-61.44-15.488-119.744-61.589333-164.672-44.992-43.84-98.88-61.909333-157.034667-52.906667-49.365333 7.616-101.034667 34.624-150.016 78.848a21.333333 21.333333 0 0 1-28.586666 0c-48.981333-44.224-100.650667-71.232-150.016-78.869333-58.154667-8.96-112.042667 9.088-157.034667 52.928-46.101333 44.928-67.84 103.210667-61.610667 164.693333 6.4 62.933333 40.64 126.72 99.648 184.213333a100207.573333 100207.573333 0 0 1 145.92 142.826667l24.256 23.765333L512 852.522667l11.733333-11.498667z m-11.733333 11.52l-1.493333 1.429333A2.133333 2.133333 0 0 1 512 853.333333c0.512 0 1.045333 0.213333 1.493333 0.64l-1.493333-1.450666z m157.781333-721.792c71.637333-11.093333 138.901333 11.477333 193.344 64.533333 55.317333 53.930667 81.834667 124.992 74.282667 199.530667-7.466667 73.642667-46.549333 146.368-112.32 210.474667-18.346667 17.898667-67.669333 66.218667-138.453333 135.637333-31.829333 31.232-65.706667 64.448-99.84 97.984L553.6 871.466667l-13.184 12.949333a40.554667 40.554667 0 0 1-56.832 0l-114.602667-112.64-24.213333-23.722667a677626.346667 677626.346667 0 0 0-145.856-142.762666C133.141333 541.184 94.08 468.48 86.613333 394.816c-7.552-74.538667 18.944-145.6 74.282667-199.530667 54.442667-53.056 121.706667-75.605333 193.344-64.533333 53.162667 8.213333 107.093333 34.688 157.781333 76.949333 50.709333-42.24 104.618667-68.736 157.781334-76.949333z" fill="#3D3D3D" ><\/path><\/symbol><symbol id="icon-zan" viewBox="0 0 1024 1024"><path d="M710.549333 384.810667a12409.045333 12409.045333 0 0 0 47.466667-0.32l8.746667-0.085334c83.989333-0.618667 141.44 67.584 126.72 150.229334L847.296 794.026667c-10.026667 56.448-63.914667 101.546667-121.130667 101.589333L298.624 896a42.730667 42.730667 0 0 1-42.666667-42.410667l-0.810666-383.978666a42.666667 42.666667 0 0 1 42.026666-42.666667l3.157334-0.064c5.226667-0.042667 11.797333-0.042667 19.626666 0 91.946667 0.768 170.88-86.698667 170.709334-170.944-0.149333-86.741333 39.786667-126.762667 106.453333-127.573333 62.250667-0.746667 106.602667 59.605333 107.349333 149.12 0.213333 26.602667-6.293333 73.237333-14.506666 107.434666 6.186667 0 13.077333-0.042667 20.586666-0.085333z m-497.706666 63.232L213.333333 874.624A21.312 21.312 0 0 1 191.786667 896H149.525333A21.333333 21.333333 0 0 1 128 874.624l0.042667-426.581333A21.269333 21.269333 0 0 1 149.44 426.666667h41.984c11.669333 0 21.418667 9.578667 21.418667 21.376z" fill="#3D3D3D" ><\/path><\/symbol><symbol id="icon-zan1" viewBox="0 0 1024 1024"><path d="M757.76 852.906667c36.906667-0.021333 72.832-30.208 79.296-66.56l51.093333-287.04c10.069333-56.469333-27.093333-100.522667-84.373333-100.096l-10.261333 0.085333a19972.266667 19972.266667 0 0 1-52.842667 0.362667 3552.853333 3552.853333 0 0 1-56.746667 0l-30.997333-0.426667 11.498667-28.8c10.24-25.642667 21.76-95.744 21.504-128.021333-0.618667-73.045333-31.36-114.858667-69.290667-114.410667-46.613333 0.554667-69.461333 23.466667-69.333333 91.136 0.213333 112.661333-102.144 226.112-225.130667 225.109333a1214.08 1214.08 0 0 0-20.629333 0l-3.52 0.042667c-0.192 0 0.64 409.109333 0.64 409.109333 0-0.085333 459.093333-0.490667 459.093333-0.490666z m-17.301333-495.914667a15332.288 15332.288 0 0 0 52.693333-0.362667l10.282667-0.085333c84.010667-0.618667 141.44 67.52 126.72 150.250667L879.061333 793.813333c-10.090667 56.661333-63.68 101.696-121.258666 101.76l-458.922667 0.384A42.666667 42.666667 0 0 1 256 853.546667l-0.853333-409.173334a42.624 42.624 0 0 1 42.346666-42.730666l3.669334-0.042667c5.909333-0.064 13.12-0.064 21.333333 0 98.176 0.789333 182.293333-92.437333 182.144-182.378667C504.469333 128.021333 546.24 86.186667 616.106667 85.333333c65.173333-0.768 111.68 62.506667 112.448 156.714667 0.256 28.48-6.848 78.826667-15.701334 115.050667 8.021333 0 17.28-0.042667 27.584-0.106667zM170.666667 448v405.333333h23.466666a21.333333 21.333333 0 0 1 0 42.666667H154.837333A26.709333 26.709333 0 0 1 128 869.333333v-437.333333c0-14.784 12.074667-26.666667 26.773333-26.666667h38.912a21.333333 21.333333 0 0 1 0 42.666667H170.666667z" fill="#3D3D3D" ><\/path><\/symbol><symbol id="icon-paihang" viewBox="0 0 1024 1024"><path d="M405.333333 761.6c-8.533333 0-17.066667-2.133333-23.466666-8.533333-12.8-8.533333-19.2-23.466667-17.066667-38.4l19.2-106.666667-76.8-74.666667c-10.666667-10.666667-14.933333-27.733333-10.666667-40.533333 4.266667-14.933333 17.066667-25.6 32-27.733333l106.666667-14.933334 46.933333-96c6.4-14.933333 21.333333-23.466667 36.266667-23.466666s29.866667 8.533333 36.266667 23.466666l46.933333 96 106.666667 14.933334c14.933333 2.133333 27.733333 12.8 32 27.733333 4.266667 14.933333 0 29.866667-10.666667 40.533333l-76.8 74.666667 19.2 106.666667c2.133333 14.933333-4.266667 29.866667-17.066667 38.4-12.8 8.533333-29.866667 10.666667-42.666666 2.133333L516.266667 704l-96 51.2c-2.133333 4.266667-8.533333 6.4-14.933334 6.4z m-66.133333-256l89.6 87.466667-21.333333 123.733333 110.933333-57.6 110.933333 57.6-21.333333-123.733333 89.6-87.466667-121.6-19.2-55.466667-113.066667-55.466666 113.066667-125.866667 19.2z" fill="#3D3D3D" ><\/path><path d="M236.8 940.8c-12.8 0-25.6-4.266667-34.133333-10.666667-14.933333-10.666667-21.333333-27.733333-21.333334-46.933333V170.666667c0-38.4 32-70.4 70.4-70.4h541.866667c38.4 0 70.4 32 70.4 70.4v710.4c0 19.2-8.533333 36.266667-21.333333 46.933333-14.933333 10.666667-34.133333 14.933333-51.2 8.533333L561.066667 874.666667c-21.333333-6.4-61.866667-6.4-83.2 0l-224 61.866666c-6.4 2.133333-12.8 4.266667-17.066667 4.266667z m12.8-797.866667c-14.933333 0-27.733333 12.8-27.733333 27.733334v710.4c0 6.4 2.133333 10.666667 6.4 14.933333 4.266667 2.133333 8.533333 4.266667 14.933333 2.133333l224-61.866666c29.866667-8.533333 76.8-8.533333 106.666667 0L797.866667 896c6.4 2.133333 10.666667 2.133333 14.933333-2.133333 4.266667-2.133333 6.4-8.533333 6.4-14.933334V170.666667c0-14.933333-12.8-27.733333-27.733333-27.733334H249.6z" fill="#3D3D3D" ><\/path><path d="M840.533333 270.933333h-640c-12.8 0-21.333333-8.533333-21.333333-21.333333s8.533333-21.333333 21.333333-21.333333h640c12.8 0 21.333333 8.533333 21.333334 21.333333s-10.666667 21.333333-21.333334 21.333333z" fill="#3D3D3D" ><\/path><\/symbol><symbol id="icon-fanhui" viewBox="0 0 1024 1024"><path d="M710.153924 8.980397L266.007127 460.692524a81.118646 81.118646 0 0 0 0.861532 114.476097l446.192936 441.050666a26.922883 26.922883 0 0 0 37.853573-38.284339L304.722232 536.884282a27.27288 27.27288 0 0 1-0.323074-38.445877L748.545955 46.726278A26.922883 26.922883 0 1 0 710.180847 9.00732z"  ><\/path><\/symbol><symbol id="icon-wode" viewBox="0 0 1024 1024"><path d="M512 563.2c-127.9744 0-230.4-115.2512-230.4-256s102.4256-256 230.4-256 230.4 115.2512 230.4 256-102.4256 256-230.4 256z m0-51.2c98.2528 0 179.2-91.0592 179.2-204.8s-80.9472-204.8-179.2-204.8-179.2 91.0592-179.2 204.8 80.9472 204.8 179.2 204.8zM128 793.6a179.2 179.2 0 0 1 179.3792-179.2h409.2416C815.6416 614.4 896 694.7328 896 793.6a179.2 179.2 0 0 1-179.3792 179.2H307.3792C208.3584 972.8 128 892.4672 128 793.6z m51.2 0c0 70.5792 57.4464 128 128.1792 128h409.2416A128 128 0 0 0 844.8 793.6c0-70.5792-57.4464-128-128.1792-128H307.3792A128 128 0 0 0 179.2 793.6z"  ><\/path><\/symbol><symbol id="icon-huanyihuan" viewBox="0 0 1024 1024"><path d="M838.695385 374.153846A354.619077 354.619077 0 0 0 512 157.538462a354.461538 354.461538 0 1 0 0 708.923076 354.579692 354.579692 0 0 0 330.161231-225.20123 39.384615 39.384615 0 1 1 73.334154 28.750769A433.309538 433.309538 0 0 1 512 945.230769C272.738462 945.230769 78.769231 751.261538 78.769231 512S272.738462 78.769231 512 78.769231c144.423385 0 275.140923 71.286154 354.461538 183.965538V177.230769a39.384615 39.384615 0 0 1 78.769231 0v236.307693a39.266462 39.266462 0 0 1-39.384615 39.384615h-196.923077a39.384615 39.384615 0 0 1 0-78.769231h129.772308z"  ><\/path><\/symbol><symbol id="icon-remen" viewBox="0 0 1024 1024"><path d="M493.789998 1023.53089C254.799718 1023.53089 85.536259 856.015932 85.536259 625.384341c0-122.523033 72.584129-254.513561 75.782607-259.92965a32.11272 32.11272 0 0 1 31.728902-16.162976c12.879205 1.705855 23.156981 11.088057 26.69663 23.540799 0.255878 0.682342 19.87321 74.887033 45.631621 115.955491 17.271782 27.720143 34.970027 47.16689 54.80059 60.81373-13.433608-58.724057-23.626091-147.129991-6.951359-237.668243C358.771578 63.305131 552.514055 3.642853 560.787452 1.21201a31.814195 31.814195 0 0 1 39.831713 36.93176c-0.213232 1.705855-32.325952 175.95894 35.481784 324.410968 6.183724 13.518901 14.712999 29.084827 23.967262 44.906632a422.199104 422.199104 0 0 1 13.135083-66.698929c24.990775-88.022116 89.344154-118.130456 92.116168-119.281909a31.64361 31.64361 0 0 1 32.496537 4.008759c9.382202 7.249884 13.732132 19.276161 11.64246 31.046561-0.341171 2.217611-9.382202 62.178413 41.196398 147.12999 45.674267 76.678181 58.681411 126.403853 58.68141 221.931731C909.123036 856.143872 734.614073 1023.53089 493.789998 1023.53089zM187.247861 475.269104a407.699336 407.699336 0 0 0-28.10396 147.129991c0 187.814632 138.43013 324.069797 334.774036 324.069797 197.879176 0 341.469517-136.255165 341.469518-324.112443 0-81.198696-9.936605-118.684859-48.275696-183.294116-25.587824-43.072838-38.381737-81.795746-44.181643-112.714367a144.272684 144.272684 0 0 0-15.864451 36.803821c-18.721758 66.10188-13.902718 143.718281-13.902718 144.571208a31.259792 31.259792 0 0 1-20.47026 31.259792 30.278926 30.278926 0 0 1-35.225905-11.301289c-2.430843-3.241124-56.975556-81.454575-81.028111-134.336078-49.896258-109.217364-49.213916-227.475759-44.181643-295.539373-50.5786 29.767169-128.408232 96.423452-153.526947 231.868336-24.308433 131.990528 22.943749 269.951548 23.412859 271.23094a31.430378 31.430378 0 0 1-5.586675 31.728902 30.278926 30.278926 0 0 1-30.278925 9.723373c-3.752881-0.93822-96.551391-23.668738-152.460788-112.970245a376.951301 376.951301 0 0 1-26.568691-54.118249z" fill="#3D3D3D" ><\/path><\/symbol><\/svg>';var script=function(){var scripts=document.getElementsByTagName("script");return scripts[scripts.length-1]}();var shouldInjectCss=script.getAttribute("data-injectcss");var ready=function(fn){if(document.addEventListener){if(~["complete","loaded","interactive"].indexOf(document.readyState)){setTimeout(fn,0)}else{var loadFn=function(){document.removeEventListener("DOMContentLoaded",loadFn,false);fn()};document.addEventListener("DOMContentLoaded",loadFn,false)}}else if(document.attachEvent){IEContentLoaded(window,fn)}function IEContentLoaded(w,fn){var d=w.document,done=false,init=function(){if(!done){done=true;fn()}};var polling=function(){try{d.documentElement.doScroll("left")}catch(e){setTimeout(polling,50);return}init()};polling();d.onreadystatechange=function(){if(d.readyState=="complete"){d.onreadystatechange=null;init()}}}};var before=function(el,target){target.parentNode.insertBefore(el,target)};var prepend=function(el,target){if(target.firstChild){before(el,target.firstChild)}else{target.appendChild(el)}};function appendSvg(){var div,svg;div=document.createElement("div");div.innerHTML=svgSprite;svgSprite=null;svg=div.getElementsByTagName("svg")[0];if(svg){svg.setAttribute("aria-hidden","true");svg.style.position="absolute";svg.style.width=0;svg.style.height=0;svg.style.overflow="hidden";prepend(svg,document.body)}}if(shouldInjectCss&&!window.__iconfont__svg__cssinject__){window.__iconfont__svg__cssinject__=true;try{document.write("<style>.svgfont {display: inline-block;width: 1em;height: 1em;fill: currentColor;vertical-align: -0.1em;font-size:16px;}<\/style>")}catch(e){console&&console.log(e)}}ready(appendSvg)})(window)/;"	f
ready.IEContentLoaded	public\static\live\assert\iconfont\iconfont.js	/^(function(window){var svgSprite='<svg><symbol id="icon-shijian" viewBox="0 0 1024 1024"><path d="M512 64c-256 0-460.8 208-460.8 460.8s208 460.8 460.8 460.8 460.8-208 460.8-460.8S768 64 512 64zM512 940.8c-227.2 0-412.8-185.6-412.8-412.8s185.6-412.8 412.8-412.8 412.8 185.6 412.8 412.8S742.4 940.8 512 940.8z"  ><\/path><path d="M809.6 544l-278.4 0 0-281.6c0-12.8-9.6-22.4-22.4-22.4-12.8 0-22.4 9.6-22.4 22.4l0 307.2c0 12.8 9.6 22.4 22.4 22.4 0 0 3.2 0 3.2 0l297.6 0c12.8 0 22.4-9.6 22.4-22.4C832 553.6 822.4 544 809.6 544z"  ><\/path><\/symbol><symbol id="icon-browse" viewBox="0 0 1024 1024"><path d="M812.896 528.896C812.16 530.944 730.816 736 504.16 736c-225.44 0-305.248-198.24-309.696-209.376-3.2-6.4-2.944-21.28 1.376-29.92C196.736 494.656 287.776 288 504.16 288c215.296 0 304.384 199.776 309.248 210.752 3.296 6.176 3.552 21.344-0.512 30.144m58.112-57.888C866.72 460.928 762.24 224 504.16 224 246.08 224 141.344 461.44 137.92 469.568c-12.704 24.896-13.056 60.896-1.984 82.752 0.96 2.496 98.048 247.68 368.224 247.68 270.144 0 367.552-245.696 367.552-246.016 11.712-24.832 10.912-61.6-0.704-82.976"  ><\/path><path d="M568.16 551.968a64.064 64.064 0 0 1-64 64.032c-35.296 0-64-28.704-64-64.032v-71.904c0-35.328 28.704-64.064 64-64.064s64 28.736 64 64.064v71.904z m-64-199.968c-70.592 0-128 57.44-128 128.064v71.904a128.16 128.16 0 0 0 128 128.032c70.592 0 128-57.44 128-128.032v-71.904a128.16 128.16 0 0 0-128-128.064z"  ><\/path><\/symbol><symbol id="icon-xihuan" viewBox="0 0 1024 1024"><path d="M669.781333 130.752c71.637333-11.093333 138.901333 11.477333 193.344 64.533333 55.317333 53.930667 81.834667 124.992 74.282667 199.530667-7.466667 73.642667-46.549333 146.368-112.32 210.474667-18.346667 17.898667-67.669333 66.218667-138.453333 135.637333-31.829333 31.232-65.706667 64.448-99.84 97.984L553.6 871.466667l-13.184 12.949333a40.554667 40.554667 0 0 1-56.832 0l-114.602667-112.64-24.213333-23.722667a677626.346667 677626.346667 0 0 0-145.856-142.762666C133.141333 541.184 94.08 468.48 86.613333 394.816c-7.552-74.538667 18.944-145.6 74.282667-199.530667 54.442667-53.056 121.706667-75.605333 193.344-64.533333 53.162667 8.213333 107.093333 34.688 157.781333 76.949333 50.709333-42.24 104.618667-68.736 157.781334-76.949333z" fill="#3D3D3D" ><\/path><\/symbol><symbol id="icon-xihuan1" viewBox="0 0 1024 1024"><path d="M523.733333 841.024l33.173334-32.576 99.690666-97.813333c70.976-69.632 120.32-117.973333 138.709334-135.893334 59.008-57.514667 93.248-121.28 99.626666-184.234666 6.250667-61.44-15.488-119.744-61.589333-164.672-44.992-43.84-98.88-61.909333-157.034667-52.906667-49.365333 7.616-101.034667 34.624-150.016 78.848a21.333333 21.333333 0 0 1-28.586666 0c-48.981333-44.224-100.650667-71.232-150.016-78.869333-58.154667-8.96-112.042667 9.088-157.034667 52.928-46.101333 44.928-67.84 103.210667-61.610667 164.693333 6.4 62.933333 40.64 126.72 99.648 184.213333a100207.573333 100207.573333 0 0 1 145.92 142.826667l24.256 23.765333L512 852.522667l11.733333-11.498667z m-11.733333 11.52l-1.493333 1.429333A2.133333 2.133333 0 0 1 512 853.333333c0.512 0 1.045333 0.213333 1.493333 0.64l-1.493333-1.450666z m157.781333-721.792c71.637333-11.093333 138.901333 11.477333 193.344 64.533333 55.317333 53.930667 81.834667 124.992 74.282667 199.530667-7.466667 73.642667-46.549333 146.368-112.32 210.474667-18.346667 17.898667-67.669333 66.218667-138.453333 135.637333-31.829333 31.232-65.706667 64.448-99.84 97.984L553.6 871.466667l-13.184 12.949333a40.554667 40.554667 0 0 1-56.832 0l-114.602667-112.64-24.213333-23.722667a677626.346667 677626.346667 0 0 0-145.856-142.762666C133.141333 541.184 94.08 468.48 86.613333 394.816c-7.552-74.538667 18.944-145.6 74.282667-199.530667 54.442667-53.056 121.706667-75.605333 193.344-64.533333 53.162667 8.213333 107.093333 34.688 157.781333 76.949333 50.709333-42.24 104.618667-68.736 157.781334-76.949333z" fill="#3D3D3D" ><\/path><\/symbol><symbol id="icon-zan" viewBox="0 0 1024 1024"><path d="M710.549333 384.810667a12409.045333 12409.045333 0 0 0 47.466667-0.32l8.746667-0.085334c83.989333-0.618667 141.44 67.584 126.72 150.229334L847.296 794.026667c-10.026667 56.448-63.914667 101.546667-121.130667 101.589333L298.624 896a42.730667 42.730667 0 0 1-42.666667-42.410667l-0.810666-383.978666a42.666667 42.666667 0 0 1 42.026666-42.666667l3.157334-0.064c5.226667-0.042667 11.797333-0.042667 19.626666 0 91.946667 0.768 170.88-86.698667 170.709334-170.944-0.149333-86.741333 39.786667-126.762667 106.453333-127.573333 62.250667-0.746667 106.602667 59.605333 107.349333 149.12 0.213333 26.602667-6.293333 73.237333-14.506666 107.434666 6.186667 0 13.077333-0.042667 20.586666-0.085333z m-497.706666 63.232L213.333333 874.624A21.312 21.312 0 0 1 191.786667 896H149.525333A21.333333 21.333333 0 0 1 128 874.624l0.042667-426.581333A21.269333 21.269333 0 0 1 149.44 426.666667h41.984c11.669333 0 21.418667 9.578667 21.418667 21.376z" fill="#3D3D3D" ><\/path><\/symbol><symbol id="icon-zan1" viewBox="0 0 1024 1024"><path d="M757.76 852.906667c36.906667-0.021333 72.832-30.208 79.296-66.56l51.093333-287.04c10.069333-56.469333-27.093333-100.522667-84.373333-100.096l-10.261333 0.085333a19972.266667 19972.266667 0 0 1-52.842667 0.362667 3552.853333 3552.853333 0 0 1-56.746667 0l-30.997333-0.426667 11.498667-28.8c10.24-25.642667 21.76-95.744 21.504-128.021333-0.618667-73.045333-31.36-114.858667-69.290667-114.410667-46.613333 0.554667-69.461333 23.466667-69.333333 91.136 0.213333 112.661333-102.144 226.112-225.130667 225.109333a1214.08 1214.08 0 0 0-20.629333 0l-3.52 0.042667c-0.192 0 0.64 409.109333 0.64 409.109333 0-0.085333 459.093333-0.490667 459.093333-0.490666z m-17.301333-495.914667a15332.288 15332.288 0 0 0 52.693333-0.362667l10.282667-0.085333c84.010667-0.618667 141.44 67.52 126.72 150.250667L879.061333 793.813333c-10.090667 56.661333-63.68 101.696-121.258666 101.76l-458.922667 0.384A42.666667 42.666667 0 0 1 256 853.546667l-0.853333-409.173334a42.624 42.624 0 0 1 42.346666-42.730666l3.669334-0.042667c5.909333-0.064 13.12-0.064 21.333333 0 98.176 0.789333 182.293333-92.437333 182.144-182.378667C504.469333 128.021333 546.24 86.186667 616.106667 85.333333c65.173333-0.768 111.68 62.506667 112.448 156.714667 0.256 28.48-6.848 78.826667-15.701334 115.050667 8.021333 0 17.28-0.042667 27.584-0.106667zM170.666667 448v405.333333h23.466666a21.333333 21.333333 0 0 1 0 42.666667H154.837333A26.709333 26.709333 0 0 1 128 869.333333v-437.333333c0-14.784 12.074667-26.666667 26.773333-26.666667h38.912a21.333333 21.333333 0 0 1 0 42.666667H170.666667z" fill="#3D3D3D" ><\/path><\/symbol><symbol id="icon-paihang" viewBox="0 0 1024 1024"><path d="M405.333333 761.6c-8.533333 0-17.066667-2.133333-23.466666-8.533333-12.8-8.533333-19.2-23.466667-17.066667-38.4l19.2-106.666667-76.8-74.666667c-10.666667-10.666667-14.933333-27.733333-10.666667-40.533333 4.266667-14.933333 17.066667-25.6 32-27.733333l106.666667-14.933334 46.933333-96c6.4-14.933333 21.333333-23.466667 36.266667-23.466666s29.866667 8.533333 36.266667 23.466666l46.933333 96 106.666667 14.933334c14.933333 2.133333 27.733333 12.8 32 27.733333 4.266667 14.933333 0 29.866667-10.666667 40.533333l-76.8 74.666667 19.2 106.666667c2.133333 14.933333-4.266667 29.866667-17.066667 38.4-12.8 8.533333-29.866667 10.666667-42.666666 2.133333L516.266667 704l-96 51.2c-2.133333 4.266667-8.533333 6.4-14.933334 6.4z m-66.133333-256l89.6 87.466667-21.333333 123.733333 110.933333-57.6 110.933333 57.6-21.333333-123.733333 89.6-87.466667-121.6-19.2-55.466667-113.066667-55.466666 113.066667-125.866667 19.2z" fill="#3D3D3D" ><\/path><path d="M236.8 940.8c-12.8 0-25.6-4.266667-34.133333-10.666667-14.933333-10.666667-21.333333-27.733333-21.333334-46.933333V170.666667c0-38.4 32-70.4 70.4-70.4h541.866667c38.4 0 70.4 32 70.4 70.4v710.4c0 19.2-8.533333 36.266667-21.333333 46.933333-14.933333 10.666667-34.133333 14.933333-51.2 8.533333L561.066667 874.666667c-21.333333-6.4-61.866667-6.4-83.2 0l-224 61.866666c-6.4 2.133333-12.8 4.266667-17.066667 4.266667z m12.8-797.866667c-14.933333 0-27.733333 12.8-27.733333 27.733334v710.4c0 6.4 2.133333 10.666667 6.4 14.933333 4.266667 2.133333 8.533333 4.266667 14.933333 2.133333l224-61.866666c29.866667-8.533333 76.8-8.533333 106.666667 0L797.866667 896c6.4 2.133333 10.666667 2.133333 14.933333-2.133333 4.266667-2.133333 6.4-8.533333 6.4-14.933334V170.666667c0-14.933333-12.8-27.733333-27.733333-27.733334H249.6z" fill="#3D3D3D" ><\/path><path d="M840.533333 270.933333h-640c-12.8 0-21.333333-8.533333-21.333333-21.333333s8.533333-21.333333 21.333333-21.333333h640c12.8 0 21.333333 8.533333 21.333334 21.333333s-10.666667 21.333333-21.333334 21.333333z" fill="#3D3D3D" ><\/path><\/symbol><symbol id="icon-fanhui" viewBox="0 0 1024 1024"><path d="M710.153924 8.980397L266.007127 460.692524a81.118646 81.118646 0 0 0 0.861532 114.476097l446.192936 441.050666a26.922883 26.922883 0 0 0 37.853573-38.284339L304.722232 536.884282a27.27288 27.27288 0 0 1-0.323074-38.445877L748.545955 46.726278A26.922883 26.922883 0 1 0 710.180847 9.00732z"  ><\/path><\/symbol><symbol id="icon-wode" viewBox="0 0 1024 1024"><path d="M512 563.2c-127.9744 0-230.4-115.2512-230.4-256s102.4256-256 230.4-256 230.4 115.2512 230.4 256-102.4256 256-230.4 256z m0-51.2c98.2528 0 179.2-91.0592 179.2-204.8s-80.9472-204.8-179.2-204.8-179.2 91.0592-179.2 204.8 80.9472 204.8 179.2 204.8zM128 793.6a179.2 179.2 0 0 1 179.3792-179.2h409.2416C815.6416 614.4 896 694.7328 896 793.6a179.2 179.2 0 0 1-179.3792 179.2H307.3792C208.3584 972.8 128 892.4672 128 793.6z m51.2 0c0 70.5792 57.4464 128 128.1792 128h409.2416A128 128 0 0 0 844.8 793.6c0-70.5792-57.4464-128-128.1792-128H307.3792A128 128 0 0 0 179.2 793.6z"  ><\/path><\/symbol><symbol id="icon-huanyihuan" viewBox="0 0 1024 1024"><path d="M838.695385 374.153846A354.619077 354.619077 0 0 0 512 157.538462a354.461538 354.461538 0 1 0 0 708.923076 354.579692 354.579692 0 0 0 330.161231-225.20123 39.384615 39.384615 0 1 1 73.334154 28.750769A433.309538 433.309538 0 0 1 512 945.230769C272.738462 945.230769 78.769231 751.261538 78.769231 512S272.738462 78.769231 512 78.769231c144.423385 0 275.140923 71.286154 354.461538 183.965538V177.230769a39.384615 39.384615 0 0 1 78.769231 0v236.307693a39.266462 39.266462 0 0 1-39.384615 39.384615h-196.923077a39.384615 39.384615 0 0 1 0-78.769231h129.772308z"  ><\/path><\/symbol><symbol id="icon-remen" viewBox="0 0 1024 1024"><path d="M493.789998 1023.53089C254.799718 1023.53089 85.536259 856.015932 85.536259 625.384341c0-122.523033 72.584129-254.513561 75.782607-259.92965a32.11272 32.11272 0 0 1 31.728902-16.162976c12.879205 1.705855 23.156981 11.088057 26.69663 23.540799 0.255878 0.682342 19.87321 74.887033 45.631621 115.955491 17.271782 27.720143 34.970027 47.16689 54.80059 60.81373-13.433608-58.724057-23.626091-147.129991-6.951359-237.668243C358.771578 63.305131 552.514055 3.642853 560.787452 1.21201a31.814195 31.814195 0 0 1 39.831713 36.93176c-0.213232 1.705855-32.325952 175.95894 35.481784 324.410968 6.183724 13.518901 14.712999 29.084827 23.967262 44.906632a422.199104 422.199104 0 0 1 13.135083-66.698929c24.990775-88.022116 89.344154-118.130456 92.116168-119.281909a31.64361 31.64361 0 0 1 32.496537 4.008759c9.382202 7.249884 13.732132 19.276161 11.64246 31.046561-0.341171 2.217611-9.382202 62.178413 41.196398 147.12999 45.674267 76.678181 58.681411 126.403853 58.68141 221.931731C909.123036 856.143872 734.614073 1023.53089 493.789998 1023.53089zM187.247861 475.269104a407.699336 407.699336 0 0 0-28.10396 147.129991c0 187.814632 138.43013 324.069797 334.774036 324.069797 197.879176 0 341.469517-136.255165 341.469518-324.112443 0-81.198696-9.936605-118.684859-48.275696-183.294116-25.587824-43.072838-38.381737-81.795746-44.181643-112.714367a144.272684 144.272684 0 0 0-15.864451 36.803821c-18.721758 66.10188-13.902718 143.718281-13.902718 144.571208a31.259792 31.259792 0 0 1-20.47026 31.259792 30.278926 30.278926 0 0 1-35.225905-11.301289c-2.430843-3.241124-56.975556-81.454575-81.028111-134.336078-49.896258-109.217364-49.213916-227.475759-44.181643-295.539373-50.5786 29.767169-128.408232 96.423452-153.526947 231.868336-24.308433 131.990528 22.943749 269.951548 23.412859 271.23094a31.430378 31.430378 0 0 1-5.586675 31.728902 30.278926 30.278926 0 0 1-30.278925 9.723373c-3.752881-0.93822-96.551391-23.668738-152.460788-112.970245a376.951301 376.951301 0 0 1-26.568691-54.118249z" fill="#3D3D3D" ><\/path><\/symbol><\/svg>';var script=function(){var scripts=document.getElementsByTagName("script");return scripts[scripts.length-1]}();var shouldInjectCss=script.getAttribute("data-injectcss");var ready=function(fn){if(document.addEventListener){if(~["complete","loaded","interactive"].indexOf(document.readyState)){setTimeout(fn,0)}else{var loadFn=function(){document.removeEventListener("DOMContentLoaded",loadFn,false);fn()};document.addEventListener("DOMContentLoaded",loadFn,false)}}else if(document.attachEvent){IEContentLoaded(window,fn)}function IEContentLoaded(w,fn){var d=w.document,done=false,init=function(){if(!done){done=true;fn()}};var polling=function(){try{d.documentElement.doScroll("left")}catch(e){setTimeout(polling,50);return}init()};polling();d.onreadystatechange=function(){if(d.readyState=="complete"){d.onreadystatechange=null;init()}}}};var before=function(el,target){target.parentNode.insertBefore(el,target)};var prepend=function(el,target){if(target.firstChild){before(el,target.firstChild)}else{target.appendChild(el)}};function appendSvg(){var div,svg;div=document.createElement("div");div.innerHTML=svgSprite;svgSprite=null;svg=div.getElementsByTagName("svg")[0];if(svg){svg.setAttribute("aria-hidden","true");svg.style.position="absolute";svg.style.width=0;svg.style.height=0;svg.style.overflow="hidden";prepend(svg,document.body)}}if(shouldInjectCss&&!window.__iconfont__svg__cssinject__){window.__iconfont__svg__cssinject__=true;try{document.write("<style>.svgfont {display: inline-block;width: 1em;height: 1em;fill: currentColor;vertical-align: -0.1em;font-size:16px;}<\/style>")}catch(e){console&&console.log(e)}}ready(appendSvg)})(window)/;"	f
script	public\static\live\assert\iconfont\iconfont.js	/^(function(window){var svgSprite='<svg><symbol id="icon-shijian" viewBox="0 0 1024 1024"><path d="M512 64c-256 0-460.8 208-460.8 460.8s208 460.8 460.8 460.8 460.8-208 460.8-460.8S768 64 512 64zM512 940.8c-227.2 0-412.8-185.6-412.8-412.8s185.6-412.8 412.8-412.8 412.8 185.6 412.8 412.8S742.4 940.8 512 940.8z"  ><\/path><path d="M809.6 544l-278.4 0 0-281.6c0-12.8-9.6-22.4-22.4-22.4-12.8 0-22.4 9.6-22.4 22.4l0 307.2c0 12.8 9.6 22.4 22.4 22.4 0 0 3.2 0 3.2 0l297.6 0c12.8 0 22.4-9.6 22.4-22.4C832 553.6 822.4 544 809.6 544z"  ><\/path><\/symbol><symbol id="icon-browse" viewBox="0 0 1024 1024"><path d="M812.896 528.896C812.16 530.944 730.816 736 504.16 736c-225.44 0-305.248-198.24-309.696-209.376-3.2-6.4-2.944-21.28 1.376-29.92C196.736 494.656 287.776 288 504.16 288c215.296 0 304.384 199.776 309.248 210.752 3.296 6.176 3.552 21.344-0.512 30.144m58.112-57.888C866.72 460.928 762.24 224 504.16 224 246.08 224 141.344 461.44 137.92 469.568c-12.704 24.896-13.056 60.896-1.984 82.752 0.96 2.496 98.048 247.68 368.224 247.68 270.144 0 367.552-245.696 367.552-246.016 11.712-24.832 10.912-61.6-0.704-82.976"  ><\/path><path d="M568.16 551.968a64.064 64.064 0 0 1-64 64.032c-35.296 0-64-28.704-64-64.032v-71.904c0-35.328 28.704-64.064 64-64.064s64 28.736 64 64.064v71.904z m-64-199.968c-70.592 0-128 57.44-128 128.064v71.904a128.16 128.16 0 0 0 128 128.032c70.592 0 128-57.44 128-128.032v-71.904a128.16 128.16 0 0 0-128-128.064z"  ><\/path><\/symbol><symbol id="icon-xihuan" viewBox="0 0 1024 1024"><path d="M669.781333 130.752c71.637333-11.093333 138.901333 11.477333 193.344 64.533333 55.317333 53.930667 81.834667 124.992 74.282667 199.530667-7.466667 73.642667-46.549333 146.368-112.32 210.474667-18.346667 17.898667-67.669333 66.218667-138.453333 135.637333-31.829333 31.232-65.706667 64.448-99.84 97.984L553.6 871.466667l-13.184 12.949333a40.554667 40.554667 0 0 1-56.832 0l-114.602667-112.64-24.213333-23.722667a677626.346667 677626.346667 0 0 0-145.856-142.762666C133.141333 541.184 94.08 468.48 86.613333 394.816c-7.552-74.538667 18.944-145.6 74.282667-199.530667 54.442667-53.056 121.706667-75.605333 193.344-64.533333 53.162667 8.213333 107.093333 34.688 157.781333 76.949333 50.709333-42.24 104.618667-68.736 157.781334-76.949333z" fill="#3D3D3D" ><\/path><\/symbol><symbol id="icon-xihuan1" viewBox="0 0 1024 1024"><path d="M523.733333 841.024l33.173334-32.576 99.690666-97.813333c70.976-69.632 120.32-117.973333 138.709334-135.893334 59.008-57.514667 93.248-121.28 99.626666-184.234666 6.250667-61.44-15.488-119.744-61.589333-164.672-44.992-43.84-98.88-61.909333-157.034667-52.906667-49.365333 7.616-101.034667 34.624-150.016 78.848a21.333333 21.333333 0 0 1-28.586666 0c-48.981333-44.224-100.650667-71.232-150.016-78.869333-58.154667-8.96-112.042667 9.088-157.034667 52.928-46.101333 44.928-67.84 103.210667-61.610667 164.693333 6.4 62.933333 40.64 126.72 99.648 184.213333a100207.573333 100207.573333 0 0 1 145.92 142.826667l24.256 23.765333L512 852.522667l11.733333-11.498667z m-11.733333 11.52l-1.493333 1.429333A2.133333 2.133333 0 0 1 512 853.333333c0.512 0 1.045333 0.213333 1.493333 0.64l-1.493333-1.450666z m157.781333-721.792c71.637333-11.093333 138.901333 11.477333 193.344 64.533333 55.317333 53.930667 81.834667 124.992 74.282667 199.530667-7.466667 73.642667-46.549333 146.368-112.32 210.474667-18.346667 17.898667-67.669333 66.218667-138.453333 135.637333-31.829333 31.232-65.706667 64.448-99.84 97.984L553.6 871.466667l-13.184 12.949333a40.554667 40.554667 0 0 1-56.832 0l-114.602667-112.64-24.213333-23.722667a677626.346667 677626.346667 0 0 0-145.856-142.762666C133.141333 541.184 94.08 468.48 86.613333 394.816c-7.552-74.538667 18.944-145.6 74.282667-199.530667 54.442667-53.056 121.706667-75.605333 193.344-64.533333 53.162667 8.213333 107.093333 34.688 157.781333 76.949333 50.709333-42.24 104.618667-68.736 157.781334-76.949333z" fill="#3D3D3D" ><\/path><\/symbol><symbol id="icon-zan" viewBox="0 0 1024 1024"><path d="M710.549333 384.810667a12409.045333 12409.045333 0 0 0 47.466667-0.32l8.746667-0.085334c83.989333-0.618667 141.44 67.584 126.72 150.229334L847.296 794.026667c-10.026667 56.448-63.914667 101.546667-121.130667 101.589333L298.624 896a42.730667 42.730667 0 0 1-42.666667-42.410667l-0.810666-383.978666a42.666667 42.666667 0 0 1 42.026666-42.666667l3.157334-0.064c5.226667-0.042667 11.797333-0.042667 19.626666 0 91.946667 0.768 170.88-86.698667 170.709334-170.944-0.149333-86.741333 39.786667-126.762667 106.453333-127.573333 62.250667-0.746667 106.602667 59.605333 107.349333 149.12 0.213333 26.602667-6.293333 73.237333-14.506666 107.434666 6.186667 0 13.077333-0.042667 20.586666-0.085333z m-497.706666 63.232L213.333333 874.624A21.312 21.312 0 0 1 191.786667 896H149.525333A21.333333 21.333333 0 0 1 128 874.624l0.042667-426.581333A21.269333 21.269333 0 0 1 149.44 426.666667h41.984c11.669333 0 21.418667 9.578667 21.418667 21.376z" fill="#3D3D3D" ><\/path><\/symbol><symbol id="icon-zan1" viewBox="0 0 1024 1024"><path d="M757.76 852.906667c36.906667-0.021333 72.832-30.208 79.296-66.56l51.093333-287.04c10.069333-56.469333-27.093333-100.522667-84.373333-100.096l-10.261333 0.085333a19972.266667 19972.266667 0 0 1-52.842667 0.362667 3552.853333 3552.853333 0 0 1-56.746667 0l-30.997333-0.426667 11.498667-28.8c10.24-25.642667 21.76-95.744 21.504-128.021333-0.618667-73.045333-31.36-114.858667-69.290667-114.410667-46.613333 0.554667-69.461333 23.466667-69.333333 91.136 0.213333 112.661333-102.144 226.112-225.130667 225.109333a1214.08 1214.08 0 0 0-20.629333 0l-3.52 0.042667c-0.192 0 0.64 409.109333 0.64 409.109333 0-0.085333 459.093333-0.490667 459.093333-0.490666z m-17.301333-495.914667a15332.288 15332.288 0 0 0 52.693333-0.362667l10.282667-0.085333c84.010667-0.618667 141.44 67.52 126.72 150.250667L879.061333 793.813333c-10.090667 56.661333-63.68 101.696-121.258666 101.76l-458.922667 0.384A42.666667 42.666667 0 0 1 256 853.546667l-0.853333-409.173334a42.624 42.624 0 0 1 42.346666-42.730666l3.669334-0.042667c5.909333-0.064 13.12-0.064 21.333333 0 98.176 0.789333 182.293333-92.437333 182.144-182.378667C504.469333 128.021333 546.24 86.186667 616.106667 85.333333c65.173333-0.768 111.68 62.506667 112.448 156.714667 0.256 28.48-6.848 78.826667-15.701334 115.050667 8.021333 0 17.28-0.042667 27.584-0.106667zM170.666667 448v405.333333h23.466666a21.333333 21.333333 0 0 1 0 42.666667H154.837333A26.709333 26.709333 0 0 1 128 869.333333v-437.333333c0-14.784 12.074667-26.666667 26.773333-26.666667h38.912a21.333333 21.333333 0 0 1 0 42.666667H170.666667z" fill="#3D3D3D" ><\/path><\/symbol><symbol id="icon-paihang" viewBox="0 0 1024 1024"><path d="M405.333333 761.6c-8.533333 0-17.066667-2.133333-23.466666-8.533333-12.8-8.533333-19.2-23.466667-17.066667-38.4l19.2-106.666667-76.8-74.666667c-10.666667-10.666667-14.933333-27.733333-10.666667-40.533333 4.266667-14.933333 17.066667-25.6 32-27.733333l106.666667-14.933334 46.933333-96c6.4-14.933333 21.333333-23.466667 36.266667-23.466666s29.866667 8.533333 36.266667 23.466666l46.933333 96 106.666667 14.933334c14.933333 2.133333 27.733333 12.8 32 27.733333 4.266667 14.933333 0 29.866667-10.666667 40.533333l-76.8 74.666667 19.2 106.666667c2.133333 14.933333-4.266667 29.866667-17.066667 38.4-12.8 8.533333-29.866667 10.666667-42.666666 2.133333L516.266667 704l-96 51.2c-2.133333 4.266667-8.533333 6.4-14.933334 6.4z m-66.133333-256l89.6 87.466667-21.333333 123.733333 110.933333-57.6 110.933333 57.6-21.333333-123.733333 89.6-87.466667-121.6-19.2-55.466667-113.066667-55.466666 113.066667-125.866667 19.2z" fill="#3D3D3D" ><\/path><path d="M236.8 940.8c-12.8 0-25.6-4.266667-34.133333-10.666667-14.933333-10.666667-21.333333-27.733333-21.333334-46.933333V170.666667c0-38.4 32-70.4 70.4-70.4h541.866667c38.4 0 70.4 32 70.4 70.4v710.4c0 19.2-8.533333 36.266667-21.333333 46.933333-14.933333 10.666667-34.133333 14.933333-51.2 8.533333L561.066667 874.666667c-21.333333-6.4-61.866667-6.4-83.2 0l-224 61.866666c-6.4 2.133333-12.8 4.266667-17.066667 4.266667z m12.8-797.866667c-14.933333 0-27.733333 12.8-27.733333 27.733334v710.4c0 6.4 2.133333 10.666667 6.4 14.933333 4.266667 2.133333 8.533333 4.266667 14.933333 2.133333l224-61.866666c29.866667-8.533333 76.8-8.533333 106.666667 0L797.866667 896c6.4 2.133333 10.666667 2.133333 14.933333-2.133333 4.266667-2.133333 6.4-8.533333 6.4-14.933334V170.666667c0-14.933333-12.8-27.733333-27.733333-27.733334H249.6z" fill="#3D3D3D" ><\/path><path d="M840.533333 270.933333h-640c-12.8 0-21.333333-8.533333-21.333333-21.333333s8.533333-21.333333 21.333333-21.333333h640c12.8 0 21.333333 8.533333 21.333334 21.333333s-10.666667 21.333333-21.333334 21.333333z" fill="#3D3D3D" ><\/path><\/symbol><symbol id="icon-fanhui" viewBox="0 0 1024 1024"><path d="M710.153924 8.980397L266.007127 460.692524a81.118646 81.118646 0 0 0 0.861532 114.476097l446.192936 441.050666a26.922883 26.922883 0 0 0 37.853573-38.284339L304.722232 536.884282a27.27288 27.27288 0 0 1-0.323074-38.445877L748.545955 46.726278A26.922883 26.922883 0 1 0 710.180847 9.00732z"  ><\/path><\/symbol><symbol id="icon-wode" viewBox="0 0 1024 1024"><path d="M512 563.2c-127.9744 0-230.4-115.2512-230.4-256s102.4256-256 230.4-256 230.4 115.2512 230.4 256-102.4256 256-230.4 256z m0-51.2c98.2528 0 179.2-91.0592 179.2-204.8s-80.9472-204.8-179.2-204.8-179.2 91.0592-179.2 204.8 80.9472 204.8 179.2 204.8zM128 793.6a179.2 179.2 0 0 1 179.3792-179.2h409.2416C815.6416 614.4 896 694.7328 896 793.6a179.2 179.2 0 0 1-179.3792 179.2H307.3792C208.3584 972.8 128 892.4672 128 793.6z m51.2 0c0 70.5792 57.4464 128 128.1792 128h409.2416A128 128 0 0 0 844.8 793.6c0-70.5792-57.4464-128-128.1792-128H307.3792A128 128 0 0 0 179.2 793.6z"  ><\/path><\/symbol><symbol id="icon-huanyihuan" viewBox="0 0 1024 1024"><path d="M838.695385 374.153846A354.619077 354.619077 0 0 0 512 157.538462a354.461538 354.461538 0 1 0 0 708.923076 354.579692 354.579692 0 0 0 330.161231-225.20123 39.384615 39.384615 0 1 1 73.334154 28.750769A433.309538 433.309538 0 0 1 512 945.230769C272.738462 945.230769 78.769231 751.261538 78.769231 512S272.738462 78.769231 512 78.769231c144.423385 0 275.140923 71.286154 354.461538 183.965538V177.230769a39.384615 39.384615 0 0 1 78.769231 0v236.307693a39.266462 39.266462 0 0 1-39.384615 39.384615h-196.923077a39.384615 39.384615 0 0 1 0-78.769231h129.772308z"  ><\/path><\/symbol><symbol id="icon-remen" viewBox="0 0 1024 1024"><path d="M493.789998 1023.53089C254.799718 1023.53089 85.536259 856.015932 85.536259 625.384341c0-122.523033 72.584129-254.513561 75.782607-259.92965a32.11272 32.11272 0 0 1 31.728902-16.162976c12.879205 1.705855 23.156981 11.088057 26.69663 23.540799 0.255878 0.682342 19.87321 74.887033 45.631621 115.955491 17.271782 27.720143 34.970027 47.16689 54.80059 60.81373-13.433608-58.724057-23.626091-147.129991-6.951359-237.668243C358.771578 63.305131 552.514055 3.642853 560.787452 1.21201a31.814195 31.814195 0 0 1 39.831713 36.93176c-0.213232 1.705855-32.325952 175.95894 35.481784 324.410968 6.183724 13.518901 14.712999 29.084827 23.967262 44.906632a422.199104 422.199104 0 0 1 13.135083-66.698929c24.990775-88.022116 89.344154-118.130456 92.116168-119.281909a31.64361 31.64361 0 0 1 32.496537 4.008759c9.382202 7.249884 13.732132 19.276161 11.64246 31.046561-0.341171 2.217611-9.382202 62.178413 41.196398 147.12999 45.674267 76.678181 58.681411 126.403853 58.68141 221.931731C909.123036 856.143872 734.614073 1023.53089 493.789998 1023.53089zM187.247861 475.269104a407.699336 407.699336 0 0 0-28.10396 147.129991c0 187.814632 138.43013 324.069797 334.774036 324.069797 197.879176 0 341.469517-136.255165 341.469518-324.112443 0-81.198696-9.936605-118.684859-48.275696-183.294116-25.587824-43.072838-38.381737-81.795746-44.181643-112.714367a144.272684 144.272684 0 0 0-15.864451 36.803821c-18.721758 66.10188-13.902718 143.718281-13.902718 144.571208a31.259792 31.259792 0 0 1-20.47026 31.259792 30.278926 30.278926 0 0 1-35.225905-11.301289c-2.430843-3.241124-56.975556-81.454575-81.028111-134.336078-49.896258-109.217364-49.213916-227.475759-44.181643-295.539373-50.5786 29.767169-128.408232 96.423452-153.526947 231.868336-24.308433 131.990528 22.943749 269.951548 23.412859 271.23094a31.430378 31.430378 0 0 1-5.586675 31.728902 30.278926 30.278926 0 0 1-30.278925 9.723373c-3.752881-0.93822-96.551391-23.668738-152.460788-112.970245a376.951301 376.951301 0 0 1-26.568691-54.118249z" fill="#3D3D3D" ><\/path><\/symbol><\/svg>';var script=function(){var scripts=document.getElementsByTagName("script");return scripts[scripts.length-1]}();var shouldInjectCss=script.getAttribute("data-injectcss");var ready=function(fn){if(document.addEventListener){if(~["complete","loaded","interactive"].indexOf(document.readyState)){setTimeout(fn,0)}else{var loadFn=function(){document.removeEventListener("DOMContentLoaded",loadFn,false);fn()};document.addEventListener("DOMContentLoaded",loadFn,false)}}else if(document.attachEvent){IEContentLoaded(window,fn)}function IEContentLoaded(w,fn){var d=w.document,done=false,init=function(){if(!done){done=true;fn()}};var polling=function(){try{d.documentElement.doScroll("left")}catch(e){setTimeout(polling,50);return}init()};polling();d.onreadystatechange=function(){if(d.readyState=="complete"){d.onreadystatechange=null;init()}}}};var before=function(el,target){target.parentNode.insertBefore(el,target)};var prepend=function(el,target){if(target.firstChild){before(el,target.firstChild)}else{target.appendChild(el)}};function appendSvg(){var div,svg;div=document.createElement("div");div.innerHTML=svgSprite;svgSprite=null;svg=div.getElementsByTagName("svg")[0];if(svg){svg.setAttribute("aria-hidden","true");svg.style.position="absolute";svg.style.width=0;svg.style.height=0;svg.style.overflow="hidden";prepend(svg,document.body)}}if(shouldInjectCss&&!window.__iconfont__svg__cssinject__){window.__iconfont__svg__cssinject__=true;try{document.write("<style>.svgfont {display: inline-block;width: 1em;height: 1em;fill: currentColor;vertical-align: -0.1em;font-size:16px;}<\/style>")}catch(e){console&&console.log(e)}}ready(appendSvg)})(window)/;"	f
var.loadFn	public\static\live\assert\iconfont\iconfont.js	/^(function(window){var svgSprite='<svg><symbol id="icon-shijian" viewBox="0 0 1024 1024"><path d="M512 64c-256 0-460.8 208-460.8 460.8s208 460.8 460.8 460.8 460.8-208 460.8-460.8S768 64 512 64zM512 940.8c-227.2 0-412.8-185.6-412.8-412.8s185.6-412.8 412.8-412.8 412.8 185.6 412.8 412.8S742.4 940.8 512 940.8z"  ><\/path><path d="M809.6 544l-278.4 0 0-281.6c0-12.8-9.6-22.4-22.4-22.4-12.8 0-22.4 9.6-22.4 22.4l0 307.2c0 12.8 9.6 22.4 22.4 22.4 0 0 3.2 0 3.2 0l297.6 0c12.8 0 22.4-9.6 22.4-22.4C832 553.6 822.4 544 809.6 544z"  ><\/path><\/symbol><symbol id="icon-browse" viewBox="0 0 1024 1024"><path d="M812.896 528.896C812.16 530.944 730.816 736 504.16 736c-225.44 0-305.248-198.24-309.696-209.376-3.2-6.4-2.944-21.28 1.376-29.92C196.736 494.656 287.776 288 504.16 288c215.296 0 304.384 199.776 309.248 210.752 3.296 6.176 3.552 21.344-0.512 30.144m58.112-57.888C866.72 460.928 762.24 224 504.16 224 246.08 224 141.344 461.44 137.92 469.568c-12.704 24.896-13.056 60.896-1.984 82.752 0.96 2.496 98.048 247.68 368.224 247.68 270.144 0 367.552-245.696 367.552-246.016 11.712-24.832 10.912-61.6-0.704-82.976"  ><\/path><path d="M568.16 551.968a64.064 64.064 0 0 1-64 64.032c-35.296 0-64-28.704-64-64.032v-71.904c0-35.328 28.704-64.064 64-64.064s64 28.736 64 64.064v71.904z m-64-199.968c-70.592 0-128 57.44-128 128.064v71.904a128.16 128.16 0 0 0 128 128.032c70.592 0 128-57.44 128-128.032v-71.904a128.16 128.16 0 0 0-128-128.064z"  ><\/path><\/symbol><symbol id="icon-xihuan" viewBox="0 0 1024 1024"><path d="M669.781333 130.752c71.637333-11.093333 138.901333 11.477333 193.344 64.533333 55.317333 53.930667 81.834667 124.992 74.282667 199.530667-7.466667 73.642667-46.549333 146.368-112.32 210.474667-18.346667 17.898667-67.669333 66.218667-138.453333 135.637333-31.829333 31.232-65.706667 64.448-99.84 97.984L553.6 871.466667l-13.184 12.949333a40.554667 40.554667 0 0 1-56.832 0l-114.602667-112.64-24.213333-23.722667a677626.346667 677626.346667 0 0 0-145.856-142.762666C133.141333 541.184 94.08 468.48 86.613333 394.816c-7.552-74.538667 18.944-145.6 74.282667-199.530667 54.442667-53.056 121.706667-75.605333 193.344-64.533333 53.162667 8.213333 107.093333 34.688 157.781333 76.949333 50.709333-42.24 104.618667-68.736 157.781334-76.949333z" fill="#3D3D3D" ><\/path><\/symbol><symbol id="icon-xihuan1" viewBox="0 0 1024 1024"><path d="M523.733333 841.024l33.173334-32.576 99.690666-97.813333c70.976-69.632 120.32-117.973333 138.709334-135.893334 59.008-57.514667 93.248-121.28 99.626666-184.234666 6.250667-61.44-15.488-119.744-61.589333-164.672-44.992-43.84-98.88-61.909333-157.034667-52.906667-49.365333 7.616-101.034667 34.624-150.016 78.848a21.333333 21.333333 0 0 1-28.586666 0c-48.981333-44.224-100.650667-71.232-150.016-78.869333-58.154667-8.96-112.042667 9.088-157.034667 52.928-46.101333 44.928-67.84 103.210667-61.610667 164.693333 6.4 62.933333 40.64 126.72 99.648 184.213333a100207.573333 100207.573333 0 0 1 145.92 142.826667l24.256 23.765333L512 852.522667l11.733333-11.498667z m-11.733333 11.52l-1.493333 1.429333A2.133333 2.133333 0 0 1 512 853.333333c0.512 0 1.045333 0.213333 1.493333 0.64l-1.493333-1.450666z m157.781333-721.792c71.637333-11.093333 138.901333 11.477333 193.344 64.533333 55.317333 53.930667 81.834667 124.992 74.282667 199.530667-7.466667 73.642667-46.549333 146.368-112.32 210.474667-18.346667 17.898667-67.669333 66.218667-138.453333 135.637333-31.829333 31.232-65.706667 64.448-99.84 97.984L553.6 871.466667l-13.184 12.949333a40.554667 40.554667 0 0 1-56.832 0l-114.602667-112.64-24.213333-23.722667a677626.346667 677626.346667 0 0 0-145.856-142.762666C133.141333 541.184 94.08 468.48 86.613333 394.816c-7.552-74.538667 18.944-145.6 74.282667-199.530667 54.442667-53.056 121.706667-75.605333 193.344-64.533333 53.162667 8.213333 107.093333 34.688 157.781333 76.949333 50.709333-42.24 104.618667-68.736 157.781334-76.949333z" fill="#3D3D3D" ><\/path><\/symbol><symbol id="icon-zan" viewBox="0 0 1024 1024"><path d="M710.549333 384.810667a12409.045333 12409.045333 0 0 0 47.466667-0.32l8.746667-0.085334c83.989333-0.618667 141.44 67.584 126.72 150.229334L847.296 794.026667c-10.026667 56.448-63.914667 101.546667-121.130667 101.589333L298.624 896a42.730667 42.730667 0 0 1-42.666667-42.410667l-0.810666-383.978666a42.666667 42.666667 0 0 1 42.026666-42.666667l3.157334-0.064c5.226667-0.042667 11.797333-0.042667 19.626666 0 91.946667 0.768 170.88-86.698667 170.709334-170.944-0.149333-86.741333 39.786667-126.762667 106.453333-127.573333 62.250667-0.746667 106.602667 59.605333 107.349333 149.12 0.213333 26.602667-6.293333 73.237333-14.506666 107.434666 6.186667 0 13.077333-0.042667 20.586666-0.085333z m-497.706666 63.232L213.333333 874.624A21.312 21.312 0 0 1 191.786667 896H149.525333A21.333333 21.333333 0 0 1 128 874.624l0.042667-426.581333A21.269333 21.269333 0 0 1 149.44 426.666667h41.984c11.669333 0 21.418667 9.578667 21.418667 21.376z" fill="#3D3D3D" ><\/path><\/symbol><symbol id="icon-zan1" viewBox="0 0 1024 1024"><path d="M757.76 852.906667c36.906667-0.021333 72.832-30.208 79.296-66.56l51.093333-287.04c10.069333-56.469333-27.093333-100.522667-84.373333-100.096l-10.261333 0.085333a19972.266667 19972.266667 0 0 1-52.842667 0.362667 3552.853333 3552.853333 0 0 1-56.746667 0l-30.997333-0.426667 11.498667-28.8c10.24-25.642667 21.76-95.744 21.504-128.021333-0.618667-73.045333-31.36-114.858667-69.290667-114.410667-46.613333 0.554667-69.461333 23.466667-69.333333 91.136 0.213333 112.661333-102.144 226.112-225.130667 225.109333a1214.08 1214.08 0 0 0-20.629333 0l-3.52 0.042667c-0.192 0 0.64 409.109333 0.64 409.109333 0-0.085333 459.093333-0.490667 459.093333-0.490666z m-17.301333-495.914667a15332.288 15332.288 0 0 0 52.693333-0.362667l10.282667-0.085333c84.010667-0.618667 141.44 67.52 126.72 150.250667L879.061333 793.813333c-10.090667 56.661333-63.68 101.696-121.258666 101.76l-458.922667 0.384A42.666667 42.666667 0 0 1 256 853.546667l-0.853333-409.173334a42.624 42.624 0 0 1 42.346666-42.730666l3.669334-0.042667c5.909333-0.064 13.12-0.064 21.333333 0 98.176 0.789333 182.293333-92.437333 182.144-182.378667C504.469333 128.021333 546.24 86.186667 616.106667 85.333333c65.173333-0.768 111.68 62.506667 112.448 156.714667 0.256 28.48-6.848 78.826667-15.701334 115.050667 8.021333 0 17.28-0.042667 27.584-0.106667zM170.666667 448v405.333333h23.466666a21.333333 21.333333 0 0 1 0 42.666667H154.837333A26.709333 26.709333 0 0 1 128 869.333333v-437.333333c0-14.784 12.074667-26.666667 26.773333-26.666667h38.912a21.333333 21.333333 0 0 1 0 42.666667H170.666667z" fill="#3D3D3D" ><\/path><\/symbol><symbol id="icon-paihang" viewBox="0 0 1024 1024"><path d="M405.333333 761.6c-8.533333 0-17.066667-2.133333-23.466666-8.533333-12.8-8.533333-19.2-23.466667-17.066667-38.4l19.2-106.666667-76.8-74.666667c-10.666667-10.666667-14.933333-27.733333-10.666667-40.533333 4.266667-14.933333 17.066667-25.6 32-27.733333l106.666667-14.933334 46.933333-96c6.4-14.933333 21.333333-23.466667 36.266667-23.466666s29.866667 8.533333 36.266667 23.466666l46.933333 96 106.666667 14.933334c14.933333 2.133333 27.733333 12.8 32 27.733333 4.266667 14.933333 0 29.866667-10.666667 40.533333l-76.8 74.666667 19.2 106.666667c2.133333 14.933333-4.266667 29.866667-17.066667 38.4-12.8 8.533333-29.866667 10.666667-42.666666 2.133333L516.266667 704l-96 51.2c-2.133333 4.266667-8.533333 6.4-14.933334 6.4z m-66.133333-256l89.6 87.466667-21.333333 123.733333 110.933333-57.6 110.933333 57.6-21.333333-123.733333 89.6-87.466667-121.6-19.2-55.466667-113.066667-55.466666 113.066667-125.866667 19.2z" fill="#3D3D3D" ><\/path><path d="M236.8 940.8c-12.8 0-25.6-4.266667-34.133333-10.666667-14.933333-10.666667-21.333333-27.733333-21.333334-46.933333V170.666667c0-38.4 32-70.4 70.4-70.4h541.866667c38.4 0 70.4 32 70.4 70.4v710.4c0 19.2-8.533333 36.266667-21.333333 46.933333-14.933333 10.666667-34.133333 14.933333-51.2 8.533333L561.066667 874.666667c-21.333333-6.4-61.866667-6.4-83.2 0l-224 61.866666c-6.4 2.133333-12.8 4.266667-17.066667 4.266667z m12.8-797.866667c-14.933333 0-27.733333 12.8-27.733333 27.733334v710.4c0 6.4 2.133333 10.666667 6.4 14.933333 4.266667 2.133333 8.533333 4.266667 14.933333 2.133333l224-61.866666c29.866667-8.533333 76.8-8.533333 106.666667 0L797.866667 896c6.4 2.133333 10.666667 2.133333 14.933333-2.133333 4.266667-2.133333 6.4-8.533333 6.4-14.933334V170.666667c0-14.933333-12.8-27.733333-27.733333-27.733334H249.6z" fill="#3D3D3D" ><\/path><path d="M840.533333 270.933333h-640c-12.8 0-21.333333-8.533333-21.333333-21.333333s8.533333-21.333333 21.333333-21.333333h640c12.8 0 21.333333 8.533333 21.333334 21.333333s-10.666667 21.333333-21.333334 21.333333z" fill="#3D3D3D" ><\/path><\/symbol><symbol id="icon-fanhui" viewBox="0 0 1024 1024"><path d="M710.153924 8.980397L266.007127 460.692524a81.118646 81.118646 0 0 0 0.861532 114.476097l446.192936 441.050666a26.922883 26.922883 0 0 0 37.853573-38.284339L304.722232 536.884282a27.27288 27.27288 0 0 1-0.323074-38.445877L748.545955 46.726278A26.922883 26.922883 0 1 0 710.180847 9.00732z"  ><\/path><\/symbol><symbol id="icon-wode" viewBox="0 0 1024 1024"><path d="M512 563.2c-127.9744 0-230.4-115.2512-230.4-256s102.4256-256 230.4-256 230.4 115.2512 230.4 256-102.4256 256-230.4 256z m0-51.2c98.2528 0 179.2-91.0592 179.2-204.8s-80.9472-204.8-179.2-204.8-179.2 91.0592-179.2 204.8 80.9472 204.8 179.2 204.8zM128 793.6a179.2 179.2 0 0 1 179.3792-179.2h409.2416C815.6416 614.4 896 694.7328 896 793.6a179.2 179.2 0 0 1-179.3792 179.2H307.3792C208.3584 972.8 128 892.4672 128 793.6z m51.2 0c0 70.5792 57.4464 128 128.1792 128h409.2416A128 128 0 0 0 844.8 793.6c0-70.5792-57.4464-128-128.1792-128H307.3792A128 128 0 0 0 179.2 793.6z"  ><\/path><\/symbol><symbol id="icon-huanyihuan" viewBox="0 0 1024 1024"><path d="M838.695385 374.153846A354.619077 354.619077 0 0 0 512 157.538462a354.461538 354.461538 0 1 0 0 708.923076 354.579692 354.579692 0 0 0 330.161231-225.20123 39.384615 39.384615 0 1 1 73.334154 28.750769A433.309538 433.309538 0 0 1 512 945.230769C272.738462 945.230769 78.769231 751.261538 78.769231 512S272.738462 78.769231 512 78.769231c144.423385 0 275.140923 71.286154 354.461538 183.965538V177.230769a39.384615 39.384615 0 0 1 78.769231 0v236.307693a39.266462 39.266462 0 0 1-39.384615 39.384615h-196.923077a39.384615 39.384615 0 0 1 0-78.769231h129.772308z"  ><\/path><\/symbol><symbol id="icon-remen" viewBox="0 0 1024 1024"><path d="M493.789998 1023.53089C254.799718 1023.53089 85.536259 856.015932 85.536259 625.384341c0-122.523033 72.584129-254.513561 75.782607-259.92965a32.11272 32.11272 0 0 1 31.728902-16.162976c12.879205 1.705855 23.156981 11.088057 26.69663 23.540799 0.255878 0.682342 19.87321 74.887033 45.631621 115.955491 17.271782 27.720143 34.970027 47.16689 54.80059 60.81373-13.433608-58.724057-23.626091-147.129991-6.951359-237.668243C358.771578 63.305131 552.514055 3.642853 560.787452 1.21201a31.814195 31.814195 0 0 1 39.831713 36.93176c-0.213232 1.705855-32.325952 175.95894 35.481784 324.410968 6.183724 13.518901 14.712999 29.084827 23.967262 44.906632a422.199104 422.199104 0 0 1 13.135083-66.698929c24.990775-88.022116 89.344154-118.130456 92.116168-119.281909a31.64361 31.64361 0 0 1 32.496537 4.008759c9.382202 7.249884 13.732132 19.276161 11.64246 31.046561-0.341171 2.217611-9.382202 62.178413 41.196398 147.12999 45.674267 76.678181 58.681411 126.403853 58.68141 221.931731C909.123036 856.143872 734.614073 1023.53089 493.789998 1023.53089zM187.247861 475.269104a407.699336 407.699336 0 0 0-28.10396 147.129991c0 187.814632 138.43013 324.069797 334.774036 324.069797 197.879176 0 341.469517-136.255165 341.469518-324.112443 0-81.198696-9.936605-118.684859-48.275696-183.294116-25.587824-43.072838-38.381737-81.795746-44.181643-112.714367a144.272684 144.272684 0 0 0-15.864451 36.803821c-18.721758 66.10188-13.902718 143.718281-13.902718 144.571208a31.259792 31.259792 0 0 1-20.47026 31.259792 30.278926 30.278926 0 0 1-35.225905-11.301289c-2.430843-3.241124-56.975556-81.454575-81.028111-134.336078-49.896258-109.217364-49.213916-227.475759-44.181643-295.539373-50.5786 29.767169-128.408232 96.423452-153.526947 231.868336-24.308433 131.990528 22.943749 269.951548 23.412859 271.23094a31.430378 31.430378 0 0 1-5.586675 31.728902 30.278926 30.278926 0 0 1-30.278925 9.723373c-3.752881-0.93822-96.551391-23.668738-152.460788-112.970245a376.951301 376.951301 0 0 1-26.568691-54.118249z" fill="#3D3D3D" ><\/path><\/symbol><\/svg>';var script=function(){var scripts=document.getElementsByTagName("script");return scripts[scripts.length-1]}();var shouldInjectCss=script.getAttribute("data-injectcss");var ready=function(fn){if(document.addEventListener){if(~["complete","loaded","interactive"].indexOf(document.readyState)){setTimeout(fn,0)}else{var loadFn=function(){document.removeEventListener("DOMContentLoaded",loadFn,false);fn()};document.addEventListener("DOMContentLoaded",loadFn,false)}}else if(document.attachEvent){IEContentLoaded(window,fn)}function IEContentLoaded(w,fn){var d=w.document,done=false,init=function(){if(!done){done=true;fn()}};var polling=function(){try{d.documentElement.doScroll("left")}catch(e){setTimeout(polling,50);return}init()};polling();d.onreadystatechange=function(){if(d.readyState=="complete"){d.onreadystatechange=null;init()}}}};var before=function(el,target){target.parentNode.insertBefore(el,target)};var prepend=function(el,target){if(target.firstChild){before(el,target.firstChild)}else{target.appendChild(el)}};function appendSvg(){var div,svg;div=document.createElement("div");div.innerHTML=svgSprite;svgSprite=null;svg=div.getElementsByTagName("svg")[0];if(svg){svg.setAttribute("aria-hidden","true");svg.style.position="absolute";svg.style.width=0;svg.style.height=0;svg.style.overflow="hidden";prepend(svg,document.body)}}if(shouldInjectCss&&!window.__iconfont__svg__cssinject__){window.__iconfont__svg__cssinject__=true;try{document.write("<style>.svgfont {display: inline-block;width: 1em;height: 1em;fill: currentColor;vertical-align: -0.1em;font-size:16px;}<\/style>")}catch(e){console&&console.log(e)}}ready(appendSvg)})(window)/;"	f
C	public\static\live\js\jquery-3.3.1.min.js	/^!function(e,t){"use strict";"object"==typeof module&&"object"==typeof module.exports?module.exports=e.document?t(e,!0):function(e){if(!e.document)throw new Error("jQuery requires a window with a document");return t(e)}:t(e)}("undefined"!=typeof window?window:this,function(e,t){"use strict";var n=[],r=e.document,i=Object.getPrototypeOf,o=n.slice,a=n.concat,s=n.push,u=n.indexOf,l={},c=l.toString,f=l.hasOwnProperty,p=f.toString,d=p.call(Object),h={},g=function e(t){return"function"==typeof t&&"number"!=typeof t.nodeType},y=function e(t){return null!=t&&t===t.window},v={type:!0,src:!0,noModule:!0};function m(e,t,n){var i,o=(t=t||r).createElement("script");if(o.text=e,n)for(i in v)n[i]&&(o[i]=n[i]);t.head.appendChild(o).parentNode.removeChild(o)}function x(e){return null==e?e+"":"object"==typeof e||"function"==typeof e?l[c.call(e)]||"object":typeof e}var b="3.3.1",w=function(e,t){return new w.fn.init(e,t)},T=\/^[\\s\\uFEFF\\xA0]+|[\\s\\uFEFF\\xA0]+$\/g;w.fn=w.prototype={jquery:"3.3.1",constructor:w,length:0,toArray:function(){return o.call(this)},get:function(e){return null==e?o.call(this):e<0?this[e+this.length]:this[e]},pushStack:function(e){var t=w.merge(this.constructor(),e);return t.prevObject=this,t},each:function(e){return w.each(this,e)},map:function(e){return this.pushStack(w.map(this,function(t,n){return e.call(t,n,t)}))},slice:function(){return this.pushStack(o.apply(this,arguments))},first:function(){return this.eq(0)},last:function(){return this.eq(-1)},eq:function(e){var t=this.length,n=+e+(e<0?t:0);return this.pushStack(n>=0&&n<t?[this[n]]:[])},end:function(){return this.prevObject||this.constructor()},push:s,sort:n.sort,splice:n.splice},w.extend=w.fn.extend=function(){var e,t,n,r,i,o,a=arguments[0]||{},s=1,u=arguments.length,l=!1;for("boolean"==typeof a&&(l=a,a=arguments[s]||{},s++),"object"==typeof a||g(a)||(a={}),s===u&&(a=this,s--);s<u;s++)if(null!=(e=arguments[s]))for(t in e)n=a[t],a!==(r=e[t])&&(l&&r&&(w.isPlainObject(r)||(i=Array.isArray(r)))?(i?(i=!1,o=n&&Array.isArray(n)?n:[]):o=n&&w.isPlainObject(n)?n:{},a[t]=w.extend(l,o,r)):void 0!==r&&(a[t]=r));return a},w.extend({expando:"jQuery"+("3.3.1"+Math.random()).replace(\/\\D\/g,""),isReady:!0,error:function(e){throw new Error(e)},noop:function(){},isPlainObject:function(e){var t,n;return!(!e||"[object Object]"!==c.call(e))&&(!(t=i(e))||"function"==typeof(n=f.call(t,"constructor")&&t.constructor)&&p.call(n)===d)},isEmptyObject:function(e){var t;for(t in e)return!1;return!0},globalEval:function(e){m(e)},each:function(e,t){var n,r=0;if(C(e)){for(n=e.length;r<n;r++)if(!1===t.call(e[r],r,e[r]))break}else for(r in e)if(!1===t.call(e[r],r,e[r]))break;return e},trim:function(e){return null==e?"":(e+"").replace(T,"")},makeArray:function(e,t){var n=t||[];return null!=e&&(C(Object(e))?w.merge(n,"string"==typeof e?[e]:e):s.call(n,e)),n},inArray:function(e,t,n){return null==t?-1:u.call(t,e,n)},merge:function(e,t){for(var n=+t.length,r=0,i=e.length;r<n;r++)e[i++]=t[r];return e.length=i,e},grep:function(e,t,n){for(var r,i=[],o=0,a=e.length,s=!n;o<a;o++)(r=!t(e[o],o))!==s&&i.push(e[o]);return i},map:function(e,t,n){var r,i,o=0,s=[];if(C(e))for(r=e.length;o<r;o++)null!=(i=t(e[o],o,n))&&s.push(i);else for(o in e)null!=(i=t(e[o],o,n))&&s.push(i);return a.apply([],s)},guid:1,support:h}),"function"==typeof Symbol&&(w.fn[Symbol.iterator]=n[Symbol.iterator]),w.each("Boolean Number String Function Array Date RegExp Object Error Symbol".split(" "),function(e,t){l["[object "+t+"]"]=t.toLowerCase()});function C(e){var t=!!e&&"length"in e&&e.length,n=x(e);return!g(e)&&!y(e)&&("array"===n||0===t||"number"==typeof t&&t>0&&t-1 in e)}var E=function(e){var t,n,r,i,o,a,s,u,l,c,f,p,d,h,g,y,v,m,x,b="sizzle"+1*new Date,w=e.document,T=0,C=0,E=ae(),k=ae(),S=ae(),D=function(e,t){return e===t&&(f=!0),0},N={}.hasOwnProperty,A=[],j=A.pop,q=A.push,L=A.push,H=A.slice,O=function(e,t){for(var n=0,r=e.length;n<r;n++)if(e[n]===t)return n;return-1},P="checked|selected|async|autofocus|autoplay|controls|defer|disabled|hidden|ismap|loop|multiple|open|readonly|required|scoped",M="[\\\\x20\\\\t\\\\r\\\\n\\\\f]",R="(?:\\\\\\\\.|[\\\\w-]|[^\\0-\\\\xa0])+",I="\\\\["+M+"*("+R+")(?:"+M+"*([*^$|!~]?=)"+M+"*(?:'((?:\\\\\\\\.|[^\\\\\\\\'])*)'|\\"((?:\\\\\\\\.|[^\\\\\\\\\\"])*)\\"|("+R+"))|)"+M+"*\\\\]",W=":("+R+")(?:\\\\((('((?:\\\\\\\\.|[^\\\\\\\\'])*)'|\\"((?:\\\\\\\\.|[^\\\\\\\\\\"])*)\\")|((?:\\\\\\\\.|[^\\\\\\\\()[\\\\]]|"+I+")*)|.*)\\\\)|)",$=new RegExp(M+"+","g"),B=new RegExp("^"+M+"+|((?:^|[^\\\\\\\\])(?:\\\\\\\\.)*)"+M+"+$","g"),F=new RegExp("^"+M+"*,"+M+"*"),_=new RegExp("^"+M+"*([>+~]|"+M+")"+M+"*"),z=new RegExp("="+M+"*([^\\\\]'\\"]*?)"+M+"*\\\\]","g"),X=new RegExp(W),U=new RegExp("^"+R+"$"),V={ID:new RegExp("^#("+R+")"),CLASS:new RegExp("^\\\\.("+R+")"),TAG:new RegExp("^("+R+"|[*])"),ATTR:new RegExp("^"+I),PSEUDO:new RegExp("^"+W),CHILD:new RegExp("^:(only|first|last|nth|nth-last)-(child|of-type)(?:\\\\("+M+"*(even|odd|(([+-]|)(\\\\d*)n|)"+M+"*(?:([+-]|)"+M+"*(\\\\d+)|))"+M+"*\\\\)|)","i"),bool:new RegExp("^(?:"+P+")$","i"),needsContext:new RegExp("^"+M+"*[>+~]|:(even|odd|eq|gt|lt|nth|first|last)(?:\\\\("+M+"*((?:-\\\\d)?\\\\d*)"+M+"*\\\\)|)(?=[^-]|$)","i")},G=\/^(?:input|select|textarea|button)$\/i,Y=\/^h\\d$\/i,Q=\/^[^{]+\\{\\s*\\[native \\w\/,J=\/^(?:#([\\w-]+)|(\\w+)|\\.([\\w-]+))$\/,K=\/[+~]\/,Z=new RegExp("\\\\\\\\([\\\\da-f]{1,6}"+M+"?|("+M+")|.)","ig"),ee=function(e,t,n){var r="0x"+t-65536;return r!==r||n?t:r<0?String.fromCharCode(r+65536):String.fromCharCode(r>>10|55296,1023&r|56320)},te=\/([\\0-\\x1f\\x7f]|^-?\\d)|^-$|[^\\0-\\x1f\\x7f-\\uFFFF\\w-]\/g,ne=function(e,t){return t?"\\0"===e?"\\ufffd":e.slice(0,-1)+"\\\\"+e.charCodeAt(e.length-1).toString(16)+" ":"\\\\"+e},re=function(){p()},ie=me(function(e){return!0===e.disabled&&("form"in e||"label"in e)},{dir:"parentNode",next:"legend"});try{L.apply(A=H.call(w.childNodes),w.childNodes),A[w.childNodes.length].nodeType}catch(e){L={apply:A.length?function(e,t){q.apply(e,H.call(t))}:function(e,t){var n=e.length,r=0;while(e[n++]=t[r++]);e.length=n-1}}}function oe(e,t,r,i){var o,s,l,c,f,h,v,m=t&&t.ownerDocument,T=t?t.nodeType:9;if(r=r||[],"string"!=typeof e||!e||1!==T&&9!==T&&11!==T)return r;if(!i&&((t?t.ownerDocument||t:w)!==d&&p(t),t=t||d,g)){if(11!==T&&(f=J.exec(e)))if(o=f[1]){if(9===T){if(!(l=t.getElementById(o)))return r;if(l.id===o)return r.push(l),r}else if(m&&(l=m.getElementById(o))&&x(t,l)&&l.id===o)return r.push(l),r}else{if(f[2])return L.apply(r,t.getElementsByTagName(e)),r;if((o=f[3])&&n.getElementsByClassName&&t.getElementsByClassName)return L.apply(r,t.getElementsByClassName(o)),r}if(n.qsa&&!S[e+" "]&&(!y||!y.test(e))){if(1!==T)m=t,v=e;else if("object"!==t.nodeName.toLowerCase()){(c=t.getAttribute("id"))?c=c.replace(te,ne):t.setAttribute("id",c=b),s=(h=a(e)).length;while(s--)h[s]="#"+c+" "+ve(h[s]);v=h.join(","),m=K.test(e)&&ge(t.parentNode)||t}if(v)try{return L.apply(r,m.querySelectorAll(v)),r}catch(e){}finally{c===b&&t.removeAttribute("id")}}}return u(e.replace(B,"$1"),t,r,i)}function ae(){var e=[];function t(n,i){return e.push(n+" ")>r.cacheLength&&delete t[e.shift()],t[n+" "]=i}return t}function se(e){return e[b]=!0,e}function ue(e){var t=d.createElement("fieldset");try{return!!e(t)}catch(e){return!1}finally{t.parentNode&&t.parentNode.removeChild(t),t=null}}function le(e,t){var n=e.split("|"),i=n.length;while(i--)r.attrHandle[n[i]]=t}function ce(e,t){var n=t&&e,r=n&&1===e.nodeType&&1===t.nodeType&&e.sourceIndex-t.sourceIndex;if(r)return r;if(n)while(n=n.nextSibling)if(n===t)return-1;return e?1:-1}function fe(e){return function(t){return"input"===t.nodeName.toLowerCase()&&t.type===e}}function pe(e){return function(t){var n=t.nodeName.toLowerCase();return("input"===n||"button"===n)&&t.type===e}}function de(e){return function(t){return"form"in t?t.parentNode&&!1===t.disabled?"label"in t?"label"in t.parentNode?t.parentNode.disabled===e:t.disabled===e:t.isDisabled===e||t.isDisabled!==!e&&ie(t)===e:t.disabled===e:"label"in t&&t.disabled===e}}function he(e){return se(function(t){return t=+t,se(function(n,r){var i,o=e([],n.length,t),a=o.length;while(a--)n[i=o[a]]&&(n[i]=!(r[i]=n[i]))})})}function ge(e){return e&&"undefined"!=typeof e.getElementsByTagName&&e}n=oe.support={},o=oe.isXML=function(e){var t=e&&(e.ownerDocument||e).documentElement;return!!t&&"HTML"!==t.nodeName},p=oe.setDocument=function(e){var t,i,a=e?e.ownerDocument||e:w;return a!==d&&9===a.nodeType&&a.documentElement?(d=a,h=d.documentElement,g=!o(d),w!==d&&(i=d.defaultView)&&i.top!==i&&(i.addEventListener?i.addEventListener("unload",re,!1):i.attachEvent&&i.attachEvent("onunload",re)),n.attributes=ue(function(e){return e.className="i",!e.getAttribute("className")}),n.getElementsByTagName=ue(function(e){return e.appendChild(d.createComment("")),!e.getElementsByTagName("*").length}),n.getElementsByClassName=Q.test(d.getElementsByClassName),n.getById=ue(function(e){return h.appendChild(e).id=b,!d.getElementsByName||!d.getElementsByName(b).length}),n.getById?(r.filter.ID=function(e){var t=e.replace(Z,ee);return function(e){return e.getAttribute("id")===t}},r.find.ID=function(e,t){if("undefined"!=typeof t.getElementById&&g){var n=t.getElementById(e);return n?[n]:[]}}):(r.filter.ID=function(e){var t=e.replace(Z,ee);return function(e){var n="undefined"!=typeof e.getAttributeNode&&e.getAttributeNode("id");return n&&n.value===t}},r.find.ID=function(e,t){if("undefined"!=typeof t.getElementById&&g){var n,r,i,o=t.getElementById(e);if(o){if((n=o.getAttributeNode("id"))&&n.value===e)return[o];i=t.getElementsByName(e),r=0;while(o=i[r++])if((n=o.getAttributeNode("id"))&&n.value===e)return[o]}return[]}}),r.find.TAG=n.getElementsByTagName?function(e,t){return"undefined"!=typeof t.getElementsByTagName?t.getElementsByTagName(e):n.qsa?t.querySelectorAll(e):void 0}:function(e,t){var n,r=[],i=0,o=t.getElementsByTagName(e);if("*"===e){while(n=o[i++])1===n.nodeType&&r.push(n);return r}return o},r.find.CLASS=n.getElementsByClassName&&function(e,t){if("undefined"!=typeof t.getElementsByClassName&&g)return t.getElementsByClassName(e)},v=[],y=[],(n.qsa=Q.test(d.querySelectorAll))&&(ue(function(e){h.appendChild(e).innerHTML="<a id='"+b+"'><\/a><select id='"+b+"-\\r\\\\' msallowcapture=''><option selected=''><\/option><\/select>",e.querySelectorAll("[msallowcapture^='']").length&&y.push("[*^$]="+M+"*(?:''|\\"\\")"),e.querySelectorAll("[selected]").length||y.push("\\\\["+M+"*(?:value|"+P+")"),e.querySelectorAll("[id~="+b+"-]").length||y.push("~="),e.querySelectorAll(":checked").length||y.push(":checked"),e.querySelectorAll("a#"+b+"+*").length||y.push(".#.+[+~]")}),ue(function(e){e.innerHTML="<a href='' disabled='disabled'><\/a><select disabled='disabled'><option\/><\/select>";var t=d.createElement("input");t.setAttribute("type","hidden"),e.appendChild(t).setAttribute("name","D"),e.querySelectorAll("[name=d]").length&&y.push("name"+M+"*[*^$|!~]?="),2!==e.querySelectorAll(":enabled").length&&y.push(":enabled",":disabled"),h.appendChild(e).disabled=!0,2!==e.querySelectorAll(":disabled").length&&y.push(":enabled",":disabled"),e.querySelectorAll("*,:x"),y.push(",.*:")})),(n.matchesSelector=Q.test(m=h.matches||h.webkitMatchesSelector||h.mozMatchesSelector||h.oMatchesSelector||h.msMatchesSelector))&&ue(function(e){n.disconnectedMatch=m.call(e,"*"),m.call(e,"[s!='']:x"),v.push("!=",W)}),y=y.length&&new RegExp(y.join("|")),v=v.length&&new RegExp(v.join("|")),t=Q.test(h.compareDocumentPosition),x=t||Q.test(h.contains)?function(e,t){var n=9===e.nodeType?e.documentElement:e,r=t&&t.parentNode;return e===r||!(!r||1!==r.nodeType||!(n.contains?n.contains(r):e.compareDocumentPosition&&16&e.compareDocumentPosition(r)))}:function(e,t){if(t)while(t=t.parentNode)if(t===e)return!0;return!1},D=t?function(e,t){if(e===t)return f=!0,0;var r=!e.compareDocumentPosition-!t.compareDocumentPosition;return r||(1&(r=(e.ownerDocument||e)===(t.ownerDocument||t)?e.compareDocumentPosition(t):1)||!n.sortDetached&&t.compareDocumentPosition(e)===r?e===d||e.ownerDocument===w&&x(w,e)?-1:t===d||t.ownerDocument===w&&x(w,t)?1:c?O(c,e)-O(c,t):0:4&r?-1:1)}:function(e,t){if(e===t)return f=!0,0;var n,r=0,i=e.parentNode,o=t.parentNode,a=[e],s=[t];if(!i||!o)return e===d?-1:t===d?1:i?-1:o?1:c?O(c,e)-O(c,t):0;if(i===o)return ce(e,t);n=e;while(n=n.parentNode)a.unshift(n);n=t;while(n=n.parentNode)s.unshift(n);while(a[r]===s[r])r++;return r?ce(a[r],s[r]):a[r]===w?-1:s[r]===w?1:0},d):d},oe.matches=function(e,t){return oe(e,null,null,t)},oe.matchesSelector=function(e,t){if((e.ownerDocument||e)!==d&&p(e),t=t.replace(z,"='$1']"),n.matchesSelector&&g&&!S[t+" "]&&(!v||!v.test(t))&&(!y||!y.test(t)))try{var r=m.call(e,t);if(r||n.disconnectedMatch||e.document&&11!==e.document.nodeType)return r}catch(e){}return oe(t,d,null,[e]).length>0},oe.contains=function(e,t){return(e.ownerDocument||e)!==d&&p(e),x(e,t)},oe.attr=function(e,t){(e.ownerDocument||e)!==d&&p(e);var i=r.attrHandle[t.toLowerCase()],o=i&&N.call(r.attrHandle,t.toLowerCase())?i(e,t,!g):void 0;return void 0!==o?o:n.attributes||!g?e.getAttribute(t):(o=e.getAttributeNode(t))&&o.specified?o.value:null},oe.escape=function(e){return(e+"").replace(te,ne)},oe.error=function(e){throw new Error("Syntax error, unrecognized expression: "+e)},oe.uniqueSort=function(e){var t,r=[],i=0,o=0;if(f=!n.detectDuplicates,c=!n.sortStable&&e.slice(0),e.sort(D),f){while(t=e[o++])t===e[o]&&(i=r.push(o));while(i--)e.splice(r[i],1)}return c=null,e},i=oe.getText=function(e){var t,n="",r=0,o=e.nodeType;if(o){if(1===o||9===o||11===o){if("string"==typeof e.textContent)return e.textContent;for(e=e.firstChild;e;e=e.nextSibling)n+=i(e)}else if(3===o||4===o)return e.nodeValue}else while(t=e[r++])n+=i(t);return n},(r=oe.selectors={cacheLength:50,createPseudo:se,match:V,attrHandle:{},find:{},relative:{">":{dir:"parentNode",first:!0}," ":{dir:"parentNode"},"+":{dir:"previousSibling",first:!0},"~":{dir:"previousSibling"}},preFilter:{ATTR:function(e){return e[1]=e[1].replace(Z,ee),e[3]=(e[3]||e[4]||e[5]||"").replace(Z,ee),"~="===e[2]&&(e[3]=" "+e[3]+" "),e.slice(0,4)},CHILD:function(e){return e[1]=e[1].toLowerCase(),"nth"===e[1].slice(0,3)?(e[3]||oe.error(e[0]),e[4]=+(e[4]?e[5]+(e[6]||1):2*("even"===e[3]||"odd"===e[3])),e[5]=+(e[7]+e[8]||"odd"===e[3])):e[3]&&oe.error(e[0]),e},PSEUDO:function(e){var t,n=!e[6]&&e[2];return V.CHILD.test(e[0])?null:(e[3]?e[2]=e[4]||e[5]||"":n&&X.test(n)&&(t=a(n,!0))&&(t=n.indexOf(")",n.length-t)-n.length)&&(e[0]=e[0].slice(0,t),e[2]=n.slice(0,t)),e.slice(0,3))}},filter:{TAG:function(e){var t=e.replace(Z,ee).toLowerCase();return"*"===e?function(){return!0}:function(e){return e.nodeName&&e.nodeName.toLowerCase()===t}},CLASS:function(e){var t=E[e+" "];return t||(t=new RegExp("(^|"+M+")"+e+"("+M+"|$)"))&&E(e,function(e){return t.test("string"==typeof e.className&&e.className||"undefined"!=typeof e.getAttribute&&e.getAttribute("class")||"")})},ATTR:function(e,t,n){return function(r){var i=oe.attr(r,e);return null==i?"!="===t:!t||(i+="","="===t?i===n:"!="===t?i!==n:"^="===t?n&&0===i.indexOf(n):"*="===t?n&&i.indexOf(n)>-1:"$="===t?n&&i.slice(-n.length)===n:"~="===t?(" "+i.replace($," ")+" ").indexOf(n)>-1:"|="===t&&(i===n||i.slice(0,n.length+1)===n+"-"))}},CHILD:function(e,t,n,r,i){var o="nth"!==e.slice(0,3),a="last"!==e.slice(-4),s="of-type"===t;return 1===r&&0===i?function(e){return!!e.parentNode}:function(t,n,u){var l,c,f,p,d,h,g=o!==a?"nextSibling":"previousSibling",y=t.parentNode,v=s&&t.nodeName.toLowerCase(),m=!u&&!s,x=!1;if(y){if(o){while(g){p=t;while(p=p[g])if(s?p.nodeName.toLowerCase()===v:1===p.nodeType)return!1;h=g="only"===e&&!h&&"nextSibling"}return!0}if(h=[a?y.firstChild:y.lastChild],a&&m){x=(d=(l=(c=(f=(p=y)[b]||(p[b]={}))[p.uniqueID]||(f[p.uniqueID]={}))[e]||[])[0]===T&&l[1])&&l[2],p=d&&y.childNodes[d];while(p=++d&&p&&p[g]||(x=d=0)||h.pop())if(1===p.nodeType&&++x&&p===t){c[e]=[T,d,x];break}}else if(m&&(x=d=(l=(c=(f=(p=t)[b]||(p[b]={}))[p.uniqueID]||(f[p.uniqueID]={}))[e]||[])[0]===T&&l[1]),!1===x)while(p=++d&&p&&p[g]||(x=d=0)||h.pop())if((s?p.nodeName.toLowerCase()===v:1===p.nodeType)&&++x&&(m&&((c=(f=p[b]||(p[b]={}))[p.uniqueID]||(f[p.uniqueID]={}))[e]=[T,x]),p===t))break;return(x-=i)===r||x%r==0&&x\/r>=0}}},PSEUDO:function(e,t){var n,i=r.pseudos[e]||r.setFilters[e.toLowerCase()]||oe.error("unsupported pseudo: "+e);return i[b]?i(t):i.length>1?(n=[e,e,"",t],r.setFilters.hasOwnProperty(e.toLowerCase())?se(function(e,n){var r,o=i(e,t),a=o.length;while(a--)e[r=O(e,o[a])]=!(n[r]=o[a])}):function(e){return i(e,0,n)}):i}},pseudos:{not:se(function(e){var t=[],n=[],r=s(e.replace(B,"$1"));return r[b]?se(function(e,t,n,i){var o,a=r(e,null,i,[]),s=e.length;while(s--)(o=a[s])&&(e[s]=!(t[s]=o))}):function(e,i,o){return t[0]=e,r(t,null,o,n),t[0]=null,!n.pop()}}),has:se(function(e){return function(t){return oe(e,t).length>0}}),contains:se(function(e){return e=e.replace(Z,ee),function(t){return(t.textContent||t.innerText||i(t)).indexOf(e)>-1}}),lang:se(function(e){return U.test(e||"")||oe.error("unsupported lang: "+e),e=e.replace(Z,ee).toLowerCase(),function(t){var n;do{if(n=g?t.lang:t.getAttribute("xml:lang")||t.getAttribute("lang"))return(n=n.toLowerCase())===e||0===n.indexOf(e+"-")}while((t=t.parentNode)&&1===t.nodeType);return!1}}),target:function(t){var n=e.location&&e.location.hash;return n&&n.slice(1)===t.id},root:function(e){return e===h},focus:function(e){return e===d.activeElement&&(!d.hasFocus||d.hasFocus())&&!!(e.type||e.href||~e.tabIndex)},enabled:de(!1),disabled:de(!0),checked:function(e){var t=e.nodeName.toLowerCase();return"input"===t&&!!e.checked||"option"===t&&!!e.selected},selected:function(e){return e.parentNode&&e.parentNode.selectedIndex,!0===e.selected},empty:function(e){for(e=e.firstChild;e;e=e.nextSibling)if(e.nodeType<6)return!1;return!0},parent:function(e){return!r.pseudos.empty(e)},header:function(e){return Y.test(e.nodeName)},input:function(e){return G.test(e.nodeName)},button:function(e){var t=e.nodeName.toLowerCase();return"input"===t&&"button"===e.type||"button"===t},text:function(e){var t;return"input"===e.nodeName.toLowerCase()&&"text"===e.type&&(null==(t=e.getAttribute("type"))||"text"===t.toLowerCase())},first:he(function(){return[0]}),last:he(function(e,t){return[t-1]}),eq:he(function(e,t,n){return[n<0?n+t:n]}),even:he(function(e,t){for(var n=0;n<t;n+=2)e.push(n);return e}),odd:he(function(e,t){for(var n=1;n<t;n+=2)e.push(n);return e}),lt:he(function(e,t,n){for(var r=n<0?n+t:n;--r>=0;)e.push(r);return e}),gt:he(function(e,t,n){for(var r=n<0?n+t:n;++r<t;)e.push(r);return e})}}).pseudos.nth=r.pseudos.eq;for(t in{radio:!0,checkbox:!0,file:!0,password:!0,image:!0})r.pseudos[t]=fe(t);for(t in{submit:!0,reset:!0})r.pseudos[t]=pe(t);function ye(){}ye.prototype=r.filters=r.pseudos,r.setFilters=new ye,a=oe.tokenize=function(e,t){var n,i,o,a,s,u,l,c=k[e+" "];if(c)return t?0:c.slice(0);s=e,u=[],l=r.preFilter;while(s){n&&!(i=F.exec(s))||(i&&(s=s.slice(i[0].length)||s),u.push(o=[])),n=!1,(i=_.exec(s))&&(n=i.shift(),o.push({value:n,type:i[0].replace(B," ")}),s=s.slice(n.length));for(a in r.filter)!(i=V[a].exec(s))||l[a]&&!(i=l[a](i))||(n=i.shift(),o.push({value:n,type:a,matches:i}),s=s.slice(n.length));if(!n)break}return t?s.length:s?oe.error(e):k(e,u).slice(0)};function ve(e){for(var t=0,n=e.length,r="";t<n;t++)r+=e[t].value;return r}function me(e,t,n){var r=t.dir,i=t.next,o=i||r,a=n&&"parentNode"===o,s=C++;return t.first?function(t,n,i){while(t=t[r])if(1===t.nodeType||a)return e(t,n,i);return!1}:function(t,n,u){var l,c,f,p=[T,s];if(u){while(t=t[r])if((1===t.nodeType||a)&&e(t,n,u))return!0}else while(t=t[r])if(1===t.nodeType||a)if(f=t[b]||(t[b]={}),c=f[t.uniqueID]||(f[t.uniqueID]={}),i&&i===t.nodeName.toLowerCase())t=t[r]||t;else{if((l=c[o])&&l[0]===T&&l[1]===s)return p[2]=l[2];if(c[o]=p,p[2]=e(t,n,u))return!0}return!1}}function xe(e){return e.length>1?function(t,n,r){var i=e.length;while(i--)if(!e[i](t,n,r))return!1;return!0}:e[0]}function be(e,t,n){for(var r=0,i=t.length;r<i;r++)oe(e,t[r],n);return n}function we(e,t,n,r,i){for(var o,a=[],s=0,u=e.length,l=null!=t;s<u;s++)(o=e[s])&&(n&&!n(o,r,i)||(a.push(o),l&&t.push(s)));return a}function Te(e,t,n,r,i,o){return r&&!r[b]&&(r=Te(r)),i&&!i[b]&&(i=Te(i,o)),se(function(o,a,s,u){var l,c,f,p=[],d=[],h=a.length,g=o||be(t||"*",s.nodeType?[s]:s,[]),y=!e||!o&&t?g:we(g,p,e,s,u),v=n?i||(o?e:h||r)?[]:a:y;if(n&&n(y,v,s,u),r){l=we(v,d),r(l,[],s,u),c=l.length;while(c--)(f=l[c])&&(v[d[c]]=!(y[d[c]]=f))}if(o){if(i||e){if(i){l=[],c=v.length;while(c--)(f=v[c])&&l.push(y[c]=f);i(null,v=[],l,u)}c=v.length;while(c--)(f=v[c])&&(l=i?O(o,f):p[c])>-1&&(o[l]=!(a[l]=f))}}else v=we(v===a?v.splice(h,v.length):v),i?i(null,a,v,u):L.apply(a,v)})}function Ce(e){for(var t,n,i,o=e.length,a=r.relative[e[0].type],s=a||r.relative[" "],u=a?1:0,c=me(function(e){return e===t},s,!0),f=me(function(e){return O(t,e)>-1},s,!0),p=[function(e,n,r){var i=!a&&(r||n!==l)||((t=n).nodeType?c(e,n,r):f(e,n,r));return t=null,i}];u<o;u++)if(n=r.relative[e[u].type])p=[me(xe(p),n)];else{if((n=r.filter[e[u].type].apply(null,e[u].matches))[b]){for(i=++u;i<o;i++)if(r.relative[e[i].type])break;return Te(u>1&&xe(p),u>1&&ve(e.slice(0,u-1).concat({value:" "===e[u-2].type?"*":""})).replace(B,"$1"),n,u<i&&Ce(e.slice(u,i)),i<o&&Ce(e=e.slice(i)),i<o&&ve(e))}p.push(n)}return xe(p)}function Ee(e,t){var n=t.length>0,i=e.length>0,o=function(o,a,s,u,c){var f,h,y,v=0,m="0",x=o&&[],b=[],w=l,C=o||i&&r.find.TAG("*",c),E=T+=null==w?1:Math.random()||.1,k=C.length;for(c&&(l=a===d||a||c);m!==k&&null!=(f=C[m]);m++){if(i&&f){h=0,a||f.ownerDocument===d||(p(f),s=!g);while(y=e[h++])if(y(f,a||d,s)){u.push(f);break}c&&(T=E)}n&&((f=!y&&f)&&v--,o&&x.push(f))}if(v+=m,n&&m!==v){h=0;while(y=t[h++])y(x,b,a,s);if(o){if(v>0)while(m--)x[m]||b[m]||(b[m]=j.call(u));b=we(b)}L.apply(u,b),c&&!o&&b.length>0&&v+t.length>1&&oe.uniqueSort(u)}return c&&(T=E,l=w),x};return n?se(o):o}return s=oe.compile=function(e,t){var n,r=[],i=[],o=S[e+" "];if(!o){t||(t=a(e)),n=t.length;while(n--)(o=Ce(t[n]))[b]?r.push(o):i.push(o);(o=S(e,Ee(i,r))).selector=e}return o},u=oe.select=function(e,t,n,i){var o,u,l,c,f,p="function"==typeof e&&e,d=!i&&a(e=p.selector||e);if(n=n||[],1===d.length){if((u=d[0]=d[0].slice(0)).length>2&&"ID"===(l=u[0]).type&&9===t.nodeType&&g&&r.relative[u[1].type]){if(!(t=(r.find.ID(l.matches[0].replace(Z,ee),t)||[])[0]))return n;p&&(t=t.parentNode),e=e.slice(u.shift().value.length)}o=V.needsContext.test(e)?0:u.length;while(o--){if(l=u[o],r.relative[c=l.type])break;if((f=r.find[c])&&(i=f(l.matches[0].replace(Z,ee),K.test(u[0].type)&&ge(t.parentNode)||t))){if(u.splice(o,1),!(e=i.length&&ve(u)))return L.apply(n,i),n;break}}}return(p||s(e,d))(i,t,!g,n,!t||K.test(e)&&ge(t.parentNode)||t),n},n.sortStable=b.split("").sort(D).join("")===b,n.detectDuplicates=!!f,p(),n.sortDetached=ue(function(e){return 1&e.compareDocumentPosition(d.createElement("fieldset"))}),ue(function(e){return e.innerHTML="<a href='#'><\/a>","#"===e.firstChild.getAttribute("href")})||le("type|href|height|width",function(e,t,n){if(!n)return e.getAttribute(t,"type"===t.toLowerCase()?1:2)}),n.attributes&&ue(function(e){return e.innerHTML="<input\/>",e.firstChild.setAttribute("value",""),""===e.firstChild.getAttribute("value")})||le("value",function(e,t,n){if(!n&&"input"===e.nodeName.toLowerCase())return e.defaultValue}),ue(function(e){return null==e.getAttribute("disabled")})||le(P,function(e,t,n){var r;if(!n)return!0===e[t]?t.toLowerCase():(r=e.getAttributeNode(t))&&r.specified?r.value:null}),oe}(e);w.find=E,w.expr=E.selectors,w.expr[":"]=w.expr.pseudos,w.uniqueSort=w.unique=E.uniqueSort,w.text=E.getText,w.isXMLDoc=E.isXML,w.contains=E.contains,w.escapeSelector=E.escape;var k=function(e,t,n){var r=[],i=void 0!==n;while((e=e[t])&&9!==e.nodeType)if(1===e.nodeType){if(i&&w(e).is(n))break;r.push(e)}return r},S=function(e,t){for(var n=[];e;e=e.nextSibling)1===e.nodeType&&e!==t&&n.push(e);return n},D=w.expr.match.needsContext;function N(e,t){return e.nodeName&&e.nodeName.toLowerCase()===t.toLowerCase()}var A=\/^<([a-z][^\\\/\\0>:\\x20\\t\\r\\n\\f]*)[\\x20\\t\\r\\n\\f]*\\\/?>(?:<\\\/\\1>|)$\/i;function j(e,t,n){return g(t)?w.grep(e,function(e,r){return!!t.call(e,r,e)!==n}):t.nodeType?w.grep(e,function(e){return e===t!==n}):"string"!=typeof t?w.grep(e,function(e){return u.call(t,e)>-1!==n}):w.filter(t,e,n)}w.filter=function(e,t,n){var r=t[0];return n&&(e=":not("+e+")"),1===t.length&&1===r.nodeType?w.find.matchesSelector(r,e)?[r]:[]:w.find.matches(e,w.grep(t,function(e){return 1===e.nodeType}))},w.fn.extend({find:function(e){var t,n,r=this.length,i=this;if("string"!=typeof e)return this.pushStack(w(e).filter(function(){for(t=0;t<r;t++)if(w.contains(i[t],this))return!0}));for(n=this.pushStack([]),t=0;t<r;t++)w.find(e,i[t],n);return r>1?w.uniqueSort(n):n},filter:function(e){return this.pushStack(j(this,e||[],!1))},not:function(e){return this.pushStack(j(this,e||[],!0))},is:function(e){return!!j(this,"string"==typeof e&&D.test(e)?w(e):e||[],!1).length}});var q,L=\/^(?:\\s*(<[\\w\\W]+>)[^>]*|#([\\w-]+))$\/;(w.fn.init=function(e,t,n){var i,o;if(!e)return this;if(n=n||q,"string"==typeof e){if(!(i="<"===e[0]&&">"===e[e.length-1]&&e.length>=3?[null,e,null]:L.exec(e))||!i[1]&&t)return!t||t.jquery?(t||n).find(e):this.constructor(t).find(e);if(i[1]){if(t=t instanceof w?t[0]:t,w.merge(this,w.parseHTML(i[1],t&&t.nodeType?t.ownerDocument||t:r,!0)),A.test(i[1])&&w.isPlainObject(t))for(i in t)g(this[i])?this[i](t[i]):this.attr(i,t[i]);return this}return(o=r.getElementById(i[2]))&&(this[0]=o,this.length=1),this}return e.nodeType?(this[0]=e,this.length=1,this):g(e)?void 0!==n.ready?n.ready(e):e(w):w.makeArray(e,this)}).prototype=w.fn,q=w(r);var H=\/^(?:parents|prev(?:Until|All))\/,O={children:!0,contents:!0,next:!0,prev:!0};w.fn.extend({has:function(e){var t=w(e,this),n=t.length;return this.filter(function(){for(var e=0;e<n;e++)if(w.contains(this,t[e]))return!0})},closest:function(e,t){var n,r=0,i=this.length,o=[],a="string"!=typeof e&&w(e);if(!D.test(e))for(;r<i;r++)for(n=this[r];n&&n!==t;n=n.parentNode)if(n.nodeType<11&&(a?a.index(n)>-1:1===n.nodeType&&w.find.matchesSelector(n,e))){o.push(n);break}return this.pushStack(o.length>1?w.uniqueSort(o):o)},index:function(e){return e?"string"==typeof e?u.call(w(e),this[0]):u.call(this,e.jquery?e[0]:e):this[0]&&this[0].parentNode?this.first().prevAll().length:-1},add:function(e,t){return this.pushStack(w.uniqueSort(w.merge(this.get(),w(e,t))))},addBack:function(e){return this.add(null==e?this.prevObject:this.prevObject.filter(e))}});function P(e,t){while((e=e[t])&&1!==e.nodeType);return e}w.each({parent:function(e){var t=e.parentNode;return t&&11!==t.nodeType?t:null},parents:function(e){return k(e,"parentNode")},parentsUntil:function(e,t,n){return k(e,"parentNode",n)},next:function(e){return P(e,"nextSibling")},prev:function(e){return P(e,"previousSibling")},nextAll:function(e){return k(e,"nextSibling")},prevAll:function(e){return k(e,"previousSibling")},nextUntil:function(e,t,n){return k(e,"nextSibling",n)},prevUntil:function(e,t,n){return k(e,"previousSibling",n)},siblings:function(e){return S((e.parentNode||{}).firstChild,e)},children:function(e){return S(e.firstChild)},contents:function(e){return N(e,"iframe")?e.contentDocument:(N(e,"template")&&(e=e.content||e),w.merge([],e.childNodes))}},function(e,t){w.fn[e]=function(n,r){var i=w.map(this,t,n);return"Until"!==e.slice(-5)&&(r=n),r&&"string"==typeof r&&(i=w.filter(r,i)),this.length>1&&(O[e]||w.uniqueSort(i),H.test(e)&&i.reverse()),this.pushStack(i)}});var M=\/[^\\x20\\t\\r\\n\\f]+\/g;function R(e){var t={};return w.each(e.match(M)||[],function(e,n){t[n]=!0}),t}w.Callbacks=function(e){e="string"==typeof e?R(e):w.extend({},e);var t,n,r,i,o=[],a=[],s=-1,u=function(){for(i=i||e.once,r=t=!0;a.length;s=-1){n=a.shift();while(++s<o.length)!1===o[s].apply(n[0],n[1])&&e.stopOnFalse&&(s=o.length,n=!1)}e.memory||(n=!1),t=!1,i&&(o=n?[]:"")},l={add:function(){return o&&(n&&!t&&(s=o.length-1,a.push(n)),function t(n){w.each(n,function(n,r){g(r)?e.unique&&l.has(r)||o.push(r):r&&r.length&&"string"!==x(r)&&t(r)})}(arguments),n&&!t&&u()),this},remove:function(){return w.each(arguments,function(e,t){var n;while((n=w.inArray(t,o,n))>-1)o.splice(n,1),n<=s&&s--}),this},has:function(e){return e?w.inArray(e,o)>-1:o.length>0},empty:function(){return o&&(o=[]),this},disable:function(){return i=a=[],o=n="",this},disabled:function(){return!o},lock:function(){return i=a=[],n||t||(o=n=""),this},locked:function(){return!!i},fireWith:function(e,n){return i||(n=[e,(n=n||[]).slice?n.slice():n],a.push(n),t||u()),this},fire:function(){return l.fireWith(this,arguments),this},fired:function(){return!!r}};return l};function I(e){return e}function W(e){throw e}function $(e,t,n,r){var i;try{e&&g(i=e.promise)?i.call(e).done(t).fail(n):e&&g(i=e.then)?i.call(e,t,n):t.apply(void 0,[e].slice(r))}catch(e){n.apply(void 0,[e])}}w.extend({Deferred:function(t){var n=[["notify","progress",w.Callbacks("memory"),w.Callbacks("memory"),2],["resolve","done",w.Callbacks("once memory"),w.Callbacks("once memory"),0,"resolved"],["reject","fail",w.Callbacks("once memory"),w.Callbacks("once memory"),1,"rejected"]],r="pending",i={state:function(){return r},always:function(){return o.done(arguments).fail(arguments),this},"catch":function(e){return i.then(null,e)},pipe:function(){var e=arguments;return w.Deferred(function(t){w.each(n,function(n,r){var i=g(e[r[4]])&&e[r[4]];o[r[1]](function(){var e=i&&i.apply(this,arguments);e&&g(e.promise)?e.promise().progress(t.notify).done(t.resolve).fail(t.reject):t[r[0]+"With"](this,i?[e]:arguments)})}),e=null}).promise()},then:function(t,r,i){var o=0;function a(t,n,r,i){return function(){var s=this,u=arguments,l=function(){var e,l;if(!(t<o)){if((e=r.apply(s,u))===n.promise())throw new TypeError("Thenable self-resolution");l=e&&("object"==typeof e||"function"==typeof e)&&e.then,g(l)?i?l.call(e,a(o,n,I,i),a(o,n,W,i)):(o++,l.call(e,a(o,n,I,i),a(o,n,W,i),a(o,n,I,n.notifyWith))):(r!==I&&(s=void 0,u=[e]),(i||n.resolveWith)(s,u))}},c=i?l:function(){try{l()}catch(e){w.Deferred.exceptionHook&&w.Deferred.exceptionHook(e,c.stackTrace),t+1>=o&&(r!==W&&(s=void 0,u=[e]),n.rejectWith(s,u))}};t?c():(w.Deferred.getStackHook&&(c.stackTrace=w.Deferred.getStackHook()),e.setTimeout(c))}}return w.Deferred(function(e){n[0][3].add(a(0,e,g(i)?i:I,e.notifyWith)),n[1][3].add(a(0,e,g(t)?t:I)),n[2][3].add(a(0,e,g(r)?r:W))}).promise()},promise:function(e){return null!=e?w.extend(e,i):i}},o={};return w.each(n,function(e,t){var a=t[2],s=t[5];i[t[1]]=a.add,s&&a.add(function(){r=s},n[3-e][2].disable,n[3-e][3].disable,n[0][2].lock,n[0][3].lock),a.add(t[3].fire),o[t[0]]=function(){return o[t[0]+"With"](this===o?void 0:this,arguments),this},o[t[0]+"With"]=a.fireWith}),i.promise(o),t&&t.call(o,o),o},when:function(e){var t=arguments.length,n=t,r=Array(n),i=o.call(arguments),a=w.Deferred(),s=function(e){return function(n){r[e]=this,i[e]=arguments.length>1?o.call(arguments):n,--t||a.resolveWith(r,i)}};if(t<=1&&($(e,a.done(s(n)).resolve,a.reject,!t),"pending"===a.state()||g(i[n]&&i[n].then)))return a.then();while(n--)$(i[n],s(n),a.reject);return a.promise()}});var B=\/^(Eval|Internal|Range|Reference|Syntax|Type|URI)Error$\/;w.Deferred.exceptionHook=function(t,n){e.console&&e.console.warn&&t&&B.test(t.name)&&e.console.warn("jQuery.Deferred exception: "+t.message,t.stack,n)},w.readyException=function(t){e.setTimeout(function(){throw t})};var F=w.Deferred();w.fn.ready=function(e){return F.then(e)["catch"](function(e){w.readyException(e)}),this},w.extend({isReady:!1,readyWait:1,ready:function(e){(!0===e?--w.readyWait:w.isReady)||(w.isReady=!0,!0!==e&&--w.readyWait>0||F.resolveWith(r,[w]))}}),w.ready.then=F.then;function _(){r.removeEventListener("DOMContentLoaded",_),e.removeEventListener("load",_),w.ready()}"complete"===r.readyState||"loading"!==r.readyState&&!r.documentElement.doScroll?e.setTimeout(w.ready):(r.addEventListener("DOMContentLoaded",_),e.addEventListener("load",_));var z=function(e,t,n,r,i,o,a){var s=0,u=e.length,l=null==n;if("object"===x(n)){i=!0;for(s in n)z(e,t,s,n[s],!0,o,a)}else if(void 0!==r&&(i=!0,g(r)||(a=!0),l&&(a?(t.call(e,r),t=null):(l=t,t=function(e,t,n){return l.call(w(e),n)})),t))for(;s<u;s++)t(e[s],n,a?r:r.call(e[s],s,t(e[s],n)));return i?e:l?t.call(e):u?t(e[0],n):o},X=\/^-ms-\/,U=\/-([a-z])\/g;function V(e,t){return t.toUpperCase()}function G(e){return e.replace(X,"ms-").replace(U,V)}var Y=function(e){return 1===e.nodeType||9===e.nodeType||!+e.nodeType};function Q(){this.expando=w.expando+Q.uid++}Q.uid=1,Q.prototype={cache:function(e){var t=e[this.expando];return t||(t={},Y(e)&&(e.nodeType?e[this.expando]=t:Object.defineProperty(e,this.expando,{value:t,configurable:!0}))),t},set:function(e,t,n){var r,i=this.cache(e);if("string"==typeof t)i[G(t)]=n;else for(r in t)i[G(r)]=t[r];return i},get:function(e,t){return void 0===t?this.cache(e):e[this.expando]&&e[this.expando][G(t)]},access:function(e,t,n){return void 0===t||t&&"string"==typeof t&&void 0===n?this.get(e,t):(this.set(e,t,n),void 0!==n?n:t)},remove:function(e,t){var n,r=e[this.expando];if(void 0!==r){if(void 0!==t){n=(t=Array.isArray(t)?t.map(G):(t=G(t))in r?[t]:t.match(M)||[]).length;while(n--)delete r[t[n]]}(void 0===t||w.isEmptyObject(r))&&(e.nodeType?e[this.expando]=void 0:delete e[this.expando])}},hasData:function(e){var t=e[this.expando];return void 0!==t&&!w.isEmptyObject(t)}};var J=new Q,K=new Q,Z=\/^(?:\\{[\\w\\W]*\\}|\\[[\\w\\W]*\\])$\/,ee=\/[A-Z]\/g;function te(e){return"true"===e||"false"!==e&&("null"===e?null:e===+e+""?+e:Z.test(e)?JSON.parse(e):e)}function ne(e,t,n){var r;if(void 0===n&&1===e.nodeType)if(r="data-"+t.replace(ee,"-$&").toLowerCase(),"string"==typeof(n=e.getAttribute(r))){try{n=te(n)}catch(e){}K.set(e,t,n)}else n=void 0;return n}w.extend({hasData:function(e){return K.hasData(e)||J.hasData(e)},data:function(e,t,n){return K.access(e,t,n)},removeData:function(e,t){K.remove(e,t)},_data:function(e,t,n){return J.access(e,t,n)},_removeData:function(e,t){J.remove(e,t)}}),w.fn.extend({data:function(e,t){var n,r,i,o=this[0],a=o&&o.attributes;if(void 0===e){if(this.length&&(i=K.get(o),1===o.nodeType&&!J.get(o,"hasDataAttrs"))){n=a.length;while(n--)a[n]&&0===(r=a[n].name).indexOf("data-")&&(r=G(r.slice(5)),ne(o,r,i[r]));J.set(o,"hasDataAttrs",!0)}return i}return"object"==typeof e?this.each(function(){K.set(this,e)}):z(this,function(t){var n;if(o&&void 0===t){if(void 0!==(n=K.get(o,e)))return n;if(void 0!==(n=ne(o,e)))return n}else this.each(function(){K.set(this,e,t)})},null,t,arguments.length>1,null,!0)},removeData:function(e){return this.each(function(){K.remove(this,e)})}}),w.extend({queue:function(e,t,n){var r;if(e)return t=(t||"fx")+"queue",r=J.get(e,t),n&&(!r||Array.isArray(n)?r=J.access(e,t,w.makeArray(n)):r.push(n)),r||[]},dequeue:function(e,t){t=t||"fx";var n=w.queue(e,t),r=n.length,i=n.shift(),o=w._queueHooks(e,t),a=function(){w.dequeue(e,t)};"inprogress"===i&&(i=n.shift(),r--),i&&("fx"===t&&n.unshift("inprogress"),delete o.stop,i.call(e,a,o)),!r&&o&&o.empty.fire()},_queueHooks:function(e,t){var n=t+"queueHooks";return J.get(e,n)||J.access(e,n,{empty:w.Callbacks("once memory").add(function(){J.remove(e,[t+"queue",n])})})}}),w.fn.extend({queue:function(e,t){var n=2;return"string"!=typeof e&&(t=e,e="fx",n--),arguments.length<n?w.queue(this[0],e):void 0===t?this:this.each(function(){var n=w.queue(this,e,t);w._queueHooks(this,e),"fx"===e&&"inprogress"!==n[0]&&w.dequeue(this,e)})},dequeue:function(e){return this.each(function(){w.dequeue(this,e)})},clearQueue:function(e){return this.queue(e||"fx",[])},promise:function(e,t){var n,r=1,i=w.Deferred(),o=this,a=this.length,s=function(){--r||i.resolveWith(o,[o])};"string"!=typeof e&&(t=e,e=void 0),e=e||"fx";while(a--)(n=J.get(o[a],e+"queueHooks"))&&n.empty&&(r++,n.empty.add(s));return s(),i.promise(t)}});var re=\/[+-]?(?:\\d*\\.|)\\d+(?:[eE][+-]?\\d+|)\/.source,ie=new RegExp("^(?:([+-])=|)("+re+")([a-z%]*)$","i"),oe=["Top","Right","Bottom","Left"],ae=function(e,t){return"none"===(e=t||e).style.display||""===e.style.display&&w.contains(e.ownerDocument,e)&&"none"===w.css(e,"display")},se=function(e,t,n,r){var i,o,a={};for(o in t)a[o]=e.style[o],e.style[o]=t[o];i=n.apply(e,r||[]);for(o in t)e.style[o]=a[o];return i};function ue(e,t,n,r){var i,o,a=20,s=r?function(){return r.cur()}:function(){return w.css(e,t,"")},u=s(),l=n&&n[3]||(w.cssNumber[t]?"":"px"),c=(w.cssNumber[t]||"px"!==l&&+u)&&ie.exec(w.css(e,t));if(c&&c[3]!==l){u\/=2,l=l||c[3],c=+u||1;while(a--)w.style(e,t,c+l),(1-o)*(1-(o=s()\/u||.5))<=0&&(a=0),c\/=o;c*=2,w.style(e,t,c+l),n=n||[]}return n&&(c=+c||+u||0,i=n[1]?c+(n[1]+1)*n[2]:+n[2],r&&(r.unit=l,r.start=c,r.end=i)),i}var le={};function ce(e){var t,n=e.ownerDocument,r=e.nodeName,i=le[r];return i||(t=n.body.appendChild(n.createElement(r)),i=w.css(t,"display"),t.parentNode.removeChild(t),"none"===i&&(i="block"),le[r]=i,i)}function fe(e,t){for(var n,r,i=[],o=0,a=e.length;o<a;o++)(r=e[o]).style&&(n=r.style.display,t?("none"===n&&(i[o]=J.get(r,"display")||null,i[o]||(r.style.display="")),""===r.style.display&&ae(r)&&(i[o]=ce(r))):"none"!==n&&(i[o]="none",J.set(r,"display",n)));for(o=0;o<a;o++)null!=i[o]&&(e[o].style.display=i[o]);return e}w.fn.extend({show:function(){return fe(this,!0)},hide:function(){return fe(this)},toggle:function(e){return"boolean"==typeof e?e?this.show():this.hide():this.each(function(){ae(this)?w(this).show():w(this).hide()})}});var pe=\/^(?:checkbox|radio)$\/i,de=\/<([a-z][^\\\/\\0>\\x20\\t\\r\\n\\f]+)\/i,he=\/^$|^module$|\\\/(?:java|ecma)script\/i,ge={option:[1,"<select multiple='multiple'>","<\/select>"],thead:[1,"<table>","<\/table>"],col:[2,"<table><colgroup>","<\/colgroup><\/table>"],tr:[2,"<table><tbody>","<\/tbody><\/table>"],td:[3,"<table><tbody><tr>","<\/tr><\/tbody><\/table>"],_default:[0,"",""]};ge.optgroup=ge.option,ge.tbody=ge.tfoot=ge.colgroup=ge.caption=ge.thead,ge.th=ge.td;function ye(e,t){var n;return n="undefined"!=typeof e.getElementsByTagName?e.getElementsByTagName(t||"*"):"undefined"!=typeof e.querySelectorAll?e.querySelectorAll(t||"*"):[],void 0===t||t&&N(e,t)?w.merge([e],n):n}function ve(e,t){for(var n=0,r=e.length;n<r;n++)J.set(e[n],"globalEval",!t||J.get(t[n],"globalEval"))}var me=\/<|&#?\\w+;\/;function xe(e,t,n,r,i){for(var o,a,s,u,l,c,f=t.createDocumentFragment(),p=[],d=0,h=e.length;d<h;d++)if((o=e[d])||0===o)if("object"===x(o))w.merge(p,o.nodeType?[o]:o);else if(me.test(o)){a=a||f.appendChild(t.createElement("div")),s=(de.exec(o)||["",""])[1].toLowerCase(),u=ge[s]||ge._default,a.innerHTML=u[1]+w.htmlPrefilter(o)+u[2],c=u[0];while(c--)a=a.lastChild;w.merge(p,a.childNodes),(a=f.firstChild).textContent=""}else p.push(t.createTextNode(o));f.textContent="",d=0;while(o=p[d++])if(r&&w.inArray(o,r)>-1)i&&i.push(o);else if(l=w.contains(o.ownerDocument,o),a=ye(f.appendChild(o),"script"),l&&ve(a),n){c=0;while(o=a[c++])he.test(o.type||"")&&n.push(o)}return f}!function(){var e=r.createDocumentFragment().appendChild(r.createElement("div")),t=r.createElement("input");t.setAttribute("type","radio"),t.setAttribute("checked","checked"),t.setAttribute("name","t"),e.appendChild(t),h.checkClone=e.cloneNode(!0).cloneNode(!0).lastChild.checked,e.innerHTML="<textarea>x<\/textarea>",h.noCloneChecked=!!e.cloneNode(!0).lastChild.defaultValue}();var be=r.documentElement,we=\/^key\/,Te=\/^(?:mouse|pointer|contextmenu|drag|drop)|click\/,Ce=\/^([^.]*)(?:\\.(.+)|)\/;function Ee(){return!0}function ke(){return!1}function Se(){try{return r.activeElement}catch(e){}}function De(e,t,n,r,i,o){var a,s;if("object"==typeof t){"string"!=typeof n&&(r=r||n,n=void 0);for(s in t)De(e,s,n,r,t[s],o);return e}if(null==r&&null==i?(i=n,r=n=void 0):null==i&&("string"==typeof n?(i=r,r=void 0):(i=r,r=n,n=void 0)),!1===i)i=ke;else if(!i)return e;return 1===o&&(a=i,(i=function(e){return w().off(e),a.apply(this,arguments)}).guid=a.guid||(a.guid=w.guid++)),e.each(function(){w.event.add(this,t,i,r,n)})}w.event={global:{},add:function(e,t,n,r,i){var o,a,s,u,l,c,f,p,d,h,g,y=J.get(e);if(y){n.handler&&(n=(o=n).handler,i=o.selector),i&&w.find.matchesSelector(be,i),n.guid||(n.guid=w.guid++),(u=y.events)||(u=y.events={}),(a=y.handle)||(a=y.handle=function(t){return"undefined"!=typeof w&&w.event.triggered!==t.type?w.event.dispatch.apply(e,arguments):void 0}),l=(t=(t||"").match(M)||[""]).length;while(l--)d=g=(s=Ce.exec(t[l])||[])[1],h=(s[2]||"").split(".").sort(),d&&(f=w.event.special[d]||{},d=(i?f.delegateType:f.bindType)||d,f=w.event.special[d]||{},c=w.extend({type:d,origType:g,data:r,handler:n,guid:n.guid,selector:i,needsContext:i&&w.expr.match.needsContext.test(i),namespace:h.join(".")},o),(p=u[d])||((p=u[d]=[]).delegateCount=0,f.setup&&!1!==f.setup.call(e,r,h,a)||e.addEventListener&&e.addEventListener(d,a)),f.add&&(f.add.call(e,c),c.handler.guid||(c.handler.guid=n.guid)),i?p.splice(p.delegateCount++,0,c):p.push(c),w.event.global[d]=!0)}},remove:function(e,t,n,r,i){var o,a,s,u,l,c,f,p,d,h,g,y=J.hasData(e)&&J.get(e);if(y&&(u=y.events)){l=(t=(t||"").match(M)||[""]).length;while(l--)if(s=Ce.exec(t[l])||[],d=g=s[1],h=(s[2]||"").split(".").sort(),d){f=w.event.special[d]||{},p=u[d=(r?f.delegateType:f.bindType)||d]||[],s=s[2]&&new RegExp("(^|\\\\.)"+h.join("\\\\.(?:.*\\\\.|)")+"(\\\\.|$)"),a=o=p.length;while(o--)c=p[o],!i&&g!==c.origType||n&&n.guid!==c.guid||s&&!s.test(c.namespace)||r&&r!==c.selector&&("**"!==r||!c.selector)||(p.splice(o,1),c.selector&&p.delegateCount--,f.remove&&f.remove.call(e,c));a&&!p.length&&(f.teardown&&!1!==f.teardown.call(e,h,y.handle)||w.removeEvent(e,d,y.handle),delete u[d])}else for(d in u)w.event.remove(e,d+t[l],n,r,!0);w.isEmptyObject(u)&&J.remove(e,"handle events")}},dispatch:function(e){var t=w.event.fix(e),n,r,i,o,a,s,u=new Array(arguments.length),l=(J.get(this,"events")||{})[t.type]||[],c=w.event.special[t.type]||{};for(u[0]=t,n=1;n<arguments.length;n++)u[n]=arguments[n];if(t.delegateTarget=this,!c.preDispatch||!1!==c.preDispatch.call(this,t)){s=w.event.handlers.call(this,t,l),n=0;while((o=s[n++])&&!t.isPropagationStopped()){t.currentTarget=o.elem,r=0;while((a=o.handlers[r++])&&!t.isImmediatePropagationStopped())t.rnamespace&&!t.rnamespace.test(a.namespace)||(t.handleObj=a,t.data=a.data,void 0!==(i=((w.event.special[a.origType]||{}).handle||a.handler).apply(o.elem,u))&&!1===(t.result=i)&&(t.preventDefault(),t.stopPropagation()))}return c.postDispatch&&c.postDispatch.call(this,t),t.result}},handlers:function(e,t){var n,r,i,o,a,s=[],u=t.delegateCount,l=e.target;if(u&&l.nodeType&&!("click"===e.type&&e.button>=1))for(;l!==this;l=l.parentNode||this)if(1===l.nodeType&&("click"!==e.type||!0!==l.disabled)){for(o=[],a={},n=0;n<u;n++)void 0===a[i=(r=t[n]).selector+" "]&&(a[i]=r.needsContext?w(i,this).index(l)>-1:w.find(i,this,null,[l]).length),a[i]&&o.push(r);o.length&&s.push({elem:l,handlers:o})}return l=this,u<t.length&&s.push({elem:l,handlers:t.slice(u)}),s},addProp:function(e,t){Object.defineProperty(w.Event.prototype,e,{enumerable:!0,configurable:!0,get:g(t)?function(){if(this.originalEvent)return t(this.originalEvent)}:function(){if(this.originalEvent)return this.originalEvent[e]},set:function(t){Object.defineProperty(this,e,{enumerable:!0,configurable:!0,writable:!0,value:t})}})},fix:function(e){return e[w.expando]?e:new w.Event(e)},special:{load:{noBubble:!0},focus:{trigger:function(){if(this!==Se()&&this.focus)return this.focus(),!1},delegateType:"focusin"},blur:{trigger:function(){if(this===Se()&&this.blur)return this.blur(),!1},delegateType:"focusout"},click:{trigger:function(){if("checkbox"===this.type&&this.click&&N(this,"input"))return this.click(),!1},_default:function(e){return N(e.target,"a")}},beforeunload:{postDispatch:function(e){void 0!==e.result&&e.originalEvent&&(e.originalEvent.returnValue=e.result)}}}},w.removeEvent=function(e,t,n){e.removeEventListener&&e.removeEventListener(t,n)},w.Event=function(e,t){if(!(this instanceof w.Event))return new w.Event(e,t);e&&e.type?(this.originalEvent=e,this.type=e.type,this.isDefaultPrevented=e.defaultPrevented||void 0===e.defaultPrevented&&!1===e.returnValue?Ee:ke,this.target=e.target&&3===e.target.nodeType?e.target.parentNode:e.target,this.currentTarget=e.currentTarget,this.relatedTarget=e.relatedTarget):this.type=e,t&&w.extend(this,t),this.timeStamp=e&&e.timeStamp||Date.now(),this[w.expando]=!0},w.Event.prototype={constructor:w.Event,isDefaultPrevented:ke,isPropagationStopped:ke,isImmediatePropagationStopped:ke,isSimulated:!1,preventDefault:function(){var e=this.originalEvent;this.isDefaultPrevented=Ee,e&&!this.isSimulated&&e.preventDefault()},stopPropagation:function(){var e=this.originalEvent;this.isPropagationStopped=Ee,e&&!this.isSimulated&&e.stopPropagation()},stopImmediatePropagation:function(){var e=this.originalEvent;this.isImmediatePropagationStopped=Ee,e&&!this.isSimulated&&e.stopImmediatePropagation(),this.stopPropagation()}},w.each({altKey:!0,bubbles:!0,cancelable:!0,changedTouches:!0,ctrlKey:!0,detail:!0,eventPhase:!0,metaKey:!0,pageX:!0,pageY:!0,shiftKey:!0,view:!0,"char":!0,charCode:!0,key:!0,keyCode:!0,button:!0,buttons:!0,clientX:!0,clientY:!0,offsetX:!0,offsetY:!0,pointerId:!0,pointerType:!0,screenX:!0,screenY:!0,targetTouches:!0,toElement:!0,touches:!0,which:function(e){var t=e.button;return null==e.which&&we.test(e.type)?null!=e.charCode?e.charCode:e.keyCode:!e.which&&void 0!==t&&Te.test(e.type)?1&t?1:2&t?3:4&t?2:0:e.which}},w.event.addProp),w.each({mouseenter:"mouseover",mouseleave:"mouseout",pointerenter:"pointerover",pointerleave:"pointerout"},function(e,t){w.event.special[e]={delegateType:t,bindType:t,handle:function(e){var n,r=this,i=e.relatedTarget,o=e.handleObj;return i&&(i===r||w.contains(r,i))||(e.type=o.origType,n=o.handler.apply(this,arguments),e.type=t),n}}}),w.fn.extend({on:function(e,t,n,r){return De(this,e,t,n,r)},one:function(e,t,n,r){return De(this,e,t,n,r,1)},off:function(e,t,n){var r,i;if(e&&e.preventDefault&&e.handleObj)return r=e.handleObj,w(e.delegateTarget).off(r.namespace?r.origType+"."+r.namespace:r.origType,r.selector,r.handler),this;if("object"==typeof e){for(i in e)this.off(i,t,e[i]);return this}return!1!==t&&"function"!=typeof t||(n=t,t=void 0),!1===n&&(n=ke),this.each(function(){w.event.remove(this,e,n,t)})}});var Ne=\/<(?!area|br|col|embed|hr|img|input|link|meta|param)(([a-z][^\\\/\\0>\\x20\\t\\r\\n\\f]*)[^>]*)\\\/>\/gi,Ae=\/<script|<style|<link\/i,je=\/checked\\s*(?:[^=]|=\\s*.checked.)\/i,qe=\/^\\s*<!(?:\\[CDATA\\[|--)|(?:\\]\\]|--)>\\s*$\/g;function Le(e,t){return N(e,"table")&&N(11!==t.nodeType?t:t.firstChild,"tr")?w(e).children("tbody")[0]||e:e}function He(e){return e.type=(null!==e.getAttribute("type"))+"\/"+e.type,e}function Oe(e){return"true\/"===(e.type||"").slice(0,5)?e.type=e.type.slice(5):e.removeAttribute("type"),e}function Pe(e,t){var n,r,i,o,a,s,u,l;if(1===t.nodeType){if(J.hasData(e)&&(o=J.access(e),a=J.set(t,o),l=o.events)){delete a.handle,a.events={};for(i in l)for(n=0,r=l[i].length;n<r;n++)w.event.add(t,i,l[i][n])}K.hasData(e)&&(s=K.access(e),u=w.extend({},s),K.set(t,u))}}function Me(e,t){var n=t.nodeName.toLowerCase();"input"===n&&pe.test(e.type)?t.checked=e.checked:"input"!==n&&"textarea"!==n||(t.defaultValue=e.defaultValue)}function Re(e,t,n,r){t=a.apply([],t);var i,o,s,u,l,c,f=0,p=e.length,d=p-1,y=t[0],v=g(y);if(v||p>1&&"string"==typeof y&&!h.checkClone&&je.test(y))return e.each(function(i){var o=e.eq(i);v&&(t[0]=y.call(this,i,o.html())),Re(o,t,n,r)});if(p&&(i=xe(t,e[0].ownerDocument,!1,e,r),o=i.firstChild,1===i.childNodes.length&&(i=o),o||r)){for(u=(s=w.map(ye(i,"script"),He)).length;f<p;f++)l=i,f!==d&&(l=w.clone(l,!0,!0),u&&w.merge(s,ye(l,"script"))),n.call(e[f],l,f);if(u)for(c=s[s.length-1].ownerDocument,w.map(s,Oe),f=0;f<u;f++)l=s[f],he.test(l.type||"")&&!J.access(l,"globalEval")&&w.contains(c,l)&&(l.src&&"module"!==(l.type||"").toLowerCase()?w._evalUrl&&w._evalUrl(l.src):m(l.textContent.replace(qe,""),c,l))}return e}function Ie(e,t,n){for(var r,i=t?w.filter(t,e):e,o=0;null!=(r=i[o]);o++)n||1!==r.nodeType||w.cleanData(ye(r)),r.parentNode&&(n&&w.contains(r.ownerDocument,r)&&ve(ye(r,"script")),r.parentNode.removeChild(r));return e}w.extend({htmlPrefilter:function(e){return e.replace(Ne,"<$1><\/$2>")},clone:function(e,t,n){var r,i,o,a,s=e.cloneNode(!0),u=w.contains(e.ownerDocument,e);if(!(h.noCloneChecked||1!==e.nodeType&&11!==e.nodeType||w.isXMLDoc(e)))for(a=ye(s),r=0,i=(o=ye(e)).length;r<i;r++)Me(o[r],a[r]);if(t)if(n)for(o=o||ye(e),a=a||ye(s),r=0,i=o.length;r<i;r++)Pe(o[r],a[r]);else Pe(e,s);return(a=ye(s,"script")).length>0&&ve(a,!u&&ye(e,"script")),s},cleanData:function(e){for(var t,n,r,i=w.event.special,o=0;void 0!==(n=e[o]);o++)if(Y(n)){if(t=n[J.expando]){if(t.events)for(r in t.events)i[r]?w.event.remove(n,r):w.removeEvent(n,r,t.handle);n[J.expando]=void 0}n[K.expando]&&(n[K.expando]=void 0)}}}),w.fn.extend({detach:function(e){return Ie(this,e,!0)},remove:function(e){return Ie(this,e)},text:function(e){return z(this,function(e){return void 0===e?w.text(this):this.empty().each(function(){1!==this.nodeType&&11!==this.nodeType&&9!==this.nodeType||(this.textContent=e)})},null,e,arguments.length)},append:function(){return Re(this,arguments,function(e){1!==this.nodeType&&11!==this.nodeType&&9!==this.nodeType||Le(this,e).appendChild(e)})},prepend:function(){return Re(this,arguments,function(e){if(1===this.nodeType||11===this.nodeType||9===this.nodeType){var t=Le(this,e);t.insertBefore(e,t.firstChild)}})},before:function(){return Re(this,arguments,function(e){this.parentNode&&this.parentNode.insertBefore(e,this)})},after:function(){return Re(this,arguments,function(e){this.parentNode&&this.parentNode.insertBefore(e,this.nextSibling)})},empty:function(){for(var e,t=0;null!=(e=this[t]);t++)1===e.nodeType&&(w.cleanData(ye(e,!1)),e.textContent="");return this},clone:function(e,t){return e=null!=e&&e,t=null==t?e:t,this.map(function(){return w.clone(this,e,t)})},html:function(e){return z(this,function(e){var t=this[0]||{},n=0,r=this.length;if(void 0===e&&1===t.nodeType)return t.innerHTML;if("string"==typeof e&&!Ae.test(e)&&!ge[(de.exec(e)||["",""])[1].toLowerCase()]){e=w.htmlPrefilter(e);try{for(;n<r;n++)1===(t=this[n]||{}).nodeType&&(w.cleanData(ye(t,!1)),t.innerHTML=e);t=0}catch(e){}}t&&this.empty().append(e)},null,e,arguments.length)},replaceWith:function(){var e=[];return Re(this,arguments,function(t){var n=this.parentNode;w.inArray(this,e)<0&&(w.cleanData(ye(this)),n&&n.replaceChild(t,this))},e)}}),w.each({appendTo:"append",prependTo:"prepend",insertBefore:"before",insertAfter:"after",replaceAll:"replaceWith"},function(e,t){w.fn[e]=function(e){for(var n,r=[],i=w(e),o=i.length-1,a=0;a<=o;a++)n=a===o?this:this.clone(!0),w(i[a])[t](n),s.apply(r,n.get());return this.pushStack(r)}});var We=new RegExp("^("+re+")(?!px)[a-z%]+$","i"),$e=function(t){var n=t.ownerDocument.defaultView;return n&&n.opener||(n=e),n.getComputedStyle(t)},Be=new RegExp(oe.join("|"),"i");!function(){function t(){if(c){l.style.cssText="position:absolute;left:-11111px;width:60px;margin-top:1px;padding:0;border:0",c.style.cssText="position:relative;display:block;box-sizing:border-box;overflow:scroll;margin:auto;border:1px;padding:1px;width:60%;top:1%",be.appendChild(l).appendChild(c);var t=e.getComputedStyle(c);i="1%"!==t.top,u=12===n(t.marginLeft),c.style.right="60%",s=36===n(t.right),o=36===n(t.width),c.style.position="absolute",a=36===c.offsetWidth||"absolute",be.removeChild(l),c=null}}function n(e){return Math.round(parseFloat(e))}var i,o,a,s,u,l=r.createElement("div"),c=r.createElement("div");c.style&&(c.style.backgroundClip="content-box",c.cloneNode(!0).style.backgroundClip="",h.clearCloneStyle="content-box"===c.style.backgroundClip,w.extend(h,{boxSizingReliable:function(){return t(),o},pixelBoxStyles:function(){return t(),s},pixelPosition:function(){return t(),i},reliableMarginLeft:function(){return t(),u},scrollboxSize:function(){return t(),a}}))}();function Fe(e,t,n){var r,i,o,a,s=e.style;return(n=n||$e(e))&&(""!==(a=n.getPropertyValue(t)||n[t])||w.contains(e.ownerDocument,e)||(a=w.style(e,t)),!h.pixelBoxStyles()&&We.test(a)&&Be.test(t)&&(r=s.width,i=s.minWidth,o=s.maxWidth,s.minWidth=s.maxWidth=s.width=a,a=n.width,s.width=r,s.minWidth=i,s.maxWidth=o)),void 0!==a?a+"":a}function _e(e,t){return{get:function(){if(!e())return(this.get=t).apply(this,arguments);delete this.get}}}var ze=\/^(none|table(?!-c[ea]).+)\/,Xe=\/^--\/,Ue={position:"absolute",visibility:"hidden",display:"block"},Ve={letterSpacing:"0",fontWeight:"400"},Ge=["Webkit","Moz","ms"],Ye=r.createElement("div").style;function Qe(e){if(e in Ye)return e;var t=e[0].toUpperCase()+e.slice(1),n=Ge.length;while(n--)if((e=Ge[n]+t)in Ye)return e}function Je(e){var t=w.cssProps[e];return t||(t=w.cssProps[e]=Qe(e)||e),t}function Ke(e,t,n){var r=ie.exec(t);return r?Math.max(0,r[2]-(n||0))+(r[3]||"px"):t}function Ze(e,t,n,r,i,o){var a="width"===t?1:0,s=0,u=0;if(n===(r?"border":"content"))return 0;for(;a<4;a+=2)"margin"===n&&(u+=w.css(e,n+oe[a],!0,i)),r?("content"===n&&(u-=w.css(e,"padding"+oe[a],!0,i)),"margin"!==n&&(u-=w.css(e,"border"+oe[a]+"Width",!0,i))):(u+=w.css(e,"padding"+oe[a],!0,i),"padding"!==n?u+=w.css(e,"border"+oe[a]+"Width",!0,i):s+=w.css(e,"border"+oe[a]+"Width",!0,i));return!r&&o>=0&&(u+=Math.max(0,Math.ceil(e["offset"+t[0].toUpperCase()+t.slice(1)]-o-u-s-.5))),u}function et(e,t,n){var r=$e(e),i=Fe(e,t,r),o="border-box"===w.css(e,"boxSizing",!1,r),a=o;if(We.test(i)){if(!n)return i;i="auto"}return a=a&&(h.boxSizingReliable()||i===e.style[t]),("auto"===i||!parseFloat(i)&&"inline"===w.css(e,"display",!1,r))&&(i=e["offset"+t[0].toUpperCase()+t.slice(1)],a=!0),(i=parseFloat(i)||0)+Ze(e,t,n||(o?"border":"content"),a,r,i)+"px"}w.extend({cssHooks:{opacity:{get:function(e,t){if(t){var n=Fe(e,"opacity");return""===n?"1":n}}}},cssNumber:{animationIterationCount:!0,columnCount:!0,fillOpacity:!0,flexGrow:!0,flexShrink:!0,fontWeight:!0,lineHeight:!0,opacity:!0,order:!0,orphans:!0,widows:!0,zIndex:!0,zoom:!0},cssProps:{},style:function(e,t,n,r){if(e&&3!==e.nodeType&&8!==e.nodeType&&e.style){var i,o,a,s=G(t),u=Xe.test(t),l=e.style;if(u||(t=Je(s)),a=w.cssHooks[t]||w.cssHooks[s],void 0===n)return a&&"get"in a&&void 0!==(i=a.get(e,!1,r))?i:l[t];"string"==(o=typeof n)&&(i=ie.exec(n))&&i[1]&&(n=ue(e,t,i),o="number"),null!=n&&n===n&&("number"===o&&(n+=i&&i[3]||(w.cssNumber[s]?"":"px")),h.clearCloneStyle||""!==n||0!==t.indexOf("background")||(l[t]="inherit"),a&&"set"in a&&void 0===(n=a.set(e,n,r))||(u?l.setProperty(t,n):l[t]=n))}},css:function(e,t,n,r){var i,o,a,s=G(t);return Xe.test(t)||(t=Je(s)),(a=w.cssHooks[t]||w.cssHooks[s])&&"get"in a&&(i=a.get(e,!0,n)),void 0===i&&(i=Fe(e,t,r)),"normal"===i&&t in Ve&&(i=Ve[t]),""===n||n?(o=parseFloat(i),!0===n||isFinite(o)?o||0:i):i}}),w.each(["height","width"],function(e,t){w.cssHooks[t]={get:function(e,n,r){if(n)return!ze.test(w.css(e,"display"))||e.getClientRects().length&&e.getBoundingClientRect().width?et(e,t,r):se(e,Ue,function(){return et(e,t,r)})},set:function(e,n,r){var i,o=$e(e),a="border-box"===w.css(e,"boxSizing",!1,o),s=r&&Ze(e,t,r,a,o);return a&&h.scrollboxSize()===o.position&&(s-=Math.ceil(e["offset"+t[0].toUpperCase()+t.slice(1)]-parseFloat(o[t])-Ze(e,t,"border",!1,o)-.5)),s&&(i=ie.exec(n))&&"px"!==(i[3]||"px")&&(e.style[t]=n,n=w.css(e,t)),Ke(e,n,s)}}}),w.cssHooks.marginLeft=_e(h.reliableMarginLeft,function(e,t){if(t)return(parseFloat(Fe(e,"marginLeft"))||e.getBoundingClientRect().left-se(e,{marginLeft:0},function(){return e.getBoundingClientRect().left}))+"px"}),w.each({margin:"",padding:"",border:"Width"},function(e,t){w.cssHooks[e+t]={expand:function(n){for(var r=0,i={},o="string"==typeof n?n.split(" "):[n];r<4;r++)i[e+oe[r]+t]=o[r]||o[r-2]||o[0];return i}},"margin"!==e&&(w.cssHooks[e+t].set=Ke)}),w.fn.extend({css:function(e,t){return z(this,function(e,t,n){var r,i,o={},a=0;if(Array.isArray(t)){for(r=$e(e),i=t.length;a<i;a++)o[t[a]]=w.css(e,t[a],!1,r);return o}return void 0!==n?w.style(e,t,n):w.css(e,t)},e,t,arguments.length>1)}});function tt(e,t,n,r,i){return new tt.prototype.init(e,t,n,r,i)}w.Tween=tt,tt.prototype={constructor:tt,init:function(e,t,n,r,i,o){this.elem=e,this.prop=n,this.easing=i||w.easing._default,this.options=t,this.start=this.now=this.cur(),this.end=r,this.unit=o||(w.cssNumber[n]?"":"px")},cur:function(){var e=tt.propHooks[this.prop];return e&&e.get?e.get(this):tt.propHooks._default.get(this)},run:function(e){var t,n=tt.propHooks[this.prop];return this.options.duration?this.pos=t=w.easing[this.easing](e,this.options.duration*e,0,1,this.options.duration):this.pos=t=e,this.now=(this.end-this.start)*t+this.start,this.options.step&&this.options.step.call(this.elem,this.now,this),n&&n.set?n.set(this):tt.propHooks._default.set(this),this}},tt.prototype.init.prototype=tt.prototype,tt.propHooks={_default:{get:function(e){var t;return 1!==e.elem.nodeType||null!=e.elem[e.prop]&&null==e.elem.style[e.prop]?e.elem[e.prop]:(t=w.css(e.elem,e.prop,""))&&"auto"!==t?t:0},set:function(e){w.fx.step[e.prop]?w.fx.step[e.prop](e):1!==e.elem.nodeType||null==e.elem.style[w.cssProps[e.prop]]&&!w.cssHooks[e.prop]?e.elem[e.prop]=e.now:w.style(e.elem,e.prop,e.now+e.unit)}}},tt.propHooks.scrollTop=tt.propHooks.scrollLeft={set:function(e){e.elem.nodeType&&e.elem.parentNode&&(e.elem[e.prop]=e.now)}},w.easing={linear:function(e){return e},swing:function(e){return.5-Math.cos(e*Math.PI)\/2},_default:"swing"},w.fx=tt.prototype.init,w.fx.step={};var nt,rt,it=\/^(?:toggle|show|hide)$\/,ot=\/queueHooks$\/;function at(){rt&&(!1===r.hidden&&e.requestAnimationFrame?e.requestAnimationFrame(at):e.setTimeout(at,w.fx.interval),w.fx.tick())}function st(){return e.setTimeout(function(){nt=void 0}),nt=Date.now()}function ut(e,t){var n,r=0,i={height:e};for(t=t?1:0;r<4;r+=2-t)i["margin"+(n=oe[r])]=i["padding"+n]=e;return t&&(i.opacity=i.width=e),i}function lt(e,t,n){for(var r,i=(pt.tweeners[t]||[]).concat(pt.tweeners["*"]),o=0,a=i.length;o<a;o++)if(r=i[o].call(n,t,e))return r}function ct(e,t,n){var r,i,o,a,s,u,l,c,f="width"in t||"height"in t,p=this,d={},h=e.style,g=e.nodeType&&ae(e),y=J.get(e,"fxshow");n.queue||(null==(a=w._queueHooks(e,"fx")).unqueued&&(a.unqueued=0,s=a.empty.fire,a.empty.fire=function(){a.unqueued||s()}),a.unqueued++,p.always(function(){p.always(function(){a.unqueued--,w.queue(e,"fx").length||a.empty.fire()})}));for(r in t)if(i=t[r],it.test(i)){if(delete t[r],o=o||"toggle"===i,i===(g?"hide":"show")){if("show"!==i||!y||void 0===y[r])continue;g=!0}d[r]=y&&y[r]||w.style(e,r)}if((u=!w.isEmptyObject(t))||!w.isEmptyObject(d)){f&&1===e.nodeType&&(n.overflow=[h.overflow,h.overflowX,h.overflowY],null==(l=y&&y.display)&&(l=J.get(e,"display")),"none"===(c=w.css(e,"display"))&&(l?c=l:(fe([e],!0),l=e.style.display||l,c=w.css(e,"display"),fe([e]))),("inline"===c||"inline-block"===c&&null!=l)&&"none"===w.css(e,"float")&&(u||(p.done(function(){h.display=l}),null==l&&(c=h.display,l="none"===c?"":c)),h.display="inline-block")),n.overflow&&(h.overflow="hidden",p.always(function(){h.overflow=n.overflow[0],h.overflowX=n.overflow[1],h.overflowY=n.overflow[2]})),u=!1;for(r in d)u||(y?"hidden"in y&&(g=y.hidden):y=J.access(e,"fxshow",{display:l}),o&&(y.hidden=!g),g&&fe([e],!0),p.done(function(){g||fe([e]),J.remove(e,"fxshow");for(r in d)w.style(e,r,d[r])})),u=lt(g?y[r]:0,r,p),r in y||(y[r]=u.start,g&&(u.end=u.start,u.start=0))}}function ft(e,t){var n,r,i,o,a;for(n in e)if(r=G(n),i=t[r],o=e[n],Array.isArray(o)&&(i=o[1],o=e[n]=o[0]),n!==r&&(e[r]=o,delete e[n]),(a=w.cssHooks[r])&&"expand"in a){o=a.expand(o),delete e[r];for(n in o)n in e||(e[n]=o[n],t[n]=i)}else t[r]=i}function pt(e,t,n){var r,i,o=0,a=pt.prefilters.length,s=w.Deferred().always(function(){delete u.elem}),u=function(){if(i)return!1;for(var t=nt||st(),n=Math.max(0,l.startTime+l.duration-t),r=1-(n\/l.duration||0),o=0,a=l.tweens.length;o<a;o++)l.tweens[o].run(r);return s.notifyWith(e,[l,r,n]),r<1&&a?n:(a||s.notifyWith(e,[l,1,0]),s.resolveWith(e,[l]),!1)},l=s.promise({elem:e,props:w.extend({},t),opts:w.extend(!0,{specialEasing:{},easing:w.easing._default},n),originalProperties:t,originalOptions:n,startTime:nt||st(),duration:n.duration,tweens:[],createTween:function(t,n){var r=w.Tween(e,l.opts,t,n,l.opts.specialEasing[t]||l.opts.easing);return l.tweens.push(r),r},stop:function(t){var n=0,r=t?l.tweens.length:0;if(i)return this;for(i=!0;n<r;n++)l.tweens[n].run(1);return t?(s.notifyWith(e,[l,1,0]),s.resolveWith(e,[l,t])):s.rejectWith(e,[l,t]),this}}),c=l.props;for(ft(c,l.opts.specialEasing);o<a;o++)if(r=pt.prefilters[o].call(l,e,c,l.opts))return g(r.stop)&&(w._queueHooks(l.elem,l.opts.queue).stop=r.stop.bind(r)),r;return w.map(c,lt,l),g(l.opts.start)&&l.opts.start.call(e,l),l.progress(l.opts.progress).done(l.opts.done,l.opts.complete).fail(l.opts.fail).always(l.opts.always),w.fx.timer(w.extend(u,{elem:e,anim:l,queue:l.opts.queue})),l}w.Animation=w.extend(pt,{tweeners:{"*":[function(e,t){var n=this.createTween(e,t);return ue(n.elem,e,ie.exec(t),n),n}]},tweener:function(e,t){g(e)?(t=e,e=["*"]):e=e.match(M);for(var n,r=0,i=e.length;r<i;r++)n=e[r],pt.tweeners[n]=pt.tweeners[n]||[],pt.tweeners[n].unshift(t)},prefilters:[ct],prefilter:function(e,t){t?pt.prefilters.unshift(e):pt.prefilters.push(e)}}),w.speed=function(e,t,n){var r=e&&"object"==typeof e?w.extend({},e):{complete:n||!n&&t||g(e)&&e,duration:e,easing:n&&t||t&&!g(t)&&t};return w.fx.off?r.duration=0:"number"!=typeof r.duration&&(r.duration in w.fx.speeds?r.duration=w.fx.speeds[r.duration]:r.duration=w.fx.speeds._default),null!=r.queue&&!0!==r.queue||(r.queue="fx"),r.old=r.complete,r.complete=function(){g(r.old)&&r.old.call(this),r.queue&&w.dequeue(this,r.queue)},r},w.fn.extend({fadeTo:function(e,t,n,r){return this.filter(ae).css("opacity",0).show().end().animate({opacity:t},e,n,r)},animate:function(e,t,n,r){var i=w.isEmptyObject(e),o=w.speed(t,n,r),a=function(){var t=pt(this,w.extend({},e),o);(i||J.get(this,"finish"))&&t.stop(!0)};return a.finish=a,i||!1===o.queue?this.each(a):this.queue(o.queue,a)},stop:function(e,t,n){var r=function(e){var t=e.stop;delete e.stop,t(n)};return"string"!=typeof e&&(n=t,t=e,e=void 0),t&&!1!==e&&this.queue(e||"fx",[]),this.each(function(){var t=!0,i=null!=e&&e+"queueHooks",o=w.timers,a=J.get(this);if(i)a[i]&&a[i].stop&&r(a[i]);else for(i in a)a[i]&&a[i].stop&&ot.test(i)&&r(a[i]);for(i=o.length;i--;)o[i].elem!==this||null!=e&&o[i].queue!==e||(o[i].anim.stop(n),t=!1,o.splice(i,1));!t&&n||w.dequeue(this,e)})},finish:function(e){return!1!==e&&(e=e||"fx"),this.each(function(){var t,n=J.get(this),r=n[e+"queue"],i=n[e+"queueHooks"],o=w.timers,a=r?r.length:0;for(n.finish=!0,w.queue(this,e,[]),i&&i.stop&&i.stop.call(this,!0),t=o.length;t--;)o[t].elem===this&&o[t].queue===e&&(o[t].anim.stop(!0),o.splice(t,1));for(t=0;t<a;t++)r[t]&&r[t].finish&&r[t].finish.call(this);delete n.finish})}}),w.each(["toggle","show","hide"],function(e,t){var n=w.fn[t];w.fn[t]=function(e,r,i){return null==e||"boolean"==typeof e?n.apply(this,arguments):this.animate(ut(t,!0),e,r,i)}}),w.each({slideDown:ut("show"),slideUp:ut("hide"),slideToggle:ut("toggle"),fadeIn:{opacity:"show"},fadeOut:{opacity:"hide"},fadeToggle:{opacity:"toggle"}},function(e,t){w.fn[e]=function(e,n,r){return this.animate(t,e,n,r)}}),w.timers=[],w.fx.tick=function(){var e,t=0,n=w.timers;for(nt=Date.now();t<n.length;t++)(e=n[t])()||n[t]!==e||n.splice(t--,1);n.length||w.fx.stop(),nt=void 0},w.fx.timer=function(e){w.timers.push(e),w.fx.start()},w.fx.interval=13,w.fx.start=function(){rt||(rt=!0,at())},w.fx.stop=function(){rt=null},w.fx.speeds={slow:600,fast:200,_default:400},w.fn.delay=function(t,n){return t=w.fx?w.fx.speeds[t]||t:t,n=n||"fx",this.queue(n,function(n,r){var i=e.setTimeout(n,t);r.stop=function(){e.clearTimeout(i)}})},function(){var e=r.createElement("input"),t=r.createElement("select").appendChild(r.createElement("option"));e.type="checkbox",h.checkOn=""!==e.value,h.optSelected=t.selected,(e=r.createElement("input")).value="t",e.type="radio",h.radioValue="t"===e.value}();var dt,ht=w.expr.attrHandle;w.fn.extend({attr:function(e,t){return z(this,w.attr,e,t,arguments.length>1)},removeAttr:function(e){return this.each(function(){w.removeAttr(this,e)})}}),w.extend({attr:function(e,t,n){var r,i,o=e.nodeType;if(3!==o&&8!==o&&2!==o)return"undefined"==typeof e.getAttribute?w.prop(e,t,n):(1===o&&w.isXMLDoc(e)||(i=w.attrHooks[t.toLowerCase()]||(w.expr.match.bool.test(t)?dt:void 0)),void 0!==n?null===n?void w.removeAttr(e,t):i&&"set"in i&&void 0!==(r=i.set(e,n,t))?r:(e.setAttribute(t,n+""),n):i&&"get"in i&&null!==(r=i.get(e,t))?r:null==(r=w.find.attr(e,t))?void 0:r)},attrHooks:{type:{set:function(e,t){if(!h.radioValue&&"radio"===t&&N(e,"input")){var n=e.value;return e.setAttribute("type",t),n&&(e.value=n),t}}}},removeAttr:function(e,t){var n,r=0,i=t&&t.match(M);if(i&&1===e.nodeType)while(n=i[r++])e.removeAttribute(n)}}),dt={set:function(e,t,n){return!1===t?w.removeAttr(e,n):e.setAttribute(n,n),n}},w.each(w.expr.match.bool.source.match(\/\\w+\/g),function(e,t){var n=ht[t]||w.find.attr;ht[t]=function(e,t,r){var i,o,a=t.toLowerCase();return r||(o=ht[a],ht[a]=i,i=null!=n(e,t,r)?a:null,ht[a]=o),i}});var gt=\/^(?:input|select|textarea|button)$\/i,yt=\/^(?:a|area)$\/i;w.fn.extend({prop:function(e,t){return z(this,w.prop,e,t,arguments.length>1)},removeProp:function(e){return this.each(function(){delete this[w.propFix[e]||e]})}}),w.extend({prop:function(e,t,n){var r,i,o=e.nodeType;if(3!==o&&8!==o&&2!==o)return 1===o&&w.isXMLDoc(e)||(t=w.propFix[t]||t,i=w.propHooks[t]),void 0!==n?i&&"set"in i&&void 0!==(r=i.set(e,n,t))?r:e[t]=n:i&&"get"in i&&null!==(r=i.get(e,t))?r:e[t]},propHooks:{tabIndex:{get:function(e){var t=w.find.attr(e,"tabindex");return t?parseInt(t,10):gt.test(e.nodeName)||yt.test(e.nodeName)&&e.href?0:-1}}},propFix:{"for":"htmlFor","class":"className"}}),h.optSelected||(w.propHooks.selected={get:function(e){var t=e.parentNode;return t&&t.parentNode&&t.parentNode.selectedIndex,null},set:function(e){var t=e.parentNode;t&&(t.selectedIndex,t.parentNode&&t.parentNode.selectedIndex)}}),w.each(["tabIndex","readOnly","maxLength","cellSpacing","cellPadding","rowSpan","colSpan","useMap","frameBorder","contentEditable"],function(){w.propFix[this.toLowerCase()]=this});function vt(e){return(e.match(M)||[]).join(" ")}function mt(e){return e.getAttribute&&e.getAttribute("class")||""}function xt(e){return Array.isArray(e)?e:"string"==typeof e?e.match(M)||[]:[]}w.fn.extend({addClass:function(e){var t,n,r,i,o,a,s,u=0;if(g(e))return this.each(function(t){w(this).addClass(e.call(this,t,mt(this)))});if((t=xt(e)).length)while(n=this[u++])if(i=mt(n),r=1===n.nodeType&&" "+vt(i)+" "){a=0;while(o=t[a++])r.indexOf(" "+o+" ")<0&&(r+=o+" ");i!==(s=vt(r))&&n.setAttribute("class",s)}return this},removeClass:function(e){var t,n,r,i,o,a,s,u=0;if(g(e))return this.each(function(t){w(this).removeClass(e.call(this,t,mt(this)))});if(!arguments.length)return this.attr("class","");if((t=xt(e)).length)while(n=this[u++])if(i=mt(n),r=1===n.nodeType&&" "+vt(i)+" "){a=0;while(o=t[a++])while(r.indexOf(" "+o+" ")>-1)r=r.replace(" "+o+" "," ");i!==(s=vt(r))&&n.setAttribute("class",s)}return this},toggleClass:function(e,t){var n=typeof e,r="string"===n||Array.isArray(e);return"boolean"==typeof t&&r?t?this.addClass(e):this.removeClass(e):g(e)?this.each(function(n){w(this).toggleClass(e.call(this,n,mt(this),t),t)}):this.each(function(){var t,i,o,a;if(r){i=0,o=w(this),a=xt(e);while(t=a[i++])o.hasClass(t)?o.removeClass(t):o.addClass(t)}else void 0!==e&&"boolean"!==n||((t=mt(this))&&J.set(this,"__className__",t),this.setAttribute&&this.setAttribute("class",t||!1===e?"":J.get(this,"__className__")||""))})},hasClass:function(e){var t,n,r=0;t=" "+e+" ";while(n=this[r++])if(1===n.nodeType&&(" "+vt(mt(n))+" ").indexOf(t)>-1)return!0;return!1}});var bt=\/\\r\/g;w.fn.extend({val:function(e){var t,n,r,i=this[0];{if(arguments.length)return r=g(e),this.each(function(n){var i;1===this.nodeType&&(null==(i=r?e.call(this,n,w(this).val()):e)?i="":"number"==typeof i?i+="":Array.isArray(i)&&(i=w.map(i,function(e){return null==e?"":e+""})),(t=w.valHooks[this.type]||w.valHooks[this.nodeName.toLowerCase()])&&"set"in t&&void 0!==t.set(this,i,"value")||(this.value=i))});if(i)return(t=w.valHooks[i.type]||w.valHooks[i.nodeName.toLowerCase()])&&"get"in t&&void 0!==(n=t.get(i,"value"))?n:"string"==typeof(n=i.value)?n.replace(bt,""):null==n?"":n}}}),w.extend({valHooks:{option:{get:function(e){var t=w.find.attr(e,"value");return null!=t?t:vt(w.text(e))}},select:{get:function(e){var t,n,r,i=e.options,o=e.selectedIndex,a="select-one"===e.type,s=a?null:[],u=a?o+1:i.length;for(r=o<0?u:a?o:0;r<u;r++)if(((n=i[r]).selected||r===o)&&!n.disabled&&(!n.parentNode.disabled||!N(n.parentNode,"optgroup"))){if(t=w(n).val(),a)return t;s.push(t)}return s},set:function(e,t){var n,r,i=e.options,o=w.makeArray(t),a=i.length;while(a--)((r=i[a]).selected=w.inArray(w.valHooks.option.get(r),o)>-1)&&(n=!0);return n||(e.selectedIndex=-1),o}}}}),w.each(["radio","checkbox"],function(){w.valHooks[this]={set:function(e,t){if(Array.isArray(t))return e.checked=w.inArray(w(e).val(),t)>-1}},h.checkOn||(w.valHooks[this].get=function(e){return null===e.getAttribute("value")?"on":e.value})}),h.focusin="onfocusin"in e;var wt=\/^(?:focusinfocus|focusoutblur)$\/,Tt=function(e){e.stopPropagation()};w.extend(w.event,{trigger:function(t,n,i,o){var a,s,u,l,c,p,d,h,v=[i||r],m=f.call(t,"type")?t.type:t,x=f.call(t,"namespace")?t.namespace.split("."):[];if(s=h=u=i=i||r,3!==i.nodeType&&8!==i.nodeType&&!wt.test(m+w.event.triggered)&&(m.indexOf(".")>-1&&(m=(x=m.split(".")).shift(),x.sort()),c=m.indexOf(":")<0&&"on"+m,t=t[w.expando]?t:new w.Event(m,"object"==typeof t&&t),t.isTrigger=o?2:3,t.namespace=x.join("."),t.rnamespace=t.namespace?new RegExp("(^|\\\\.)"+x.join("\\\\.(?:.*\\\\.|)")+"(\\\\.|$)"):null,t.result=void 0,t.target||(t.target=i),n=null==n?[t]:w.makeArray(n,[t]),d=w.event.special[m]||{},o||!d.trigger||!1!==d.trigger.apply(i,n))){if(!o&&!d.noBubble&&!y(i)){for(l=d.delegateType||m,wt.test(l+m)||(s=s.parentNode);s;s=s.parentNode)v.push(s),u=s;u===(i.ownerDocument||r)&&v.push(u.defaultView||u.parentWindow||e)}a=0;while((s=v[a++])&&!t.isPropagationStopped())h=s,t.type=a>1?l:d.bindType||m,(p=(J.get(s,"events")||{})[t.type]&&J.get(s,"handle"))&&p.apply(s,n),(p=c&&s[c])&&p.apply&&Y(s)&&(t.result=p.apply(s,n),!1===t.result&&t.preventDefault());return t.type=m,o||t.isDefaultPrevented()||d._default&&!1!==d._default.apply(v.pop(),n)||!Y(i)||c&&g(i[m])&&!y(i)&&((u=i[c])&&(i[c]=null),w.event.triggered=m,t.isPropagationStopped()&&h.addEventListener(m,Tt),i[m](),t.isPropagationStopped()&&h.removeEventListener(m,Tt),w.event.triggered=void 0,u&&(i[c]=u)),t.result}},simulate:function(e,t,n){var r=w.extend(new w.Event,n,{type:e,isSimulated:!0});w.event.trigger(r,null,t)}}),w.fn.extend({trigger:function(e,t){return this.each(function(){w.event.trigger(e,t,this)})},triggerHandler:function(e,t){var n=this[0];if(n)return w.event.trigger(e,t,n,!0)}}),h.focusin||w.each({focus:"focusin",blur:"focusout"},function(e,t){var n=function(e){w.event.simulate(t,e.target,w.event.fix(e))};w.event.special[t]={setup:function(){var r=this.ownerDocument||this,i=J.access(r,t);i||r.addEventListener(e,n,!0),J.access(r,t,(i||0)+1)},teardown:function(){var r=this.ownerDocument||this,i=J.access(r,t)-1;i?J.access(r,t,i):(r.removeEventListener(e,n,!0),J.remove(r,t))}}});var Ct=e.location,Et=Date.now(),kt=\/\\?\/;w.parseXML=function(t){var n;if(!t||"string"!=typeof t)return null;try{n=(new e.DOMParser).parseFromString(t,"text\/xml")}catch(e){n=void 0}return n&&!n.getElementsByTagName("parsererror").length||w.error("Invalid XML: "+t),n};var St=\/\\[\\]$\/,Dt=\/\\r?\\n\/g,Nt=\/^(?:submit|button|image|reset|file)$\/i,At=\/^(?:input|select|textarea|keygen)\/i;function jt(e,t,n,r){var i;if(Array.isArray(t))w.each(t,function(t,i){n||St.test(e)?r(e,i):jt(e+"["+("object"==typeof i&&null!=i?t:"")+"]",i,n,r)});else if(n||"object"!==x(t))r(e,t);else for(i in t)jt(e+"["+i+"]",t[i],n,r)}w.param=function(e,t){var n,r=[],i=function(e,t){var n=g(t)?t():t;r[r.length]=encodeURIComponent(e)+"="+encodeURIComponent(null==n?"":n)};if(Array.isArray(e)||e.jquery&&!w.isPlainObject(e))w.each(e,function(){i(this.name,this.value)});else for(n in e)jt(n,e[n],t,i);return r.join("&")},w.fn.extend({serialize:function(){return w.param(this.serializeArray())},serializeArray:function(){return this.map(function(){var e=w.prop(this,"elements");return e?w.makeArray(e):this}).filter(function(){var e=this.type;return this.name&&!w(this).is(":disabled")&&At.test(this.nodeName)&&!Nt.test(e)&&(this.checked||!pe.test(e))}).map(function(e,t){var n=w(this).val();return null==n?null:Array.isArray(n)?w.map(n,function(e){return{name:t.name,value:e.replace(Dt,"\\r\\n")}}):{name:t.name,value:n.replace(Dt,"\\r\\n")}}).get()}});var qt=\/%20\/g,Lt=\/#.*$\/,Ht=\/([?&])_=[^&]*\/,Ot=\/^(.*?):[ \\t]*([^\\r\\n]*)$\/gm,Pt=\/^(?:about|app|app-storage|.+-extension|file|res|widget):$\/,Mt=\/^(?:GET|HEAD)$\/,Rt=\/^\\\/\\\/\/,It={},Wt={},$t="*\/".concat("*"),Bt=r.createElement("a");Bt.href=Ct.href;function Ft(e){return function(t,n){"string"!=typeof t&&(n=t,t="*");var r,i=0,o=t.toLowerCase().match(M)||[];if(g(n))while(r=o[i++])"+"===r[0]?(r=r.slice(1)||"*",(e[r]=e[r]||[]).unshift(n)):(e[r]=e[r]||[]).push(n)}}function _t(e,t,n,r){var i={},o=e===Wt;function a(s){var u;return i[s]=!0,w.each(e[s]||[],function(e,s){var l=s(t,n,r);return"string"!=typeof l||o||i[l]?o?!(u=l):void 0:(t.dataTypes.unshift(l),a(l),!1)}),u}return a(t.dataTypes[0])||!i["*"]&&a("*")}function zt(e,t){var n,r,i=w.ajaxSettings.flatOptions||{};for(n in t)void 0!==t[n]&&((i[n]?e:r||(r={}))[n]=t[n]);return r&&w.extend(!0,e,r),e}function Xt(e,t,n){var r,i,o,a,s=e.contents,u=e.dataTypes;while("*"===u[0])u.shift(),void 0===r&&(r=e.mimeType||t.getResponseHeader("Content-Type"));if(r)for(i in s)if(s[i]&&s[i].test(r)){u.unshift(i);break}if(u[0]in n)o=u[0];else{for(i in n){if(!u[0]||e.converters[i+" "+u[0]]){o=i;break}a||(a=i)}o=o||a}if(o)return o!==u[0]&&u.unshift(o),n[o]}function Ut(e,t,n,r){var i,o,a,s,u,l={},c=e.dataTypes.slice();if(c[1])for(a in e.converters)l[a.toLowerCase()]=e.converters[a];o=c.shift();while(o)if(e.responseFields[o]&&(n[e.responseFields[o]]=t),!u&&r&&e.dataFilter&&(t=e.dataFilter(t,e.dataType)),u=o,o=c.shift())if("*"===o)o=u;else if("*"!==u&&u!==o){if(!(a=l[u+" "+o]||l["* "+o]))for(i in l)if((s=i.split(" "))[1]===o&&(a=l[u+" "+s[0]]||l["* "+s[0]])){!0===a?a=l[i]:!0!==l[i]&&(o=s[0],c.unshift(s[1]));break}if(!0!==a)if(a&&e["throws"])t=a(t);else try{t=a(t)}catch(e){return{state:"parsererror",error:a?e:"No conversion from "+u+" to "+o}}}return{state:"success",data:t}}w.extend({active:0,lastModified:{},etag:{},ajaxSettings:{url:Ct.href,type:"GET",isLocal:Pt.test(Ct.protocol),global:!0,processData:!0,async:!0,contentType:"application\/x-www-form-urlencoded; charset=UTF-8",accepts:{"*":$t,text:"text\/plain",html:"text\/html",xml:"application\/xml, text\/xml",json:"application\/json, text\/javascript"},contents:{xml:\/\\bxml\\b\/,html:\/\\bhtml\/,json:\/\\bjson\\b\/},responseFields:{xml:"responseXML",text:"responseText",json:"responseJSON"},converters:{"* text":String,"text html":!0,"text json":JSON.parse,"text xml":w.parseXML},flatOptions:{url:!0,context:!0}},ajaxSetup:function(e,t){return t?zt(zt(e,w.ajaxSettings),t):zt(w.ajaxSettings,e)},ajaxPrefilter:Ft(It),ajaxTransport:Ft(Wt),ajax:function(t,n){"object"==typeof t&&(n=t,t=void 0),n=n||{};var i,o,a,s,u,l,c,f,p,d,h=w.ajaxSetup({},n),g=h.context||h,y=h.context&&(g.nodeType||g.jquery)?w(g):w.event,v=w.Deferred(),m=w.Callbacks("once memory"),x=h.statusCode||{},b={},T={},C="canceled",E={readyState:0,getResponseHeader:function(e){var t;if(c){if(!s){s={};while(t=Ot.exec(a))s[t[1].toLowerCase()]=t[2]}t=s[e.toLowerCase()]}return null==t?null:t},getAllResponseHeaders:function(){return c?a:null},setRequestHeader:function(e,t){return null==c&&(e=T[e.toLowerCase()]=T[e.toLowerCase()]||e,b[e]=t),this},overrideMimeType:function(e){return null==c&&(h.mimeType=e),this},statusCode:function(e){var t;if(e)if(c)E.always(e[E.status]);else for(t in e)x[t]=[x[t],e[t]];return this},abort:function(e){var t=e||C;return i&&i.abort(t),k(0,t),this}};if(v.promise(E),h.url=((t||h.url||Ct.href)+"").replace(Rt,Ct.protocol+"\/\/"),h.type=n.method||n.type||h.method||h.type,h.dataTypes=(h.dataType||"*").toLowerCase().match(M)||[""],null==h.crossDomain){l=r.createElement("a");try{l.href=h.url,l.href=l.href,h.crossDomain=Bt.protocol+"\/\/"+Bt.host!=l.protocol+"\/\/"+l.host}catch(e){h.crossDomain=!0}}if(h.data&&h.processData&&"string"!=typeof h.data&&(h.data=w.param(h.data,h.traditional)),_t(It,h,n,E),c)return E;(f=w.event&&h.global)&&0==w.active++&&w.event.trigger("ajaxStart"),h.type=h.type.toUpperCase(),h.hasContent=!Mt.test(h.type),o=h.url.replace(Lt,""),h.hasContent?h.data&&h.processData&&0===(h.contentType||"").indexOf("application\/x-www-form-urlencoded")&&(h.data=h.data.replace(qt,"+")):(d=h.url.slice(o.length),h.data&&(h.processData||"string"==typeof h.data)&&(o+=(kt.test(o)?"&":"?")+h.data,delete h.data),!1===h.cache&&(o=o.replace(Ht,"$1"),d=(kt.test(o)?"&":"?")+"_="+Et+++d),h.url=o+d),h.ifModified&&(w.lastModified[o]&&E.setRequestHeader("If-Modified-Since",w.lastModified[o]),w.etag[o]&&E.setRequestHeader("If-None-Match",w.etag[o])),(h.data&&h.hasContent&&!1!==h.contentType||n.contentType)&&E.setRequestHeader("Content-Type",h.contentType),E.setRequestHeader("Accept",h.dataTypes[0]&&h.accepts[h.dataTypes[0]]?h.accepts[h.dataTypes[0]]+("*"!==h.dataTypes[0]?", "+$t+"; q=0.01":""):h.accepts["*"]);for(p in h.headers)E.setRequestHeader(p,h.headers[p]);if(h.beforeSend&&(!1===h.beforeSend.call(g,E,h)||c))return E.abort();if(C="abort",m.add(h.complete),E.done(h.success),E.fail(h.error),i=_t(Wt,h,n,E)){if(E.readyState=1,f&&y.trigger("ajaxSend",[E,h]),c)return E;h.async&&h.timeout>0&&(u=e.setTimeout(function(){E.abort("timeout")},h.timeout));try{c=!1,i.send(b,k)}catch(e){if(c)throw e;k(-1,e)}}else k(-1,"No Transport");function k(t,n,r,s){var l,p,d,b,T,C=n;c||(c=!0,u&&e.clearTimeout(u),i=void 0,a=s||"",E.readyState=t>0?4:0,l=t>=200&&t<300||304===t,r&&(b=Xt(h,E,r)),b=Ut(h,b,E,l),l?(h.ifModified&&((T=E.getResponseHeader("Last-Modified"))&&(w.lastModified[o]=T),(T=E.getResponseHeader("etag"))&&(w.etag[o]=T)),204===t||"HEAD"===h.type?C="nocontent":304===t?C="notmodified":(C=b.state,p=b.data,l=!(d=b.error))):(d=C,!t&&C||(C="error",t<0&&(t=0))),E.status=t,E.statusText=(n||C)+"",l?v.resolveWith(g,[p,C,E]):v.rejectWith(g,[E,C,d]),E.statusCode(x),x=void 0,f&&y.trigger(l?"ajaxSuccess":"ajaxError",[E,h,l?p:d]),m.fireWith(g,[E,C]),f&&(y.trigger("ajaxComplete",[E,h]),--w.active||w.event.trigger("ajaxStop")))}return E},getJSON:function(e,t,n){return w.get(e,t,n,"json")},getScript:function(e,t){return w.get(e,void 0,t,"script")}}),w.each(["get","post"],function(e,t){w[t]=function(e,n,r,i){return g(n)&&(i=i||r,r=n,n=void 0),w.ajax(w.extend({url:e,type:t,dataType:i,data:n,success:r},w.isPlainObject(e)&&e))}}),w._evalUrl=function(e){return w.ajax({url:e,type:"GET",dataType:"script",cache:!0,async:!1,global:!1,"throws":!0})},w.fn.extend({wrapAll:function(e){var t;return this[0]&&(g(e)&&(e=e.call(this[0])),t=w(e,this[0].ownerDocument).eq(0).clone(!0),this[0].parentNode&&t.insertBefore(this[0]),t.map(function(){var e=this;while(e.firstElementChild)e=e.firstElementChild;return e}).append(this)),this},wrapInner:function(e){return g(e)?this.each(function(t){w(this).wrapInner(e.call(this,t))}):this.each(function(){var t=w(this),n=t.contents();n.length?n.wrapAll(e):t.append(e)})},wrap:function(e){var t=g(e);return this.each(function(n){w(this).wrapAll(t?e.call(this,n):e)})},unwrap:function(e){return this.parent(e).not("body").each(function(){w(this).replaceWith(this.childNodes)}),this}}),w.expr.pseudos.hidden=function(e){return!w.expr.pseudos.visible(e)},w.expr.pseudos.visible=function(e){return!!(e.offsetWidth||e.offsetHeight||e.getClientRects().length)},w.ajaxSettings.xhr=function(){try{return new e.XMLHttpRequest}catch(e){}};var Vt={0:200,1223:204},Gt=w.ajaxSettings.xhr();h.cors=!!Gt&&"withCredentials"in Gt,h.ajax=Gt=!!Gt,w.ajaxTransport(function(t){var n,r;if(h.cors||Gt&&!t.crossDomain)return{send:function(i,o){var a,s=t.xhr();if(s.open(t.type,t.url,t.async,t.username,t.password),t.xhrFields)for(a in t.xhrFields)s[a]=t.xhrFields[a];t.mimeType&&s.overrideMimeType&&s.overrideMimeType(t.mimeType),t.crossDomain||i["X-Requested-With"]||(i["X-Requested-With"]="XMLHttpRequest");for(a in i)s.setRequestHeader(a,i[a]);n=function(e){return function(){n&&(n=r=s.onload=s.onerror=s.onabort=s.ontimeout=s.onreadystatechange=null,"abort"===e?s.abort():"error"===e?"number"!=typeof s.status?o(0,"error"):o(s.status,s.statusText):o(Vt[s.status]||s.status,s.statusText,"text"!==(s.responseType||"text")||"string"!=typeof s.responseText?{binary:s.response}:{text:s.responseText},s.getAllResponseHeaders()))}},s.onload=n(),r=s.onerror=s.ontimeout=n("error"),void 0!==s.onabort?s.onabort=r:s.onreadystatechange=function(){4===s.readyState&&e.setTimeout(function(){n&&r()})},n=n("abort");try{s.send(t.hasContent&&t.data||null)}catch(e){if(n)throw e}},abort:function(){n&&n()}}}),w.ajaxPrefilter(function(e){e.crossDomain&&(e.contents.script=!1)}),w.ajaxSetup({accepts:{script:"text\/javascript, application\/javascript, application\/ecmascript, application\/x-ecmascript"},contents:{script:\/\\b(?:java|ecma)script\\b\/},converters:{"text script":function(e){return w.globalEval(e),e}}}),w.ajaxPrefilter("script",function(e){void 0===e.cache&&(e.cache=!1),e.crossDomain&&(e.type="GET")}),w.ajaxTransport("script",function(e){if(e.crossDomain){var t,n;return{send:function(i,o){t=w("<script>").prop({charset:e.scriptCharset,src:e.url}).on("load error",n=function(e){t.remove(),n=null,e&&o("error"===e.type?404:200,e.type)}),r.head.appendChild(t[0])},abort:function(){n&&n()}}}});var Yt=[],Qt=\/(=)\\?(?=&|$)|\\?\\?\/;w.ajaxSetup({jsonp:"callback",jsonpCallback:function(){var e=Yt.pop()||w.expando+"_"+Et++;return this[e]=!0,e}}),w.ajaxPrefilter("json jsonp",function(t,n,r){var i,o,a,s=!1!==t.jsonp&&(Qt.test(t.url)?"url":"string"==typeof t.data&&0===(t.contentType||"").indexOf("application\/x-www-form-urlencoded")&&Qt.test(t.data)&&"data");if(s||"jsonp"===t.dataTypes[0])return i=t.jsonpCallback=g(t.jsonpCallback)?t.jsonpCallback():t.jsonpCallback,s?t[s]=t[s].replace(Qt,"$1"+i):!1!==t.jsonp&&(t.url+=(kt.test(t.url)?"&":"?")+t.jsonp+"="+i),t.converters["script json"]=function(){return a||w.error(i+" was not called"),a[0]},t.dataTypes[0]="json",o=e[i],e[i]=function(){a=arguments},r.always(function(){void 0===o?w(e).removeProp(i):e[i]=o,t[i]&&(t.jsonpCallback=n.jsonpCallback,Yt.push(i)),a&&g(o)&&o(a[0]),a=o=void 0}),"script"}),h.createHTMLDocument=function(){var e=r.implementation.createHTMLDocument("").body;return e.innerHTML="<form><\/form><form><\/form>",2===e.childNodes.length}(),w.parseHTML=function(e,t,n){if("string"!=typeof e)return[];"boolean"==typeof t&&(n=t,t=!1);var i,o,a;return t||(h.createHTMLDocument?((i=(t=r.implementation.createHTMLDocument("")).createElement("base")).href=r.location.href,t.head.appendChild(i)):t=r),o=A.exec(e),a=!n&&[],o?[t.createElement(o[1])]:(o=xe([e],t,a),a&&a.length&&w(a).remove(),w.merge([],o.childNodes))},w.fn.load=function(e,t,n){var r,i,o,a=this,s=e.indexOf(" ");return s>-1&&(r=vt(e.slice(s)),e=e.slice(0,s)),g(t)?(n=t,t=void 0):t&&"object"==typeof t&&(i="POST"),a.length>0&&w.ajax({url:e,type:i||"GET",dataType:"html",data:t}).done(function(e){o=arguments,a.html(r?w("<div>").append(w.parseHTML(e)).find(r):e)}).always(n&&function(e,t){a.each(function(){n.apply(this,o||[e.responseText,t,e])})}),this},w.each(["ajaxStart","ajaxStop","ajaxComplete","ajaxError","ajaxSuccess","ajaxSend"],function(e,t){w.fn[t]=function(e){return this.on(t,e)}}),w.expr.pseudos.animated=function(e){return w.grep(w.timers,function(t){return e===t.elem}).length},w.offset={setOffset:function(e,t,n){var r,i,o,a,s,u,l,c=w.css(e,"position"),f=w(e),p={};"static"===c&&(e.style.position="relative"),s=f.offset(),o=w.css(e,"top"),u=w.css(e,"left"),(l=("absolute"===c||"fixed"===c)&&(o+u).indexOf("auto")>-1)?(a=(r=f.position()).top,i=r.left):(a=parseFloat(o)||0,i=parseFloat(u)||0),g(t)&&(t=t.call(e,n,w.extend({},s))),null!=t.top&&(p.top=t.top-s.top+a),null!=t.left&&(p.left=t.left-s.left+i),"using"in t?t.using.call(e,p):f.css(p)}},w.fn.extend({offset:function(e){if(arguments.length)return void 0===e?this:this.each(function(t){w.offset.setOffset(this,e,t)});var t,n,r=this[0];if(r)return r.getClientRects().length?(t=r.getBoundingClientRect(),n=r.ownerDocument.defaultView,{top:t.top+n.pageYOffset,left:t.left+n.pageXOffset}):{top:0,left:0}},position:function(){if(this[0]){var e,t,n,r=this[0],i={top:0,left:0};if("fixed"===w.css(r,"position"))t=r.getBoundingClientRect();else{t=this.offset(),n=r.ownerDocument,e=r.offsetParent||n.documentElement;while(e&&(e===n.body||e===n.documentElement)&&"static"===w.css(e,"position"))e=e.parentNode;e&&e!==r&&1===e.nodeType&&((i=w(e).offset()).top+=w.css(e,"borderTopWidth",!0),i.left+=w.css(e,"borderLeftWidth",!0))}return{top:t.top-i.top-w.css(r,"marginTop",!0),left:t.left-i.left-w.css(r,"marginLeft",!0)}}},offsetParent:function(){return this.map(function(){var e=this.offsetParent;while(e&&"static"===w.css(e,"position"))e=e.offsetParent;return e||be})}}),w.each({scrollLeft:"pageXOffset",scrollTop:"pageYOffset"},function(e,t){var n="pageYOffset"===t;w.fn[e]=function(r){return z(this,function(e,r,i){var o;if(y(e)?o=e:9===e.nodeType&&(o=e.defaultView),void 0===i)return o?o[t]:e[r];o?o.scrollTo(n?o.pageXOffset:i,n?i:o.pageYOffset):e[r]=i},e,r,arguments.length)}}),w.each(["top","left"],function(e,t){w.cssHooks[t]=_e(h.pixelPosition,function(e,n){if(n)return n=Fe(e,t),We.test(n)?w(e).position()[t]+"px":n})}),w.each({Height:"height",Width:"width"},function(e,t){w.each({padding:"inner"+e,content:t,"":"outer"+e},function(n,r){w.fn[r]=function(i,o){var a=arguments.length&&(n||"boolean"!=typeof i),s=n||(!0===i||!0===o?"margin":"border");return z(this,function(t,n,i){var o;return y(t)?0===r.indexOf("outer")?t["inner"+e]:t.document.documentElement["client"+e]:9===t.nodeType?(o=t.documentElement,Math.max(t.body["scroll"+e],o["scroll"+e],t.body["offset"+e],o["offset"+e],o["client"+e])):void 0===i?w.css(t,n,s):w.style(t,n,i,s)},t,a?i:void 0,a)}})}),w.each("blur focus focusin focusout resize scroll click dblclick mousedown mouseup mousemove mouseover mouseout mouseenter mouseleave change select submit keydown keypress keyup contextmenu".split(" "),function(e,t){w.fn[t]=function(e,n){return arguments.length>0?this.on(t,null,e,n):this.trigger(t)}}),w.fn.extend({hover:function(e,t){return this.mouseenter(e).mouseleave(t||e)}}),w.fn.extend({bind:function(e,t,n){return this.on(e,null,t,n)},unbind:function(e,t){return this.off(e,null,t)},delegate:function(e,t,n,r){return this.on(t,e,n,r)},undelegate:function(e,t,n){return 1===arguments.length?this.off(e,"**"):this.off(t,e||"**",n)}}),w.proxy=function(e,t){var n,r,i;if("string"==typeof t&&(n=e[t],t=e,e=n),g(e))return r=o.call(arguments,2),i=function(){return e.apply(t||this,r.concat(o.call(arguments)))},i.guid=e.guid=e.guid||w.guid++,i},w.holdReady=function(e){e?w.readyWait++:w.ready(!0)},w.isArray=Array.isArray,w.parseJSON=JSON.parse,w.nodeName=N,w.isFunction=g,w.isWindow=y,w.camelCase=G,w.type=x,w.now=Date.now,w.isNumeric=function(e){var t=w.type(e);return("number"===t||"string"===t)&&!isNaN(e-parseFloat(e))},"function"==typeof define&&define.amd&&define("jquery",[],function(){return w});var Jt=e.jQuery,Kt=e.$;return w.noConflict=function(t){return e.$===w&&(e.$=Kt),t&&e.jQuery===w&&(e.jQuery=Jt),w},t||(e.jQuery=e.$=w),w});$/;"	f
e	public\static\live\js\jquery-3.3.1.min.js	/^!function(e,t){"use strict";"object"==typeof module&&"object"==typeof module.exports?module.exports=e.document?t(e,!0):function(e){if(!e.document)throw new Error("jQuery requires a window with a document");return t(e)}:t(e)}("undefined"!=typeof window?window:this,function(e,t){"use strict";var n=[],r=e.document,i=Object.getPrototypeOf,o=n.slice,a=n.concat,s=n.push,u=n.indexOf,l={},c=l.toString,f=l.hasOwnProperty,p=f.toString,d=p.call(Object),h={},g=function e(t){return"function"==typeof t&&"number"!=typeof t.nodeType},y=function e(t){return null!=t&&t===t.window},v={type:!0,src:!0,noModule:!0};function m(e,t,n){var i,o=(t=t||r).createElement("script");if(o.text=e,n)for(i in v)n[i]&&(o[i]=n[i]);t.head.appendChild(o).parentNode.removeChild(o)}function x(e){return null==e?e+"":"object"==typeof e||"function"==typeof e?l[c.call(e)]||"object":typeof e}var b="3.3.1",w=function(e,t){return new w.fn.init(e,t)},T=\/^[\\s\\uFEFF\\xA0]+|[\\s\\uFEFF\\xA0]+$\/g;w.fn=w.prototype={jquery:"3.3.1",constructor:w,length:0,toArray:function(){return o.call(this)},get:function(e){return null==e?o.call(this):e<0?this[e+this.length]:this[e]},pushStack:function(e){var t=w.merge(this.constructor(),e);return t.prevObject=this,t},each:function(e){return w.each(this,e)},map:function(e){return this.pushStack(w.map(this,function(t,n){return e.call(t,n,t)}))},slice:function(){return this.pushStack(o.apply(this,arguments))},first:function(){return this.eq(0)},last:function(){return this.eq(-1)},eq:function(e){var t=this.length,n=+e+(e<0?t:0);return this.pushStack(n>=0&&n<t?[this[n]]:[])},end:function(){return this.prevObject||this.constructor()},push:s,sort:n.sort,splice:n.splice},w.extend=w.fn.extend=function(){var e,t,n,r,i,o,a=arguments[0]||{},s=1,u=arguments.length,l=!1;for("boolean"==typeof a&&(l=a,a=arguments[s]||{},s++),"object"==typeof a||g(a)||(a={}),s===u&&(a=this,s--);s<u;s++)if(null!=(e=arguments[s]))for(t in e)n=a[t],a!==(r=e[t])&&(l&&r&&(w.isPlainObject(r)||(i=Array.isArray(r)))?(i?(i=!1,o=n&&Array.isArray(n)?n:[]):o=n&&w.isPlainObject(n)?n:{},a[t]=w.extend(l,o,r)):void 0!==r&&(a[t]=r));return a},w.extend({expando:"jQuery"+("3.3.1"+Math.random()).replace(\/\\D\/g,""),isReady:!0,error:function(e){throw new Error(e)},noop:function(){},isPlainObject:function(e){var t,n;return!(!e||"[object Object]"!==c.call(e))&&(!(t=i(e))||"function"==typeof(n=f.call(t,"constructor")&&t.constructor)&&p.call(n)===d)},isEmptyObject:function(e){var t;for(t in e)return!1;return!0},globalEval:function(e){m(e)},each:function(e,t){var n,r=0;if(C(e)){for(n=e.length;r<n;r++)if(!1===t.call(e[r],r,e[r]))break}else for(r in e)if(!1===t.call(e[r],r,e[r]))break;return e},trim:function(e){return null==e?"":(e+"").replace(T,"")},makeArray:function(e,t){var n=t||[];return null!=e&&(C(Object(e))?w.merge(n,"string"==typeof e?[e]:e):s.call(n,e)),n},inArray:function(e,t,n){return null==t?-1:u.call(t,e,n)},merge:function(e,t){for(var n=+t.length,r=0,i=e.length;r<n;r++)e[i++]=t[r];return e.length=i,e},grep:function(e,t,n){for(var r,i=[],o=0,a=e.length,s=!n;o<a;o++)(r=!t(e[o],o))!==s&&i.push(e[o]);return i},map:function(e,t,n){var r,i,o=0,s=[];if(C(e))for(r=e.length;o<r;o++)null!=(i=t(e[o],o,n))&&s.push(i);else for(o in e)null!=(i=t(e[o],o,n))&&s.push(i);return a.apply([],s)},guid:1,support:h}),"function"==typeof Symbol&&(w.fn[Symbol.iterator]=n[Symbol.iterator]),w.each("Boolean Number String Function Array Date RegExp Object Error Symbol".split(" "),function(e,t){l["[object "+t+"]"]=t.toLowerCase()});function C(e){var t=!!e&&"length"in e&&e.length,n=x(e);return!g(e)&&!y(e)&&("array"===n||0===t||"number"==typeof t&&t>0&&t-1 in e)}var E=function(e){var t,n,r,i,o,a,s,u,l,c,f,p,d,h,g,y,v,m,x,b="sizzle"+1*new Date,w=e.document,T=0,C=0,E=ae(),k=ae(),S=ae(),D=function(e,t){return e===t&&(f=!0),0},N={}.hasOwnProperty,A=[],j=A.pop,q=A.push,L=A.push,H=A.slice,O=function(e,t){for(var n=0,r=e.length;n<r;n++)if(e[n]===t)return n;return-1},P="checked|selected|async|autofocus|autoplay|controls|defer|disabled|hidden|ismap|loop|multiple|open|readonly|required|scoped",M="[\\\\x20\\\\t\\\\r\\\\n\\\\f]",R="(?:\\\\\\\\.|[\\\\w-]|[^\\0-\\\\xa0])+",I="\\\\["+M+"*("+R+")(?:"+M+"*([*^$|!~]?=)"+M+"*(?:'((?:\\\\\\\\.|[^\\\\\\\\'])*)'|\\"((?:\\\\\\\\.|[^\\\\\\\\\\"])*)\\"|("+R+"))|)"+M+"*\\\\]",W=":("+R+")(?:\\\\((('((?:\\\\\\\\.|[^\\\\\\\\'])*)'|\\"((?:\\\\\\\\.|[^\\\\\\\\\\"])*)\\")|((?:\\\\\\\\.|[^\\\\\\\\()[\\\\]]|"+I+")*)|.*)\\\\)|)",$=new RegExp(M+"+","g"),B=new RegExp("^"+M+"+|((?:^|[^\\\\\\\\])(?:\\\\\\\\.)*)"+M+"+$","g"),F=new RegExp("^"+M+"*,"+M+"*"),_=new RegExp("^"+M+"*([>+~]|"+M+")"+M+"*"),z=new RegExp("="+M+"*([^\\\\]'\\"]*?)"+M+"*\\\\]","g"),X=new RegExp(W),U=new RegExp("^"+R+"$"),V={ID:new RegExp("^#("+R+")"),CLASS:new RegExp("^\\\\.("+R+")"),TAG:new RegExp("^("+R+"|[*])"),ATTR:new RegExp("^"+I),PSEUDO:new RegExp("^"+W),CHILD:new RegExp("^:(only|first|last|nth|nth-last)-(child|of-type)(?:\\\\("+M+"*(even|odd|(([+-]|)(\\\\d*)n|)"+M+"*(?:([+-]|)"+M+"*(\\\\d+)|))"+M+"*\\\\)|)","i"),bool:new RegExp("^(?:"+P+")$","i"),needsContext:new RegExp("^"+M+"*[>+~]|:(even|odd|eq|gt|lt|nth|first|last)(?:\\\\("+M+"*((?:-\\\\d)?\\\\d*)"+M+"*\\\\)|)(?=[^-]|$)","i")},G=\/^(?:input|select|textarea|button)$\/i,Y=\/^h\\d$\/i,Q=\/^[^{]+\\{\\s*\\[native \\w\/,J=\/^(?:#([\\w-]+)|(\\w+)|\\.([\\w-]+))$\/,K=\/[+~]\/,Z=new RegExp("\\\\\\\\([\\\\da-f]{1,6}"+M+"?|("+M+")|.)","ig"),ee=function(e,t,n){var r="0x"+t-65536;return r!==r||n?t:r<0?String.fromCharCode(r+65536):String.fromCharCode(r>>10|55296,1023&r|56320)},te=\/([\\0-\\x1f\\x7f]|^-?\\d)|^-$|[^\\0-\\x1f\\x7f-\\uFFFF\\w-]\/g,ne=function(e,t){return t?"\\0"===e?"\\ufffd":e.slice(0,-1)+"\\\\"+e.charCodeAt(e.length-1).toString(16)+" ":"\\\\"+e},re=function(){p()},ie=me(function(e){return!0===e.disabled&&("form"in e||"label"in e)},{dir:"parentNode",next:"legend"});try{L.apply(A=H.call(w.childNodes),w.childNodes),A[w.childNodes.length].nodeType}catch(e){L={apply:A.length?function(e,t){q.apply(e,H.call(t))}:function(e,t){var n=e.length,r=0;while(e[n++]=t[r++]);e.length=n-1}}}function oe(e,t,r,i){var o,s,l,c,f,h,v,m=t&&t.ownerDocument,T=t?t.nodeType:9;if(r=r||[],"string"!=typeof e||!e||1!==T&&9!==T&&11!==T)return r;if(!i&&((t?t.ownerDocument||t:w)!==d&&p(t),t=t||d,g)){if(11!==T&&(f=J.exec(e)))if(o=f[1]){if(9===T){if(!(l=t.getElementById(o)))return r;if(l.id===o)return r.push(l),r}else if(m&&(l=m.getElementById(o))&&x(t,l)&&l.id===o)return r.push(l),r}else{if(f[2])return L.apply(r,t.getElementsByTagName(e)),r;if((o=f[3])&&n.getElementsByClassName&&t.getElementsByClassName)return L.apply(r,t.getElementsByClassName(o)),r}if(n.qsa&&!S[e+" "]&&(!y||!y.test(e))){if(1!==T)m=t,v=e;else if("object"!==t.nodeName.toLowerCase()){(c=t.getAttribute("id"))?c=c.replace(te,ne):t.setAttribute("id",c=b),s=(h=a(e)).length;while(s--)h[s]="#"+c+" "+ve(h[s]);v=h.join(","),m=K.test(e)&&ge(t.parentNode)||t}if(v)try{return L.apply(r,m.querySelectorAll(v)),r}catch(e){}finally{c===b&&t.removeAttribute("id")}}}return u(e.replace(B,"$1"),t,r,i)}function ae(){var e=[];function t(n,i){return e.push(n+" ")>r.cacheLength&&delete t[e.shift()],t[n+" "]=i}return t}function se(e){return e[b]=!0,e}function ue(e){var t=d.createElement("fieldset");try{return!!e(t)}catch(e){return!1}finally{t.parentNode&&t.parentNode.removeChild(t),t=null}}function le(e,t){var n=e.split("|"),i=n.length;while(i--)r.attrHandle[n[i]]=t}function ce(e,t){var n=t&&e,r=n&&1===e.nodeType&&1===t.nodeType&&e.sourceIndex-t.sourceIndex;if(r)return r;if(n)while(n=n.nextSibling)if(n===t)return-1;return e?1:-1}function fe(e){return function(t){return"input"===t.nodeName.toLowerCase()&&t.type===e}}function pe(e){return function(t){var n=t.nodeName.toLowerCase();return("input"===n||"button"===n)&&t.type===e}}function de(e){return function(t){return"form"in t?t.parentNode&&!1===t.disabled?"label"in t?"label"in t.parentNode?t.parentNode.disabled===e:t.disabled===e:t.isDisabled===e||t.isDisabled!==!e&&ie(t)===e:t.disabled===e:"label"in t&&t.disabled===e}}function he(e){return se(function(t){return t=+t,se(function(n,r){var i,o=e([],n.length,t),a=o.length;while(a--)n[i=o[a]]&&(n[i]=!(r[i]=n[i]))})})}function ge(e){return e&&"undefined"!=typeof e.getElementsByTagName&&e}n=oe.support={},o=oe.isXML=function(e){var t=e&&(e.ownerDocument||e).documentElement;return!!t&&"HTML"!==t.nodeName},p=oe.setDocument=function(e){var t,i,a=e?e.ownerDocument||e:w;return a!==d&&9===a.nodeType&&a.documentElement?(d=a,h=d.documentElement,g=!o(d),w!==d&&(i=d.defaultView)&&i.top!==i&&(i.addEventListener?i.addEventListener("unload",re,!1):i.attachEvent&&i.attachEvent("onunload",re)),n.attributes=ue(function(e){return e.className="i",!e.getAttribute("className")}),n.getElementsByTagName=ue(function(e){return e.appendChild(d.createComment("")),!e.getElementsByTagName("*").length}),n.getElementsByClassName=Q.test(d.getElementsByClassName),n.getById=ue(function(e){return h.appendChild(e).id=b,!d.getElementsByName||!d.getElementsByName(b).length}),n.getById?(r.filter.ID=function(e){var t=e.replace(Z,ee);return function(e){return e.getAttribute("id")===t}},r.find.ID=function(e,t){if("undefined"!=typeof t.getElementById&&g){var n=t.getElementById(e);return n?[n]:[]}}):(r.filter.ID=function(e){var t=e.replace(Z,ee);return function(e){var n="undefined"!=typeof e.getAttributeNode&&e.getAttributeNode("id");return n&&n.value===t}},r.find.ID=function(e,t){if("undefined"!=typeof t.getElementById&&g){var n,r,i,o=t.getElementById(e);if(o){if((n=o.getAttributeNode("id"))&&n.value===e)return[o];i=t.getElementsByName(e),r=0;while(o=i[r++])if((n=o.getAttributeNode("id"))&&n.value===e)return[o]}return[]}}),r.find.TAG=n.getElementsByTagName?function(e,t){return"undefined"!=typeof t.getElementsByTagName?t.getElementsByTagName(e):n.qsa?t.querySelectorAll(e):void 0}:function(e,t){var n,r=[],i=0,o=t.getElementsByTagName(e);if("*"===e){while(n=o[i++])1===n.nodeType&&r.push(n);return r}return o},r.find.CLASS=n.getElementsByClassName&&function(e,t){if("undefined"!=typeof t.getElementsByClassName&&g)return t.getElementsByClassName(e)},v=[],y=[],(n.qsa=Q.test(d.querySelectorAll))&&(ue(function(e){h.appendChild(e).innerHTML="<a id='"+b+"'><\/a><select id='"+b+"-\\r\\\\' msallowcapture=''><option selected=''><\/option><\/select>",e.querySelectorAll("[msallowcapture^='']").length&&y.push("[*^$]="+M+"*(?:''|\\"\\")"),e.querySelectorAll("[selected]").length||y.push("\\\\["+M+"*(?:value|"+P+")"),e.querySelectorAll("[id~="+b+"-]").length||y.push("~="),e.querySelectorAll(":checked").length||y.push(":checked"),e.querySelectorAll("a#"+b+"+*").length||y.push(".#.+[+~]")}),ue(function(e){e.innerHTML="<a href='' disabled='disabled'><\/a><select disabled='disabled'><option\/><\/select>";var t=d.createElement("input");t.setAttribute("type","hidden"),e.appendChild(t).setAttribute("name","D"),e.querySelectorAll("[name=d]").length&&y.push("name"+M+"*[*^$|!~]?="),2!==e.querySelectorAll(":enabled").length&&y.push(":enabled",":disabled"),h.appendChild(e).disabled=!0,2!==e.querySelectorAll(":disabled").length&&y.push(":enabled",":disabled"),e.querySelectorAll("*,:x"),y.push(",.*:")})),(n.matchesSelector=Q.test(m=h.matches||h.webkitMatchesSelector||h.mozMatchesSelector||h.oMatchesSelector||h.msMatchesSelector))&&ue(function(e){n.disconnectedMatch=m.call(e,"*"),m.call(e,"[s!='']:x"),v.push("!=",W)}),y=y.length&&new RegExp(y.join("|")),v=v.length&&new RegExp(v.join("|")),t=Q.test(h.compareDocumentPosition),x=t||Q.test(h.contains)?function(e,t){var n=9===e.nodeType?e.documentElement:e,r=t&&t.parentNode;return e===r||!(!r||1!==r.nodeType||!(n.contains?n.contains(r):e.compareDocumentPosition&&16&e.compareDocumentPosition(r)))}:function(e,t){if(t)while(t=t.parentNode)if(t===e)return!0;return!1},D=t?function(e,t){if(e===t)return f=!0,0;var r=!e.compareDocumentPosition-!t.compareDocumentPosition;return r||(1&(r=(e.ownerDocument||e)===(t.ownerDocument||t)?e.compareDocumentPosition(t):1)||!n.sortDetached&&t.compareDocumentPosition(e)===r?e===d||e.ownerDocument===w&&x(w,e)?-1:t===d||t.ownerDocument===w&&x(w,t)?1:c?O(c,e)-O(c,t):0:4&r?-1:1)}:function(e,t){if(e===t)return f=!0,0;var n,r=0,i=e.parentNode,o=t.parentNode,a=[e],s=[t];if(!i||!o)return e===d?-1:t===d?1:i?-1:o?1:c?O(c,e)-O(c,t):0;if(i===o)return ce(e,t);n=e;while(n=n.parentNode)a.unshift(n);n=t;while(n=n.parentNode)s.unshift(n);while(a[r]===s[r])r++;return r?ce(a[r],s[r]):a[r]===w?-1:s[r]===w?1:0},d):d},oe.matches=function(e,t){return oe(e,null,null,t)},oe.matchesSelector=function(e,t){if((e.ownerDocument||e)!==d&&p(e),t=t.replace(z,"='$1']"),n.matchesSelector&&g&&!S[t+" "]&&(!v||!v.test(t))&&(!y||!y.test(t)))try{var r=m.call(e,t);if(r||n.disconnectedMatch||e.document&&11!==e.document.nodeType)return r}catch(e){}return oe(t,d,null,[e]).length>0},oe.contains=function(e,t){return(e.ownerDocument||e)!==d&&p(e),x(e,t)},oe.attr=function(e,t){(e.ownerDocument||e)!==d&&p(e);var i=r.attrHandle[t.toLowerCase()],o=i&&N.call(r.attrHandle,t.toLowerCase())?i(e,t,!g):void 0;return void 0!==o?o:n.attributes||!g?e.getAttribute(t):(o=e.getAttributeNode(t))&&o.specified?o.value:null},oe.escape=function(e){return(e+"").replace(te,ne)},oe.error=function(e){throw new Error("Syntax error, unrecognized expression: "+e)},oe.uniqueSort=function(e){var t,r=[],i=0,o=0;if(f=!n.detectDuplicates,c=!n.sortStable&&e.slice(0),e.sort(D),f){while(t=e[o++])t===e[o]&&(i=r.push(o));while(i--)e.splice(r[i],1)}return c=null,e},i=oe.getText=function(e){var t,n="",r=0,o=e.nodeType;if(o){if(1===o||9===o||11===o){if("string"==typeof e.textContent)return e.textContent;for(e=e.firstChild;e;e=e.nextSibling)n+=i(e)}else if(3===o||4===o)return e.nodeValue}else while(t=e[r++])n+=i(t);return n},(r=oe.selectors={cacheLength:50,createPseudo:se,match:V,attrHandle:{},find:{},relative:{">":{dir:"parentNode",first:!0}," ":{dir:"parentNode"},"+":{dir:"previousSibling",first:!0},"~":{dir:"previousSibling"}},preFilter:{ATTR:function(e){return e[1]=e[1].replace(Z,ee),e[3]=(e[3]||e[4]||e[5]||"").replace(Z,ee),"~="===e[2]&&(e[3]=" "+e[3]+" "),e.slice(0,4)},CHILD:function(e){return e[1]=e[1].toLowerCase(),"nth"===e[1].slice(0,3)?(e[3]||oe.error(e[0]),e[4]=+(e[4]?e[5]+(e[6]||1):2*("even"===e[3]||"odd"===e[3])),e[5]=+(e[7]+e[8]||"odd"===e[3])):e[3]&&oe.error(e[0]),e},PSEUDO:function(e){var t,n=!e[6]&&e[2];return V.CHILD.test(e[0])?null:(e[3]?e[2]=e[4]||e[5]||"":n&&X.test(n)&&(t=a(n,!0))&&(t=n.indexOf(")",n.length-t)-n.length)&&(e[0]=e[0].slice(0,t),e[2]=n.slice(0,t)),e.slice(0,3))}},filter:{TAG:function(e){var t=e.replace(Z,ee).toLowerCase();return"*"===e?function(){return!0}:function(e){return e.nodeName&&e.nodeName.toLowerCase()===t}},CLASS:function(e){var t=E[e+" "];return t||(t=new RegExp("(^|"+M+")"+e+"("+M+"|$)"))&&E(e,function(e){return t.test("string"==typeof e.className&&e.className||"undefined"!=typeof e.getAttribute&&e.getAttribute("class")||"")})},ATTR:function(e,t,n){return function(r){var i=oe.attr(r,e);return null==i?"!="===t:!t||(i+="","="===t?i===n:"!="===t?i!==n:"^="===t?n&&0===i.indexOf(n):"*="===t?n&&i.indexOf(n)>-1:"$="===t?n&&i.slice(-n.length)===n:"~="===t?(" "+i.replace($," ")+" ").indexOf(n)>-1:"|="===t&&(i===n||i.slice(0,n.length+1)===n+"-"))}},CHILD:function(e,t,n,r,i){var o="nth"!==e.slice(0,3),a="last"!==e.slice(-4),s="of-type"===t;return 1===r&&0===i?function(e){return!!e.parentNode}:function(t,n,u){var l,c,f,p,d,h,g=o!==a?"nextSibling":"previousSibling",y=t.parentNode,v=s&&t.nodeName.toLowerCase(),m=!u&&!s,x=!1;if(y){if(o){while(g){p=t;while(p=p[g])if(s?p.nodeName.toLowerCase()===v:1===p.nodeType)return!1;h=g="only"===e&&!h&&"nextSibling"}return!0}if(h=[a?y.firstChild:y.lastChild],a&&m){x=(d=(l=(c=(f=(p=y)[b]||(p[b]={}))[p.uniqueID]||(f[p.uniqueID]={}))[e]||[])[0]===T&&l[1])&&l[2],p=d&&y.childNodes[d];while(p=++d&&p&&p[g]||(x=d=0)||h.pop())if(1===p.nodeType&&++x&&p===t){c[e]=[T,d,x];break}}else if(m&&(x=d=(l=(c=(f=(p=t)[b]||(p[b]={}))[p.uniqueID]||(f[p.uniqueID]={}))[e]||[])[0]===T&&l[1]),!1===x)while(p=++d&&p&&p[g]||(x=d=0)||h.pop())if((s?p.nodeName.toLowerCase()===v:1===p.nodeType)&&++x&&(m&&((c=(f=p[b]||(p[b]={}))[p.uniqueID]||(f[p.uniqueID]={}))[e]=[T,x]),p===t))break;return(x-=i)===r||x%r==0&&x\/r>=0}}},PSEUDO:function(e,t){var n,i=r.pseudos[e]||r.setFilters[e.toLowerCase()]||oe.error("unsupported pseudo: "+e);return i[b]?i(t):i.length>1?(n=[e,e,"",t],r.setFilters.hasOwnProperty(e.toLowerCase())?se(function(e,n){var r,o=i(e,t),a=o.length;while(a--)e[r=O(e,o[a])]=!(n[r]=o[a])}):function(e){return i(e,0,n)}):i}},pseudos:{not:se(function(e){var t=[],n=[],r=s(e.replace(B,"$1"));return r[b]?se(function(e,t,n,i){var o,a=r(e,null,i,[]),s=e.length;while(s--)(o=a[s])&&(e[s]=!(t[s]=o))}):function(e,i,o){return t[0]=e,r(t,null,o,n),t[0]=null,!n.pop()}}),has:se(function(e){return function(t){return oe(e,t).length>0}}),contains:se(function(e){return e=e.replace(Z,ee),function(t){return(t.textContent||t.innerText||i(t)).indexOf(e)>-1}}),lang:se(function(e){return U.test(e||"")||oe.error("unsupported lang: "+e),e=e.replace(Z,ee).toLowerCase(),function(t){var n;do{if(n=g?t.lang:t.getAttribute("xml:lang")||t.getAttribute("lang"))return(n=n.toLowerCase())===e||0===n.indexOf(e+"-")}while((t=t.parentNode)&&1===t.nodeType);return!1}}),target:function(t){var n=e.location&&e.location.hash;return n&&n.slice(1)===t.id},root:function(e){return e===h},focus:function(e){return e===d.activeElement&&(!d.hasFocus||d.hasFocus())&&!!(e.type||e.href||~e.tabIndex)},enabled:de(!1),disabled:de(!0),checked:function(e){var t=e.nodeName.toLowerCase();return"input"===t&&!!e.checked||"option"===t&&!!e.selected},selected:function(e){return e.parentNode&&e.parentNode.selectedIndex,!0===e.selected},empty:function(e){for(e=e.firstChild;e;e=e.nextSibling)if(e.nodeType<6)return!1;return!0},parent:function(e){return!r.pseudos.empty(e)},header:function(e){return Y.test(e.nodeName)},input:function(e){return G.test(e.nodeName)},button:function(e){var t=e.nodeName.toLowerCase();return"input"===t&&"button"===e.type||"button"===t},text:function(e){var t;return"input"===e.nodeName.toLowerCase()&&"text"===e.type&&(null==(t=e.getAttribute("type"))||"text"===t.toLowerCase())},first:he(function(){return[0]}),last:he(function(e,t){return[t-1]}),eq:he(function(e,t,n){return[n<0?n+t:n]}),even:he(function(e,t){for(var n=0;n<t;n+=2)e.push(n);return e}),odd:he(function(e,t){for(var n=1;n<t;n+=2)e.push(n);return e}),lt:he(function(e,t,n){for(var r=n<0?n+t:n;--r>=0;)e.push(r);return e}),gt:he(function(e,t,n){for(var r=n<0?n+t:n;++r<t;)e.push(r);return e})}}).pseudos.nth=r.pseudos.eq;for(t in{radio:!0,checkbox:!0,file:!0,password:!0,image:!0})r.pseudos[t]=fe(t);for(t in{submit:!0,reset:!0})r.pseudos[t]=pe(t);function ye(){}ye.prototype=r.filters=r.pseudos,r.setFilters=new ye,a=oe.tokenize=function(e,t){var n,i,o,a,s,u,l,c=k[e+" "];if(c)return t?0:c.slice(0);s=e,u=[],l=r.preFilter;while(s){n&&!(i=F.exec(s))||(i&&(s=s.slice(i[0].length)||s),u.push(o=[])),n=!1,(i=_.exec(s))&&(n=i.shift(),o.push({value:n,type:i[0].replace(B," ")}),s=s.slice(n.length));for(a in r.filter)!(i=V[a].exec(s))||l[a]&&!(i=l[a](i))||(n=i.shift(),o.push({value:n,type:a,matches:i}),s=s.slice(n.length));if(!n)break}return t?s.length:s?oe.error(e):k(e,u).slice(0)};function ve(e){for(var t=0,n=e.length,r="";t<n;t++)r+=e[t].value;return r}function me(e,t,n){var r=t.dir,i=t.next,o=i||r,a=n&&"parentNode"===o,s=C++;return t.first?function(t,n,i){while(t=t[r])if(1===t.nodeType||a)return e(t,n,i);return!1}:function(t,n,u){var l,c,f,p=[T,s];if(u){while(t=t[r])if((1===t.nodeType||a)&&e(t,n,u))return!0}else while(t=t[r])if(1===t.nodeType||a)if(f=t[b]||(t[b]={}),c=f[t.uniqueID]||(f[t.uniqueID]={}),i&&i===t.nodeName.toLowerCase())t=t[r]||t;else{if((l=c[o])&&l[0]===T&&l[1]===s)return p[2]=l[2];if(c[o]=p,p[2]=e(t,n,u))return!0}return!1}}function xe(e){return e.length>1?function(t,n,r){var i=e.length;while(i--)if(!e[i](t,n,r))return!1;return!0}:e[0]}function be(e,t,n){for(var r=0,i=t.length;r<i;r++)oe(e,t[r],n);return n}function we(e,t,n,r,i){for(var o,a=[],s=0,u=e.length,l=null!=t;s<u;s++)(o=e[s])&&(n&&!n(o,r,i)||(a.push(o),l&&t.push(s)));return a}function Te(e,t,n,r,i,o){return r&&!r[b]&&(r=Te(r)),i&&!i[b]&&(i=Te(i,o)),se(function(o,a,s,u){var l,c,f,p=[],d=[],h=a.length,g=o||be(t||"*",s.nodeType?[s]:s,[]),y=!e||!o&&t?g:we(g,p,e,s,u),v=n?i||(o?e:h||r)?[]:a:y;if(n&&n(y,v,s,u),r){l=we(v,d),r(l,[],s,u),c=l.length;while(c--)(f=l[c])&&(v[d[c]]=!(y[d[c]]=f))}if(o){if(i||e){if(i){l=[],c=v.length;while(c--)(f=v[c])&&l.push(y[c]=f);i(null,v=[],l,u)}c=v.length;while(c--)(f=v[c])&&(l=i?O(o,f):p[c])>-1&&(o[l]=!(a[l]=f))}}else v=we(v===a?v.splice(h,v.length):v),i?i(null,a,v,u):L.apply(a,v)})}function Ce(e){for(var t,n,i,o=e.length,a=r.relative[e[0].type],s=a||r.relative[" "],u=a?1:0,c=me(function(e){return e===t},s,!0),f=me(function(e){return O(t,e)>-1},s,!0),p=[function(e,n,r){var i=!a&&(r||n!==l)||((t=n).nodeType?c(e,n,r):f(e,n,r));return t=null,i}];u<o;u++)if(n=r.relative[e[u].type])p=[me(xe(p),n)];else{if((n=r.filter[e[u].type].apply(null,e[u].matches))[b]){for(i=++u;i<o;i++)if(r.relative[e[i].type])break;return Te(u>1&&xe(p),u>1&&ve(e.slice(0,u-1).concat({value:" "===e[u-2].type?"*":""})).replace(B,"$1"),n,u<i&&Ce(e.slice(u,i)),i<o&&Ce(e=e.slice(i)),i<o&&ve(e))}p.push(n)}return xe(p)}function Ee(e,t){var n=t.length>0,i=e.length>0,o=function(o,a,s,u,c){var f,h,y,v=0,m="0",x=o&&[],b=[],w=l,C=o||i&&r.find.TAG("*",c),E=T+=null==w?1:Math.random()||.1,k=C.length;for(c&&(l=a===d||a||c);m!==k&&null!=(f=C[m]);m++){if(i&&f){h=0,a||f.ownerDocument===d||(p(f),s=!g);while(y=e[h++])if(y(f,a||d,s)){u.push(f);break}c&&(T=E)}n&&((f=!y&&f)&&v--,o&&x.push(f))}if(v+=m,n&&m!==v){h=0;while(y=t[h++])y(x,b,a,s);if(o){if(v>0)while(m--)x[m]||b[m]||(b[m]=j.call(u));b=we(b)}L.apply(u,b),c&&!o&&b.length>0&&v+t.length>1&&oe.uniqueSort(u)}return c&&(T=E,l=w),x};return n?se(o):o}return s=oe.compile=function(e,t){var n,r=[],i=[],o=S[e+" "];if(!o){t||(t=a(e)),n=t.length;while(n--)(o=Ce(t[n]))[b]?r.push(o):i.push(o);(o=S(e,Ee(i,r))).selector=e}return o},u=oe.select=function(e,t,n,i){var o,u,l,c,f,p="function"==typeof e&&e,d=!i&&a(e=p.selector||e);if(n=n||[],1===d.length){if((u=d[0]=d[0].slice(0)).length>2&&"ID"===(l=u[0]).type&&9===t.nodeType&&g&&r.relative[u[1].type]){if(!(t=(r.find.ID(l.matches[0].replace(Z,ee),t)||[])[0]))return n;p&&(t=t.parentNode),e=e.slice(u.shift().value.length)}o=V.needsContext.test(e)?0:u.length;while(o--){if(l=u[o],r.relative[c=l.type])break;if((f=r.find[c])&&(i=f(l.matches[0].replace(Z,ee),K.test(u[0].type)&&ge(t.parentNode)||t))){if(u.splice(o,1),!(e=i.length&&ve(u)))return L.apply(n,i),n;break}}}return(p||s(e,d))(i,t,!g,n,!t||K.test(e)&&ge(t.parentNode)||t),n},n.sortStable=b.split("").sort(D).join("")===b,n.detectDuplicates=!!f,p(),n.sortDetached=ue(function(e){return 1&e.compareDocumentPosition(d.createElement("fieldset"))}),ue(function(e){return e.innerHTML="<a href='#'><\/a>","#"===e.firstChild.getAttribute("href")})||le("type|href|height|width",function(e,t,n){if(!n)return e.getAttribute(t,"type"===t.toLowerCase()?1:2)}),n.attributes&&ue(function(e){return e.innerHTML="<input\/>",e.firstChild.setAttribute("value",""),""===e.firstChild.getAttribute("value")})||le("value",function(e,t,n){if(!n&&"input"===e.nodeName.toLowerCase())return e.defaultValue}),ue(function(e){return null==e.getAttribute("disabled")})||le(P,function(e,t,n){var r;if(!n)return!0===e[t]?t.toLowerCase():(r=e.getAttributeNode(t))&&r.specified?r.value:null}),oe}(e);w.find=E,w.expr=E.selectors,w.expr[":"]=w.expr.pseudos,w.uniqueSort=w.unique=E.uniqueSort,w.text=E.getText,w.isXMLDoc=E.isXML,w.contains=E.contains,w.escapeSelector=E.escape;var k=function(e,t,n){var r=[],i=void 0!==n;while((e=e[t])&&9!==e.nodeType)if(1===e.nodeType){if(i&&w(e).is(n))break;r.push(e)}return r},S=function(e,t){for(var n=[];e;e=e.nextSibling)1===e.nodeType&&e!==t&&n.push(e);return n},D=w.expr.match.needsContext;function N(e,t){return e.nodeName&&e.nodeName.toLowerCase()===t.toLowerCase()}var A=\/^<([a-z][^\\\/\\0>:\\x20\\t\\r\\n\\f]*)[\\x20\\t\\r\\n\\f]*\\\/?>(?:<\\\/\\1>|)$\/i;function j(e,t,n){return g(t)?w.grep(e,function(e,r){return!!t.call(e,r,e)!==n}):t.nodeType?w.grep(e,function(e){return e===t!==n}):"string"!=typeof t?w.grep(e,function(e){return u.call(t,e)>-1!==n}):w.filter(t,e,n)}w.filter=function(e,t,n){var r=t[0];return n&&(e=":not("+e+")"),1===t.length&&1===r.nodeType?w.find.matchesSelector(r,e)?[r]:[]:w.find.matches(e,w.grep(t,function(e){return 1===e.nodeType}))},w.fn.extend({find:function(e){var t,n,r=this.length,i=this;if("string"!=typeof e)return this.pushStack(w(e).filter(function(){for(t=0;t<r;t++)if(w.contains(i[t],this))return!0}));for(n=this.pushStack([]),t=0;t<r;t++)w.find(e,i[t],n);return r>1?w.uniqueSort(n):n},filter:function(e){return this.pushStack(j(this,e||[],!1))},not:function(e){return this.pushStack(j(this,e||[],!0))},is:function(e){return!!j(this,"string"==typeof e&&D.test(e)?w(e):e||[],!1).length}});var q,L=\/^(?:\\s*(<[\\w\\W]+>)[^>]*|#([\\w-]+))$\/;(w.fn.init=function(e,t,n){var i,o;if(!e)return this;if(n=n||q,"string"==typeof e){if(!(i="<"===e[0]&&">"===e[e.length-1]&&e.length>=3?[null,e,null]:L.exec(e))||!i[1]&&t)return!t||t.jquery?(t||n).find(e):this.constructor(t).find(e);if(i[1]){if(t=t instanceof w?t[0]:t,w.merge(this,w.parseHTML(i[1],t&&t.nodeType?t.ownerDocument||t:r,!0)),A.test(i[1])&&w.isPlainObject(t))for(i in t)g(this[i])?this[i](t[i]):this.attr(i,t[i]);return this}return(o=r.getElementById(i[2]))&&(this[0]=o,this.length=1),this}return e.nodeType?(this[0]=e,this.length=1,this):g(e)?void 0!==n.ready?n.ready(e):e(w):w.makeArray(e,this)}).prototype=w.fn,q=w(r);var H=\/^(?:parents|prev(?:Until|All))\/,O={children:!0,contents:!0,next:!0,prev:!0};w.fn.extend({has:function(e){var t=w(e,this),n=t.length;return this.filter(function(){for(var e=0;e<n;e++)if(w.contains(this,t[e]))return!0})},closest:function(e,t){var n,r=0,i=this.length,o=[],a="string"!=typeof e&&w(e);if(!D.test(e))for(;r<i;r++)for(n=this[r];n&&n!==t;n=n.parentNode)if(n.nodeType<11&&(a?a.index(n)>-1:1===n.nodeType&&w.find.matchesSelector(n,e))){o.push(n);break}return this.pushStack(o.length>1?w.uniqueSort(o):o)},index:function(e){return e?"string"==typeof e?u.call(w(e),this[0]):u.call(this,e.jquery?e[0]:e):this[0]&&this[0].parentNode?this.first().prevAll().length:-1},add:function(e,t){return this.pushStack(w.uniqueSort(w.merge(this.get(),w(e,t))))},addBack:function(e){return this.add(null==e?this.prevObject:this.prevObject.filter(e))}});function P(e,t){while((e=e[t])&&1!==e.nodeType);return e}w.each({parent:function(e){var t=e.parentNode;return t&&11!==t.nodeType?t:null},parents:function(e){return k(e,"parentNode")},parentsUntil:function(e,t,n){return k(e,"parentNode",n)},next:function(e){return P(e,"nextSibling")},prev:function(e){return P(e,"previousSibling")},nextAll:function(e){return k(e,"nextSibling")},prevAll:function(e){return k(e,"previousSibling")},nextUntil:function(e,t,n){return k(e,"nextSibling",n)},prevUntil:function(e,t,n){return k(e,"previousSibling",n)},siblings:function(e){return S((e.parentNode||{}).firstChild,e)},children:function(e){return S(e.firstChild)},contents:function(e){return N(e,"iframe")?e.contentDocument:(N(e,"template")&&(e=e.content||e),w.merge([],e.childNodes))}},function(e,t){w.fn[e]=function(n,r){var i=w.map(this,t,n);return"Until"!==e.slice(-5)&&(r=n),r&&"string"==typeof r&&(i=w.filter(r,i)),this.length>1&&(O[e]||w.uniqueSort(i),H.test(e)&&i.reverse()),this.pushStack(i)}});var M=\/[^\\x20\\t\\r\\n\\f]+\/g;function R(e){var t={};return w.each(e.match(M)||[],function(e,n){t[n]=!0}),t}w.Callbacks=function(e){e="string"==typeof e?R(e):w.extend({},e);var t,n,r,i,o=[],a=[],s=-1,u=function(){for(i=i||e.once,r=t=!0;a.length;s=-1){n=a.shift();while(++s<o.length)!1===o[s].apply(n[0],n[1])&&e.stopOnFalse&&(s=o.length,n=!1)}e.memory||(n=!1),t=!1,i&&(o=n?[]:"")},l={add:function(){return o&&(n&&!t&&(s=o.length-1,a.push(n)),function t(n){w.each(n,function(n,r){g(r)?e.unique&&l.has(r)||o.push(r):r&&r.length&&"string"!==x(r)&&t(r)})}(arguments),n&&!t&&u()),this},remove:function(){return w.each(arguments,function(e,t){var n;while((n=w.inArray(t,o,n))>-1)o.splice(n,1),n<=s&&s--}),this},has:function(e){return e?w.inArray(e,o)>-1:o.length>0},empty:function(){return o&&(o=[]),this},disable:function(){return i=a=[],o=n="",this},disabled:function(){return!o},lock:function(){return i=a=[],n||t||(o=n=""),this},locked:function(){return!!i},fireWith:function(e,n){return i||(n=[e,(n=n||[]).slice?n.slice():n],a.push(n),t||u()),this},fire:function(){return l.fireWith(this,arguments),this},fired:function(){return!!r}};return l};function I(e){return e}function W(e){throw e}function $(e,t,n,r){var i;try{e&&g(i=e.promise)?i.call(e).done(t).fail(n):e&&g(i=e.then)?i.call(e,t,n):t.apply(void 0,[e].slice(r))}catch(e){n.apply(void 0,[e])}}w.extend({Deferred:function(t){var n=[["notify","progress",w.Callbacks("memory"),w.Callbacks("memory"),2],["resolve","done",w.Callbacks("once memory"),w.Callbacks("once memory"),0,"resolved"],["reject","fail",w.Callbacks("once memory"),w.Callbacks("once memory"),1,"rejected"]],r="pending",i={state:function(){return r},always:function(){return o.done(arguments).fail(arguments),this},"catch":function(e){return i.then(null,e)},pipe:function(){var e=arguments;return w.Deferred(function(t){w.each(n,function(n,r){var i=g(e[r[4]])&&e[r[4]];o[r[1]](function(){var e=i&&i.apply(this,arguments);e&&g(e.promise)?e.promise().progress(t.notify).done(t.resolve).fail(t.reject):t[r[0]+"With"](this,i?[e]:arguments)})}),e=null}).promise()},then:function(t,r,i){var o=0;function a(t,n,r,i){return function(){var s=this,u=arguments,l=function(){var e,l;if(!(t<o)){if((e=r.apply(s,u))===n.promise())throw new TypeError("Thenable self-resolution");l=e&&("object"==typeof e||"function"==typeof e)&&e.then,g(l)?i?l.call(e,a(o,n,I,i),a(o,n,W,i)):(o++,l.call(e,a(o,n,I,i),a(o,n,W,i),a(o,n,I,n.notifyWith))):(r!==I&&(s=void 0,u=[e]),(i||n.resolveWith)(s,u))}},c=i?l:function(){try{l()}catch(e){w.Deferred.exceptionHook&&w.Deferred.exceptionHook(e,c.stackTrace),t+1>=o&&(r!==W&&(s=void 0,u=[e]),n.rejectWith(s,u))}};t?c():(w.Deferred.getStackHook&&(c.stackTrace=w.Deferred.getStackHook()),e.setTimeout(c))}}return w.Deferred(function(e){n[0][3].add(a(0,e,g(i)?i:I,e.notifyWith)),n[1][3].add(a(0,e,g(t)?t:I)),n[2][3].add(a(0,e,g(r)?r:W))}).promise()},promise:function(e){return null!=e?w.extend(e,i):i}},o={};return w.each(n,function(e,t){var a=t[2],s=t[5];i[t[1]]=a.add,s&&a.add(function(){r=s},n[3-e][2].disable,n[3-e][3].disable,n[0][2].lock,n[0][3].lock),a.add(t[3].fire),o[t[0]]=function(){return o[t[0]+"With"](this===o?void 0:this,arguments),this},o[t[0]+"With"]=a.fireWith}),i.promise(o),t&&t.call(o,o),o},when:function(e){var t=arguments.length,n=t,r=Array(n),i=o.call(arguments),a=w.Deferred(),s=function(e){return function(n){r[e]=this,i[e]=arguments.length>1?o.call(arguments):n,--t||a.resolveWith(r,i)}};if(t<=1&&($(e,a.done(s(n)).resolve,a.reject,!t),"pending"===a.state()||g(i[n]&&i[n].then)))return a.then();while(n--)$(i[n],s(n),a.reject);return a.promise()}});var B=\/^(Eval|Internal|Range|Reference|Syntax|Type|URI)Error$\/;w.Deferred.exceptionHook=function(t,n){e.console&&e.console.warn&&t&&B.test(t.name)&&e.console.warn("jQuery.Deferred exception: "+t.message,t.stack,n)},w.readyException=function(t){e.setTimeout(function(){throw t})};var F=w.Deferred();w.fn.ready=function(e){return F.then(e)["catch"](function(e){w.readyException(e)}),this},w.extend({isReady:!1,readyWait:1,ready:function(e){(!0===e?--w.readyWait:w.isReady)||(w.isReady=!0,!0!==e&&--w.readyWait>0||F.resolveWith(r,[w]))}}),w.ready.then=F.then;function _(){r.removeEventListener("DOMContentLoaded",_),e.removeEventListener("load",_),w.ready()}"complete"===r.readyState||"loading"!==r.readyState&&!r.documentElement.doScroll?e.setTimeout(w.ready):(r.addEventListener("DOMContentLoaded",_),e.addEventListener("load",_));var z=function(e,t,n,r,i,o,a){var s=0,u=e.length,l=null==n;if("object"===x(n)){i=!0;for(s in n)z(e,t,s,n[s],!0,o,a)}else if(void 0!==r&&(i=!0,g(r)||(a=!0),l&&(a?(t.call(e,r),t=null):(l=t,t=function(e,t,n){return l.call(w(e),n)})),t))for(;s<u;s++)t(e[s],n,a?r:r.call(e[s],s,t(e[s],n)));return i?e:l?t.call(e):u?t(e[0],n):o},X=\/^-ms-\/,U=\/-([a-z])\/g;function V(e,t){return t.toUpperCase()}function G(e){return e.replace(X,"ms-").replace(U,V)}var Y=function(e){return 1===e.nodeType||9===e.nodeType||!+e.nodeType};function Q(){this.expando=w.expando+Q.uid++}Q.uid=1,Q.prototype={cache:function(e){var t=e[this.expando];return t||(t={},Y(e)&&(e.nodeType?e[this.expando]=t:Object.defineProperty(e,this.expando,{value:t,configurable:!0}))),t},set:function(e,t,n){var r,i=this.cache(e);if("string"==typeof t)i[G(t)]=n;else for(r in t)i[G(r)]=t[r];return i},get:function(e,t){return void 0===t?this.cache(e):e[this.expando]&&e[this.expando][G(t)]},access:function(e,t,n){return void 0===t||t&&"string"==typeof t&&void 0===n?this.get(e,t):(this.set(e,t,n),void 0!==n?n:t)},remove:function(e,t){var n,r=e[this.expando];if(void 0!==r){if(void 0!==t){n=(t=Array.isArray(t)?t.map(G):(t=G(t))in r?[t]:t.match(M)||[]).length;while(n--)delete r[t[n]]}(void 0===t||w.isEmptyObject(r))&&(e.nodeType?e[this.expando]=void 0:delete e[this.expando])}},hasData:function(e){var t=e[this.expando];return void 0!==t&&!w.isEmptyObject(t)}};var J=new Q,K=new Q,Z=\/^(?:\\{[\\w\\W]*\\}|\\[[\\w\\W]*\\])$\/,ee=\/[A-Z]\/g;function te(e){return"true"===e||"false"!==e&&("null"===e?null:e===+e+""?+e:Z.test(e)?JSON.parse(e):e)}function ne(e,t,n){var r;if(void 0===n&&1===e.nodeType)if(r="data-"+t.replace(ee,"-$&").toLowerCase(),"string"==typeof(n=e.getAttribute(r))){try{n=te(n)}catch(e){}K.set(e,t,n)}else n=void 0;return n}w.extend({hasData:function(e){return K.hasData(e)||J.hasData(e)},data:function(e,t,n){return K.access(e,t,n)},removeData:function(e,t){K.remove(e,t)},_data:function(e,t,n){return J.access(e,t,n)},_removeData:function(e,t){J.remove(e,t)}}),w.fn.extend({data:function(e,t){var n,r,i,o=this[0],a=o&&o.attributes;if(void 0===e){if(this.length&&(i=K.get(o),1===o.nodeType&&!J.get(o,"hasDataAttrs"))){n=a.length;while(n--)a[n]&&0===(r=a[n].name).indexOf("data-")&&(r=G(r.slice(5)),ne(o,r,i[r]));J.set(o,"hasDataAttrs",!0)}return i}return"object"==typeof e?this.each(function(){K.set(this,e)}):z(this,function(t){var n;if(o&&void 0===t){if(void 0!==(n=K.get(o,e)))return n;if(void 0!==(n=ne(o,e)))return n}else this.each(function(){K.set(this,e,t)})},null,t,arguments.length>1,null,!0)},removeData:function(e){return this.each(function(){K.remove(this,e)})}}),w.extend({queue:function(e,t,n){var r;if(e)return t=(t||"fx")+"queue",r=J.get(e,t),n&&(!r||Array.isArray(n)?r=J.access(e,t,w.makeArray(n)):r.push(n)),r||[]},dequeue:function(e,t){t=t||"fx";var n=w.queue(e,t),r=n.length,i=n.shift(),o=w._queueHooks(e,t),a=function(){w.dequeue(e,t)};"inprogress"===i&&(i=n.shift(),r--),i&&("fx"===t&&n.unshift("inprogress"),delete o.stop,i.call(e,a,o)),!r&&o&&o.empty.fire()},_queueHooks:function(e,t){var n=t+"queueHooks";return J.get(e,n)||J.access(e,n,{empty:w.Callbacks("once memory").add(function(){J.remove(e,[t+"queue",n])})})}}),w.fn.extend({queue:function(e,t){var n=2;return"string"!=typeof e&&(t=e,e="fx",n--),arguments.length<n?w.queue(this[0],e):void 0===t?this:this.each(function(){var n=w.queue(this,e,t);w._queueHooks(this,e),"fx"===e&&"inprogress"!==n[0]&&w.dequeue(this,e)})},dequeue:function(e){return this.each(function(){w.dequeue(this,e)})},clearQueue:function(e){return this.queue(e||"fx",[])},promise:function(e,t){var n,r=1,i=w.Deferred(),o=this,a=this.length,s=function(){--r||i.resolveWith(o,[o])};"string"!=typeof e&&(t=e,e=void 0),e=e||"fx";while(a--)(n=J.get(o[a],e+"queueHooks"))&&n.empty&&(r++,n.empty.add(s));return s(),i.promise(t)}});var re=\/[+-]?(?:\\d*\\.|)\\d+(?:[eE][+-]?\\d+|)\/.source,ie=new RegExp("^(?:([+-])=|)("+re+")([a-z%]*)$","i"),oe=["Top","Right","Bottom","Left"],ae=function(e,t){return"none"===(e=t||e).style.display||""===e.style.display&&w.contains(e.ownerDocument,e)&&"none"===w.css(e,"display")},se=function(e,t,n,r){var i,o,a={};for(o in t)a[o]=e.style[o],e.style[o]=t[o];i=n.apply(e,r||[]);for(o in t)e.style[o]=a[o];return i};function ue(e,t,n,r){var i,o,a=20,s=r?function(){return r.cur()}:function(){return w.css(e,t,"")},u=s(),l=n&&n[3]||(w.cssNumber[t]?"":"px"),c=(w.cssNumber[t]||"px"!==l&&+u)&&ie.exec(w.css(e,t));if(c&&c[3]!==l){u\/=2,l=l||c[3],c=+u||1;while(a--)w.style(e,t,c+l),(1-o)*(1-(o=s()\/u||.5))<=0&&(a=0),c\/=o;c*=2,w.style(e,t,c+l),n=n||[]}return n&&(c=+c||+u||0,i=n[1]?c+(n[1]+1)*n[2]:+n[2],r&&(r.unit=l,r.start=c,r.end=i)),i}var le={};function ce(e){var t,n=e.ownerDocument,r=e.nodeName,i=le[r];return i||(t=n.body.appendChild(n.createElement(r)),i=w.css(t,"display"),t.parentNode.removeChild(t),"none"===i&&(i="block"),le[r]=i,i)}function fe(e,t){for(var n,r,i=[],o=0,a=e.length;o<a;o++)(r=e[o]).style&&(n=r.style.display,t?("none"===n&&(i[o]=J.get(r,"display")||null,i[o]||(r.style.display="")),""===r.style.display&&ae(r)&&(i[o]=ce(r))):"none"!==n&&(i[o]="none",J.set(r,"display",n)));for(o=0;o<a;o++)null!=i[o]&&(e[o].style.display=i[o]);return e}w.fn.extend({show:function(){return fe(this,!0)},hide:function(){return fe(this)},toggle:function(e){return"boolean"==typeof e?e?this.show():this.hide():this.each(function(){ae(this)?w(this).show():w(this).hide()})}});var pe=\/^(?:checkbox|radio)$\/i,de=\/<([a-z][^\\\/\\0>\\x20\\t\\r\\n\\f]+)\/i,he=\/^$|^module$|\\\/(?:java|ecma)script\/i,ge={option:[1,"<select multiple='multiple'>","<\/select>"],thead:[1,"<table>","<\/table>"],col:[2,"<table><colgroup>","<\/colgroup><\/table>"],tr:[2,"<table><tbody>","<\/tbody><\/table>"],td:[3,"<table><tbody><tr>","<\/tr><\/tbody><\/table>"],_default:[0,"",""]};ge.optgroup=ge.option,ge.tbody=ge.tfoot=ge.colgroup=ge.caption=ge.thead,ge.th=ge.td;function ye(e,t){var n;return n="undefined"!=typeof e.getElementsByTagName?e.getElementsByTagName(t||"*"):"undefined"!=typeof e.querySelectorAll?e.querySelectorAll(t||"*"):[],void 0===t||t&&N(e,t)?w.merge([e],n):n}function ve(e,t){for(var n=0,r=e.length;n<r;n++)J.set(e[n],"globalEval",!t||J.get(t[n],"globalEval"))}var me=\/<|&#?\\w+;\/;function xe(e,t,n,r,i){for(var o,a,s,u,l,c,f=t.createDocumentFragment(),p=[],d=0,h=e.length;d<h;d++)if((o=e[d])||0===o)if("object"===x(o))w.merge(p,o.nodeType?[o]:o);else if(me.test(o)){a=a||f.appendChild(t.createElement("div")),s=(de.exec(o)||["",""])[1].toLowerCase(),u=ge[s]||ge._default,a.innerHTML=u[1]+w.htmlPrefilter(o)+u[2],c=u[0];while(c--)a=a.lastChild;w.merge(p,a.childNodes),(a=f.firstChild).textContent=""}else p.push(t.createTextNode(o));f.textContent="",d=0;while(o=p[d++])if(r&&w.inArray(o,r)>-1)i&&i.push(o);else if(l=w.contains(o.ownerDocument,o),a=ye(f.appendChild(o),"script"),l&&ve(a),n){c=0;while(o=a[c++])he.test(o.type||"")&&n.push(o)}return f}!function(){var e=r.createDocumentFragment().appendChild(r.createElement("div")),t=r.createElement("input");t.setAttribute("type","radio"),t.setAttribute("checked","checked"),t.setAttribute("name","t"),e.appendChild(t),h.checkClone=e.cloneNode(!0).cloneNode(!0).lastChild.checked,e.innerHTML="<textarea>x<\/textarea>",h.noCloneChecked=!!e.cloneNode(!0).lastChild.defaultValue}();var be=r.documentElement,we=\/^key\/,Te=\/^(?:mouse|pointer|contextmenu|drag|drop)|click\/,Ce=\/^([^.]*)(?:\\.(.+)|)\/;function Ee(){return!0}function ke(){return!1}function Se(){try{return r.activeElement}catch(e){}}function De(e,t,n,r,i,o){var a,s;if("object"==typeof t){"string"!=typeof n&&(r=r||n,n=void 0);for(s in t)De(e,s,n,r,t[s],o);return e}if(null==r&&null==i?(i=n,r=n=void 0):null==i&&("string"==typeof n?(i=r,r=void 0):(i=r,r=n,n=void 0)),!1===i)i=ke;else if(!i)return e;return 1===o&&(a=i,(i=function(e){return w().off(e),a.apply(this,arguments)}).guid=a.guid||(a.guid=w.guid++)),e.each(function(){w.event.add(this,t,i,r,n)})}w.event={global:{},add:function(e,t,n,r,i){var o,a,s,u,l,c,f,p,d,h,g,y=J.get(e);if(y){n.handler&&(n=(o=n).handler,i=o.selector),i&&w.find.matchesSelector(be,i),n.guid||(n.guid=w.guid++),(u=y.events)||(u=y.events={}),(a=y.handle)||(a=y.handle=function(t){return"undefined"!=typeof w&&w.event.triggered!==t.type?w.event.dispatch.apply(e,arguments):void 0}),l=(t=(t||"").match(M)||[""]).length;while(l--)d=g=(s=Ce.exec(t[l])||[])[1],h=(s[2]||"").split(".").sort(),d&&(f=w.event.special[d]||{},d=(i?f.delegateType:f.bindType)||d,f=w.event.special[d]||{},c=w.extend({type:d,origType:g,data:r,handler:n,guid:n.guid,selector:i,needsContext:i&&w.expr.match.needsContext.test(i),namespace:h.join(".")},o),(p=u[d])||((p=u[d]=[]).delegateCount=0,f.setup&&!1!==f.setup.call(e,r,h,a)||e.addEventListener&&e.addEventListener(d,a)),f.add&&(f.add.call(e,c),c.handler.guid||(c.handler.guid=n.guid)),i?p.splice(p.delegateCount++,0,c):p.push(c),w.event.global[d]=!0)}},remove:function(e,t,n,r,i){var o,a,s,u,l,c,f,p,d,h,g,y=J.hasData(e)&&J.get(e);if(y&&(u=y.events)){l=(t=(t||"").match(M)||[""]).length;while(l--)if(s=Ce.exec(t[l])||[],d=g=s[1],h=(s[2]||"").split(".").sort(),d){f=w.event.special[d]||{},p=u[d=(r?f.delegateType:f.bindType)||d]||[],s=s[2]&&new RegExp("(^|\\\\.)"+h.join("\\\\.(?:.*\\\\.|)")+"(\\\\.|$)"),a=o=p.length;while(o--)c=p[o],!i&&g!==c.origType||n&&n.guid!==c.guid||s&&!s.test(c.namespace)||r&&r!==c.selector&&("**"!==r||!c.selector)||(p.splice(o,1),c.selector&&p.delegateCount--,f.remove&&f.remove.call(e,c));a&&!p.length&&(f.teardown&&!1!==f.teardown.call(e,h,y.handle)||w.removeEvent(e,d,y.handle),delete u[d])}else for(d in u)w.event.remove(e,d+t[l],n,r,!0);w.isEmptyObject(u)&&J.remove(e,"handle events")}},dispatch:function(e){var t=w.event.fix(e),n,r,i,o,a,s,u=new Array(arguments.length),l=(J.get(this,"events")||{})[t.type]||[],c=w.event.special[t.type]||{};for(u[0]=t,n=1;n<arguments.length;n++)u[n]=arguments[n];if(t.delegateTarget=this,!c.preDispatch||!1!==c.preDispatch.call(this,t)){s=w.event.handlers.call(this,t,l),n=0;while((o=s[n++])&&!t.isPropagationStopped()){t.currentTarget=o.elem,r=0;while((a=o.handlers[r++])&&!t.isImmediatePropagationStopped())t.rnamespace&&!t.rnamespace.test(a.namespace)||(t.handleObj=a,t.data=a.data,void 0!==(i=((w.event.special[a.origType]||{}).handle||a.handler).apply(o.elem,u))&&!1===(t.result=i)&&(t.preventDefault(),t.stopPropagation()))}return c.postDispatch&&c.postDispatch.call(this,t),t.result}},handlers:function(e,t){var n,r,i,o,a,s=[],u=t.delegateCount,l=e.target;if(u&&l.nodeType&&!("click"===e.type&&e.button>=1))for(;l!==this;l=l.parentNode||this)if(1===l.nodeType&&("click"!==e.type||!0!==l.disabled)){for(o=[],a={},n=0;n<u;n++)void 0===a[i=(r=t[n]).selector+" "]&&(a[i]=r.needsContext?w(i,this).index(l)>-1:w.find(i,this,null,[l]).length),a[i]&&o.push(r);o.length&&s.push({elem:l,handlers:o})}return l=this,u<t.length&&s.push({elem:l,handlers:t.slice(u)}),s},addProp:function(e,t){Object.defineProperty(w.Event.prototype,e,{enumerable:!0,configurable:!0,get:g(t)?function(){if(this.originalEvent)return t(this.originalEvent)}:function(){if(this.originalEvent)return this.originalEvent[e]},set:function(t){Object.defineProperty(this,e,{enumerable:!0,configurable:!0,writable:!0,value:t})}})},fix:function(e){return e[w.expando]?e:new w.Event(e)},special:{load:{noBubble:!0},focus:{trigger:function(){if(this!==Se()&&this.focus)return this.focus(),!1},delegateType:"focusin"},blur:{trigger:function(){if(this===Se()&&this.blur)return this.blur(),!1},delegateType:"focusout"},click:{trigger:function(){if("checkbox"===this.type&&this.click&&N(this,"input"))return this.click(),!1},_default:function(e){return N(e.target,"a")}},beforeunload:{postDispatch:function(e){void 0!==e.result&&e.originalEvent&&(e.originalEvent.returnValue=e.result)}}}},w.removeEvent=function(e,t,n){e.removeEventListener&&e.removeEventListener(t,n)},w.Event=function(e,t){if(!(this instanceof w.Event))return new w.Event(e,t);e&&e.type?(this.originalEvent=e,this.type=e.type,this.isDefaultPrevented=e.defaultPrevented||void 0===e.defaultPrevented&&!1===e.returnValue?Ee:ke,this.target=e.target&&3===e.target.nodeType?e.target.parentNode:e.target,this.currentTarget=e.currentTarget,this.relatedTarget=e.relatedTarget):this.type=e,t&&w.extend(this,t),this.timeStamp=e&&e.timeStamp||Date.now(),this[w.expando]=!0},w.Event.prototype={constructor:w.Event,isDefaultPrevented:ke,isPropagationStopped:ke,isImmediatePropagationStopped:ke,isSimulated:!1,preventDefault:function(){var e=this.originalEvent;this.isDefaultPrevented=Ee,e&&!this.isSimulated&&e.preventDefault()},stopPropagation:function(){var e=this.originalEvent;this.isPropagationStopped=Ee,e&&!this.isSimulated&&e.stopPropagation()},stopImmediatePropagation:function(){var e=this.originalEvent;this.isImmediatePropagationStopped=Ee,e&&!this.isSimulated&&e.stopImmediatePropagation(),this.stopPropagation()}},w.each({altKey:!0,bubbles:!0,cancelable:!0,changedTouches:!0,ctrlKey:!0,detail:!0,eventPhase:!0,metaKey:!0,pageX:!0,pageY:!0,shiftKey:!0,view:!0,"char":!0,charCode:!0,key:!0,keyCode:!0,button:!0,buttons:!0,clientX:!0,clientY:!0,offsetX:!0,offsetY:!0,pointerId:!0,pointerType:!0,screenX:!0,screenY:!0,targetTouches:!0,toElement:!0,touches:!0,which:function(e){var t=e.button;return null==e.which&&we.test(e.type)?null!=e.charCode?e.charCode:e.keyCode:!e.which&&void 0!==t&&Te.test(e.type)?1&t?1:2&t?3:4&t?2:0:e.which}},w.event.addProp),w.each({mouseenter:"mouseover",mouseleave:"mouseout",pointerenter:"pointerover",pointerleave:"pointerout"},function(e,t){w.event.special[e]={delegateType:t,bindType:t,handle:function(e){var n,r=this,i=e.relatedTarget,o=e.handleObj;return i&&(i===r||w.contains(r,i))||(e.type=o.origType,n=o.handler.apply(this,arguments),e.type=t),n}}}),w.fn.extend({on:function(e,t,n,r){return De(this,e,t,n,r)},one:function(e,t,n,r){return De(this,e,t,n,r,1)},off:function(e,t,n){var r,i;if(e&&e.preventDefault&&e.handleObj)return r=e.handleObj,w(e.delegateTarget).off(r.namespace?r.origType+"."+r.namespace:r.origType,r.selector,r.handler),this;if("object"==typeof e){for(i in e)this.off(i,t,e[i]);return this}return!1!==t&&"function"!=typeof t||(n=t,t=void 0),!1===n&&(n=ke),this.each(function(){w.event.remove(this,e,n,t)})}});var Ne=\/<(?!area|br|col|embed|hr|img|input|link|meta|param)(([a-z][^\\\/\\0>\\x20\\t\\r\\n\\f]*)[^>]*)\\\/>\/gi,Ae=\/<script|<style|<link\/i,je=\/checked\\s*(?:[^=]|=\\s*.checked.)\/i,qe=\/^\\s*<!(?:\\[CDATA\\[|--)|(?:\\]\\]|--)>\\s*$\/g;function Le(e,t){return N(e,"table")&&N(11!==t.nodeType?t:t.firstChild,"tr")?w(e).children("tbody")[0]||e:e}function He(e){return e.type=(null!==e.getAttribute("type"))+"\/"+e.type,e}function Oe(e){return"true\/"===(e.type||"").slice(0,5)?e.type=e.type.slice(5):e.removeAttribute("type"),e}function Pe(e,t){var n,r,i,o,a,s,u,l;if(1===t.nodeType){if(J.hasData(e)&&(o=J.access(e),a=J.set(t,o),l=o.events)){delete a.handle,a.events={};for(i in l)for(n=0,r=l[i].length;n<r;n++)w.event.add(t,i,l[i][n])}K.hasData(e)&&(s=K.access(e),u=w.extend({},s),K.set(t,u))}}function Me(e,t){var n=t.nodeName.toLowerCase();"input"===n&&pe.test(e.type)?t.checked=e.checked:"input"!==n&&"textarea"!==n||(t.defaultValue=e.defaultValue)}function Re(e,t,n,r){t=a.apply([],t);var i,o,s,u,l,c,f=0,p=e.length,d=p-1,y=t[0],v=g(y);if(v||p>1&&"string"==typeof y&&!h.checkClone&&je.test(y))return e.each(function(i){var o=e.eq(i);v&&(t[0]=y.call(this,i,o.html())),Re(o,t,n,r)});if(p&&(i=xe(t,e[0].ownerDocument,!1,e,r),o=i.firstChild,1===i.childNodes.length&&(i=o),o||r)){for(u=(s=w.map(ye(i,"script"),He)).length;f<p;f++)l=i,f!==d&&(l=w.clone(l,!0,!0),u&&w.merge(s,ye(l,"script"))),n.call(e[f],l,f);if(u)for(c=s[s.length-1].ownerDocument,w.map(s,Oe),f=0;f<u;f++)l=s[f],he.test(l.type||"")&&!J.access(l,"globalEval")&&w.contains(c,l)&&(l.src&&"module"!==(l.type||"").toLowerCase()?w._evalUrl&&w._evalUrl(l.src):m(l.textContent.replace(qe,""),c,l))}return e}function Ie(e,t,n){for(var r,i=t?w.filter(t,e):e,o=0;null!=(r=i[o]);o++)n||1!==r.nodeType||w.cleanData(ye(r)),r.parentNode&&(n&&w.contains(r.ownerDocument,r)&&ve(ye(r,"script")),r.parentNode.removeChild(r));return e}w.extend({htmlPrefilter:function(e){return e.replace(Ne,"<$1><\/$2>")},clone:function(e,t,n){var r,i,o,a,s=e.cloneNode(!0),u=w.contains(e.ownerDocument,e);if(!(h.noCloneChecked||1!==e.nodeType&&11!==e.nodeType||w.isXMLDoc(e)))for(a=ye(s),r=0,i=(o=ye(e)).length;r<i;r++)Me(o[r],a[r]);if(t)if(n)for(o=o||ye(e),a=a||ye(s),r=0,i=o.length;r<i;r++)Pe(o[r],a[r]);else Pe(e,s);return(a=ye(s,"script")).length>0&&ve(a,!u&&ye(e,"script")),s},cleanData:function(e){for(var t,n,r,i=w.event.special,o=0;void 0!==(n=e[o]);o++)if(Y(n)){if(t=n[J.expando]){if(t.events)for(r in t.events)i[r]?w.event.remove(n,r):w.removeEvent(n,r,t.handle);n[J.expando]=void 0}n[K.expando]&&(n[K.expando]=void 0)}}}),w.fn.extend({detach:function(e){return Ie(this,e,!0)},remove:function(e){return Ie(this,e)},text:function(e){return z(this,function(e){return void 0===e?w.text(this):this.empty().each(function(){1!==this.nodeType&&11!==this.nodeType&&9!==this.nodeType||(this.textContent=e)})},null,e,arguments.length)},append:function(){return Re(this,arguments,function(e){1!==this.nodeType&&11!==this.nodeType&&9!==this.nodeType||Le(this,e).appendChild(e)})},prepend:function(){return Re(this,arguments,function(e){if(1===this.nodeType||11===this.nodeType||9===this.nodeType){var t=Le(this,e);t.insertBefore(e,t.firstChild)}})},before:function(){return Re(this,arguments,function(e){this.parentNode&&this.parentNode.insertBefore(e,this)})},after:function(){return Re(this,arguments,function(e){this.parentNode&&this.parentNode.insertBefore(e,this.nextSibling)})},empty:function(){for(var e,t=0;null!=(e=this[t]);t++)1===e.nodeType&&(w.cleanData(ye(e,!1)),e.textContent="");return this},clone:function(e,t){return e=null!=e&&e,t=null==t?e:t,this.map(function(){return w.clone(this,e,t)})},html:function(e){return z(this,function(e){var t=this[0]||{},n=0,r=this.length;if(void 0===e&&1===t.nodeType)return t.innerHTML;if("string"==typeof e&&!Ae.test(e)&&!ge[(de.exec(e)||["",""])[1].toLowerCase()]){e=w.htmlPrefilter(e);try{for(;n<r;n++)1===(t=this[n]||{}).nodeType&&(w.cleanData(ye(t,!1)),t.innerHTML=e);t=0}catch(e){}}t&&this.empty().append(e)},null,e,arguments.length)},replaceWith:function(){var e=[];return Re(this,arguments,function(t){var n=this.parentNode;w.inArray(this,e)<0&&(w.cleanData(ye(this)),n&&n.replaceChild(t,this))},e)}}),w.each({appendTo:"append",prependTo:"prepend",insertBefore:"before",insertAfter:"after",replaceAll:"replaceWith"},function(e,t){w.fn[e]=function(e){for(var n,r=[],i=w(e),o=i.length-1,a=0;a<=o;a++)n=a===o?this:this.clone(!0),w(i[a])[t](n),s.apply(r,n.get());return this.pushStack(r)}});var We=new RegExp("^("+re+")(?!px)[a-z%]+$","i"),$e=function(t){var n=t.ownerDocument.defaultView;return n&&n.opener||(n=e),n.getComputedStyle(t)},Be=new RegExp(oe.join("|"),"i");!function(){function t(){if(c){l.style.cssText="position:absolute;left:-11111px;width:60px;margin-top:1px;padding:0;border:0",c.style.cssText="position:relative;display:block;box-sizing:border-box;overflow:scroll;margin:auto;border:1px;padding:1px;width:60%;top:1%",be.appendChild(l).appendChild(c);var t=e.getComputedStyle(c);i="1%"!==t.top,u=12===n(t.marginLeft),c.style.right="60%",s=36===n(t.right),o=36===n(t.width),c.style.position="absolute",a=36===c.offsetWidth||"absolute",be.removeChild(l),c=null}}function n(e){return Math.round(parseFloat(e))}var i,o,a,s,u,l=r.createElement("div"),c=r.createElement("div");c.style&&(c.style.backgroundClip="content-box",c.cloneNode(!0).style.backgroundClip="",h.clearCloneStyle="content-box"===c.style.backgroundClip,w.extend(h,{boxSizingReliable:function(){return t(),o},pixelBoxStyles:function(){return t(),s},pixelPosition:function(){return t(),i},reliableMarginLeft:function(){return t(),u},scrollboxSize:function(){return t(),a}}))}();function Fe(e,t,n){var r,i,o,a,s=e.style;return(n=n||$e(e))&&(""!==(a=n.getPropertyValue(t)||n[t])||w.contains(e.ownerDocument,e)||(a=w.style(e,t)),!h.pixelBoxStyles()&&We.test(a)&&Be.test(t)&&(r=s.width,i=s.minWidth,o=s.maxWidth,s.minWidth=s.maxWidth=s.width=a,a=n.width,s.width=r,s.minWidth=i,s.maxWidth=o)),void 0!==a?a+"":a}function _e(e,t){return{get:function(){if(!e())return(this.get=t).apply(this,arguments);delete this.get}}}var ze=\/^(none|table(?!-c[ea]).+)\/,Xe=\/^--\/,Ue={position:"absolute",visibility:"hidden",display:"block"},Ve={letterSpacing:"0",fontWeight:"400"},Ge=["Webkit","Moz","ms"],Ye=r.createElement("div").style;function Qe(e){if(e in Ye)return e;var t=e[0].toUpperCase()+e.slice(1),n=Ge.length;while(n--)if((e=Ge[n]+t)in Ye)return e}function Je(e){var t=w.cssProps[e];return t||(t=w.cssProps[e]=Qe(e)||e),t}function Ke(e,t,n){var r=ie.exec(t);return r?Math.max(0,r[2]-(n||0))+(r[3]||"px"):t}function Ze(e,t,n,r,i,o){var a="width"===t?1:0,s=0,u=0;if(n===(r?"border":"content"))return 0;for(;a<4;a+=2)"margin"===n&&(u+=w.css(e,n+oe[a],!0,i)),r?("content"===n&&(u-=w.css(e,"padding"+oe[a],!0,i)),"margin"!==n&&(u-=w.css(e,"border"+oe[a]+"Width",!0,i))):(u+=w.css(e,"padding"+oe[a],!0,i),"padding"!==n?u+=w.css(e,"border"+oe[a]+"Width",!0,i):s+=w.css(e,"border"+oe[a]+"Width",!0,i));return!r&&o>=0&&(u+=Math.max(0,Math.ceil(e["offset"+t[0].toUpperCase()+t.slice(1)]-o-u-s-.5))),u}function et(e,t,n){var r=$e(e),i=Fe(e,t,r),o="border-box"===w.css(e,"boxSizing",!1,r),a=o;if(We.test(i)){if(!n)return i;i="auto"}return a=a&&(h.boxSizingReliable()||i===e.style[t]),("auto"===i||!parseFloat(i)&&"inline"===w.css(e,"display",!1,r))&&(i=e["offset"+t[0].toUpperCase()+t.slice(1)],a=!0),(i=parseFloat(i)||0)+Ze(e,t,n||(o?"border":"content"),a,r,i)+"px"}w.extend({cssHooks:{opacity:{get:function(e,t){if(t){var n=Fe(e,"opacity");return""===n?"1":n}}}},cssNumber:{animationIterationCount:!0,columnCount:!0,fillOpacity:!0,flexGrow:!0,flexShrink:!0,fontWeight:!0,lineHeight:!0,opacity:!0,order:!0,orphans:!0,widows:!0,zIndex:!0,zoom:!0},cssProps:{},style:function(e,t,n,r){if(e&&3!==e.nodeType&&8!==e.nodeType&&e.style){var i,o,a,s=G(t),u=Xe.test(t),l=e.style;if(u||(t=Je(s)),a=w.cssHooks[t]||w.cssHooks[s],void 0===n)return a&&"get"in a&&void 0!==(i=a.get(e,!1,r))?i:l[t];"string"==(o=typeof n)&&(i=ie.exec(n))&&i[1]&&(n=ue(e,t,i),o="number"),null!=n&&n===n&&("number"===o&&(n+=i&&i[3]||(w.cssNumber[s]?"":"px")),h.clearCloneStyle||""!==n||0!==t.indexOf("background")||(l[t]="inherit"),a&&"set"in a&&void 0===(n=a.set(e,n,r))||(u?l.setProperty(t,n):l[t]=n))}},css:function(e,t,n,r){var i,o,a,s=G(t);return Xe.test(t)||(t=Je(s)),(a=w.cssHooks[t]||w.cssHooks[s])&&"get"in a&&(i=a.get(e,!0,n)),void 0===i&&(i=Fe(e,t,r)),"normal"===i&&t in Ve&&(i=Ve[t]),""===n||n?(o=parseFloat(i),!0===n||isFinite(o)?o||0:i):i}}),w.each(["height","width"],function(e,t){w.cssHooks[t]={get:function(e,n,r){if(n)return!ze.test(w.css(e,"display"))||e.getClientRects().length&&e.getBoundingClientRect().width?et(e,t,r):se(e,Ue,function(){return et(e,t,r)})},set:function(e,n,r){var i,o=$e(e),a="border-box"===w.css(e,"boxSizing",!1,o),s=r&&Ze(e,t,r,a,o);return a&&h.scrollboxSize()===o.position&&(s-=Math.ceil(e["offset"+t[0].toUpperCase()+t.slice(1)]-parseFloat(o[t])-Ze(e,t,"border",!1,o)-.5)),s&&(i=ie.exec(n))&&"px"!==(i[3]||"px")&&(e.style[t]=n,n=w.css(e,t)),Ke(e,n,s)}}}),w.cssHooks.marginLeft=_e(h.reliableMarginLeft,function(e,t){if(t)return(parseFloat(Fe(e,"marginLeft"))||e.getBoundingClientRect().left-se(e,{marginLeft:0},function(){return e.getBoundingClientRect().left}))+"px"}),w.each({margin:"",padding:"",border:"Width"},function(e,t){w.cssHooks[e+t]={expand:function(n){for(var r=0,i={},o="string"==typeof n?n.split(" "):[n];r<4;r++)i[e+oe[r]+t]=o[r]||o[r-2]||o[0];return i}},"margin"!==e&&(w.cssHooks[e+t].set=Ke)}),w.fn.extend({css:function(e,t){return z(this,function(e,t,n){var r,i,o={},a=0;if(Array.isArray(t)){for(r=$e(e),i=t.length;a<i;a++)o[t[a]]=w.css(e,t[a],!1,r);return o}return void 0!==n?w.style(e,t,n):w.css(e,t)},e,t,arguments.length>1)}});function tt(e,t,n,r,i){return new tt.prototype.init(e,t,n,r,i)}w.Tween=tt,tt.prototype={constructor:tt,init:function(e,t,n,r,i,o){this.elem=e,this.prop=n,this.easing=i||w.easing._default,this.options=t,this.start=this.now=this.cur(),this.end=r,this.unit=o||(w.cssNumber[n]?"":"px")},cur:function(){var e=tt.propHooks[this.prop];return e&&e.get?e.get(this):tt.propHooks._default.get(this)},run:function(e){var t,n=tt.propHooks[this.prop];return this.options.duration?this.pos=t=w.easing[this.easing](e,this.options.duration*e,0,1,this.options.duration):this.pos=t=e,this.now=(this.end-this.start)*t+this.start,this.options.step&&this.options.step.call(this.elem,this.now,this),n&&n.set?n.set(this):tt.propHooks._default.set(this),this}},tt.prototype.init.prototype=tt.prototype,tt.propHooks={_default:{get:function(e){var t;return 1!==e.elem.nodeType||null!=e.elem[e.prop]&&null==e.elem.style[e.prop]?e.elem[e.prop]:(t=w.css(e.elem,e.prop,""))&&"auto"!==t?t:0},set:function(e){w.fx.step[e.prop]?w.fx.step[e.prop](e):1!==e.elem.nodeType||null==e.elem.style[w.cssProps[e.prop]]&&!w.cssHooks[e.prop]?e.elem[e.prop]=e.now:w.style(e.elem,e.prop,e.now+e.unit)}}},tt.propHooks.scrollTop=tt.propHooks.scrollLeft={set:function(e){e.elem.nodeType&&e.elem.parentNode&&(e.elem[e.prop]=e.now)}},w.easing={linear:function(e){return e},swing:function(e){return.5-Math.cos(e*Math.PI)\/2},_default:"swing"},w.fx=tt.prototype.init,w.fx.step={};var nt,rt,it=\/^(?:toggle|show|hide)$\/,ot=\/queueHooks$\/;function at(){rt&&(!1===r.hidden&&e.requestAnimationFrame?e.requestAnimationFrame(at):e.setTimeout(at,w.fx.interval),w.fx.tick())}function st(){return e.setTimeout(function(){nt=void 0}),nt=Date.now()}function ut(e,t){var n,r=0,i={height:e};for(t=t?1:0;r<4;r+=2-t)i["margin"+(n=oe[r])]=i["padding"+n]=e;return t&&(i.opacity=i.width=e),i}function lt(e,t,n){for(var r,i=(pt.tweeners[t]||[]).concat(pt.tweeners["*"]),o=0,a=i.length;o<a;o++)if(r=i[o].call(n,t,e))return r}function ct(e,t,n){var r,i,o,a,s,u,l,c,f="width"in t||"height"in t,p=this,d={},h=e.style,g=e.nodeType&&ae(e),y=J.get(e,"fxshow");n.queue||(null==(a=w._queueHooks(e,"fx")).unqueued&&(a.unqueued=0,s=a.empty.fire,a.empty.fire=function(){a.unqueued||s()}),a.unqueued++,p.always(function(){p.always(function(){a.unqueued--,w.queue(e,"fx").length||a.empty.fire()})}));for(r in t)if(i=t[r],it.test(i)){if(delete t[r],o=o||"toggle"===i,i===(g?"hide":"show")){if("show"!==i||!y||void 0===y[r])continue;g=!0}d[r]=y&&y[r]||w.style(e,r)}if((u=!w.isEmptyObject(t))||!w.isEmptyObject(d)){f&&1===e.nodeType&&(n.overflow=[h.overflow,h.overflowX,h.overflowY],null==(l=y&&y.display)&&(l=J.get(e,"display")),"none"===(c=w.css(e,"display"))&&(l?c=l:(fe([e],!0),l=e.style.display||l,c=w.css(e,"display"),fe([e]))),("inline"===c||"inline-block"===c&&null!=l)&&"none"===w.css(e,"float")&&(u||(p.done(function(){h.display=l}),null==l&&(c=h.display,l="none"===c?"":c)),h.display="inline-block")),n.overflow&&(h.overflow="hidden",p.always(function(){h.overflow=n.overflow[0],h.overflowX=n.overflow[1],h.overflowY=n.overflow[2]})),u=!1;for(r in d)u||(y?"hidden"in y&&(g=y.hidden):y=J.access(e,"fxshow",{display:l}),o&&(y.hidden=!g),g&&fe([e],!0),p.done(function(){g||fe([e]),J.remove(e,"fxshow");for(r in d)w.style(e,r,d[r])})),u=lt(g?y[r]:0,r,p),r in y||(y[r]=u.start,g&&(u.end=u.start,u.start=0))}}function ft(e,t){var n,r,i,o,a;for(n in e)if(r=G(n),i=t[r],o=e[n],Array.isArray(o)&&(i=o[1],o=e[n]=o[0]),n!==r&&(e[r]=o,delete e[n]),(a=w.cssHooks[r])&&"expand"in a){o=a.expand(o),delete e[r];for(n in o)n in e||(e[n]=o[n],t[n]=i)}else t[r]=i}function pt(e,t,n){var r,i,o=0,a=pt.prefilters.length,s=w.Deferred().always(function(){delete u.elem}),u=function(){if(i)return!1;for(var t=nt||st(),n=Math.max(0,l.startTime+l.duration-t),r=1-(n\/l.duration||0),o=0,a=l.tweens.length;o<a;o++)l.tweens[o].run(r);return s.notifyWith(e,[l,r,n]),r<1&&a?n:(a||s.notifyWith(e,[l,1,0]),s.resolveWith(e,[l]),!1)},l=s.promise({elem:e,props:w.extend({},t),opts:w.extend(!0,{specialEasing:{},easing:w.easing._default},n),originalProperties:t,originalOptions:n,startTime:nt||st(),duration:n.duration,tweens:[],createTween:function(t,n){var r=w.Tween(e,l.opts,t,n,l.opts.specialEasing[t]||l.opts.easing);return l.tweens.push(r),r},stop:function(t){var n=0,r=t?l.tweens.length:0;if(i)return this;for(i=!0;n<r;n++)l.tweens[n].run(1);return t?(s.notifyWith(e,[l,1,0]),s.resolveWith(e,[l,t])):s.rejectWith(e,[l,t]),this}}),c=l.props;for(ft(c,l.opts.specialEasing);o<a;o++)if(r=pt.prefilters[o].call(l,e,c,l.opts))return g(r.stop)&&(w._queueHooks(l.elem,l.opts.queue).stop=r.stop.bind(r)),r;return w.map(c,lt,l),g(l.opts.start)&&l.opts.start.call(e,l),l.progress(l.opts.progress).done(l.opts.done,l.opts.complete).fail(l.opts.fail).always(l.opts.always),w.fx.timer(w.extend(u,{elem:e,anim:l,queue:l.opts.queue})),l}w.Animation=w.extend(pt,{tweeners:{"*":[function(e,t){var n=this.createTween(e,t);return ue(n.elem,e,ie.exec(t),n),n}]},tweener:function(e,t){g(e)?(t=e,e=["*"]):e=e.match(M);for(var n,r=0,i=e.length;r<i;r++)n=e[r],pt.tweeners[n]=pt.tweeners[n]||[],pt.tweeners[n].unshift(t)},prefilters:[ct],prefilter:function(e,t){t?pt.prefilters.unshift(e):pt.prefilters.push(e)}}),w.speed=function(e,t,n){var r=e&&"object"==typeof e?w.extend({},e):{complete:n||!n&&t||g(e)&&e,duration:e,easing:n&&t||t&&!g(t)&&t};return w.fx.off?r.duration=0:"number"!=typeof r.duration&&(r.duration in w.fx.speeds?r.duration=w.fx.speeds[r.duration]:r.duration=w.fx.speeds._default),null!=r.queue&&!0!==r.queue||(r.queue="fx"),r.old=r.complete,r.complete=function(){g(r.old)&&r.old.call(this),r.queue&&w.dequeue(this,r.queue)},r},w.fn.extend({fadeTo:function(e,t,n,r){return this.filter(ae).css("opacity",0).show().end().animate({opacity:t},e,n,r)},animate:function(e,t,n,r){var i=w.isEmptyObject(e),o=w.speed(t,n,r),a=function(){var t=pt(this,w.extend({},e),o);(i||J.get(this,"finish"))&&t.stop(!0)};return a.finish=a,i||!1===o.queue?this.each(a):this.queue(o.queue,a)},stop:function(e,t,n){var r=function(e){var t=e.stop;delete e.stop,t(n)};return"string"!=typeof e&&(n=t,t=e,e=void 0),t&&!1!==e&&this.queue(e||"fx",[]),this.each(function(){var t=!0,i=null!=e&&e+"queueHooks",o=w.timers,a=J.get(this);if(i)a[i]&&a[i].stop&&r(a[i]);else for(i in a)a[i]&&a[i].stop&&ot.test(i)&&r(a[i]);for(i=o.length;i--;)o[i].elem!==this||null!=e&&o[i].queue!==e||(o[i].anim.stop(n),t=!1,o.splice(i,1));!t&&n||w.dequeue(this,e)})},finish:function(e){return!1!==e&&(e=e||"fx"),this.each(function(){var t,n=J.get(this),r=n[e+"queue"],i=n[e+"queueHooks"],o=w.timers,a=r?r.length:0;for(n.finish=!0,w.queue(this,e,[]),i&&i.stop&&i.stop.call(this,!0),t=o.length;t--;)o[t].elem===this&&o[t].queue===e&&(o[t].anim.stop(!0),o.splice(t,1));for(t=0;t<a;t++)r[t]&&r[t].finish&&r[t].finish.call(this);delete n.finish})}}),w.each(["toggle","show","hide"],function(e,t){var n=w.fn[t];w.fn[t]=function(e,r,i){return null==e||"boolean"==typeof e?n.apply(this,arguments):this.animate(ut(t,!0),e,r,i)}}),w.each({slideDown:ut("show"),slideUp:ut("hide"),slideToggle:ut("toggle"),fadeIn:{opacity:"show"},fadeOut:{opacity:"hide"},fadeToggle:{opacity:"toggle"}},function(e,t){w.fn[e]=function(e,n,r){return this.animate(t,e,n,r)}}),w.timers=[],w.fx.tick=function(){var e,t=0,n=w.timers;for(nt=Date.now();t<n.length;t++)(e=n[t])()||n[t]!==e||n.splice(t--,1);n.length||w.fx.stop(),nt=void 0},w.fx.timer=function(e){w.timers.push(e),w.fx.start()},w.fx.interval=13,w.fx.start=function(){rt||(rt=!0,at())},w.fx.stop=function(){rt=null},w.fx.speeds={slow:600,fast:200,_default:400},w.fn.delay=function(t,n){return t=w.fx?w.fx.speeds[t]||t:t,n=n||"fx",this.queue(n,function(n,r){var i=e.setTimeout(n,t);r.stop=function(){e.clearTimeout(i)}})},function(){var e=r.createElement("input"),t=r.createElement("select").appendChild(r.createElement("option"));e.type="checkbox",h.checkOn=""!==e.value,h.optSelected=t.selected,(e=r.createElement("input")).value="t",e.type="radio",h.radioValue="t"===e.value}();var dt,ht=w.expr.attrHandle;w.fn.extend({attr:function(e,t){return z(this,w.attr,e,t,arguments.length>1)},removeAttr:function(e){return this.each(function(){w.removeAttr(this,e)})}}),w.extend({attr:function(e,t,n){var r,i,o=e.nodeType;if(3!==o&&8!==o&&2!==o)return"undefined"==typeof e.getAttribute?w.prop(e,t,n):(1===o&&w.isXMLDoc(e)||(i=w.attrHooks[t.toLowerCase()]||(w.expr.match.bool.test(t)?dt:void 0)),void 0!==n?null===n?void w.removeAttr(e,t):i&&"set"in i&&void 0!==(r=i.set(e,n,t))?r:(e.setAttribute(t,n+""),n):i&&"get"in i&&null!==(r=i.get(e,t))?r:null==(r=w.find.attr(e,t))?void 0:r)},attrHooks:{type:{set:function(e,t){if(!h.radioValue&&"radio"===t&&N(e,"input")){var n=e.value;return e.setAttribute("type",t),n&&(e.value=n),t}}}},removeAttr:function(e,t){var n,r=0,i=t&&t.match(M);if(i&&1===e.nodeType)while(n=i[r++])e.removeAttribute(n)}}),dt={set:function(e,t,n){return!1===t?w.removeAttr(e,n):e.setAttribute(n,n),n}},w.each(w.expr.match.bool.source.match(\/\\w+\/g),function(e,t){var n=ht[t]||w.find.attr;ht[t]=function(e,t,r){var i,o,a=t.toLowerCase();return r||(o=ht[a],ht[a]=i,i=null!=n(e,t,r)?a:null,ht[a]=o),i}});var gt=\/^(?:input|select|textarea|button)$\/i,yt=\/^(?:a|area)$\/i;w.fn.extend({prop:function(e,t){return z(this,w.prop,e,t,arguments.length>1)},removeProp:function(e){return this.each(function(){delete this[w.propFix[e]||e]})}}),w.extend({prop:function(e,t,n){var r,i,o=e.nodeType;if(3!==o&&8!==o&&2!==o)return 1===o&&w.isXMLDoc(e)||(t=w.propFix[t]||t,i=w.propHooks[t]),void 0!==n?i&&"set"in i&&void 0!==(r=i.set(e,n,t))?r:e[t]=n:i&&"get"in i&&null!==(r=i.get(e,t))?r:e[t]},propHooks:{tabIndex:{get:function(e){var t=w.find.attr(e,"tabindex");return t?parseInt(t,10):gt.test(e.nodeName)||yt.test(e.nodeName)&&e.href?0:-1}}},propFix:{"for":"htmlFor","class":"className"}}),h.optSelected||(w.propHooks.selected={get:function(e){var t=e.parentNode;return t&&t.parentNode&&t.parentNode.selectedIndex,null},set:function(e){var t=e.parentNode;t&&(t.selectedIndex,t.parentNode&&t.parentNode.selectedIndex)}}),w.each(["tabIndex","readOnly","maxLength","cellSpacing","cellPadding","rowSpan","colSpan","useMap","frameBorder","contentEditable"],function(){w.propFix[this.toLowerCase()]=this});function vt(e){return(e.match(M)||[]).join(" ")}function mt(e){return e.getAttribute&&e.getAttribute("class")||""}function xt(e){return Array.isArray(e)?e:"string"==typeof e?e.match(M)||[]:[]}w.fn.extend({addClass:function(e){var t,n,r,i,o,a,s,u=0;if(g(e))return this.each(function(t){w(this).addClass(e.call(this,t,mt(this)))});if((t=xt(e)).length)while(n=this[u++])if(i=mt(n),r=1===n.nodeType&&" "+vt(i)+" "){a=0;while(o=t[a++])r.indexOf(" "+o+" ")<0&&(r+=o+" ");i!==(s=vt(r))&&n.setAttribute("class",s)}return this},removeClass:function(e){var t,n,r,i,o,a,s,u=0;if(g(e))return this.each(function(t){w(this).removeClass(e.call(this,t,mt(this)))});if(!arguments.length)return this.attr("class","");if((t=xt(e)).length)while(n=this[u++])if(i=mt(n),r=1===n.nodeType&&" "+vt(i)+" "){a=0;while(o=t[a++])while(r.indexOf(" "+o+" ")>-1)r=r.replace(" "+o+" "," ");i!==(s=vt(r))&&n.setAttribute("class",s)}return this},toggleClass:function(e,t){var n=typeof e,r="string"===n||Array.isArray(e);return"boolean"==typeof t&&r?t?this.addClass(e):this.removeClass(e):g(e)?this.each(function(n){w(this).toggleClass(e.call(this,n,mt(this),t),t)}):this.each(function(){var t,i,o,a;if(r){i=0,o=w(this),a=xt(e);while(t=a[i++])o.hasClass(t)?o.removeClass(t):o.addClass(t)}else void 0!==e&&"boolean"!==n||((t=mt(this))&&J.set(this,"__className__",t),this.setAttribute&&this.setAttribute("class",t||!1===e?"":J.get(this,"__className__")||""))})},hasClass:function(e){var t,n,r=0;t=" "+e+" ";while(n=this[r++])if(1===n.nodeType&&(" "+vt(mt(n))+" ").indexOf(t)>-1)return!0;return!1}});var bt=\/\\r\/g;w.fn.extend({val:function(e){var t,n,r,i=this[0];{if(arguments.length)return r=g(e),this.each(function(n){var i;1===this.nodeType&&(null==(i=r?e.call(this,n,w(this).val()):e)?i="":"number"==typeof i?i+="":Array.isArray(i)&&(i=w.map(i,function(e){return null==e?"":e+""})),(t=w.valHooks[this.type]||w.valHooks[this.nodeName.toLowerCase()])&&"set"in t&&void 0!==t.set(this,i,"value")||(this.value=i))});if(i)return(t=w.valHooks[i.type]||w.valHooks[i.nodeName.toLowerCase()])&&"get"in t&&void 0!==(n=t.get(i,"value"))?n:"string"==typeof(n=i.value)?n.replace(bt,""):null==n?"":n}}}),w.extend({valHooks:{option:{get:function(e){var t=w.find.attr(e,"value");return null!=t?t:vt(w.text(e))}},select:{get:function(e){var t,n,r,i=e.options,o=e.selectedIndex,a="select-one"===e.type,s=a?null:[],u=a?o+1:i.length;for(r=o<0?u:a?o:0;r<u;r++)if(((n=i[r]).selected||r===o)&&!n.disabled&&(!n.parentNode.disabled||!N(n.parentNode,"optgroup"))){if(t=w(n).val(),a)return t;s.push(t)}return s},set:function(e,t){var n,r,i=e.options,o=w.makeArray(t),a=i.length;while(a--)((r=i[a]).selected=w.inArray(w.valHooks.option.get(r),o)>-1)&&(n=!0);return n||(e.selectedIndex=-1),o}}}}),w.each(["radio","checkbox"],function(){w.valHooks[this]={set:function(e,t){if(Array.isArray(t))return e.checked=w.inArray(w(e).val(),t)>-1}},h.checkOn||(w.valHooks[this].get=function(e){return null===e.getAttribute("value")?"on":e.value})}),h.focusin="onfocusin"in e;var wt=\/^(?:focusinfocus|focusoutblur)$\/,Tt=function(e){e.stopPropagation()};w.extend(w.event,{trigger:function(t,n,i,o){var a,s,u,l,c,p,d,h,v=[i||r],m=f.call(t,"type")?t.type:t,x=f.call(t,"namespace")?t.namespace.split("."):[];if(s=h=u=i=i||r,3!==i.nodeType&&8!==i.nodeType&&!wt.test(m+w.event.triggered)&&(m.indexOf(".")>-1&&(m=(x=m.split(".")).shift(),x.sort()),c=m.indexOf(":")<0&&"on"+m,t=t[w.expando]?t:new w.Event(m,"object"==typeof t&&t),t.isTrigger=o?2:3,t.namespace=x.join("."),t.rnamespace=t.namespace?new RegExp("(^|\\\\.)"+x.join("\\\\.(?:.*\\\\.|)")+"(\\\\.|$)"):null,t.result=void 0,t.target||(t.target=i),n=null==n?[t]:w.makeArray(n,[t]),d=w.event.special[m]||{},o||!d.trigger||!1!==d.trigger.apply(i,n))){if(!o&&!d.noBubble&&!y(i)){for(l=d.delegateType||m,wt.test(l+m)||(s=s.parentNode);s;s=s.parentNode)v.push(s),u=s;u===(i.ownerDocument||r)&&v.push(u.defaultView||u.parentWindow||e)}a=0;while((s=v[a++])&&!t.isPropagationStopped())h=s,t.type=a>1?l:d.bindType||m,(p=(J.get(s,"events")||{})[t.type]&&J.get(s,"handle"))&&p.apply(s,n),(p=c&&s[c])&&p.apply&&Y(s)&&(t.result=p.apply(s,n),!1===t.result&&t.preventDefault());return t.type=m,o||t.isDefaultPrevented()||d._default&&!1!==d._default.apply(v.pop(),n)||!Y(i)||c&&g(i[m])&&!y(i)&&((u=i[c])&&(i[c]=null),w.event.triggered=m,t.isPropagationStopped()&&h.addEventListener(m,Tt),i[m](),t.isPropagationStopped()&&h.removeEventListener(m,Tt),w.event.triggered=void 0,u&&(i[c]=u)),t.result}},simulate:function(e,t,n){var r=w.extend(new w.Event,n,{type:e,isSimulated:!0});w.event.trigger(r,null,t)}}),w.fn.extend({trigger:function(e,t){return this.each(function(){w.event.trigger(e,t,this)})},triggerHandler:function(e,t){var n=this[0];if(n)return w.event.trigger(e,t,n,!0)}}),h.focusin||w.each({focus:"focusin",blur:"focusout"},function(e,t){var n=function(e){w.event.simulate(t,e.target,w.event.fix(e))};w.event.special[t]={setup:function(){var r=this.ownerDocument||this,i=J.access(r,t);i||r.addEventListener(e,n,!0),J.access(r,t,(i||0)+1)},teardown:function(){var r=this.ownerDocument||this,i=J.access(r,t)-1;i?J.access(r,t,i):(r.removeEventListener(e,n,!0),J.remove(r,t))}}});var Ct=e.location,Et=Date.now(),kt=\/\\?\/;w.parseXML=function(t){var n;if(!t||"string"!=typeof t)return null;try{n=(new e.DOMParser).parseFromString(t,"text\/xml")}catch(e){n=void 0}return n&&!n.getElementsByTagName("parsererror").length||w.error("Invalid XML: "+t),n};var St=\/\\[\\]$\/,Dt=\/\\r?\\n\/g,Nt=\/^(?:submit|button|image|reset|file)$\/i,At=\/^(?:input|select|textarea|keygen)\/i;function jt(e,t,n,r){var i;if(Array.isArray(t))w.each(t,function(t,i){n||St.test(e)?r(e,i):jt(e+"["+("object"==typeof i&&null!=i?t:"")+"]",i,n,r)});else if(n||"object"!==x(t))r(e,t);else for(i in t)jt(e+"["+i+"]",t[i],n,r)}w.param=function(e,t){var n,r=[],i=function(e,t){var n=g(t)?t():t;r[r.length]=encodeURIComponent(e)+"="+encodeURIComponent(null==n?"":n)};if(Array.isArray(e)||e.jquery&&!w.isPlainObject(e))w.each(e,function(){i(this.name,this.value)});else for(n in e)jt(n,e[n],t,i);return r.join("&")},w.fn.extend({serialize:function(){return w.param(this.serializeArray())},serializeArray:function(){return this.map(function(){var e=w.prop(this,"elements");return e?w.makeArray(e):this}).filter(function(){var e=this.type;return this.name&&!w(this).is(":disabled")&&At.test(this.nodeName)&&!Nt.test(e)&&(this.checked||!pe.test(e))}).map(function(e,t){var n=w(this).val();return null==n?null:Array.isArray(n)?w.map(n,function(e){return{name:t.name,value:e.replace(Dt,"\\r\\n")}}):{name:t.name,value:n.replace(Dt,"\\r\\n")}}).get()}});var qt=\/%20\/g,Lt=\/#.*$\/,Ht=\/([?&])_=[^&]*\/,Ot=\/^(.*?):[ \\t]*([^\\r\\n]*)$\/gm,Pt=\/^(?:about|app|app-storage|.+-extension|file|res|widget):$\/,Mt=\/^(?:GET|HEAD)$\/,Rt=\/^\\\/\\\/\/,It={},Wt={},$t="*\/".concat("*"),Bt=r.createElement("a");Bt.href=Ct.href;function Ft(e){return function(t,n){"string"!=typeof t&&(n=t,t="*");var r,i=0,o=t.toLowerCase().match(M)||[];if(g(n))while(r=o[i++])"+"===r[0]?(r=r.slice(1)||"*",(e[r]=e[r]||[]).unshift(n)):(e[r]=e[r]||[]).push(n)}}function _t(e,t,n,r){var i={},o=e===Wt;function a(s){var u;return i[s]=!0,w.each(e[s]||[],function(e,s){var l=s(t,n,r);return"string"!=typeof l||o||i[l]?o?!(u=l):void 0:(t.dataTypes.unshift(l),a(l),!1)}),u}return a(t.dataTypes[0])||!i["*"]&&a("*")}function zt(e,t){var n,r,i=w.ajaxSettings.flatOptions||{};for(n in t)void 0!==t[n]&&((i[n]?e:r||(r={}))[n]=t[n]);return r&&w.extend(!0,e,r),e}function Xt(e,t,n){var r,i,o,a,s=e.contents,u=e.dataTypes;while("*"===u[0])u.shift(),void 0===r&&(r=e.mimeType||t.getResponseHeader("Content-Type"));if(r)for(i in s)if(s[i]&&s[i].test(r)){u.unshift(i);break}if(u[0]in n)o=u[0];else{for(i in n){if(!u[0]||e.converters[i+" "+u[0]]){o=i;break}a||(a=i)}o=o||a}if(o)return o!==u[0]&&u.unshift(o),n[o]}function Ut(e,t,n,r){var i,o,a,s,u,l={},c=e.dataTypes.slice();if(c[1])for(a in e.converters)l[a.toLowerCase()]=e.converters[a];o=c.shift();while(o)if(e.responseFields[o]&&(n[e.responseFields[o]]=t),!u&&r&&e.dataFilter&&(t=e.dataFilter(t,e.dataType)),u=o,o=c.shift())if("*"===o)o=u;else if("*"!==u&&u!==o){if(!(a=l[u+" "+o]||l["* "+o]))for(i in l)if((s=i.split(" "))[1]===o&&(a=l[u+" "+s[0]]||l["* "+s[0]])){!0===a?a=l[i]:!0!==l[i]&&(o=s[0],c.unshift(s[1]));break}if(!0!==a)if(a&&e["throws"])t=a(t);else try{t=a(t)}catch(e){return{state:"parsererror",error:a?e:"No conversion from "+u+" to "+o}}}return{state:"success",data:t}}w.extend({active:0,lastModified:{},etag:{},ajaxSettings:{url:Ct.href,type:"GET",isLocal:Pt.test(Ct.protocol),global:!0,processData:!0,async:!0,contentType:"application\/x-www-form-urlencoded; charset=UTF-8",accepts:{"*":$t,text:"text\/plain",html:"text\/html",xml:"application\/xml, text\/xml",json:"application\/json, text\/javascript"},contents:{xml:\/\\bxml\\b\/,html:\/\\bhtml\/,json:\/\\bjson\\b\/},responseFields:{xml:"responseXML",text:"responseText",json:"responseJSON"},converters:{"* text":String,"text html":!0,"text json":JSON.parse,"text xml":w.parseXML},flatOptions:{url:!0,context:!0}},ajaxSetup:function(e,t){return t?zt(zt(e,w.ajaxSettings),t):zt(w.ajaxSettings,e)},ajaxPrefilter:Ft(It),ajaxTransport:Ft(Wt),ajax:function(t,n){"object"==typeof t&&(n=t,t=void 0),n=n||{};var i,o,a,s,u,l,c,f,p,d,h=w.ajaxSetup({},n),g=h.context||h,y=h.context&&(g.nodeType||g.jquery)?w(g):w.event,v=w.Deferred(),m=w.Callbacks("once memory"),x=h.statusCode||{},b={},T={},C="canceled",E={readyState:0,getResponseHeader:function(e){var t;if(c){if(!s){s={};while(t=Ot.exec(a))s[t[1].toLowerCase()]=t[2]}t=s[e.toLowerCase()]}return null==t?null:t},getAllResponseHeaders:function(){return c?a:null},setRequestHeader:function(e,t){return null==c&&(e=T[e.toLowerCase()]=T[e.toLowerCase()]||e,b[e]=t),this},overrideMimeType:function(e){return null==c&&(h.mimeType=e),this},statusCode:function(e){var t;if(e)if(c)E.always(e[E.status]);else for(t in e)x[t]=[x[t],e[t]];return this},abort:function(e){var t=e||C;return i&&i.abort(t),k(0,t),this}};if(v.promise(E),h.url=((t||h.url||Ct.href)+"").replace(Rt,Ct.protocol+"\/\/"),h.type=n.method||n.type||h.method||h.type,h.dataTypes=(h.dataType||"*").toLowerCase().match(M)||[""],null==h.crossDomain){l=r.createElement("a");try{l.href=h.url,l.href=l.href,h.crossDomain=Bt.protocol+"\/\/"+Bt.host!=l.protocol+"\/\/"+l.host}catch(e){h.crossDomain=!0}}if(h.data&&h.processData&&"string"!=typeof h.data&&(h.data=w.param(h.data,h.traditional)),_t(It,h,n,E),c)return E;(f=w.event&&h.global)&&0==w.active++&&w.event.trigger("ajaxStart"),h.type=h.type.toUpperCase(),h.hasContent=!Mt.test(h.type),o=h.url.replace(Lt,""),h.hasContent?h.data&&h.processData&&0===(h.contentType||"").indexOf("application\/x-www-form-urlencoded")&&(h.data=h.data.replace(qt,"+")):(d=h.url.slice(o.length),h.data&&(h.processData||"string"==typeof h.data)&&(o+=(kt.test(o)?"&":"?")+h.data,delete h.data),!1===h.cache&&(o=o.replace(Ht,"$1"),d=(kt.test(o)?"&":"?")+"_="+Et+++d),h.url=o+d),h.ifModified&&(w.lastModified[o]&&E.setRequestHeader("If-Modified-Since",w.lastModified[o]),w.etag[o]&&E.setRequestHeader("If-None-Match",w.etag[o])),(h.data&&h.hasContent&&!1!==h.contentType||n.contentType)&&E.setRequestHeader("Content-Type",h.contentType),E.setRequestHeader("Accept",h.dataTypes[0]&&h.accepts[h.dataTypes[0]]?h.accepts[h.dataTypes[0]]+("*"!==h.dataTypes[0]?", "+$t+"; q=0.01":""):h.accepts["*"]);for(p in h.headers)E.setRequestHeader(p,h.headers[p]);if(h.beforeSend&&(!1===h.beforeSend.call(g,E,h)||c))return E.abort();if(C="abort",m.add(h.complete),E.done(h.success),E.fail(h.error),i=_t(Wt,h,n,E)){if(E.readyState=1,f&&y.trigger("ajaxSend",[E,h]),c)return E;h.async&&h.timeout>0&&(u=e.setTimeout(function(){E.abort("timeout")},h.timeout));try{c=!1,i.send(b,k)}catch(e){if(c)throw e;k(-1,e)}}else k(-1,"No Transport");function k(t,n,r,s){var l,p,d,b,T,C=n;c||(c=!0,u&&e.clearTimeout(u),i=void 0,a=s||"",E.readyState=t>0?4:0,l=t>=200&&t<300||304===t,r&&(b=Xt(h,E,r)),b=Ut(h,b,E,l),l?(h.ifModified&&((T=E.getResponseHeader("Last-Modified"))&&(w.lastModified[o]=T),(T=E.getResponseHeader("etag"))&&(w.etag[o]=T)),204===t||"HEAD"===h.type?C="nocontent":304===t?C="notmodified":(C=b.state,p=b.data,l=!(d=b.error))):(d=C,!t&&C||(C="error",t<0&&(t=0))),E.status=t,E.statusText=(n||C)+"",l?v.resolveWith(g,[p,C,E]):v.rejectWith(g,[E,C,d]),E.statusCode(x),x=void 0,f&&y.trigger(l?"ajaxSuccess":"ajaxError",[E,h,l?p:d]),m.fireWith(g,[E,C]),f&&(y.trigger("ajaxComplete",[E,h]),--w.active||w.event.trigger("ajaxStop")))}return E},getJSON:function(e,t,n){return w.get(e,t,n,"json")},getScript:function(e,t){return w.get(e,void 0,t,"script")}}),w.each(["get","post"],function(e,t){w[t]=function(e,n,r,i){return g(n)&&(i=i||r,r=n,n=void 0),w.ajax(w.extend({url:e,type:t,dataType:i,data:n,success:r},w.isPlainObject(e)&&e))}}),w._evalUrl=function(e){return w.ajax({url:e,type:"GET",dataType:"script",cache:!0,async:!1,global:!1,"throws":!0})},w.fn.extend({wrapAll:function(e){var t;return this[0]&&(g(e)&&(e=e.call(this[0])),t=w(e,this[0].ownerDocument).eq(0).clone(!0),this[0].parentNode&&t.insertBefore(this[0]),t.map(function(){var e=this;while(e.firstElementChild)e=e.firstElementChild;return e}).append(this)),this},wrapInner:function(e){return g(e)?this.each(function(t){w(this).wrapInner(e.call(this,t))}):this.each(function(){var t=w(this),n=t.contents();n.length?n.wrapAll(e):t.append(e)})},wrap:function(e){var t=g(e);return this.each(function(n){w(this).wrapAll(t?e.call(this,n):e)})},unwrap:function(e){return this.parent(e).not("body").each(function(){w(this).replaceWith(this.childNodes)}),this}}),w.expr.pseudos.hidden=function(e){return!w.expr.pseudos.visible(e)},w.expr.pseudos.visible=function(e){return!!(e.offsetWidth||e.offsetHeight||e.getClientRects().length)},w.ajaxSettings.xhr=function(){try{return new e.XMLHttpRequest}catch(e){}};var Vt={0:200,1223:204},Gt=w.ajaxSettings.xhr();h.cors=!!Gt&&"withCredentials"in Gt,h.ajax=Gt=!!Gt,w.ajaxTransport(function(t){var n,r;if(h.cors||Gt&&!t.crossDomain)return{send:function(i,o){var a,s=t.xhr();if(s.open(t.type,t.url,t.async,t.username,t.password),t.xhrFields)for(a in t.xhrFields)s[a]=t.xhrFields[a];t.mimeType&&s.overrideMimeType&&s.overrideMimeType(t.mimeType),t.crossDomain||i["X-Requested-With"]||(i["X-Requested-With"]="XMLHttpRequest");for(a in i)s.setRequestHeader(a,i[a]);n=function(e){return function(){n&&(n=r=s.onload=s.onerror=s.onabort=s.ontimeout=s.onreadystatechange=null,"abort"===e?s.abort():"error"===e?"number"!=typeof s.status?o(0,"error"):o(s.status,s.statusText):o(Vt[s.status]||s.status,s.statusText,"text"!==(s.responseType||"text")||"string"!=typeof s.responseText?{binary:s.response}:{text:s.responseText},s.getAllResponseHeaders()))}},s.onload=n(),r=s.onerror=s.ontimeout=n("error"),void 0!==s.onabort?s.onabort=r:s.onreadystatechange=function(){4===s.readyState&&e.setTimeout(function(){n&&r()})},n=n("abort");try{s.send(t.hasContent&&t.data||null)}catch(e){if(n)throw e}},abort:function(){n&&n()}}}),w.ajaxPrefilter(function(e){e.crossDomain&&(e.contents.script=!1)}),w.ajaxSetup({accepts:{script:"text\/javascript, application\/javascript, application\/ecmascript, application\/x-ecmascript"},contents:{script:\/\\b(?:java|ecma)script\\b\/},converters:{"text script":function(e){return w.globalEval(e),e}}}),w.ajaxPrefilter("script",function(e){void 0===e.cache&&(e.cache=!1),e.crossDomain&&(e.type="GET")}),w.ajaxTransport("script",function(e){if(e.crossDomain){var t,n;return{send:function(i,o){t=w("<script>").prop({charset:e.scriptCharset,src:e.url}).on("load error",n=function(e){t.remove(),n=null,e&&o("error"===e.type?404:200,e.type)}),r.head.appendChild(t[0])},abort:function(){n&&n()}}}});var Yt=[],Qt=\/(=)\\?(?=&|$)|\\?\\?\/;w.ajaxSetup({jsonp:"callback",jsonpCallback:function(){var e=Yt.pop()||w.expando+"_"+Et++;return this[e]=!0,e}}),w.ajaxPrefilter("json jsonp",function(t,n,r){var i,o,a,s=!1!==t.jsonp&&(Qt.test(t.url)?"url":"string"==typeof t.data&&0===(t.contentType||"").indexOf("application\/x-www-form-urlencoded")&&Qt.test(t.data)&&"data");if(s||"jsonp"===t.dataTypes[0])return i=t.jsonpCallback=g(t.jsonpCallback)?t.jsonpCallback():t.jsonpCallback,s?t[s]=t[s].replace(Qt,"$1"+i):!1!==t.jsonp&&(t.url+=(kt.test(t.url)?"&":"?")+t.jsonp+"="+i),t.converters["script json"]=function(){return a||w.error(i+" was not called"),a[0]},t.dataTypes[0]="json",o=e[i],e[i]=function(){a=arguments},r.always(function(){void 0===o?w(e).removeProp(i):e[i]=o,t[i]&&(t.jsonpCallback=n.jsonpCallback,Yt.push(i)),a&&g(o)&&o(a[0]),a=o=void 0}),"script"}),h.createHTMLDocument=function(){var e=r.implementation.createHTMLDocument("").body;return e.innerHTML="<form><\/form><form><\/form>",2===e.childNodes.length}(),w.parseHTML=function(e,t,n){if("string"!=typeof e)return[];"boolean"==typeof t&&(n=t,t=!1);var i,o,a;return t||(h.createHTMLDocument?((i=(t=r.implementation.createHTMLDocument("")).createElement("base")).href=r.location.href,t.head.appendChild(i)):t=r),o=A.exec(e),a=!n&&[],o?[t.createElement(o[1])]:(o=xe([e],t,a),a&&a.length&&w(a).remove(),w.merge([],o.childNodes))},w.fn.load=function(e,t,n){var r,i,o,a=this,s=e.indexOf(" ");return s>-1&&(r=vt(e.slice(s)),e=e.slice(0,s)),g(t)?(n=t,t=void 0):t&&"object"==typeof t&&(i="POST"),a.length>0&&w.ajax({url:e,type:i||"GET",dataType:"html",data:t}).done(function(e){o=arguments,a.html(r?w("<div>").append(w.parseHTML(e)).find(r):e)}).always(n&&function(e,t){a.each(function(){n.apply(this,o||[e.responseText,t,e])})}),this},w.each(["ajaxStart","ajaxStop","ajaxComplete","ajaxError","ajaxSuccess","ajaxSend"],function(e,t){w.fn[t]=function(e){return this.on(t,e)}}),w.expr.pseudos.animated=function(e){return w.grep(w.timers,function(t){return e===t.elem}).length},w.offset={setOffset:function(e,t,n){var r,i,o,a,s,u,l,c=w.css(e,"position"),f=w(e),p={};"static"===c&&(e.style.position="relative"),s=f.offset(),o=w.css(e,"top"),u=w.css(e,"left"),(l=("absolute"===c||"fixed"===c)&&(o+u).indexOf("auto")>-1)?(a=(r=f.position()).top,i=r.left):(a=parseFloat(o)||0,i=parseFloat(u)||0),g(t)&&(t=t.call(e,n,w.extend({},s))),null!=t.top&&(p.top=t.top-s.top+a),null!=t.left&&(p.left=t.left-s.left+i),"using"in t?t.using.call(e,p):f.css(p)}},w.fn.extend({offset:function(e){if(arguments.length)return void 0===e?this:this.each(function(t){w.offset.setOffset(this,e,t)});var t,n,r=this[0];if(r)return r.getClientRects().length?(t=r.getBoundingClientRect(),n=r.ownerDocument.defaultView,{top:t.top+n.pageYOffset,left:t.left+n.pageXOffset}):{top:0,left:0}},position:function(){if(this[0]){var e,t,n,r=this[0],i={top:0,left:0};if("fixed"===w.css(r,"position"))t=r.getBoundingClientRect();else{t=this.offset(),n=r.ownerDocument,e=r.offsetParent||n.documentElement;while(e&&(e===n.body||e===n.documentElement)&&"static"===w.css(e,"position"))e=e.parentNode;e&&e!==r&&1===e.nodeType&&((i=w(e).offset()).top+=w.css(e,"borderTopWidth",!0),i.left+=w.css(e,"borderLeftWidth",!0))}return{top:t.top-i.top-w.css(r,"marginTop",!0),left:t.left-i.left-w.css(r,"marginLeft",!0)}}},offsetParent:function(){return this.map(function(){var e=this.offsetParent;while(e&&"static"===w.css(e,"position"))e=e.offsetParent;return e||be})}}),w.each({scrollLeft:"pageXOffset",scrollTop:"pageYOffset"},function(e,t){var n="pageYOffset"===t;w.fn[e]=function(r){return z(this,function(e,r,i){var o;if(y(e)?o=e:9===e.nodeType&&(o=e.defaultView),void 0===i)return o?o[t]:e[r];o?o.scrollTo(n?o.pageXOffset:i,n?i:o.pageYOffset):e[r]=i},e,r,arguments.length)}}),w.each(["top","left"],function(e,t){w.cssHooks[t]=_e(h.pixelPosition,function(e,n){if(n)return n=Fe(e,t),We.test(n)?w(e).position()[t]+"px":n})}),w.each({Height:"height",Width:"width"},function(e,t){w.each({padding:"inner"+e,content:t,"":"outer"+e},function(n,r){w.fn[r]=function(i,o){var a=arguments.length&&(n||"boolean"!=typeof i),s=n||(!0===i||!0===o?"margin":"border");return z(this,function(t,n,i){var o;return y(t)?0===r.indexOf("outer")?t["inner"+e]:t.document.documentElement["client"+e]:9===t.nodeType?(o=t.documentElement,Math.max(t.body["scroll"+e],o["scroll"+e],t.body["offset"+e],o["offset"+e],o["client"+e])):void 0===i?w.css(t,n,s):w.style(t,n,i,s)},t,a?i:void 0,a)}})}),w.each("blur focus focusin focusout resize scroll click dblclick mousedown mouseup mousemove mouseover mouseout mouseenter mouseleave change select submit keydown keypress keyup contextmenu".split(" "),function(e,t){w.fn[t]=function(e,n){return arguments.length>0?this.on(t,null,e,n):this.trigger(t)}}),w.fn.extend({hover:function(e,t){return this.mouseenter(e).mouseleave(t||e)}}),w.fn.extend({bind:function(e,t,n){return this.on(e,null,t,n)},unbind:function(e,t){return this.off(e,null,t)},delegate:function(e,t,n,r){return this.on(t,e,n,r)},undelegate:function(e,t,n){return 1===arguments.length?this.off(e,"**"):this.off(t,e||"**",n)}}),w.proxy=function(e,t){var n,r,i;if("string"==typeof t&&(n=e[t],t=e,e=n),g(e))return r=o.call(arguments,2),i=function(){return e.apply(t||this,r.concat(o.call(arguments)))},i.guid=e.guid=e.guid||w.guid++,i},w.holdReady=function(e){e?w.readyWait++:w.ready(!0)},w.isArray=Array.isArray,w.parseJSON=JSON.parse,w.nodeName=N,w.isFunction=g,w.isWindow=y,w.camelCase=G,w.type=x,w.now=Date.now,w.isNumeric=function(e){var t=w.type(e);return("number"===t||"string"===t)&&!isNaN(e-parseFloat(e))},"function"==typeof define&&define.amd&&define("jquery",[],function(){return w});var Jt=e.jQuery,Kt=e.$;return w.noConflict=function(t){return e.$===w&&(e.$=Kt),t&&e.jQuery===w&&(e.jQuery=Jt),w},t||(e.jQuery=e.$=w),w});$/;"	f
m	public\static\live\js\jquery-3.3.1.min.js	/^!function(e,t){"use strict";"object"==typeof module&&"object"==typeof module.exports?module.exports=e.document?t(e,!0):function(e){if(!e.document)throw new Error("jQuery requires a window with a document");return t(e)}:t(e)}("undefined"!=typeof window?window:this,function(e,t){"use strict";var n=[],r=e.document,i=Object.getPrototypeOf,o=n.slice,a=n.concat,s=n.push,u=n.indexOf,l={},c=l.toString,f=l.hasOwnProperty,p=f.toString,d=p.call(Object),h={},g=function e(t){return"function"==typeof t&&"number"!=typeof t.nodeType},y=function e(t){return null!=t&&t===t.window},v={type:!0,src:!0,noModule:!0};function m(e,t,n){var i,o=(t=t||r).createElement("script");if(o.text=e,n)for(i in v)n[i]&&(o[i]=n[i]);t.head.appendChild(o).parentNode.removeChild(o)}function x(e){return null==e?e+"":"object"==typeof e||"function"==typeof e?l[c.call(e)]||"object":typeof e}var b="3.3.1",w=function(e,t){return new w.fn.init(e,t)},T=\/^[\\s\\uFEFF\\xA0]+|[\\s\\uFEFF\\xA0]+$\/g;w.fn=w.prototype={jquery:"3.3.1",constructor:w,length:0,toArray:function(){return o.call(this)},get:function(e){return null==e?o.call(this):e<0?this[e+this.length]:this[e]},pushStack:function(e){var t=w.merge(this.constructor(),e);return t.prevObject=this,t},each:function(e){return w.each(this,e)},map:function(e){return this.pushStack(w.map(this,function(t,n){return e.call(t,n,t)}))},slice:function(){return this.pushStack(o.apply(this,arguments))},first:function(){return this.eq(0)},last:function(){return this.eq(-1)},eq:function(e){var t=this.length,n=+e+(e<0?t:0);return this.pushStack(n>=0&&n<t?[this[n]]:[])},end:function(){return this.prevObject||this.constructor()},push:s,sort:n.sort,splice:n.splice},w.extend=w.fn.extend=function(){var e,t,n,r,i,o,a=arguments[0]||{},s=1,u=arguments.length,l=!1;for("boolean"==typeof a&&(l=a,a=arguments[s]||{},s++),"object"==typeof a||g(a)||(a={}),s===u&&(a=this,s--);s<u;s++)if(null!=(e=arguments[s]))for(t in e)n=a[t],a!==(r=e[t])&&(l&&r&&(w.isPlainObject(r)||(i=Array.isArray(r)))?(i?(i=!1,o=n&&Array.isArray(n)?n:[]):o=n&&w.isPlainObject(n)?n:{},a[t]=w.extend(l,o,r)):void 0!==r&&(a[t]=r));return a},w.extend({expando:"jQuery"+("3.3.1"+Math.random()).replace(\/\\D\/g,""),isReady:!0,error:function(e){throw new Error(e)},noop:function(){},isPlainObject:function(e){var t,n;return!(!e||"[object Object]"!==c.call(e))&&(!(t=i(e))||"function"==typeof(n=f.call(t,"constructor")&&t.constructor)&&p.call(n)===d)},isEmptyObject:function(e){var t;for(t in e)return!1;return!0},globalEval:function(e){m(e)},each:function(e,t){var n,r=0;if(C(e)){for(n=e.length;r<n;r++)if(!1===t.call(e[r],r,e[r]))break}else for(r in e)if(!1===t.call(e[r],r,e[r]))break;return e},trim:function(e){return null==e?"":(e+"").replace(T,"")},makeArray:function(e,t){var n=t||[];return null!=e&&(C(Object(e))?w.merge(n,"string"==typeof e?[e]:e):s.call(n,e)),n},inArray:function(e,t,n){return null==t?-1:u.call(t,e,n)},merge:function(e,t){for(var n=+t.length,r=0,i=e.length;r<n;r++)e[i++]=t[r];return e.length=i,e},grep:function(e,t,n){for(var r,i=[],o=0,a=e.length,s=!n;o<a;o++)(r=!t(e[o],o))!==s&&i.push(e[o]);return i},map:function(e,t,n){var r,i,o=0,s=[];if(C(e))for(r=e.length;o<r;o++)null!=(i=t(e[o],o,n))&&s.push(i);else for(o in e)null!=(i=t(e[o],o,n))&&s.push(i);return a.apply([],s)},guid:1,support:h}),"function"==typeof Symbol&&(w.fn[Symbol.iterator]=n[Symbol.iterator]),w.each("Boolean Number String Function Array Date RegExp Object Error Symbol".split(" "),function(e,t){l["[object "+t+"]"]=t.toLowerCase()});function C(e){var t=!!e&&"length"in e&&e.length,n=x(e);return!g(e)&&!y(e)&&("array"===n||0===t||"number"==typeof t&&t>0&&t-1 in e)}var E=function(e){var t,n,r,i,o,a,s,u,l,c,f,p,d,h,g,y,v,m,x,b="sizzle"+1*new Date,w=e.document,T=0,C=0,E=ae(),k=ae(),S=ae(),D=function(e,t){return e===t&&(f=!0),0},N={}.hasOwnProperty,A=[],j=A.pop,q=A.push,L=A.push,H=A.slice,O=function(e,t){for(var n=0,r=e.length;n<r;n++)if(e[n]===t)return n;return-1},P="checked|selected|async|autofocus|autoplay|controls|defer|disabled|hidden|ismap|loop|multiple|open|readonly|required|scoped",M="[\\\\x20\\\\t\\\\r\\\\n\\\\f]",R="(?:\\\\\\\\.|[\\\\w-]|[^\\0-\\\\xa0])+",I="\\\\["+M+"*("+R+")(?:"+M+"*([*^$|!~]?=)"+M+"*(?:'((?:\\\\\\\\.|[^\\\\\\\\'])*)'|\\"((?:\\\\\\\\.|[^\\\\\\\\\\"])*)\\"|("+R+"))|)"+M+"*\\\\]",W=":("+R+")(?:\\\\((('((?:\\\\\\\\.|[^\\\\\\\\'])*)'|\\"((?:\\\\\\\\.|[^\\\\\\\\\\"])*)\\")|((?:\\\\\\\\.|[^\\\\\\\\()[\\\\]]|"+I+")*)|.*)\\\\)|)",$=new RegExp(M+"+","g"),B=new RegExp("^"+M+"+|((?:^|[^\\\\\\\\])(?:\\\\\\\\.)*)"+M+"+$","g"),F=new RegExp("^"+M+"*,"+M+"*"),_=new RegExp("^"+M+"*([>+~]|"+M+")"+M+"*"),z=new RegExp("="+M+"*([^\\\\]'\\"]*?)"+M+"*\\\\]","g"),X=new RegExp(W),U=new RegExp("^"+R+"$"),V={ID:new RegExp("^#("+R+")"),CLASS:new RegExp("^\\\\.("+R+")"),TAG:new RegExp("^("+R+"|[*])"),ATTR:new RegExp("^"+I),PSEUDO:new RegExp("^"+W),CHILD:new RegExp("^:(only|first|last|nth|nth-last)-(child|of-type)(?:\\\\("+M+"*(even|odd|(([+-]|)(\\\\d*)n|)"+M+"*(?:([+-]|)"+M+"*(\\\\d+)|))"+M+"*\\\\)|)","i"),bool:new RegExp("^(?:"+P+")$","i"),needsContext:new RegExp("^"+M+"*[>+~]|:(even|odd|eq|gt|lt|nth|first|last)(?:\\\\("+M+"*((?:-\\\\d)?\\\\d*)"+M+"*\\\\)|)(?=[^-]|$)","i")},G=\/^(?:input|select|textarea|button)$\/i,Y=\/^h\\d$\/i,Q=\/^[^{]+\\{\\s*\\[native \\w\/,J=\/^(?:#([\\w-]+)|(\\w+)|\\.([\\w-]+))$\/,K=\/[+~]\/,Z=new RegExp("\\\\\\\\([\\\\da-f]{1,6}"+M+"?|("+M+")|.)","ig"),ee=function(e,t,n){var r="0x"+t-65536;return r!==r||n?t:r<0?String.fromCharCode(r+65536):String.fromCharCode(r>>10|55296,1023&r|56320)},te=\/([\\0-\\x1f\\x7f]|^-?\\d)|^-$|[^\\0-\\x1f\\x7f-\\uFFFF\\w-]\/g,ne=function(e,t){return t?"\\0"===e?"\\ufffd":e.slice(0,-1)+"\\\\"+e.charCodeAt(e.length-1).toString(16)+" ":"\\\\"+e},re=function(){p()},ie=me(function(e){return!0===e.disabled&&("form"in e||"label"in e)},{dir:"parentNode",next:"legend"});try{L.apply(A=H.call(w.childNodes),w.childNodes),A[w.childNodes.length].nodeType}catch(e){L={apply:A.length?function(e,t){q.apply(e,H.call(t))}:function(e,t){var n=e.length,r=0;while(e[n++]=t[r++]);e.length=n-1}}}function oe(e,t,r,i){var o,s,l,c,f,h,v,m=t&&t.ownerDocument,T=t?t.nodeType:9;if(r=r||[],"string"!=typeof e||!e||1!==T&&9!==T&&11!==T)return r;if(!i&&((t?t.ownerDocument||t:w)!==d&&p(t),t=t||d,g)){if(11!==T&&(f=J.exec(e)))if(o=f[1]){if(9===T){if(!(l=t.getElementById(o)))return r;if(l.id===o)return r.push(l),r}else if(m&&(l=m.getElementById(o))&&x(t,l)&&l.id===o)return r.push(l),r}else{if(f[2])return L.apply(r,t.getElementsByTagName(e)),r;if((o=f[3])&&n.getElementsByClassName&&t.getElementsByClassName)return L.apply(r,t.getElementsByClassName(o)),r}if(n.qsa&&!S[e+" "]&&(!y||!y.test(e))){if(1!==T)m=t,v=e;else if("object"!==t.nodeName.toLowerCase()){(c=t.getAttribute("id"))?c=c.replace(te,ne):t.setAttribute("id",c=b),s=(h=a(e)).length;while(s--)h[s]="#"+c+" "+ve(h[s]);v=h.join(","),m=K.test(e)&&ge(t.parentNode)||t}if(v)try{return L.apply(r,m.querySelectorAll(v)),r}catch(e){}finally{c===b&&t.removeAttribute("id")}}}return u(e.replace(B,"$1"),t,r,i)}function ae(){var e=[];function t(n,i){return e.push(n+" ")>r.cacheLength&&delete t[e.shift()],t[n+" "]=i}return t}function se(e){return e[b]=!0,e}function ue(e){var t=d.createElement("fieldset");try{return!!e(t)}catch(e){return!1}finally{t.parentNode&&t.parentNode.removeChild(t),t=null}}function le(e,t){var n=e.split("|"),i=n.length;while(i--)r.attrHandle[n[i]]=t}function ce(e,t){var n=t&&e,r=n&&1===e.nodeType&&1===t.nodeType&&e.sourceIndex-t.sourceIndex;if(r)return r;if(n)while(n=n.nextSibling)if(n===t)return-1;return e?1:-1}function fe(e){return function(t){return"input"===t.nodeName.toLowerCase()&&t.type===e}}function pe(e){return function(t){var n=t.nodeName.toLowerCase();return("input"===n||"button"===n)&&t.type===e}}function de(e){return function(t){return"form"in t?t.parentNode&&!1===t.disabled?"label"in t?"label"in t.parentNode?t.parentNode.disabled===e:t.disabled===e:t.isDisabled===e||t.isDisabled!==!e&&ie(t)===e:t.disabled===e:"label"in t&&t.disabled===e}}function he(e){return se(function(t){return t=+t,se(function(n,r){var i,o=e([],n.length,t),a=o.length;while(a--)n[i=o[a]]&&(n[i]=!(r[i]=n[i]))})})}function ge(e){return e&&"undefined"!=typeof e.getElementsByTagName&&e}n=oe.support={},o=oe.isXML=function(e){var t=e&&(e.ownerDocument||e).documentElement;return!!t&&"HTML"!==t.nodeName},p=oe.setDocument=function(e){var t,i,a=e?e.ownerDocument||e:w;return a!==d&&9===a.nodeType&&a.documentElement?(d=a,h=d.documentElement,g=!o(d),w!==d&&(i=d.defaultView)&&i.top!==i&&(i.addEventListener?i.addEventListener("unload",re,!1):i.attachEvent&&i.attachEvent("onunload",re)),n.attributes=ue(function(e){return e.className="i",!e.getAttribute("className")}),n.getElementsByTagName=ue(function(e){return e.appendChild(d.createComment("")),!e.getElementsByTagName("*").length}),n.getElementsByClassName=Q.test(d.getElementsByClassName),n.getById=ue(function(e){return h.appendChild(e).id=b,!d.getElementsByName||!d.getElementsByName(b).length}),n.getById?(r.filter.ID=function(e){var t=e.replace(Z,ee);return function(e){return e.getAttribute("id")===t}},r.find.ID=function(e,t){if("undefined"!=typeof t.getElementById&&g){var n=t.getElementById(e);return n?[n]:[]}}):(r.filter.ID=function(e){var t=e.replace(Z,ee);return function(e){var n="undefined"!=typeof e.getAttributeNode&&e.getAttributeNode("id");return n&&n.value===t}},r.find.ID=function(e,t){if("undefined"!=typeof t.getElementById&&g){var n,r,i,o=t.getElementById(e);if(o){if((n=o.getAttributeNode("id"))&&n.value===e)return[o];i=t.getElementsByName(e),r=0;while(o=i[r++])if((n=o.getAttributeNode("id"))&&n.value===e)return[o]}return[]}}),r.find.TAG=n.getElementsByTagName?function(e,t){return"undefined"!=typeof t.getElementsByTagName?t.getElementsByTagName(e):n.qsa?t.querySelectorAll(e):void 0}:function(e,t){var n,r=[],i=0,o=t.getElementsByTagName(e);if("*"===e){while(n=o[i++])1===n.nodeType&&r.push(n);return r}return o},r.find.CLASS=n.getElementsByClassName&&function(e,t){if("undefined"!=typeof t.getElementsByClassName&&g)return t.getElementsByClassName(e)},v=[],y=[],(n.qsa=Q.test(d.querySelectorAll))&&(ue(function(e){h.appendChild(e).innerHTML="<a id='"+b+"'><\/a><select id='"+b+"-\\r\\\\' msallowcapture=''><option selected=''><\/option><\/select>",e.querySelectorAll("[msallowcapture^='']").length&&y.push("[*^$]="+M+"*(?:''|\\"\\")"),e.querySelectorAll("[selected]").length||y.push("\\\\["+M+"*(?:value|"+P+")"),e.querySelectorAll("[id~="+b+"-]").length||y.push("~="),e.querySelectorAll(":checked").length||y.push(":checked"),e.querySelectorAll("a#"+b+"+*").length||y.push(".#.+[+~]")}),ue(function(e){e.innerHTML="<a href='' disabled='disabled'><\/a><select disabled='disabled'><option\/><\/select>";var t=d.createElement("input");t.setAttribute("type","hidden"),e.appendChild(t).setAttribute("name","D"),e.querySelectorAll("[name=d]").length&&y.push("name"+M+"*[*^$|!~]?="),2!==e.querySelectorAll(":enabled").length&&y.push(":enabled",":disabled"),h.appendChild(e).disabled=!0,2!==e.querySelectorAll(":disabled").length&&y.push(":enabled",":disabled"),e.querySelectorAll("*,:x"),y.push(",.*:")})),(n.matchesSelector=Q.test(m=h.matches||h.webkitMatchesSelector||h.mozMatchesSelector||h.oMatchesSelector||h.msMatchesSelector))&&ue(function(e){n.disconnectedMatch=m.call(e,"*"),m.call(e,"[s!='']:x"),v.push("!=",W)}),y=y.length&&new RegExp(y.join("|")),v=v.length&&new RegExp(v.join("|")),t=Q.test(h.compareDocumentPosition),x=t||Q.test(h.contains)?function(e,t){var n=9===e.nodeType?e.documentElement:e,r=t&&t.parentNode;return e===r||!(!r||1!==r.nodeType||!(n.contains?n.contains(r):e.compareDocumentPosition&&16&e.compareDocumentPosition(r)))}:function(e,t){if(t)while(t=t.parentNode)if(t===e)return!0;return!1},D=t?function(e,t){if(e===t)return f=!0,0;var r=!e.compareDocumentPosition-!t.compareDocumentPosition;return r||(1&(r=(e.ownerDocument||e)===(t.ownerDocument||t)?e.compareDocumentPosition(t):1)||!n.sortDetached&&t.compareDocumentPosition(e)===r?e===d||e.ownerDocument===w&&x(w,e)?-1:t===d||t.ownerDocument===w&&x(w,t)?1:c?O(c,e)-O(c,t):0:4&r?-1:1)}:function(e,t){if(e===t)return f=!0,0;var n,r=0,i=e.parentNode,o=t.parentNode,a=[e],s=[t];if(!i||!o)return e===d?-1:t===d?1:i?-1:o?1:c?O(c,e)-O(c,t):0;if(i===o)return ce(e,t);n=e;while(n=n.parentNode)a.unshift(n);n=t;while(n=n.parentNode)s.unshift(n);while(a[r]===s[r])r++;return r?ce(a[r],s[r]):a[r]===w?-1:s[r]===w?1:0},d):d},oe.matches=function(e,t){return oe(e,null,null,t)},oe.matchesSelector=function(e,t){if((e.ownerDocument||e)!==d&&p(e),t=t.replace(z,"='$1']"),n.matchesSelector&&g&&!S[t+" "]&&(!v||!v.test(t))&&(!y||!y.test(t)))try{var r=m.call(e,t);if(r||n.disconnectedMatch||e.document&&11!==e.document.nodeType)return r}catch(e){}return oe(t,d,null,[e]).length>0},oe.contains=function(e,t){return(e.ownerDocument||e)!==d&&p(e),x(e,t)},oe.attr=function(e,t){(e.ownerDocument||e)!==d&&p(e);var i=r.attrHandle[t.toLowerCase()],o=i&&N.call(r.attrHandle,t.toLowerCase())?i(e,t,!g):void 0;return void 0!==o?o:n.attributes||!g?e.getAttribute(t):(o=e.getAttributeNode(t))&&o.specified?o.value:null},oe.escape=function(e){return(e+"").replace(te,ne)},oe.error=function(e){throw new Error("Syntax error, unrecognized expression: "+e)},oe.uniqueSort=function(e){var t,r=[],i=0,o=0;if(f=!n.detectDuplicates,c=!n.sortStable&&e.slice(0),e.sort(D),f){while(t=e[o++])t===e[o]&&(i=r.push(o));while(i--)e.splice(r[i],1)}return c=null,e},i=oe.getText=function(e){var t,n="",r=0,o=e.nodeType;if(o){if(1===o||9===o||11===o){if("string"==typeof e.textContent)return e.textContent;for(e=e.firstChild;e;e=e.nextSibling)n+=i(e)}else if(3===o||4===o)return e.nodeValue}else while(t=e[r++])n+=i(t);return n},(r=oe.selectors={cacheLength:50,createPseudo:se,match:V,attrHandle:{},find:{},relative:{">":{dir:"parentNode",first:!0}," ":{dir:"parentNode"},"+":{dir:"previousSibling",first:!0},"~":{dir:"previousSibling"}},preFilter:{ATTR:function(e){return e[1]=e[1].replace(Z,ee),e[3]=(e[3]||e[4]||e[5]||"").replace(Z,ee),"~="===e[2]&&(e[3]=" "+e[3]+" "),e.slice(0,4)},CHILD:function(e){return e[1]=e[1].toLowerCase(),"nth"===e[1].slice(0,3)?(e[3]||oe.error(e[0]),e[4]=+(e[4]?e[5]+(e[6]||1):2*("even"===e[3]||"odd"===e[3])),e[5]=+(e[7]+e[8]||"odd"===e[3])):e[3]&&oe.error(e[0]),e},PSEUDO:function(e){var t,n=!e[6]&&e[2];return V.CHILD.test(e[0])?null:(e[3]?e[2]=e[4]||e[5]||"":n&&X.test(n)&&(t=a(n,!0))&&(t=n.indexOf(")",n.length-t)-n.length)&&(e[0]=e[0].slice(0,t),e[2]=n.slice(0,t)),e.slice(0,3))}},filter:{TAG:function(e){var t=e.replace(Z,ee).toLowerCase();return"*"===e?function(){return!0}:function(e){return e.nodeName&&e.nodeName.toLowerCase()===t}},CLASS:function(e){var t=E[e+" "];return t||(t=new RegExp("(^|"+M+")"+e+"("+M+"|$)"))&&E(e,function(e){return t.test("string"==typeof e.className&&e.className||"undefined"!=typeof e.getAttribute&&e.getAttribute("class")||"")})},ATTR:function(e,t,n){return function(r){var i=oe.attr(r,e);return null==i?"!="===t:!t||(i+="","="===t?i===n:"!="===t?i!==n:"^="===t?n&&0===i.indexOf(n):"*="===t?n&&i.indexOf(n)>-1:"$="===t?n&&i.slice(-n.length)===n:"~="===t?(" "+i.replace($," ")+" ").indexOf(n)>-1:"|="===t&&(i===n||i.slice(0,n.length+1)===n+"-"))}},CHILD:function(e,t,n,r,i){var o="nth"!==e.slice(0,3),a="last"!==e.slice(-4),s="of-type"===t;return 1===r&&0===i?function(e){return!!e.parentNode}:function(t,n,u){var l,c,f,p,d,h,g=o!==a?"nextSibling":"previousSibling",y=t.parentNode,v=s&&t.nodeName.toLowerCase(),m=!u&&!s,x=!1;if(y){if(o){while(g){p=t;while(p=p[g])if(s?p.nodeName.toLowerCase()===v:1===p.nodeType)return!1;h=g="only"===e&&!h&&"nextSibling"}return!0}if(h=[a?y.firstChild:y.lastChild],a&&m){x=(d=(l=(c=(f=(p=y)[b]||(p[b]={}))[p.uniqueID]||(f[p.uniqueID]={}))[e]||[])[0]===T&&l[1])&&l[2],p=d&&y.childNodes[d];while(p=++d&&p&&p[g]||(x=d=0)||h.pop())if(1===p.nodeType&&++x&&p===t){c[e]=[T,d,x];break}}else if(m&&(x=d=(l=(c=(f=(p=t)[b]||(p[b]={}))[p.uniqueID]||(f[p.uniqueID]={}))[e]||[])[0]===T&&l[1]),!1===x)while(p=++d&&p&&p[g]||(x=d=0)||h.pop())if((s?p.nodeName.toLowerCase()===v:1===p.nodeType)&&++x&&(m&&((c=(f=p[b]||(p[b]={}))[p.uniqueID]||(f[p.uniqueID]={}))[e]=[T,x]),p===t))break;return(x-=i)===r||x%r==0&&x\/r>=0}}},PSEUDO:function(e,t){var n,i=r.pseudos[e]||r.setFilters[e.toLowerCase()]||oe.error("unsupported pseudo: "+e);return i[b]?i(t):i.length>1?(n=[e,e,"",t],r.setFilters.hasOwnProperty(e.toLowerCase())?se(function(e,n){var r,o=i(e,t),a=o.length;while(a--)e[r=O(e,o[a])]=!(n[r]=o[a])}):function(e){return i(e,0,n)}):i}},pseudos:{not:se(function(e){var t=[],n=[],r=s(e.replace(B,"$1"));return r[b]?se(function(e,t,n,i){var o,a=r(e,null,i,[]),s=e.length;while(s--)(o=a[s])&&(e[s]=!(t[s]=o))}):function(e,i,o){return t[0]=e,r(t,null,o,n),t[0]=null,!n.pop()}}),has:se(function(e){return function(t){return oe(e,t).length>0}}),contains:se(function(e){return e=e.replace(Z,ee),function(t){return(t.textContent||t.innerText||i(t)).indexOf(e)>-1}}),lang:se(function(e){return U.test(e||"")||oe.error("unsupported lang: "+e),e=e.replace(Z,ee).toLowerCase(),function(t){var n;do{if(n=g?t.lang:t.getAttribute("xml:lang")||t.getAttribute("lang"))return(n=n.toLowerCase())===e||0===n.indexOf(e+"-")}while((t=t.parentNode)&&1===t.nodeType);return!1}}),target:function(t){var n=e.location&&e.location.hash;return n&&n.slice(1)===t.id},root:function(e){return e===h},focus:function(e){return e===d.activeElement&&(!d.hasFocus||d.hasFocus())&&!!(e.type||e.href||~e.tabIndex)},enabled:de(!1),disabled:de(!0),checked:function(e){var t=e.nodeName.toLowerCase();return"input"===t&&!!e.checked||"option"===t&&!!e.selected},selected:function(e){return e.parentNode&&e.parentNode.selectedIndex,!0===e.selected},empty:function(e){for(e=e.firstChild;e;e=e.nextSibling)if(e.nodeType<6)return!1;return!0},parent:function(e){return!r.pseudos.empty(e)},header:function(e){return Y.test(e.nodeName)},input:function(e){return G.test(e.nodeName)},button:function(e){var t=e.nodeName.toLowerCase();return"input"===t&&"button"===e.type||"button"===t},text:function(e){var t;return"input"===e.nodeName.toLowerCase()&&"text"===e.type&&(null==(t=e.getAttribute("type"))||"text"===t.toLowerCase())},first:he(function(){return[0]}),last:he(function(e,t){return[t-1]}),eq:he(function(e,t,n){return[n<0?n+t:n]}),even:he(function(e,t){for(var n=0;n<t;n+=2)e.push(n);return e}),odd:he(function(e,t){for(var n=1;n<t;n+=2)e.push(n);return e}),lt:he(function(e,t,n){for(var r=n<0?n+t:n;--r>=0;)e.push(r);return e}),gt:he(function(e,t,n){for(var r=n<0?n+t:n;++r<t;)e.push(r);return e})}}).pseudos.nth=r.pseudos.eq;for(t in{radio:!0,checkbox:!0,file:!0,password:!0,image:!0})r.pseudos[t]=fe(t);for(t in{submit:!0,reset:!0})r.pseudos[t]=pe(t);function ye(){}ye.prototype=r.filters=r.pseudos,r.setFilters=new ye,a=oe.tokenize=function(e,t){var n,i,o,a,s,u,l,c=k[e+" "];if(c)return t?0:c.slice(0);s=e,u=[],l=r.preFilter;while(s){n&&!(i=F.exec(s))||(i&&(s=s.slice(i[0].length)||s),u.push(o=[])),n=!1,(i=_.exec(s))&&(n=i.shift(),o.push({value:n,type:i[0].replace(B," ")}),s=s.slice(n.length));for(a in r.filter)!(i=V[a].exec(s))||l[a]&&!(i=l[a](i))||(n=i.shift(),o.push({value:n,type:a,matches:i}),s=s.slice(n.length));if(!n)break}return t?s.length:s?oe.error(e):k(e,u).slice(0)};function ve(e){for(var t=0,n=e.length,r="";t<n;t++)r+=e[t].value;return r}function me(e,t,n){var r=t.dir,i=t.next,o=i||r,a=n&&"parentNode"===o,s=C++;return t.first?function(t,n,i){while(t=t[r])if(1===t.nodeType||a)return e(t,n,i);return!1}:function(t,n,u){var l,c,f,p=[T,s];if(u){while(t=t[r])if((1===t.nodeType||a)&&e(t,n,u))return!0}else while(t=t[r])if(1===t.nodeType||a)if(f=t[b]||(t[b]={}),c=f[t.uniqueID]||(f[t.uniqueID]={}),i&&i===t.nodeName.toLowerCase())t=t[r]||t;else{if((l=c[o])&&l[0]===T&&l[1]===s)return p[2]=l[2];if(c[o]=p,p[2]=e(t,n,u))return!0}return!1}}function xe(e){return e.length>1?function(t,n,r){var i=e.length;while(i--)if(!e[i](t,n,r))return!1;return!0}:e[0]}function be(e,t,n){for(var r=0,i=t.length;r<i;r++)oe(e,t[r],n);return n}function we(e,t,n,r,i){for(var o,a=[],s=0,u=e.length,l=null!=t;s<u;s++)(o=e[s])&&(n&&!n(o,r,i)||(a.push(o),l&&t.push(s)));return a}function Te(e,t,n,r,i,o){return r&&!r[b]&&(r=Te(r)),i&&!i[b]&&(i=Te(i,o)),se(function(o,a,s,u){var l,c,f,p=[],d=[],h=a.length,g=o||be(t||"*",s.nodeType?[s]:s,[]),y=!e||!o&&t?g:we(g,p,e,s,u),v=n?i||(o?e:h||r)?[]:a:y;if(n&&n(y,v,s,u),r){l=we(v,d),r(l,[],s,u),c=l.length;while(c--)(f=l[c])&&(v[d[c]]=!(y[d[c]]=f))}if(o){if(i||e){if(i){l=[],c=v.length;while(c--)(f=v[c])&&l.push(y[c]=f);i(null,v=[],l,u)}c=v.length;while(c--)(f=v[c])&&(l=i?O(o,f):p[c])>-1&&(o[l]=!(a[l]=f))}}else v=we(v===a?v.splice(h,v.length):v),i?i(null,a,v,u):L.apply(a,v)})}function Ce(e){for(var t,n,i,o=e.length,a=r.relative[e[0].type],s=a||r.relative[" "],u=a?1:0,c=me(function(e){return e===t},s,!0),f=me(function(e){return O(t,e)>-1},s,!0),p=[function(e,n,r){var i=!a&&(r||n!==l)||((t=n).nodeType?c(e,n,r):f(e,n,r));return t=null,i}];u<o;u++)if(n=r.relative[e[u].type])p=[me(xe(p),n)];else{if((n=r.filter[e[u].type].apply(null,e[u].matches))[b]){for(i=++u;i<o;i++)if(r.relative[e[i].type])break;return Te(u>1&&xe(p),u>1&&ve(e.slice(0,u-1).concat({value:" "===e[u-2].type?"*":""})).replace(B,"$1"),n,u<i&&Ce(e.slice(u,i)),i<o&&Ce(e=e.slice(i)),i<o&&ve(e))}p.push(n)}return xe(p)}function Ee(e,t){var n=t.length>0,i=e.length>0,o=function(o,a,s,u,c){var f,h,y,v=0,m="0",x=o&&[],b=[],w=l,C=o||i&&r.find.TAG("*",c),E=T+=null==w?1:Math.random()||.1,k=C.length;for(c&&(l=a===d||a||c);m!==k&&null!=(f=C[m]);m++){if(i&&f){h=0,a||f.ownerDocument===d||(p(f),s=!g);while(y=e[h++])if(y(f,a||d,s)){u.push(f);break}c&&(T=E)}n&&((f=!y&&f)&&v--,o&&x.push(f))}if(v+=m,n&&m!==v){h=0;while(y=t[h++])y(x,b,a,s);if(o){if(v>0)while(m--)x[m]||b[m]||(b[m]=j.call(u));b=we(b)}L.apply(u,b),c&&!o&&b.length>0&&v+t.length>1&&oe.uniqueSort(u)}return c&&(T=E,l=w),x};return n?se(o):o}return s=oe.compile=function(e,t){var n,r=[],i=[],o=S[e+" "];if(!o){t||(t=a(e)),n=t.length;while(n--)(o=Ce(t[n]))[b]?r.push(o):i.push(o);(o=S(e,Ee(i,r))).selector=e}return o},u=oe.select=function(e,t,n,i){var o,u,l,c,f,p="function"==typeof e&&e,d=!i&&a(e=p.selector||e);if(n=n||[],1===d.length){if((u=d[0]=d[0].slice(0)).length>2&&"ID"===(l=u[0]).type&&9===t.nodeType&&g&&r.relative[u[1].type]){if(!(t=(r.find.ID(l.matches[0].replace(Z,ee),t)||[])[0]))return n;p&&(t=t.parentNode),e=e.slice(u.shift().value.length)}o=V.needsContext.test(e)?0:u.length;while(o--){if(l=u[o],r.relative[c=l.type])break;if((f=r.find[c])&&(i=f(l.matches[0].replace(Z,ee),K.test(u[0].type)&&ge(t.parentNode)||t))){if(u.splice(o,1),!(e=i.length&&ve(u)))return L.apply(n,i),n;break}}}return(p||s(e,d))(i,t,!g,n,!t||K.test(e)&&ge(t.parentNode)||t),n},n.sortStable=b.split("").sort(D).join("")===b,n.detectDuplicates=!!f,p(),n.sortDetached=ue(function(e){return 1&e.compareDocumentPosition(d.createElement("fieldset"))}),ue(function(e){return e.innerHTML="<a href='#'><\/a>","#"===e.firstChild.getAttribute("href")})||le("type|href|height|width",function(e,t,n){if(!n)return e.getAttribute(t,"type"===t.toLowerCase()?1:2)}),n.attributes&&ue(function(e){return e.innerHTML="<input\/>",e.firstChild.setAttribute("value",""),""===e.firstChild.getAttribute("value")})||le("value",function(e,t,n){if(!n&&"input"===e.nodeName.toLowerCase())return e.defaultValue}),ue(function(e){return null==e.getAttribute("disabled")})||le(P,function(e,t,n){var r;if(!n)return!0===e[t]?t.toLowerCase():(r=e.getAttributeNode(t))&&r.specified?r.value:null}),oe}(e);w.find=E,w.expr=E.selectors,w.expr[":"]=w.expr.pseudos,w.uniqueSort=w.unique=E.uniqueSort,w.text=E.getText,w.isXMLDoc=E.isXML,w.contains=E.contains,w.escapeSelector=E.escape;var k=function(e,t,n){var r=[],i=void 0!==n;while((e=e[t])&&9!==e.nodeType)if(1===e.nodeType){if(i&&w(e).is(n))break;r.push(e)}return r},S=function(e,t){for(var n=[];e;e=e.nextSibling)1===e.nodeType&&e!==t&&n.push(e);return n},D=w.expr.match.needsContext;function N(e,t){return e.nodeName&&e.nodeName.toLowerCase()===t.toLowerCase()}var A=\/^<([a-z][^\\\/\\0>:\\x20\\t\\r\\n\\f]*)[\\x20\\t\\r\\n\\f]*\\\/?>(?:<\\\/\\1>|)$\/i;function j(e,t,n){return g(t)?w.grep(e,function(e,r){return!!t.call(e,r,e)!==n}):t.nodeType?w.grep(e,function(e){return e===t!==n}):"string"!=typeof t?w.grep(e,function(e){return u.call(t,e)>-1!==n}):w.filter(t,e,n)}w.filter=function(e,t,n){var r=t[0];return n&&(e=":not("+e+")"),1===t.length&&1===r.nodeType?w.find.matchesSelector(r,e)?[r]:[]:w.find.matches(e,w.grep(t,function(e){return 1===e.nodeType}))},w.fn.extend({find:function(e){var t,n,r=this.length,i=this;if("string"!=typeof e)return this.pushStack(w(e).filter(function(){for(t=0;t<r;t++)if(w.contains(i[t],this))return!0}));for(n=this.pushStack([]),t=0;t<r;t++)w.find(e,i[t],n);return r>1?w.uniqueSort(n):n},filter:function(e){return this.pushStack(j(this,e||[],!1))},not:function(e){return this.pushStack(j(this,e||[],!0))},is:function(e){return!!j(this,"string"==typeof e&&D.test(e)?w(e):e||[],!1).length}});var q,L=\/^(?:\\s*(<[\\w\\W]+>)[^>]*|#([\\w-]+))$\/;(w.fn.init=function(e,t,n){var i,o;if(!e)return this;if(n=n||q,"string"==typeof e){if(!(i="<"===e[0]&&">"===e[e.length-1]&&e.length>=3?[null,e,null]:L.exec(e))||!i[1]&&t)return!t||t.jquery?(t||n).find(e):this.constructor(t).find(e);if(i[1]){if(t=t instanceof w?t[0]:t,w.merge(this,w.parseHTML(i[1],t&&t.nodeType?t.ownerDocument||t:r,!0)),A.test(i[1])&&w.isPlainObject(t))for(i in t)g(this[i])?this[i](t[i]):this.attr(i,t[i]);return this}return(o=r.getElementById(i[2]))&&(this[0]=o,this.length=1),this}return e.nodeType?(this[0]=e,this.length=1,this):g(e)?void 0!==n.ready?n.ready(e):e(w):w.makeArray(e,this)}).prototype=w.fn,q=w(r);var H=\/^(?:parents|prev(?:Until|All))\/,O={children:!0,contents:!0,next:!0,prev:!0};w.fn.extend({has:function(e){var t=w(e,this),n=t.length;return this.filter(function(){for(var e=0;e<n;e++)if(w.contains(this,t[e]))return!0})},closest:function(e,t){var n,r=0,i=this.length,o=[],a="string"!=typeof e&&w(e);if(!D.test(e))for(;r<i;r++)for(n=this[r];n&&n!==t;n=n.parentNode)if(n.nodeType<11&&(a?a.index(n)>-1:1===n.nodeType&&w.find.matchesSelector(n,e))){o.push(n);break}return this.pushStack(o.length>1?w.uniqueSort(o):o)},index:function(e){return e?"string"==typeof e?u.call(w(e),this[0]):u.call(this,e.jquery?e[0]:e):this[0]&&this[0].parentNode?this.first().prevAll().length:-1},add:function(e,t){return this.pushStack(w.uniqueSort(w.merge(this.get(),w(e,t))))},addBack:function(e){return this.add(null==e?this.prevObject:this.prevObject.filter(e))}});function P(e,t){while((e=e[t])&&1!==e.nodeType);return e}w.each({parent:function(e){var t=e.parentNode;return t&&11!==t.nodeType?t:null},parents:function(e){return k(e,"parentNode")},parentsUntil:function(e,t,n){return k(e,"parentNode",n)},next:function(e){return P(e,"nextSibling")},prev:function(e){return P(e,"previousSibling")},nextAll:function(e){return k(e,"nextSibling")},prevAll:function(e){return k(e,"previousSibling")},nextUntil:function(e,t,n){return k(e,"nextSibling",n)},prevUntil:function(e,t,n){return k(e,"previousSibling",n)},siblings:function(e){return S((e.parentNode||{}).firstChild,e)},children:function(e){return S(e.firstChild)},contents:function(e){return N(e,"iframe")?e.contentDocument:(N(e,"template")&&(e=e.content||e),w.merge([],e.childNodes))}},function(e,t){w.fn[e]=function(n,r){var i=w.map(this,t,n);return"Until"!==e.slice(-5)&&(r=n),r&&"string"==typeof r&&(i=w.filter(r,i)),this.length>1&&(O[e]||w.uniqueSort(i),H.test(e)&&i.reverse()),this.pushStack(i)}});var M=\/[^\\x20\\t\\r\\n\\f]+\/g;function R(e){var t={};return w.each(e.match(M)||[],function(e,n){t[n]=!0}),t}w.Callbacks=function(e){e="string"==typeof e?R(e):w.extend({},e);var t,n,r,i,o=[],a=[],s=-1,u=function(){for(i=i||e.once,r=t=!0;a.length;s=-1){n=a.shift();while(++s<o.length)!1===o[s].apply(n[0],n[1])&&e.stopOnFalse&&(s=o.length,n=!1)}e.memory||(n=!1),t=!1,i&&(o=n?[]:"")},l={add:function(){return o&&(n&&!t&&(s=o.length-1,a.push(n)),function t(n){w.each(n,function(n,r){g(r)?e.unique&&l.has(r)||o.push(r):r&&r.length&&"string"!==x(r)&&t(r)})}(arguments),n&&!t&&u()),this},remove:function(){return w.each(arguments,function(e,t){var n;while((n=w.inArray(t,o,n))>-1)o.splice(n,1),n<=s&&s--}),this},has:function(e){return e?w.inArray(e,o)>-1:o.length>0},empty:function(){return o&&(o=[]),this},disable:function(){return i=a=[],o=n="",this},disabled:function(){return!o},lock:function(){return i=a=[],n||t||(o=n=""),this},locked:function(){return!!i},fireWith:function(e,n){return i||(n=[e,(n=n||[]).slice?n.slice():n],a.push(n),t||u()),this},fire:function(){return l.fireWith(this,arguments),this},fired:function(){return!!r}};return l};function I(e){return e}function W(e){throw e}function $(e,t,n,r){var i;try{e&&g(i=e.promise)?i.call(e).done(t).fail(n):e&&g(i=e.then)?i.call(e,t,n):t.apply(void 0,[e].slice(r))}catch(e){n.apply(void 0,[e])}}w.extend({Deferred:function(t){var n=[["notify","progress",w.Callbacks("memory"),w.Callbacks("memory"),2],["resolve","done",w.Callbacks("once memory"),w.Callbacks("once memory"),0,"resolved"],["reject","fail",w.Callbacks("once memory"),w.Callbacks("once memory"),1,"rejected"]],r="pending",i={state:function(){return r},always:function(){return o.done(arguments).fail(arguments),this},"catch":function(e){return i.then(null,e)},pipe:function(){var e=arguments;return w.Deferred(function(t){w.each(n,function(n,r){var i=g(e[r[4]])&&e[r[4]];o[r[1]](function(){var e=i&&i.apply(this,arguments);e&&g(e.promise)?e.promise().progress(t.notify).done(t.resolve).fail(t.reject):t[r[0]+"With"](this,i?[e]:arguments)})}),e=null}).promise()},then:function(t,r,i){var o=0;function a(t,n,r,i){return function(){var s=this,u=arguments,l=function(){var e,l;if(!(t<o)){if((e=r.apply(s,u))===n.promise())throw new TypeError("Thenable self-resolution");l=e&&("object"==typeof e||"function"==typeof e)&&e.then,g(l)?i?l.call(e,a(o,n,I,i),a(o,n,W,i)):(o++,l.call(e,a(o,n,I,i),a(o,n,W,i),a(o,n,I,n.notifyWith))):(r!==I&&(s=void 0,u=[e]),(i||n.resolveWith)(s,u))}},c=i?l:function(){try{l()}catch(e){w.Deferred.exceptionHook&&w.Deferred.exceptionHook(e,c.stackTrace),t+1>=o&&(r!==W&&(s=void 0,u=[e]),n.rejectWith(s,u))}};t?c():(w.Deferred.getStackHook&&(c.stackTrace=w.Deferred.getStackHook()),e.setTimeout(c))}}return w.Deferred(function(e){n[0][3].add(a(0,e,g(i)?i:I,e.notifyWith)),n[1][3].add(a(0,e,g(t)?t:I)),n[2][3].add(a(0,e,g(r)?r:W))}).promise()},promise:function(e){return null!=e?w.extend(e,i):i}},o={};return w.each(n,function(e,t){var a=t[2],s=t[5];i[t[1]]=a.add,s&&a.add(function(){r=s},n[3-e][2].disable,n[3-e][3].disable,n[0][2].lock,n[0][3].lock),a.add(t[3].fire),o[t[0]]=function(){return o[t[0]+"With"](this===o?void 0:this,arguments),this},o[t[0]+"With"]=a.fireWith}),i.promise(o),t&&t.call(o,o),o},when:function(e){var t=arguments.length,n=t,r=Array(n),i=o.call(arguments),a=w.Deferred(),s=function(e){return function(n){r[e]=this,i[e]=arguments.length>1?o.call(arguments):n,--t||a.resolveWith(r,i)}};if(t<=1&&($(e,a.done(s(n)).resolve,a.reject,!t),"pending"===a.state()||g(i[n]&&i[n].then)))return a.then();while(n--)$(i[n],s(n),a.reject);return a.promise()}});var B=\/^(Eval|Internal|Range|Reference|Syntax|Type|URI)Error$\/;w.Deferred.exceptionHook=function(t,n){e.console&&e.console.warn&&t&&B.test(t.name)&&e.console.warn("jQuery.Deferred exception: "+t.message,t.stack,n)},w.readyException=function(t){e.setTimeout(function(){throw t})};var F=w.Deferred();w.fn.ready=function(e){return F.then(e)["catch"](function(e){w.readyException(e)}),this},w.extend({isReady:!1,readyWait:1,ready:function(e){(!0===e?--w.readyWait:w.isReady)||(w.isReady=!0,!0!==e&&--w.readyWait>0||F.resolveWith(r,[w]))}}),w.ready.then=F.then;function _(){r.removeEventListener("DOMContentLoaded",_),e.removeEventListener("load",_),w.ready()}"complete"===r.readyState||"loading"!==r.readyState&&!r.documentElement.doScroll?e.setTimeout(w.ready):(r.addEventListener("DOMContentLoaded",_),e.addEventListener("load",_));var z=function(e,t,n,r,i,o,a){var s=0,u=e.length,l=null==n;if("object"===x(n)){i=!0;for(s in n)z(e,t,s,n[s],!0,o,a)}else if(void 0!==r&&(i=!0,g(r)||(a=!0),l&&(a?(t.call(e,r),t=null):(l=t,t=function(e,t,n){return l.call(w(e),n)})),t))for(;s<u;s++)t(e[s],n,a?r:r.call(e[s],s,t(e[s],n)));return i?e:l?t.call(e):u?t(e[0],n):o},X=\/^-ms-\/,U=\/-([a-z])\/g;function V(e,t){return t.toUpperCase()}function G(e){return e.replace(X,"ms-").replace(U,V)}var Y=function(e){return 1===e.nodeType||9===e.nodeType||!+e.nodeType};function Q(){this.expando=w.expando+Q.uid++}Q.uid=1,Q.prototype={cache:function(e){var t=e[this.expando];return t||(t={},Y(e)&&(e.nodeType?e[this.expando]=t:Object.defineProperty(e,this.expando,{value:t,configurable:!0}))),t},set:function(e,t,n){var r,i=this.cache(e);if("string"==typeof t)i[G(t)]=n;else for(r in t)i[G(r)]=t[r];return i},get:function(e,t){return void 0===t?this.cache(e):e[this.expando]&&e[this.expando][G(t)]},access:function(e,t,n){return void 0===t||t&&"string"==typeof t&&void 0===n?this.get(e,t):(this.set(e,t,n),void 0!==n?n:t)},remove:function(e,t){var n,r=e[this.expando];if(void 0!==r){if(void 0!==t){n=(t=Array.isArray(t)?t.map(G):(t=G(t))in r?[t]:t.match(M)||[]).length;while(n--)delete r[t[n]]}(void 0===t||w.isEmptyObject(r))&&(e.nodeType?e[this.expando]=void 0:delete e[this.expando])}},hasData:function(e){var t=e[this.expando];return void 0!==t&&!w.isEmptyObject(t)}};var J=new Q,K=new Q,Z=\/^(?:\\{[\\w\\W]*\\}|\\[[\\w\\W]*\\])$\/,ee=\/[A-Z]\/g;function te(e){return"true"===e||"false"!==e&&("null"===e?null:e===+e+""?+e:Z.test(e)?JSON.parse(e):e)}function ne(e,t,n){var r;if(void 0===n&&1===e.nodeType)if(r="data-"+t.replace(ee,"-$&").toLowerCase(),"string"==typeof(n=e.getAttribute(r))){try{n=te(n)}catch(e){}K.set(e,t,n)}else n=void 0;return n}w.extend({hasData:function(e){return K.hasData(e)||J.hasData(e)},data:function(e,t,n){return K.access(e,t,n)},removeData:function(e,t){K.remove(e,t)},_data:function(e,t,n){return J.access(e,t,n)},_removeData:function(e,t){J.remove(e,t)}}),w.fn.extend({data:function(e,t){var n,r,i,o=this[0],a=o&&o.attributes;if(void 0===e){if(this.length&&(i=K.get(o),1===o.nodeType&&!J.get(o,"hasDataAttrs"))){n=a.length;while(n--)a[n]&&0===(r=a[n].name).indexOf("data-")&&(r=G(r.slice(5)),ne(o,r,i[r]));J.set(o,"hasDataAttrs",!0)}return i}return"object"==typeof e?this.each(function(){K.set(this,e)}):z(this,function(t){var n;if(o&&void 0===t){if(void 0!==(n=K.get(o,e)))return n;if(void 0!==(n=ne(o,e)))return n}else this.each(function(){K.set(this,e,t)})},null,t,arguments.length>1,null,!0)},removeData:function(e){return this.each(function(){K.remove(this,e)})}}),w.extend({queue:function(e,t,n){var r;if(e)return t=(t||"fx")+"queue",r=J.get(e,t),n&&(!r||Array.isArray(n)?r=J.access(e,t,w.makeArray(n)):r.push(n)),r||[]},dequeue:function(e,t){t=t||"fx";var n=w.queue(e,t),r=n.length,i=n.shift(),o=w._queueHooks(e,t),a=function(){w.dequeue(e,t)};"inprogress"===i&&(i=n.shift(),r--),i&&("fx"===t&&n.unshift("inprogress"),delete o.stop,i.call(e,a,o)),!r&&o&&o.empty.fire()},_queueHooks:function(e,t){var n=t+"queueHooks";return J.get(e,n)||J.access(e,n,{empty:w.Callbacks("once memory").add(function(){J.remove(e,[t+"queue",n])})})}}),w.fn.extend({queue:function(e,t){var n=2;return"string"!=typeof e&&(t=e,e="fx",n--),arguments.length<n?w.queue(this[0],e):void 0===t?this:this.each(function(){var n=w.queue(this,e,t);w._queueHooks(this,e),"fx"===e&&"inprogress"!==n[0]&&w.dequeue(this,e)})},dequeue:function(e){return this.each(function(){w.dequeue(this,e)})},clearQueue:function(e){return this.queue(e||"fx",[])},promise:function(e,t){var n,r=1,i=w.Deferred(),o=this,a=this.length,s=function(){--r||i.resolveWith(o,[o])};"string"!=typeof e&&(t=e,e=void 0),e=e||"fx";while(a--)(n=J.get(o[a],e+"queueHooks"))&&n.empty&&(r++,n.empty.add(s));return s(),i.promise(t)}});var re=\/[+-]?(?:\\d*\\.|)\\d+(?:[eE][+-]?\\d+|)\/.source,ie=new RegExp("^(?:([+-])=|)("+re+")([a-z%]*)$","i"),oe=["Top","Right","Bottom","Left"],ae=function(e,t){return"none"===(e=t||e).style.display||""===e.style.display&&w.contains(e.ownerDocument,e)&&"none"===w.css(e,"display")},se=function(e,t,n,r){var i,o,a={};for(o in t)a[o]=e.style[o],e.style[o]=t[o];i=n.apply(e,r||[]);for(o in t)e.style[o]=a[o];return i};function ue(e,t,n,r){var i,o,a=20,s=r?function(){return r.cur()}:function(){return w.css(e,t,"")},u=s(),l=n&&n[3]||(w.cssNumber[t]?"":"px"),c=(w.cssNumber[t]||"px"!==l&&+u)&&ie.exec(w.css(e,t));if(c&&c[3]!==l){u\/=2,l=l||c[3],c=+u||1;while(a--)w.style(e,t,c+l),(1-o)*(1-(o=s()\/u||.5))<=0&&(a=0),c\/=o;c*=2,w.style(e,t,c+l),n=n||[]}return n&&(c=+c||+u||0,i=n[1]?c+(n[1]+1)*n[2]:+n[2],r&&(r.unit=l,r.start=c,r.end=i)),i}var le={};function ce(e){var t,n=e.ownerDocument,r=e.nodeName,i=le[r];return i||(t=n.body.appendChild(n.createElement(r)),i=w.css(t,"display"),t.parentNode.removeChild(t),"none"===i&&(i="block"),le[r]=i,i)}function fe(e,t){for(var n,r,i=[],o=0,a=e.length;o<a;o++)(r=e[o]).style&&(n=r.style.display,t?("none"===n&&(i[o]=J.get(r,"display")||null,i[o]||(r.style.display="")),""===r.style.display&&ae(r)&&(i[o]=ce(r))):"none"!==n&&(i[o]="none",J.set(r,"display",n)));for(o=0;o<a;o++)null!=i[o]&&(e[o].style.display=i[o]);return e}w.fn.extend({show:function(){return fe(this,!0)},hide:function(){return fe(this)},toggle:function(e){return"boolean"==typeof e?e?this.show():this.hide():this.each(function(){ae(this)?w(this).show():w(this).hide()})}});var pe=\/^(?:checkbox|radio)$\/i,de=\/<([a-z][^\\\/\\0>\\x20\\t\\r\\n\\f]+)\/i,he=\/^$|^module$|\\\/(?:java|ecma)script\/i,ge={option:[1,"<select multiple='multiple'>","<\/select>"],thead:[1,"<table>","<\/table>"],col:[2,"<table><colgroup>","<\/colgroup><\/table>"],tr:[2,"<table><tbody>","<\/tbody><\/table>"],td:[3,"<table><tbody><tr>","<\/tr><\/tbody><\/table>"],_default:[0,"",""]};ge.optgroup=ge.option,ge.tbody=ge.tfoot=ge.colgroup=ge.caption=ge.thead,ge.th=ge.td;function ye(e,t){var n;return n="undefined"!=typeof e.getElementsByTagName?e.getElementsByTagName(t||"*"):"undefined"!=typeof e.querySelectorAll?e.querySelectorAll(t||"*"):[],void 0===t||t&&N(e,t)?w.merge([e],n):n}function ve(e,t){for(var n=0,r=e.length;n<r;n++)J.set(e[n],"globalEval",!t||J.get(t[n],"globalEval"))}var me=\/<|&#?\\w+;\/;function xe(e,t,n,r,i){for(var o,a,s,u,l,c,f=t.createDocumentFragment(),p=[],d=0,h=e.length;d<h;d++)if((o=e[d])||0===o)if("object"===x(o))w.merge(p,o.nodeType?[o]:o);else if(me.test(o)){a=a||f.appendChild(t.createElement("div")),s=(de.exec(o)||["",""])[1].toLowerCase(),u=ge[s]||ge._default,a.innerHTML=u[1]+w.htmlPrefilter(o)+u[2],c=u[0];while(c--)a=a.lastChild;w.merge(p,a.childNodes),(a=f.firstChild).textContent=""}else p.push(t.createTextNode(o));f.textContent="",d=0;while(o=p[d++])if(r&&w.inArray(o,r)>-1)i&&i.push(o);else if(l=w.contains(o.ownerDocument,o),a=ye(f.appendChild(o),"script"),l&&ve(a),n){c=0;while(o=a[c++])he.test(o.type||"")&&n.push(o)}return f}!function(){var e=r.createDocumentFragment().appendChild(r.createElement("div")),t=r.createElement("input");t.setAttribute("type","radio"),t.setAttribute("checked","checked"),t.setAttribute("name","t"),e.appendChild(t),h.checkClone=e.cloneNode(!0).cloneNode(!0).lastChild.checked,e.innerHTML="<textarea>x<\/textarea>",h.noCloneChecked=!!e.cloneNode(!0).lastChild.defaultValue}();var be=r.documentElement,we=\/^key\/,Te=\/^(?:mouse|pointer|contextmenu|drag|drop)|click\/,Ce=\/^([^.]*)(?:\\.(.+)|)\/;function Ee(){return!0}function ke(){return!1}function Se(){try{return r.activeElement}catch(e){}}function De(e,t,n,r,i,o){var a,s;if("object"==typeof t){"string"!=typeof n&&(r=r||n,n=void 0);for(s in t)De(e,s,n,r,t[s],o);return e}if(null==r&&null==i?(i=n,r=n=void 0):null==i&&("string"==typeof n?(i=r,r=void 0):(i=r,r=n,n=void 0)),!1===i)i=ke;else if(!i)return e;return 1===o&&(a=i,(i=function(e){return w().off(e),a.apply(this,arguments)}).guid=a.guid||(a.guid=w.guid++)),e.each(function(){w.event.add(this,t,i,r,n)})}w.event={global:{},add:function(e,t,n,r,i){var o,a,s,u,l,c,f,p,d,h,g,y=J.get(e);if(y){n.handler&&(n=(o=n).handler,i=o.selector),i&&w.find.matchesSelector(be,i),n.guid||(n.guid=w.guid++),(u=y.events)||(u=y.events={}),(a=y.handle)||(a=y.handle=function(t){return"undefined"!=typeof w&&w.event.triggered!==t.type?w.event.dispatch.apply(e,arguments):void 0}),l=(t=(t||"").match(M)||[""]).length;while(l--)d=g=(s=Ce.exec(t[l])||[])[1],h=(s[2]||"").split(".").sort(),d&&(f=w.event.special[d]||{},d=(i?f.delegateType:f.bindType)||d,f=w.event.special[d]||{},c=w.extend({type:d,origType:g,data:r,handler:n,guid:n.guid,selector:i,needsContext:i&&w.expr.match.needsContext.test(i),namespace:h.join(".")},o),(p=u[d])||((p=u[d]=[]).delegateCount=0,f.setup&&!1!==f.setup.call(e,r,h,a)||e.addEventListener&&e.addEventListener(d,a)),f.add&&(f.add.call(e,c),c.handler.guid||(c.handler.guid=n.guid)),i?p.splice(p.delegateCount++,0,c):p.push(c),w.event.global[d]=!0)}},remove:function(e,t,n,r,i){var o,a,s,u,l,c,f,p,d,h,g,y=J.hasData(e)&&J.get(e);if(y&&(u=y.events)){l=(t=(t||"").match(M)||[""]).length;while(l--)if(s=Ce.exec(t[l])||[],d=g=s[1],h=(s[2]||"").split(".").sort(),d){f=w.event.special[d]||{},p=u[d=(r?f.delegateType:f.bindType)||d]||[],s=s[2]&&new RegExp("(^|\\\\.)"+h.join("\\\\.(?:.*\\\\.|)")+"(\\\\.|$)"),a=o=p.length;while(o--)c=p[o],!i&&g!==c.origType||n&&n.guid!==c.guid||s&&!s.test(c.namespace)||r&&r!==c.selector&&("**"!==r||!c.selector)||(p.splice(o,1),c.selector&&p.delegateCount--,f.remove&&f.remove.call(e,c));a&&!p.length&&(f.teardown&&!1!==f.teardown.call(e,h,y.handle)||w.removeEvent(e,d,y.handle),delete u[d])}else for(d in u)w.event.remove(e,d+t[l],n,r,!0);w.isEmptyObject(u)&&J.remove(e,"handle events")}},dispatch:function(e){var t=w.event.fix(e),n,r,i,o,a,s,u=new Array(arguments.length),l=(J.get(this,"events")||{})[t.type]||[],c=w.event.special[t.type]||{};for(u[0]=t,n=1;n<arguments.length;n++)u[n]=arguments[n];if(t.delegateTarget=this,!c.preDispatch||!1!==c.preDispatch.call(this,t)){s=w.event.handlers.call(this,t,l),n=0;while((o=s[n++])&&!t.isPropagationStopped()){t.currentTarget=o.elem,r=0;while((a=o.handlers[r++])&&!t.isImmediatePropagationStopped())t.rnamespace&&!t.rnamespace.test(a.namespace)||(t.handleObj=a,t.data=a.data,void 0!==(i=((w.event.special[a.origType]||{}).handle||a.handler).apply(o.elem,u))&&!1===(t.result=i)&&(t.preventDefault(),t.stopPropagation()))}return c.postDispatch&&c.postDispatch.call(this,t),t.result}},handlers:function(e,t){var n,r,i,o,a,s=[],u=t.delegateCount,l=e.target;if(u&&l.nodeType&&!("click"===e.type&&e.button>=1))for(;l!==this;l=l.parentNode||this)if(1===l.nodeType&&("click"!==e.type||!0!==l.disabled)){for(o=[],a={},n=0;n<u;n++)void 0===a[i=(r=t[n]).selector+" "]&&(a[i]=r.needsContext?w(i,this).index(l)>-1:w.find(i,this,null,[l]).length),a[i]&&o.push(r);o.length&&s.push({elem:l,handlers:o})}return l=this,u<t.length&&s.push({elem:l,handlers:t.slice(u)}),s},addProp:function(e,t){Object.defineProperty(w.Event.prototype,e,{enumerable:!0,configurable:!0,get:g(t)?function(){if(this.originalEvent)return t(this.originalEvent)}:function(){if(this.originalEvent)return this.originalEvent[e]},set:function(t){Object.defineProperty(this,e,{enumerable:!0,configurable:!0,writable:!0,value:t})}})},fix:function(e){return e[w.expando]?e:new w.Event(e)},special:{load:{noBubble:!0},focus:{trigger:function(){if(this!==Se()&&this.focus)return this.focus(),!1},delegateType:"focusin"},blur:{trigger:function(){if(this===Se()&&this.blur)return this.blur(),!1},delegateType:"focusout"},click:{trigger:function(){if("checkbox"===this.type&&this.click&&N(this,"input"))return this.click(),!1},_default:function(e){return N(e.target,"a")}},beforeunload:{postDispatch:function(e){void 0!==e.result&&e.originalEvent&&(e.originalEvent.returnValue=e.result)}}}},w.removeEvent=function(e,t,n){e.removeEventListener&&e.removeEventListener(t,n)},w.Event=function(e,t){if(!(this instanceof w.Event))return new w.Event(e,t);e&&e.type?(this.originalEvent=e,this.type=e.type,this.isDefaultPrevented=e.defaultPrevented||void 0===e.defaultPrevented&&!1===e.returnValue?Ee:ke,this.target=e.target&&3===e.target.nodeType?e.target.parentNode:e.target,this.currentTarget=e.currentTarget,this.relatedTarget=e.relatedTarget):this.type=e,t&&w.extend(this,t),this.timeStamp=e&&e.timeStamp||Date.now(),this[w.expando]=!0},w.Event.prototype={constructor:w.Event,isDefaultPrevented:ke,isPropagationStopped:ke,isImmediatePropagationStopped:ke,isSimulated:!1,preventDefault:function(){var e=this.originalEvent;this.isDefaultPrevented=Ee,e&&!this.isSimulated&&e.preventDefault()},stopPropagation:function(){var e=this.originalEvent;this.isPropagationStopped=Ee,e&&!this.isSimulated&&e.stopPropagation()},stopImmediatePropagation:function(){var e=this.originalEvent;this.isImmediatePropagationStopped=Ee,e&&!this.isSimulated&&e.stopImmediatePropagation(),this.stopPropagation()}},w.each({altKey:!0,bubbles:!0,cancelable:!0,changedTouches:!0,ctrlKey:!0,detail:!0,eventPhase:!0,metaKey:!0,pageX:!0,pageY:!0,shiftKey:!0,view:!0,"char":!0,charCode:!0,key:!0,keyCode:!0,button:!0,buttons:!0,clientX:!0,clientY:!0,offsetX:!0,offsetY:!0,pointerId:!0,pointerType:!0,screenX:!0,screenY:!0,targetTouches:!0,toElement:!0,touches:!0,which:function(e){var t=e.button;return null==e.which&&we.test(e.type)?null!=e.charCode?e.charCode:e.keyCode:!e.which&&void 0!==t&&Te.test(e.type)?1&t?1:2&t?3:4&t?2:0:e.which}},w.event.addProp),w.each({mouseenter:"mouseover",mouseleave:"mouseout",pointerenter:"pointerover",pointerleave:"pointerout"},function(e,t){w.event.special[e]={delegateType:t,bindType:t,handle:function(e){var n,r=this,i=e.relatedTarget,o=e.handleObj;return i&&(i===r||w.contains(r,i))||(e.type=o.origType,n=o.handler.apply(this,arguments),e.type=t),n}}}),w.fn.extend({on:function(e,t,n,r){return De(this,e,t,n,r)},one:function(e,t,n,r){return De(this,e,t,n,r,1)},off:function(e,t,n){var r,i;if(e&&e.preventDefault&&e.handleObj)return r=e.handleObj,w(e.delegateTarget).off(r.namespace?r.origType+"."+r.namespace:r.origType,r.selector,r.handler),this;if("object"==typeof e){for(i in e)this.off(i,t,e[i]);return this}return!1!==t&&"function"!=typeof t||(n=t,t=void 0),!1===n&&(n=ke),this.each(function(){w.event.remove(this,e,n,t)})}});var Ne=\/<(?!area|br|col|embed|hr|img|input|link|meta|param)(([a-z][^\\\/\\0>\\x20\\t\\r\\n\\f]*)[^>]*)\\\/>\/gi,Ae=\/<script|<style|<link\/i,je=\/checked\\s*(?:[^=]|=\\s*.checked.)\/i,qe=\/^\\s*<!(?:\\[CDATA\\[|--)|(?:\\]\\]|--)>\\s*$\/g;function Le(e,t){return N(e,"table")&&N(11!==t.nodeType?t:t.firstChild,"tr")?w(e).children("tbody")[0]||e:e}function He(e){return e.type=(null!==e.getAttribute("type"))+"\/"+e.type,e}function Oe(e){return"true\/"===(e.type||"").slice(0,5)?e.type=e.type.slice(5):e.removeAttribute("type"),e}function Pe(e,t){var n,r,i,o,a,s,u,l;if(1===t.nodeType){if(J.hasData(e)&&(o=J.access(e),a=J.set(t,o),l=o.events)){delete a.handle,a.events={};for(i in l)for(n=0,r=l[i].length;n<r;n++)w.event.add(t,i,l[i][n])}K.hasData(e)&&(s=K.access(e),u=w.extend({},s),K.set(t,u))}}function Me(e,t){var n=t.nodeName.toLowerCase();"input"===n&&pe.test(e.type)?t.checked=e.checked:"input"!==n&&"textarea"!==n||(t.defaultValue=e.defaultValue)}function Re(e,t,n,r){t=a.apply([],t);var i,o,s,u,l,c,f=0,p=e.length,d=p-1,y=t[0],v=g(y);if(v||p>1&&"string"==typeof y&&!h.checkClone&&je.test(y))return e.each(function(i){var o=e.eq(i);v&&(t[0]=y.call(this,i,o.html())),Re(o,t,n,r)});if(p&&(i=xe(t,e[0].ownerDocument,!1,e,r),o=i.firstChild,1===i.childNodes.length&&(i=o),o||r)){for(u=(s=w.map(ye(i,"script"),He)).length;f<p;f++)l=i,f!==d&&(l=w.clone(l,!0,!0),u&&w.merge(s,ye(l,"script"))),n.call(e[f],l,f);if(u)for(c=s[s.length-1].ownerDocument,w.map(s,Oe),f=0;f<u;f++)l=s[f],he.test(l.type||"")&&!J.access(l,"globalEval")&&w.contains(c,l)&&(l.src&&"module"!==(l.type||"").toLowerCase()?w._evalUrl&&w._evalUrl(l.src):m(l.textContent.replace(qe,""),c,l))}return e}function Ie(e,t,n){for(var r,i=t?w.filter(t,e):e,o=0;null!=(r=i[o]);o++)n||1!==r.nodeType||w.cleanData(ye(r)),r.parentNode&&(n&&w.contains(r.ownerDocument,r)&&ve(ye(r,"script")),r.parentNode.removeChild(r));return e}w.extend({htmlPrefilter:function(e){return e.replace(Ne,"<$1><\/$2>")},clone:function(e,t,n){var r,i,o,a,s=e.cloneNode(!0),u=w.contains(e.ownerDocument,e);if(!(h.noCloneChecked||1!==e.nodeType&&11!==e.nodeType||w.isXMLDoc(e)))for(a=ye(s),r=0,i=(o=ye(e)).length;r<i;r++)Me(o[r],a[r]);if(t)if(n)for(o=o||ye(e),a=a||ye(s),r=0,i=o.length;r<i;r++)Pe(o[r],a[r]);else Pe(e,s);return(a=ye(s,"script")).length>0&&ve(a,!u&&ye(e,"script")),s},cleanData:function(e){for(var t,n,r,i=w.event.special,o=0;void 0!==(n=e[o]);o++)if(Y(n)){if(t=n[J.expando]){if(t.events)for(r in t.events)i[r]?w.event.remove(n,r):w.removeEvent(n,r,t.handle);n[J.expando]=void 0}n[K.expando]&&(n[K.expando]=void 0)}}}),w.fn.extend({detach:function(e){return Ie(this,e,!0)},remove:function(e){return Ie(this,e)},text:function(e){return z(this,function(e){return void 0===e?w.text(this):this.empty().each(function(){1!==this.nodeType&&11!==this.nodeType&&9!==this.nodeType||(this.textContent=e)})},null,e,arguments.length)},append:function(){return Re(this,arguments,function(e){1!==this.nodeType&&11!==this.nodeType&&9!==this.nodeType||Le(this,e).appendChild(e)})},prepend:function(){return Re(this,arguments,function(e){if(1===this.nodeType||11===this.nodeType||9===this.nodeType){var t=Le(this,e);t.insertBefore(e,t.firstChild)}})},before:function(){return Re(this,arguments,function(e){this.parentNode&&this.parentNode.insertBefore(e,this)})},after:function(){return Re(this,arguments,function(e){this.parentNode&&this.parentNode.insertBefore(e,this.nextSibling)})},empty:function(){for(var e,t=0;null!=(e=this[t]);t++)1===e.nodeType&&(w.cleanData(ye(e,!1)),e.textContent="");return this},clone:function(e,t){return e=null!=e&&e,t=null==t?e:t,this.map(function(){return w.clone(this,e,t)})},html:function(e){return z(this,function(e){var t=this[0]||{},n=0,r=this.length;if(void 0===e&&1===t.nodeType)return t.innerHTML;if("string"==typeof e&&!Ae.test(e)&&!ge[(de.exec(e)||["",""])[1].toLowerCase()]){e=w.htmlPrefilter(e);try{for(;n<r;n++)1===(t=this[n]||{}).nodeType&&(w.cleanData(ye(t,!1)),t.innerHTML=e);t=0}catch(e){}}t&&this.empty().append(e)},null,e,arguments.length)},replaceWith:function(){var e=[];return Re(this,arguments,function(t){var n=this.parentNode;w.inArray(this,e)<0&&(w.cleanData(ye(this)),n&&n.replaceChild(t,this))},e)}}),w.each({appendTo:"append",prependTo:"prepend",insertBefore:"before",insertAfter:"after",replaceAll:"replaceWith"},function(e,t){w.fn[e]=function(e){for(var n,r=[],i=w(e),o=i.length-1,a=0;a<=o;a++)n=a===o?this:this.clone(!0),w(i[a])[t](n),s.apply(r,n.get());return this.pushStack(r)}});var We=new RegExp("^("+re+")(?!px)[a-z%]+$","i"),$e=function(t){var n=t.ownerDocument.defaultView;return n&&n.opener||(n=e),n.getComputedStyle(t)},Be=new RegExp(oe.join("|"),"i");!function(){function t(){if(c){l.style.cssText="position:absolute;left:-11111px;width:60px;margin-top:1px;padding:0;border:0",c.style.cssText="position:relative;display:block;box-sizing:border-box;overflow:scroll;margin:auto;border:1px;padding:1px;width:60%;top:1%",be.appendChild(l).appendChild(c);var t=e.getComputedStyle(c);i="1%"!==t.top,u=12===n(t.marginLeft),c.style.right="60%",s=36===n(t.right),o=36===n(t.width),c.style.position="absolute",a=36===c.offsetWidth||"absolute",be.removeChild(l),c=null}}function n(e){return Math.round(parseFloat(e))}var i,o,a,s,u,l=r.createElement("div"),c=r.createElement("div");c.style&&(c.style.backgroundClip="content-box",c.cloneNode(!0).style.backgroundClip="",h.clearCloneStyle="content-box"===c.style.backgroundClip,w.extend(h,{boxSizingReliable:function(){return t(),o},pixelBoxStyles:function(){return t(),s},pixelPosition:function(){return t(),i},reliableMarginLeft:function(){return t(),u},scrollboxSize:function(){return t(),a}}))}();function Fe(e,t,n){var r,i,o,a,s=e.style;return(n=n||$e(e))&&(""!==(a=n.getPropertyValue(t)||n[t])||w.contains(e.ownerDocument,e)||(a=w.style(e,t)),!h.pixelBoxStyles()&&We.test(a)&&Be.test(t)&&(r=s.width,i=s.minWidth,o=s.maxWidth,s.minWidth=s.maxWidth=s.width=a,a=n.width,s.width=r,s.minWidth=i,s.maxWidth=o)),void 0!==a?a+"":a}function _e(e,t){return{get:function(){if(!e())return(this.get=t).apply(this,arguments);delete this.get}}}var ze=\/^(none|table(?!-c[ea]).+)\/,Xe=\/^--\/,Ue={position:"absolute",visibility:"hidden",display:"block"},Ve={letterSpacing:"0",fontWeight:"400"},Ge=["Webkit","Moz","ms"],Ye=r.createElement("div").style;function Qe(e){if(e in Ye)return e;var t=e[0].toUpperCase()+e.slice(1),n=Ge.length;while(n--)if((e=Ge[n]+t)in Ye)return e}function Je(e){var t=w.cssProps[e];return t||(t=w.cssProps[e]=Qe(e)||e),t}function Ke(e,t,n){var r=ie.exec(t);return r?Math.max(0,r[2]-(n||0))+(r[3]||"px"):t}function Ze(e,t,n,r,i,o){var a="width"===t?1:0,s=0,u=0;if(n===(r?"border":"content"))return 0;for(;a<4;a+=2)"margin"===n&&(u+=w.css(e,n+oe[a],!0,i)),r?("content"===n&&(u-=w.css(e,"padding"+oe[a],!0,i)),"margin"!==n&&(u-=w.css(e,"border"+oe[a]+"Width",!0,i))):(u+=w.css(e,"padding"+oe[a],!0,i),"padding"!==n?u+=w.css(e,"border"+oe[a]+"Width",!0,i):s+=w.css(e,"border"+oe[a]+"Width",!0,i));return!r&&o>=0&&(u+=Math.max(0,Math.ceil(e["offset"+t[0].toUpperCase()+t.slice(1)]-o-u-s-.5))),u}function et(e,t,n){var r=$e(e),i=Fe(e,t,r),o="border-box"===w.css(e,"boxSizing",!1,r),a=o;if(We.test(i)){if(!n)return i;i="auto"}return a=a&&(h.boxSizingReliable()||i===e.style[t]),("auto"===i||!parseFloat(i)&&"inline"===w.css(e,"display",!1,r))&&(i=e["offset"+t[0].toUpperCase()+t.slice(1)],a=!0),(i=parseFloat(i)||0)+Ze(e,t,n||(o?"border":"content"),a,r,i)+"px"}w.extend({cssHooks:{opacity:{get:function(e,t){if(t){var n=Fe(e,"opacity");return""===n?"1":n}}}},cssNumber:{animationIterationCount:!0,columnCount:!0,fillOpacity:!0,flexGrow:!0,flexShrink:!0,fontWeight:!0,lineHeight:!0,opacity:!0,order:!0,orphans:!0,widows:!0,zIndex:!0,zoom:!0},cssProps:{},style:function(e,t,n,r){if(e&&3!==e.nodeType&&8!==e.nodeType&&e.style){var i,o,a,s=G(t),u=Xe.test(t),l=e.style;if(u||(t=Je(s)),a=w.cssHooks[t]||w.cssHooks[s],void 0===n)return a&&"get"in a&&void 0!==(i=a.get(e,!1,r))?i:l[t];"string"==(o=typeof n)&&(i=ie.exec(n))&&i[1]&&(n=ue(e,t,i),o="number"),null!=n&&n===n&&("number"===o&&(n+=i&&i[3]||(w.cssNumber[s]?"":"px")),h.clearCloneStyle||""!==n||0!==t.indexOf("background")||(l[t]="inherit"),a&&"set"in a&&void 0===(n=a.set(e,n,r))||(u?l.setProperty(t,n):l[t]=n))}},css:function(e,t,n,r){var i,o,a,s=G(t);return Xe.test(t)||(t=Je(s)),(a=w.cssHooks[t]||w.cssHooks[s])&&"get"in a&&(i=a.get(e,!0,n)),void 0===i&&(i=Fe(e,t,r)),"normal"===i&&t in Ve&&(i=Ve[t]),""===n||n?(o=parseFloat(i),!0===n||isFinite(o)?o||0:i):i}}),w.each(["height","width"],function(e,t){w.cssHooks[t]={get:function(e,n,r){if(n)return!ze.test(w.css(e,"display"))||e.getClientRects().length&&e.getBoundingClientRect().width?et(e,t,r):se(e,Ue,function(){return et(e,t,r)})},set:function(e,n,r){var i,o=$e(e),a="border-box"===w.css(e,"boxSizing",!1,o),s=r&&Ze(e,t,r,a,o);return a&&h.scrollboxSize()===o.position&&(s-=Math.ceil(e["offset"+t[0].toUpperCase()+t.slice(1)]-parseFloat(o[t])-Ze(e,t,"border",!1,o)-.5)),s&&(i=ie.exec(n))&&"px"!==(i[3]||"px")&&(e.style[t]=n,n=w.css(e,t)),Ke(e,n,s)}}}),w.cssHooks.marginLeft=_e(h.reliableMarginLeft,function(e,t){if(t)return(parseFloat(Fe(e,"marginLeft"))||e.getBoundingClientRect().left-se(e,{marginLeft:0},function(){return e.getBoundingClientRect().left}))+"px"}),w.each({margin:"",padding:"",border:"Width"},function(e,t){w.cssHooks[e+t]={expand:function(n){for(var r=0,i={},o="string"==typeof n?n.split(" "):[n];r<4;r++)i[e+oe[r]+t]=o[r]||o[r-2]||o[0];return i}},"margin"!==e&&(w.cssHooks[e+t].set=Ke)}),w.fn.extend({css:function(e,t){return z(this,function(e,t,n){var r,i,o={},a=0;if(Array.isArray(t)){for(r=$e(e),i=t.length;a<i;a++)o[t[a]]=w.css(e,t[a],!1,r);return o}return void 0!==n?w.style(e,t,n):w.css(e,t)},e,t,arguments.length>1)}});function tt(e,t,n,r,i){return new tt.prototype.init(e,t,n,r,i)}w.Tween=tt,tt.prototype={constructor:tt,init:function(e,t,n,r,i,o){this.elem=e,this.prop=n,this.easing=i||w.easing._default,this.options=t,this.start=this.now=this.cur(),this.end=r,this.unit=o||(w.cssNumber[n]?"":"px")},cur:function(){var e=tt.propHooks[this.prop];return e&&e.get?e.get(this):tt.propHooks._default.get(this)},run:function(e){var t,n=tt.propHooks[this.prop];return this.options.duration?this.pos=t=w.easing[this.easing](e,this.options.duration*e,0,1,this.options.duration):this.pos=t=e,this.now=(this.end-this.start)*t+this.start,this.options.step&&this.options.step.call(this.elem,this.now,this),n&&n.set?n.set(this):tt.propHooks._default.set(this),this}},tt.prototype.init.prototype=tt.prototype,tt.propHooks={_default:{get:function(e){var t;return 1!==e.elem.nodeType||null!=e.elem[e.prop]&&null==e.elem.style[e.prop]?e.elem[e.prop]:(t=w.css(e.elem,e.prop,""))&&"auto"!==t?t:0},set:function(e){w.fx.step[e.prop]?w.fx.step[e.prop](e):1!==e.elem.nodeType||null==e.elem.style[w.cssProps[e.prop]]&&!w.cssHooks[e.prop]?e.elem[e.prop]=e.now:w.style(e.elem,e.prop,e.now+e.unit)}}},tt.propHooks.scrollTop=tt.propHooks.scrollLeft={set:function(e){e.elem.nodeType&&e.elem.parentNode&&(e.elem[e.prop]=e.now)}},w.easing={linear:function(e){return e},swing:function(e){return.5-Math.cos(e*Math.PI)\/2},_default:"swing"},w.fx=tt.prototype.init,w.fx.step={};var nt,rt,it=\/^(?:toggle|show|hide)$\/,ot=\/queueHooks$\/;function at(){rt&&(!1===r.hidden&&e.requestAnimationFrame?e.requestAnimationFrame(at):e.setTimeout(at,w.fx.interval),w.fx.tick())}function st(){return e.setTimeout(function(){nt=void 0}),nt=Date.now()}function ut(e,t){var n,r=0,i={height:e};for(t=t?1:0;r<4;r+=2-t)i["margin"+(n=oe[r])]=i["padding"+n]=e;return t&&(i.opacity=i.width=e),i}function lt(e,t,n){for(var r,i=(pt.tweeners[t]||[]).concat(pt.tweeners["*"]),o=0,a=i.length;o<a;o++)if(r=i[o].call(n,t,e))return r}function ct(e,t,n){var r,i,o,a,s,u,l,c,f="width"in t||"height"in t,p=this,d={},h=e.style,g=e.nodeType&&ae(e),y=J.get(e,"fxshow");n.queue||(null==(a=w._queueHooks(e,"fx")).unqueued&&(a.unqueued=0,s=a.empty.fire,a.empty.fire=function(){a.unqueued||s()}),a.unqueued++,p.always(function(){p.always(function(){a.unqueued--,w.queue(e,"fx").length||a.empty.fire()})}));for(r in t)if(i=t[r],it.test(i)){if(delete t[r],o=o||"toggle"===i,i===(g?"hide":"show")){if("show"!==i||!y||void 0===y[r])continue;g=!0}d[r]=y&&y[r]||w.style(e,r)}if((u=!w.isEmptyObject(t))||!w.isEmptyObject(d)){f&&1===e.nodeType&&(n.overflow=[h.overflow,h.overflowX,h.overflowY],null==(l=y&&y.display)&&(l=J.get(e,"display")),"none"===(c=w.css(e,"display"))&&(l?c=l:(fe([e],!0),l=e.style.display||l,c=w.css(e,"display"),fe([e]))),("inline"===c||"inline-block"===c&&null!=l)&&"none"===w.css(e,"float")&&(u||(p.done(function(){h.display=l}),null==l&&(c=h.display,l="none"===c?"":c)),h.display="inline-block")),n.overflow&&(h.overflow="hidden",p.always(function(){h.overflow=n.overflow[0],h.overflowX=n.overflow[1],h.overflowY=n.overflow[2]})),u=!1;for(r in d)u||(y?"hidden"in y&&(g=y.hidden):y=J.access(e,"fxshow",{display:l}),o&&(y.hidden=!g),g&&fe([e],!0),p.done(function(){g||fe([e]),J.remove(e,"fxshow");for(r in d)w.style(e,r,d[r])})),u=lt(g?y[r]:0,r,p),r in y||(y[r]=u.start,g&&(u.end=u.start,u.start=0))}}function ft(e,t){var n,r,i,o,a;for(n in e)if(r=G(n),i=t[r],o=e[n],Array.isArray(o)&&(i=o[1],o=e[n]=o[0]),n!==r&&(e[r]=o,delete e[n]),(a=w.cssHooks[r])&&"expand"in a){o=a.expand(o),delete e[r];for(n in o)n in e||(e[n]=o[n],t[n]=i)}else t[r]=i}function pt(e,t,n){var r,i,o=0,a=pt.prefilters.length,s=w.Deferred().always(function(){delete u.elem}),u=function(){if(i)return!1;for(var t=nt||st(),n=Math.max(0,l.startTime+l.duration-t),r=1-(n\/l.duration||0),o=0,a=l.tweens.length;o<a;o++)l.tweens[o].run(r);return s.notifyWith(e,[l,r,n]),r<1&&a?n:(a||s.notifyWith(e,[l,1,0]),s.resolveWith(e,[l]),!1)},l=s.promise({elem:e,props:w.extend({},t),opts:w.extend(!0,{specialEasing:{},easing:w.easing._default},n),originalProperties:t,originalOptions:n,startTime:nt||st(),duration:n.duration,tweens:[],createTween:function(t,n){var r=w.Tween(e,l.opts,t,n,l.opts.specialEasing[t]||l.opts.easing);return l.tweens.push(r),r},stop:function(t){var n=0,r=t?l.tweens.length:0;if(i)return this;for(i=!0;n<r;n++)l.tweens[n].run(1);return t?(s.notifyWith(e,[l,1,0]),s.resolveWith(e,[l,t])):s.rejectWith(e,[l,t]),this}}),c=l.props;for(ft(c,l.opts.specialEasing);o<a;o++)if(r=pt.prefilters[o].call(l,e,c,l.opts))return g(r.stop)&&(w._queueHooks(l.elem,l.opts.queue).stop=r.stop.bind(r)),r;return w.map(c,lt,l),g(l.opts.start)&&l.opts.start.call(e,l),l.progress(l.opts.progress).done(l.opts.done,l.opts.complete).fail(l.opts.fail).always(l.opts.always),w.fx.timer(w.extend(u,{elem:e,anim:l,queue:l.opts.queue})),l}w.Animation=w.extend(pt,{tweeners:{"*":[function(e,t){var n=this.createTween(e,t);return ue(n.elem,e,ie.exec(t),n),n}]},tweener:function(e,t){g(e)?(t=e,e=["*"]):e=e.match(M);for(var n,r=0,i=e.length;r<i;r++)n=e[r],pt.tweeners[n]=pt.tweeners[n]||[],pt.tweeners[n].unshift(t)},prefilters:[ct],prefilter:function(e,t){t?pt.prefilters.unshift(e):pt.prefilters.push(e)}}),w.speed=function(e,t,n){var r=e&&"object"==typeof e?w.extend({},e):{complete:n||!n&&t||g(e)&&e,duration:e,easing:n&&t||t&&!g(t)&&t};return w.fx.off?r.duration=0:"number"!=typeof r.duration&&(r.duration in w.fx.speeds?r.duration=w.fx.speeds[r.duration]:r.duration=w.fx.speeds._default),null!=r.queue&&!0!==r.queue||(r.queue="fx"),r.old=r.complete,r.complete=function(){g(r.old)&&r.old.call(this),r.queue&&w.dequeue(this,r.queue)},r},w.fn.extend({fadeTo:function(e,t,n,r){return this.filter(ae).css("opacity",0).show().end().animate({opacity:t},e,n,r)},animate:function(e,t,n,r){var i=w.isEmptyObject(e),o=w.speed(t,n,r),a=function(){var t=pt(this,w.extend({},e),o);(i||J.get(this,"finish"))&&t.stop(!0)};return a.finish=a,i||!1===o.queue?this.each(a):this.queue(o.queue,a)},stop:function(e,t,n){var r=function(e){var t=e.stop;delete e.stop,t(n)};return"string"!=typeof e&&(n=t,t=e,e=void 0),t&&!1!==e&&this.queue(e||"fx",[]),this.each(function(){var t=!0,i=null!=e&&e+"queueHooks",o=w.timers,a=J.get(this);if(i)a[i]&&a[i].stop&&r(a[i]);else for(i in a)a[i]&&a[i].stop&&ot.test(i)&&r(a[i]);for(i=o.length;i--;)o[i].elem!==this||null!=e&&o[i].queue!==e||(o[i].anim.stop(n),t=!1,o.splice(i,1));!t&&n||w.dequeue(this,e)})},finish:function(e){return!1!==e&&(e=e||"fx"),this.each(function(){var t,n=J.get(this),r=n[e+"queue"],i=n[e+"queueHooks"],o=w.timers,a=r?r.length:0;for(n.finish=!0,w.queue(this,e,[]),i&&i.stop&&i.stop.call(this,!0),t=o.length;t--;)o[t].elem===this&&o[t].queue===e&&(o[t].anim.stop(!0),o.splice(t,1));for(t=0;t<a;t++)r[t]&&r[t].finish&&r[t].finish.call(this);delete n.finish})}}),w.each(["toggle","show","hide"],function(e,t){var n=w.fn[t];w.fn[t]=function(e,r,i){return null==e||"boolean"==typeof e?n.apply(this,arguments):this.animate(ut(t,!0),e,r,i)}}),w.each({slideDown:ut("show"),slideUp:ut("hide"),slideToggle:ut("toggle"),fadeIn:{opacity:"show"},fadeOut:{opacity:"hide"},fadeToggle:{opacity:"toggle"}},function(e,t){w.fn[e]=function(e,n,r){return this.animate(t,e,n,r)}}),w.timers=[],w.fx.tick=function(){var e,t=0,n=w.timers;for(nt=Date.now();t<n.length;t++)(e=n[t])()||n[t]!==e||n.splice(t--,1);n.length||w.fx.stop(),nt=void 0},w.fx.timer=function(e){w.timers.push(e),w.fx.start()},w.fx.interval=13,w.fx.start=function(){rt||(rt=!0,at())},w.fx.stop=function(){rt=null},w.fx.speeds={slow:600,fast:200,_default:400},w.fn.delay=function(t,n){return t=w.fx?w.fx.speeds[t]||t:t,n=n||"fx",this.queue(n,function(n,r){var i=e.setTimeout(n,t);r.stop=function(){e.clearTimeout(i)}})},function(){var e=r.createElement("input"),t=r.createElement("select").appendChild(r.createElement("option"));e.type="checkbox",h.checkOn=""!==e.value,h.optSelected=t.selected,(e=r.createElement("input")).value="t",e.type="radio",h.radioValue="t"===e.value}();var dt,ht=w.expr.attrHandle;w.fn.extend({attr:function(e,t){return z(this,w.attr,e,t,arguments.length>1)},removeAttr:function(e){return this.each(function(){w.removeAttr(this,e)})}}),w.extend({attr:function(e,t,n){var r,i,o=e.nodeType;if(3!==o&&8!==o&&2!==o)return"undefined"==typeof e.getAttribute?w.prop(e,t,n):(1===o&&w.isXMLDoc(e)||(i=w.attrHooks[t.toLowerCase()]||(w.expr.match.bool.test(t)?dt:void 0)),void 0!==n?null===n?void w.removeAttr(e,t):i&&"set"in i&&void 0!==(r=i.set(e,n,t))?r:(e.setAttribute(t,n+""),n):i&&"get"in i&&null!==(r=i.get(e,t))?r:null==(r=w.find.attr(e,t))?void 0:r)},attrHooks:{type:{set:function(e,t){if(!h.radioValue&&"radio"===t&&N(e,"input")){var n=e.value;return e.setAttribute("type",t),n&&(e.value=n),t}}}},removeAttr:function(e,t){var n,r=0,i=t&&t.match(M);if(i&&1===e.nodeType)while(n=i[r++])e.removeAttribute(n)}}),dt={set:function(e,t,n){return!1===t?w.removeAttr(e,n):e.setAttribute(n,n),n}},w.each(w.expr.match.bool.source.match(\/\\w+\/g),function(e,t){var n=ht[t]||w.find.attr;ht[t]=function(e,t,r){var i,o,a=t.toLowerCase();return r||(o=ht[a],ht[a]=i,i=null!=n(e,t,r)?a:null,ht[a]=o),i}});var gt=\/^(?:input|select|textarea|button)$\/i,yt=\/^(?:a|area)$\/i;w.fn.extend({prop:function(e,t){return z(this,w.prop,e,t,arguments.length>1)},removeProp:function(e){return this.each(function(){delete this[w.propFix[e]||e]})}}),w.extend({prop:function(e,t,n){var r,i,o=e.nodeType;if(3!==o&&8!==o&&2!==o)return 1===o&&w.isXMLDoc(e)||(t=w.propFix[t]||t,i=w.propHooks[t]),void 0!==n?i&&"set"in i&&void 0!==(r=i.set(e,n,t))?r:e[t]=n:i&&"get"in i&&null!==(r=i.get(e,t))?r:e[t]},propHooks:{tabIndex:{get:function(e){var t=w.find.attr(e,"tabindex");return t?parseInt(t,10):gt.test(e.nodeName)||yt.test(e.nodeName)&&e.href?0:-1}}},propFix:{"for":"htmlFor","class":"className"}}),h.optSelected||(w.propHooks.selected={get:function(e){var t=e.parentNode;return t&&t.parentNode&&t.parentNode.selectedIndex,null},set:function(e){var t=e.parentNode;t&&(t.selectedIndex,t.parentNode&&t.parentNode.selectedIndex)}}),w.each(["tabIndex","readOnly","maxLength","cellSpacing","cellPadding","rowSpan","colSpan","useMap","frameBorder","contentEditable"],function(){w.propFix[this.toLowerCase()]=this});function vt(e){return(e.match(M)||[]).join(" ")}function mt(e){return e.getAttribute&&e.getAttribute("class")||""}function xt(e){return Array.isArray(e)?e:"string"==typeof e?e.match(M)||[]:[]}w.fn.extend({addClass:function(e){var t,n,r,i,o,a,s,u=0;if(g(e))return this.each(function(t){w(this).addClass(e.call(this,t,mt(this)))});if((t=xt(e)).length)while(n=this[u++])if(i=mt(n),r=1===n.nodeType&&" "+vt(i)+" "){a=0;while(o=t[a++])r.indexOf(" "+o+" ")<0&&(r+=o+" ");i!==(s=vt(r))&&n.setAttribute("class",s)}return this},removeClass:function(e){var t,n,r,i,o,a,s,u=0;if(g(e))return this.each(function(t){w(this).removeClass(e.call(this,t,mt(this)))});if(!arguments.length)return this.attr("class","");if((t=xt(e)).length)while(n=this[u++])if(i=mt(n),r=1===n.nodeType&&" "+vt(i)+" "){a=0;while(o=t[a++])while(r.indexOf(" "+o+" ")>-1)r=r.replace(" "+o+" "," ");i!==(s=vt(r))&&n.setAttribute("class",s)}return this},toggleClass:function(e,t){var n=typeof e,r="string"===n||Array.isArray(e);return"boolean"==typeof t&&r?t?this.addClass(e):this.removeClass(e):g(e)?this.each(function(n){w(this).toggleClass(e.call(this,n,mt(this),t),t)}):this.each(function(){var t,i,o,a;if(r){i=0,o=w(this),a=xt(e);while(t=a[i++])o.hasClass(t)?o.removeClass(t):o.addClass(t)}else void 0!==e&&"boolean"!==n||((t=mt(this))&&J.set(this,"__className__",t),this.setAttribute&&this.setAttribute("class",t||!1===e?"":J.get(this,"__className__")||""))})},hasClass:function(e){var t,n,r=0;t=" "+e+" ";while(n=this[r++])if(1===n.nodeType&&(" "+vt(mt(n))+" ").indexOf(t)>-1)return!0;return!1}});var bt=\/\\r\/g;w.fn.extend({val:function(e){var t,n,r,i=this[0];{if(arguments.length)return r=g(e),this.each(function(n){var i;1===this.nodeType&&(null==(i=r?e.call(this,n,w(this).val()):e)?i="":"number"==typeof i?i+="":Array.isArray(i)&&(i=w.map(i,function(e){return null==e?"":e+""})),(t=w.valHooks[this.type]||w.valHooks[this.nodeName.toLowerCase()])&&"set"in t&&void 0!==t.set(this,i,"value")||(this.value=i))});if(i)return(t=w.valHooks[i.type]||w.valHooks[i.nodeName.toLowerCase()])&&"get"in t&&void 0!==(n=t.get(i,"value"))?n:"string"==typeof(n=i.value)?n.replace(bt,""):null==n?"":n}}}),w.extend({valHooks:{option:{get:function(e){var t=w.find.attr(e,"value");return null!=t?t:vt(w.text(e))}},select:{get:function(e){var t,n,r,i=e.options,o=e.selectedIndex,a="select-one"===e.type,s=a?null:[],u=a?o+1:i.length;for(r=o<0?u:a?o:0;r<u;r++)if(((n=i[r]).selected||r===o)&&!n.disabled&&(!n.parentNode.disabled||!N(n.parentNode,"optgroup"))){if(t=w(n).val(),a)return t;s.push(t)}return s},set:function(e,t){var n,r,i=e.options,o=w.makeArray(t),a=i.length;while(a--)((r=i[a]).selected=w.inArray(w.valHooks.option.get(r),o)>-1)&&(n=!0);return n||(e.selectedIndex=-1),o}}}}),w.each(["radio","checkbox"],function(){w.valHooks[this]={set:function(e,t){if(Array.isArray(t))return e.checked=w.inArray(w(e).val(),t)>-1}},h.checkOn||(w.valHooks[this].get=function(e){return null===e.getAttribute("value")?"on":e.value})}),h.focusin="onfocusin"in e;var wt=\/^(?:focusinfocus|focusoutblur)$\/,Tt=function(e){e.stopPropagation()};w.extend(w.event,{trigger:function(t,n,i,o){var a,s,u,l,c,p,d,h,v=[i||r],m=f.call(t,"type")?t.type:t,x=f.call(t,"namespace")?t.namespace.split("."):[];if(s=h=u=i=i||r,3!==i.nodeType&&8!==i.nodeType&&!wt.test(m+w.event.triggered)&&(m.indexOf(".")>-1&&(m=(x=m.split(".")).shift(),x.sort()),c=m.indexOf(":")<0&&"on"+m,t=t[w.expando]?t:new w.Event(m,"object"==typeof t&&t),t.isTrigger=o?2:3,t.namespace=x.join("."),t.rnamespace=t.namespace?new RegExp("(^|\\\\.)"+x.join("\\\\.(?:.*\\\\.|)")+"(\\\\.|$)"):null,t.result=void 0,t.target||(t.target=i),n=null==n?[t]:w.makeArray(n,[t]),d=w.event.special[m]||{},o||!d.trigger||!1!==d.trigger.apply(i,n))){if(!o&&!d.noBubble&&!y(i)){for(l=d.delegateType||m,wt.test(l+m)||(s=s.parentNode);s;s=s.parentNode)v.push(s),u=s;u===(i.ownerDocument||r)&&v.push(u.defaultView||u.parentWindow||e)}a=0;while((s=v[a++])&&!t.isPropagationStopped())h=s,t.type=a>1?l:d.bindType||m,(p=(J.get(s,"events")||{})[t.type]&&J.get(s,"handle"))&&p.apply(s,n),(p=c&&s[c])&&p.apply&&Y(s)&&(t.result=p.apply(s,n),!1===t.result&&t.preventDefault());return t.type=m,o||t.isDefaultPrevented()||d._default&&!1!==d._default.apply(v.pop(),n)||!Y(i)||c&&g(i[m])&&!y(i)&&((u=i[c])&&(i[c]=null),w.event.triggered=m,t.isPropagationStopped()&&h.addEventListener(m,Tt),i[m](),t.isPropagationStopped()&&h.removeEventListener(m,Tt),w.event.triggered=void 0,u&&(i[c]=u)),t.result}},simulate:function(e,t,n){var r=w.extend(new w.Event,n,{type:e,isSimulated:!0});w.event.trigger(r,null,t)}}),w.fn.extend({trigger:function(e,t){return this.each(function(){w.event.trigger(e,t,this)})},triggerHandler:function(e,t){var n=this[0];if(n)return w.event.trigger(e,t,n,!0)}}),h.focusin||w.each({focus:"focusin",blur:"focusout"},function(e,t){var n=function(e){w.event.simulate(t,e.target,w.event.fix(e))};w.event.special[t]={setup:function(){var r=this.ownerDocument||this,i=J.access(r,t);i||r.addEventListener(e,n,!0),J.access(r,t,(i||0)+1)},teardown:function(){var r=this.ownerDocument||this,i=J.access(r,t)-1;i?J.access(r,t,i):(r.removeEventListener(e,n,!0),J.remove(r,t))}}});var Ct=e.location,Et=Date.now(),kt=\/\\?\/;w.parseXML=function(t){var n;if(!t||"string"!=typeof t)return null;try{n=(new e.DOMParser).parseFromString(t,"text\/xml")}catch(e){n=void 0}return n&&!n.getElementsByTagName("parsererror").length||w.error("Invalid XML: "+t),n};var St=\/\\[\\]$\/,Dt=\/\\r?\\n\/g,Nt=\/^(?:submit|button|image|reset|file)$\/i,At=\/^(?:input|select|textarea|keygen)\/i;function jt(e,t,n,r){var i;if(Array.isArray(t))w.each(t,function(t,i){n||St.test(e)?r(e,i):jt(e+"["+("object"==typeof i&&null!=i?t:"")+"]",i,n,r)});else if(n||"object"!==x(t))r(e,t);else for(i in t)jt(e+"["+i+"]",t[i],n,r)}w.param=function(e,t){var n,r=[],i=function(e,t){var n=g(t)?t():t;r[r.length]=encodeURIComponent(e)+"="+encodeURIComponent(null==n?"":n)};if(Array.isArray(e)||e.jquery&&!w.isPlainObject(e))w.each(e,function(){i(this.name,this.value)});else for(n in e)jt(n,e[n],t,i);return r.join("&")},w.fn.extend({serialize:function(){return w.param(this.serializeArray())},serializeArray:function(){return this.map(function(){var e=w.prop(this,"elements");return e?w.makeArray(e):this}).filter(function(){var e=this.type;return this.name&&!w(this).is(":disabled")&&At.test(this.nodeName)&&!Nt.test(e)&&(this.checked||!pe.test(e))}).map(function(e,t){var n=w(this).val();return null==n?null:Array.isArray(n)?w.map(n,function(e){return{name:t.name,value:e.replace(Dt,"\\r\\n")}}):{name:t.name,value:n.replace(Dt,"\\r\\n")}}).get()}});var qt=\/%20\/g,Lt=\/#.*$\/,Ht=\/([?&])_=[^&]*\/,Ot=\/^(.*?):[ \\t]*([^\\r\\n]*)$\/gm,Pt=\/^(?:about|app|app-storage|.+-extension|file|res|widget):$\/,Mt=\/^(?:GET|HEAD)$\/,Rt=\/^\\\/\\\/\/,It={},Wt={},$t="*\/".concat("*"),Bt=r.createElement("a");Bt.href=Ct.href;function Ft(e){return function(t,n){"string"!=typeof t&&(n=t,t="*");var r,i=0,o=t.toLowerCase().match(M)||[];if(g(n))while(r=o[i++])"+"===r[0]?(r=r.slice(1)||"*",(e[r]=e[r]||[]).unshift(n)):(e[r]=e[r]||[]).push(n)}}function _t(e,t,n,r){var i={},o=e===Wt;function a(s){var u;return i[s]=!0,w.each(e[s]||[],function(e,s){var l=s(t,n,r);return"string"!=typeof l||o||i[l]?o?!(u=l):void 0:(t.dataTypes.unshift(l),a(l),!1)}),u}return a(t.dataTypes[0])||!i["*"]&&a("*")}function zt(e,t){var n,r,i=w.ajaxSettings.flatOptions||{};for(n in t)void 0!==t[n]&&((i[n]?e:r||(r={}))[n]=t[n]);return r&&w.extend(!0,e,r),e}function Xt(e,t,n){var r,i,o,a,s=e.contents,u=e.dataTypes;while("*"===u[0])u.shift(),void 0===r&&(r=e.mimeType||t.getResponseHeader("Content-Type"));if(r)for(i in s)if(s[i]&&s[i].test(r)){u.unshift(i);break}if(u[0]in n)o=u[0];else{for(i in n){if(!u[0]||e.converters[i+" "+u[0]]){o=i;break}a||(a=i)}o=o||a}if(o)return o!==u[0]&&u.unshift(o),n[o]}function Ut(e,t,n,r){var i,o,a,s,u,l={},c=e.dataTypes.slice();if(c[1])for(a in e.converters)l[a.toLowerCase()]=e.converters[a];o=c.shift();while(o)if(e.responseFields[o]&&(n[e.responseFields[o]]=t),!u&&r&&e.dataFilter&&(t=e.dataFilter(t,e.dataType)),u=o,o=c.shift())if("*"===o)o=u;else if("*"!==u&&u!==o){if(!(a=l[u+" "+o]||l["* "+o]))for(i in l)if((s=i.split(" "))[1]===o&&(a=l[u+" "+s[0]]||l["* "+s[0]])){!0===a?a=l[i]:!0!==l[i]&&(o=s[0],c.unshift(s[1]));break}if(!0!==a)if(a&&e["throws"])t=a(t);else try{t=a(t)}catch(e){return{state:"parsererror",error:a?e:"No conversion from "+u+" to "+o}}}return{state:"success",data:t}}w.extend({active:0,lastModified:{},etag:{},ajaxSettings:{url:Ct.href,type:"GET",isLocal:Pt.test(Ct.protocol),global:!0,processData:!0,async:!0,contentType:"application\/x-www-form-urlencoded; charset=UTF-8",accepts:{"*":$t,text:"text\/plain",html:"text\/html",xml:"application\/xml, text\/xml",json:"application\/json, text\/javascript"},contents:{xml:\/\\bxml\\b\/,html:\/\\bhtml\/,json:\/\\bjson\\b\/},responseFields:{xml:"responseXML",text:"responseText",json:"responseJSON"},converters:{"* text":String,"text html":!0,"text json":JSON.parse,"text xml":w.parseXML},flatOptions:{url:!0,context:!0}},ajaxSetup:function(e,t){return t?zt(zt(e,w.ajaxSettings),t):zt(w.ajaxSettings,e)},ajaxPrefilter:Ft(It),ajaxTransport:Ft(Wt),ajax:function(t,n){"object"==typeof t&&(n=t,t=void 0),n=n||{};var i,o,a,s,u,l,c,f,p,d,h=w.ajaxSetup({},n),g=h.context||h,y=h.context&&(g.nodeType||g.jquery)?w(g):w.event,v=w.Deferred(),m=w.Callbacks("once memory"),x=h.statusCode||{},b={},T={},C="canceled",E={readyState:0,getResponseHeader:function(e){var t;if(c){if(!s){s={};while(t=Ot.exec(a))s[t[1].toLowerCase()]=t[2]}t=s[e.toLowerCase()]}return null==t?null:t},getAllResponseHeaders:function(){return c?a:null},setRequestHeader:function(e,t){return null==c&&(e=T[e.toLowerCase()]=T[e.toLowerCase()]||e,b[e]=t),this},overrideMimeType:function(e){return null==c&&(h.mimeType=e),this},statusCode:function(e){var t;if(e)if(c)E.always(e[E.status]);else for(t in e)x[t]=[x[t],e[t]];return this},abort:function(e){var t=e||C;return i&&i.abort(t),k(0,t),this}};if(v.promise(E),h.url=((t||h.url||Ct.href)+"").replace(Rt,Ct.protocol+"\/\/"),h.type=n.method||n.type||h.method||h.type,h.dataTypes=(h.dataType||"*").toLowerCase().match(M)||[""],null==h.crossDomain){l=r.createElement("a");try{l.href=h.url,l.href=l.href,h.crossDomain=Bt.protocol+"\/\/"+Bt.host!=l.protocol+"\/\/"+l.host}catch(e){h.crossDomain=!0}}if(h.data&&h.processData&&"string"!=typeof h.data&&(h.data=w.param(h.data,h.traditional)),_t(It,h,n,E),c)return E;(f=w.event&&h.global)&&0==w.active++&&w.event.trigger("ajaxStart"),h.type=h.type.toUpperCase(),h.hasContent=!Mt.test(h.type),o=h.url.replace(Lt,""),h.hasContent?h.data&&h.processData&&0===(h.contentType||"").indexOf("application\/x-www-form-urlencoded")&&(h.data=h.data.replace(qt,"+")):(d=h.url.slice(o.length),h.data&&(h.processData||"string"==typeof h.data)&&(o+=(kt.test(o)?"&":"?")+h.data,delete h.data),!1===h.cache&&(o=o.replace(Ht,"$1"),d=(kt.test(o)?"&":"?")+"_="+Et+++d),h.url=o+d),h.ifModified&&(w.lastModified[o]&&E.setRequestHeader("If-Modified-Since",w.lastModified[o]),w.etag[o]&&E.setRequestHeader("If-None-Match",w.etag[o])),(h.data&&h.hasContent&&!1!==h.contentType||n.contentType)&&E.setRequestHeader("Content-Type",h.contentType),E.setRequestHeader("Accept",h.dataTypes[0]&&h.accepts[h.dataTypes[0]]?h.accepts[h.dataTypes[0]]+("*"!==h.dataTypes[0]?", "+$t+"; q=0.01":""):h.accepts["*"]);for(p in h.headers)E.setRequestHeader(p,h.headers[p]);if(h.beforeSend&&(!1===h.beforeSend.call(g,E,h)||c))return E.abort();if(C="abort",m.add(h.complete),E.done(h.success),E.fail(h.error),i=_t(Wt,h,n,E)){if(E.readyState=1,f&&y.trigger("ajaxSend",[E,h]),c)return E;h.async&&h.timeout>0&&(u=e.setTimeout(function(){E.abort("timeout")},h.timeout));try{c=!1,i.send(b,k)}catch(e){if(c)throw e;k(-1,e)}}else k(-1,"No Transport");function k(t,n,r,s){var l,p,d,b,T,C=n;c||(c=!0,u&&e.clearTimeout(u),i=void 0,a=s||"",E.readyState=t>0?4:0,l=t>=200&&t<300||304===t,r&&(b=Xt(h,E,r)),b=Ut(h,b,E,l),l?(h.ifModified&&((T=E.getResponseHeader("Last-Modified"))&&(w.lastModified[o]=T),(T=E.getResponseHeader("etag"))&&(w.etag[o]=T)),204===t||"HEAD"===h.type?C="nocontent":304===t?C="notmodified":(C=b.state,p=b.data,l=!(d=b.error))):(d=C,!t&&C||(C="error",t<0&&(t=0))),E.status=t,E.statusText=(n||C)+"",l?v.resolveWith(g,[p,C,E]):v.rejectWith(g,[E,C,d]),E.statusCode(x),x=void 0,f&&y.trigger(l?"ajaxSuccess":"ajaxError",[E,h,l?p:d]),m.fireWith(g,[E,C]),f&&(y.trigger("ajaxComplete",[E,h]),--w.active||w.event.trigger("ajaxStop")))}return E},getJSON:function(e,t,n){return w.get(e,t,n,"json")},getScript:function(e,t){return w.get(e,void 0,t,"script")}}),w.each(["get","post"],function(e,t){w[t]=function(e,n,r,i){return g(n)&&(i=i||r,r=n,n=void 0),w.ajax(w.extend({url:e,type:t,dataType:i,data:n,success:r},w.isPlainObject(e)&&e))}}),w._evalUrl=function(e){return w.ajax({url:e,type:"GET",dataType:"script",cache:!0,async:!1,global:!1,"throws":!0})},w.fn.extend({wrapAll:function(e){var t;return this[0]&&(g(e)&&(e=e.call(this[0])),t=w(e,this[0].ownerDocument).eq(0).clone(!0),this[0].parentNode&&t.insertBefore(this[0]),t.map(function(){var e=this;while(e.firstElementChild)e=e.firstElementChild;return e}).append(this)),this},wrapInner:function(e){return g(e)?this.each(function(t){w(this).wrapInner(e.call(this,t))}):this.each(function(){var t=w(this),n=t.contents();n.length?n.wrapAll(e):t.append(e)})},wrap:function(e){var t=g(e);return this.each(function(n){w(this).wrapAll(t?e.call(this,n):e)})},unwrap:function(e){return this.parent(e).not("body").each(function(){w(this).replaceWith(this.childNodes)}),this}}),w.expr.pseudos.hidden=function(e){return!w.expr.pseudos.visible(e)},w.expr.pseudos.visible=function(e){return!!(e.offsetWidth||e.offsetHeight||e.getClientRects().length)},w.ajaxSettings.xhr=function(){try{return new e.XMLHttpRequest}catch(e){}};var Vt={0:200,1223:204},Gt=w.ajaxSettings.xhr();h.cors=!!Gt&&"withCredentials"in Gt,h.ajax=Gt=!!Gt,w.ajaxTransport(function(t){var n,r;if(h.cors||Gt&&!t.crossDomain)return{send:function(i,o){var a,s=t.xhr();if(s.open(t.type,t.url,t.async,t.username,t.password),t.xhrFields)for(a in t.xhrFields)s[a]=t.xhrFields[a];t.mimeType&&s.overrideMimeType&&s.overrideMimeType(t.mimeType),t.crossDomain||i["X-Requested-With"]||(i["X-Requested-With"]="XMLHttpRequest");for(a in i)s.setRequestHeader(a,i[a]);n=function(e){return function(){n&&(n=r=s.onload=s.onerror=s.onabort=s.ontimeout=s.onreadystatechange=null,"abort"===e?s.abort():"error"===e?"number"!=typeof s.status?o(0,"error"):o(s.status,s.statusText):o(Vt[s.status]||s.status,s.statusText,"text"!==(s.responseType||"text")||"string"!=typeof s.responseText?{binary:s.response}:{text:s.responseText},s.getAllResponseHeaders()))}},s.onload=n(),r=s.onerror=s.ontimeout=n("error"),void 0!==s.onabort?s.onabort=r:s.onreadystatechange=function(){4===s.readyState&&e.setTimeout(function(){n&&r()})},n=n("abort");try{s.send(t.hasContent&&t.data||null)}catch(e){if(n)throw e}},abort:function(){n&&n()}}}),w.ajaxPrefilter(function(e){e.crossDomain&&(e.contents.script=!1)}),w.ajaxSetup({accepts:{script:"text\/javascript, application\/javascript, application\/ecmascript, application\/x-ecmascript"},contents:{script:\/\\b(?:java|ecma)script\\b\/},converters:{"text script":function(e){return w.globalEval(e),e}}}),w.ajaxPrefilter("script",function(e){void 0===e.cache&&(e.cache=!1),e.crossDomain&&(e.type="GET")}),w.ajaxTransport("script",function(e){if(e.crossDomain){var t,n;return{send:function(i,o){t=w("<script>").prop({charset:e.scriptCharset,src:e.url}).on("load error",n=function(e){t.remove(),n=null,e&&o("error"===e.type?404:200,e.type)}),r.head.appendChild(t[0])},abort:function(){n&&n()}}}});var Yt=[],Qt=\/(=)\\?(?=&|$)|\\?\\?\/;w.ajaxSetup({jsonp:"callback",jsonpCallback:function(){var e=Yt.pop()||w.expando+"_"+Et++;return this[e]=!0,e}}),w.ajaxPrefilter("json jsonp",function(t,n,r){var i,o,a,s=!1!==t.jsonp&&(Qt.test(t.url)?"url":"string"==typeof t.data&&0===(t.contentType||"").indexOf("application\/x-www-form-urlencoded")&&Qt.test(t.data)&&"data");if(s||"jsonp"===t.dataTypes[0])return i=t.jsonpCallback=g(t.jsonpCallback)?t.jsonpCallback():t.jsonpCallback,s?t[s]=t[s].replace(Qt,"$1"+i):!1!==t.jsonp&&(t.url+=(kt.test(t.url)?"&":"?")+t.jsonp+"="+i),t.converters["script json"]=function(){return a||w.error(i+" was not called"),a[0]},t.dataTypes[0]="json",o=e[i],e[i]=function(){a=arguments},r.always(function(){void 0===o?w(e).removeProp(i):e[i]=o,t[i]&&(t.jsonpCallback=n.jsonpCallback,Yt.push(i)),a&&g(o)&&o(a[0]),a=o=void 0}),"script"}),h.createHTMLDocument=function(){var e=r.implementation.createHTMLDocument("").body;return e.innerHTML="<form><\/form><form><\/form>",2===e.childNodes.length}(),w.parseHTML=function(e,t,n){if("string"!=typeof e)return[];"boolean"==typeof t&&(n=t,t=!1);var i,o,a;return t||(h.createHTMLDocument?((i=(t=r.implementation.createHTMLDocument("")).createElement("base")).href=r.location.href,t.head.appendChild(i)):t=r),o=A.exec(e),a=!n&&[],o?[t.createElement(o[1])]:(o=xe([e],t,a),a&&a.length&&w(a).remove(),w.merge([],o.childNodes))},w.fn.load=function(e,t,n){var r,i,o,a=this,s=e.indexOf(" ");return s>-1&&(r=vt(e.slice(s)),e=e.slice(0,s)),g(t)?(n=t,t=void 0):t&&"object"==typeof t&&(i="POST"),a.length>0&&w.ajax({url:e,type:i||"GET",dataType:"html",data:t}).done(function(e){o=arguments,a.html(r?w("<div>").append(w.parseHTML(e)).find(r):e)}).always(n&&function(e,t){a.each(function(){n.apply(this,o||[e.responseText,t,e])})}),this},w.each(["ajaxStart","ajaxStop","ajaxComplete","ajaxError","ajaxSuccess","ajaxSend"],function(e,t){w.fn[t]=function(e){return this.on(t,e)}}),w.expr.pseudos.animated=function(e){return w.grep(w.timers,function(t){return e===t.elem}).length},w.offset={setOffset:function(e,t,n){var r,i,o,a,s,u,l,c=w.css(e,"position"),f=w(e),p={};"static"===c&&(e.style.position="relative"),s=f.offset(),o=w.css(e,"top"),u=w.css(e,"left"),(l=("absolute"===c||"fixed"===c)&&(o+u).indexOf("auto")>-1)?(a=(r=f.position()).top,i=r.left):(a=parseFloat(o)||0,i=parseFloat(u)||0),g(t)&&(t=t.call(e,n,w.extend({},s))),null!=t.top&&(p.top=t.top-s.top+a),null!=t.left&&(p.left=t.left-s.left+i),"using"in t?t.using.call(e,p):f.css(p)}},w.fn.extend({offset:function(e){if(arguments.length)return void 0===e?this:this.each(function(t){w.offset.setOffset(this,e,t)});var t,n,r=this[0];if(r)return r.getClientRects().length?(t=r.getBoundingClientRect(),n=r.ownerDocument.defaultView,{top:t.top+n.pageYOffset,left:t.left+n.pageXOffset}):{top:0,left:0}},position:function(){if(this[0]){var e,t,n,r=this[0],i={top:0,left:0};if("fixed"===w.css(r,"position"))t=r.getBoundingClientRect();else{t=this.offset(),n=r.ownerDocument,e=r.offsetParent||n.documentElement;while(e&&(e===n.body||e===n.documentElement)&&"static"===w.css(e,"position"))e=e.parentNode;e&&e!==r&&1===e.nodeType&&((i=w(e).offset()).top+=w.css(e,"borderTopWidth",!0),i.left+=w.css(e,"borderLeftWidth",!0))}return{top:t.top-i.top-w.css(r,"marginTop",!0),left:t.left-i.left-w.css(r,"marginLeft",!0)}}},offsetParent:function(){return this.map(function(){var e=this.offsetParent;while(e&&"static"===w.css(e,"position"))e=e.offsetParent;return e||be})}}),w.each({scrollLeft:"pageXOffset",scrollTop:"pageYOffset"},function(e,t){var n="pageYOffset"===t;w.fn[e]=function(r){return z(this,function(e,r,i){var o;if(y(e)?o=e:9===e.nodeType&&(o=e.defaultView),void 0===i)return o?o[t]:e[r];o?o.scrollTo(n?o.pageXOffset:i,n?i:o.pageYOffset):e[r]=i},e,r,arguments.length)}}),w.each(["top","left"],function(e,t){w.cssHooks[t]=_e(h.pixelPosition,function(e,n){if(n)return n=Fe(e,t),We.test(n)?w(e).position()[t]+"px":n})}),w.each({Height:"height",Width:"width"},function(e,t){w.each({padding:"inner"+e,content:t,"":"outer"+e},function(n,r){w.fn[r]=function(i,o){var a=arguments.length&&(n||"boolean"!=typeof i),s=n||(!0===i||!0===o?"margin":"border");return z(this,function(t,n,i){var o;return y(t)?0===r.indexOf("outer")?t["inner"+e]:t.document.documentElement["client"+e]:9===t.nodeType?(o=t.documentElement,Math.max(t.body["scroll"+e],o["scroll"+e],t.body["offset"+e],o["offset"+e],o["client"+e])):void 0===i?w.css(t,n,s):w.style(t,n,i,s)},t,a?i:void 0,a)}})}),w.each("blur focus focusin focusout resize scroll click dblclick mousedown mouseup mousemove mouseover mouseout mouseenter mouseleave change select submit keydown keypress keyup contextmenu".split(" "),function(e,t){w.fn[t]=function(e,n){return arguments.length>0?this.on(t,null,e,n):this.trigger(t)}}),w.fn.extend({hover:function(e,t){return this.mouseenter(e).mouseleave(t||e)}}),w.fn.extend({bind:function(e,t,n){return this.on(e,null,t,n)},unbind:function(e,t){return this.off(e,null,t)},delegate:function(e,t,n,r){return this.on(t,e,n,r)},undelegate:function(e,t,n){return 1===arguments.length?this.off(e,"**"):this.off(t,e||"**",n)}}),w.proxy=function(e,t){var n,r,i;if("string"==typeof t&&(n=e[t],t=e,e=n),g(e))return r=o.call(arguments,2),i=function(){return e.apply(t||this,r.concat(o.call(arguments)))},i.guid=e.guid=e.guid||w.guid++,i},w.holdReady=function(e){e?w.readyWait++:w.ready(!0)},w.isArray=Array.isArray,w.parseJSON=JSON.parse,w.nodeName=N,w.isFunction=g,w.isWindow=y,w.camelCase=G,w.type=x,w.now=Date.now,w.isNumeric=function(e){var t=w.type(e);return("number"===t||"string"===t)&&!isNaN(e-parseFloat(e))},"function"==typeof define&&define.amd&&define("jquery",[],function(){return w});var Jt=e.jQuery,Kt=e.$;return w.noConflict=function(t){return e.$===w&&(e.$=Kt),t&&e.jQuery===w&&(e.jQuery=Jt),w},t||(e.jQuery=e.$=w),w});$/;"	f
type	public\static\live\js\jquery-3.3.1.min.js	/^!function(e,t){"use strict";"object"==typeof module&&"object"==typeof module.exports?module.exports=e.document?t(e,!0):function(e){if(!e.document)throw new Error("jQuery requires a window with a document");return t(e)}:t(e)}("undefined"!=typeof window?window:this,function(e,t){"use strict";var n=[],r=e.document,i=Object.getPrototypeOf,o=n.slice,a=n.concat,s=n.push,u=n.indexOf,l={},c=l.toString,f=l.hasOwnProperty,p=f.toString,d=p.call(Object),h={},g=function e(t){return"function"==typeof t&&"number"!=typeof t.nodeType},y=function e(t){return null!=t&&t===t.window},v={type:!0,src:!0,noModule:!0};function m(e,t,n){var i,o=(t=t||r).createElement("script");if(o.text=e,n)for(i in v)n[i]&&(o[i]=n[i]);t.head.appendChild(o).parentNode.removeChild(o)}function x(e){return null==e?e+"":"object"==typeof e||"function"==typeof e?l[c.call(e)]||"object":typeof e}var b="3.3.1",w=function(e,t){return new w.fn.init(e,t)},T=\/^[\\s\\uFEFF\\xA0]+|[\\s\\uFEFF\\xA0]+$\/g;w.fn=w.prototype={jquery:"3.3.1",constructor:w,length:0,toArray:function(){return o.call(this)},get:function(e){return null==e?o.call(this):e<0?this[e+this.length]:this[e]},pushStack:function(e){var t=w.merge(this.constructor(),e);return t.prevObject=this,t},each:function(e){return w.each(this,e)},map:function(e){return this.pushStack(w.map(this,function(t,n){return e.call(t,n,t)}))},slice:function(){return this.pushStack(o.apply(this,arguments))},first:function(){return this.eq(0)},last:function(){return this.eq(-1)},eq:function(e){var t=this.length,n=+e+(e<0?t:0);return this.pushStack(n>=0&&n<t?[this[n]]:[])},end:function(){return this.prevObject||this.constructor()},push:s,sort:n.sort,splice:n.splice},w.extend=w.fn.extend=function(){var e,t,n,r,i,o,a=arguments[0]||{},s=1,u=arguments.length,l=!1;for("boolean"==typeof a&&(l=a,a=arguments[s]||{},s++),"object"==typeof a||g(a)||(a={}),s===u&&(a=this,s--);s<u;s++)if(null!=(e=arguments[s]))for(t in e)n=a[t],a!==(r=e[t])&&(l&&r&&(w.isPlainObject(r)||(i=Array.isArray(r)))?(i?(i=!1,o=n&&Array.isArray(n)?n:[]):o=n&&w.isPlainObject(n)?n:{},a[t]=w.extend(l,o,r)):void 0!==r&&(a[t]=r));return a},w.extend({expando:"jQuery"+("3.3.1"+Math.random()).replace(\/\\D\/g,""),isReady:!0,error:function(e){throw new Error(e)},noop:function(){},isPlainObject:function(e){var t,n;return!(!e||"[object Object]"!==c.call(e))&&(!(t=i(e))||"function"==typeof(n=f.call(t,"constructor")&&t.constructor)&&p.call(n)===d)},isEmptyObject:function(e){var t;for(t in e)return!1;return!0},globalEval:function(e){m(e)},each:function(e,t){var n,r=0;if(C(e)){for(n=e.length;r<n;r++)if(!1===t.call(e[r],r,e[r]))break}else for(r in e)if(!1===t.call(e[r],r,e[r]))break;return e},trim:function(e){return null==e?"":(e+"").replace(T,"")},makeArray:function(e,t){var n=t||[];return null!=e&&(C(Object(e))?w.merge(n,"string"==typeof e?[e]:e):s.call(n,e)),n},inArray:function(e,t,n){return null==t?-1:u.call(t,e,n)},merge:function(e,t){for(var n=+t.length,r=0,i=e.length;r<n;r++)e[i++]=t[r];return e.length=i,e},grep:function(e,t,n){for(var r,i=[],o=0,a=e.length,s=!n;o<a;o++)(r=!t(e[o],o))!==s&&i.push(e[o]);return i},map:function(e,t,n){var r,i,o=0,s=[];if(C(e))for(r=e.length;o<r;o++)null!=(i=t(e[o],o,n))&&s.push(i);else for(o in e)null!=(i=t(e[o],o,n))&&s.push(i);return a.apply([],s)},guid:1,support:h}),"function"==typeof Symbol&&(w.fn[Symbol.iterator]=n[Symbol.iterator]),w.each("Boolean Number String Function Array Date RegExp Object Error Symbol".split(" "),function(e,t){l["[object "+t+"]"]=t.toLowerCase()});function C(e){var t=!!e&&"length"in e&&e.length,n=x(e);return!g(e)&&!y(e)&&("array"===n||0===t||"number"==typeof t&&t>0&&t-1 in e)}var E=function(e){var t,n,r,i,o,a,s,u,l,c,f,p,d,h,g,y,v,m,x,b="sizzle"+1*new Date,w=e.document,T=0,C=0,E=ae(),k=ae(),S=ae(),D=function(e,t){return e===t&&(f=!0),0},N={}.hasOwnProperty,A=[],j=A.pop,q=A.push,L=A.push,H=A.slice,O=function(e,t){for(var n=0,r=e.length;n<r;n++)if(e[n]===t)return n;return-1},P="checked|selected|async|autofocus|autoplay|controls|defer|disabled|hidden|ismap|loop|multiple|open|readonly|required|scoped",M="[\\\\x20\\\\t\\\\r\\\\n\\\\f]",R="(?:\\\\\\\\.|[\\\\w-]|[^\\0-\\\\xa0])+",I="\\\\["+M+"*("+R+")(?:"+M+"*([*^$|!~]?=)"+M+"*(?:'((?:\\\\\\\\.|[^\\\\\\\\'])*)'|\\"((?:\\\\\\\\.|[^\\\\\\\\\\"])*)\\"|("+R+"))|)"+M+"*\\\\]",W=":("+R+")(?:\\\\((('((?:\\\\\\\\.|[^\\\\\\\\'])*)'|\\"((?:\\\\\\\\.|[^\\\\\\\\\\"])*)\\")|((?:\\\\\\\\.|[^\\\\\\\\()[\\\\]]|"+I+")*)|.*)\\\\)|)",$=new RegExp(M+"+","g"),B=new RegExp("^"+M+"+|((?:^|[^\\\\\\\\])(?:\\\\\\\\.)*)"+M+"+$","g"),F=new RegExp("^"+M+"*,"+M+"*"),_=new RegExp("^"+M+"*([>+~]|"+M+")"+M+"*"),z=new RegExp("="+M+"*([^\\\\]'\\"]*?)"+M+"*\\\\]","g"),X=new RegExp(W),U=new RegExp("^"+R+"$"),V={ID:new RegExp("^#("+R+")"),CLASS:new RegExp("^\\\\.("+R+")"),TAG:new RegExp("^("+R+"|[*])"),ATTR:new RegExp("^"+I),PSEUDO:new RegExp("^"+W),CHILD:new RegExp("^:(only|first|last|nth|nth-last)-(child|of-type)(?:\\\\("+M+"*(even|odd|(([+-]|)(\\\\d*)n|)"+M+"*(?:([+-]|)"+M+"*(\\\\d+)|))"+M+"*\\\\)|)","i"),bool:new RegExp("^(?:"+P+")$","i"),needsContext:new RegExp("^"+M+"*[>+~]|:(even|odd|eq|gt|lt|nth|first|last)(?:\\\\("+M+"*((?:-\\\\d)?\\\\d*)"+M+"*\\\\)|)(?=[^-]|$)","i")},G=\/^(?:input|select|textarea|button)$\/i,Y=\/^h\\d$\/i,Q=\/^[^{]+\\{\\s*\\[native \\w\/,J=\/^(?:#([\\w-]+)|(\\w+)|\\.([\\w-]+))$\/,K=\/[+~]\/,Z=new RegExp("\\\\\\\\([\\\\da-f]{1,6}"+M+"?|("+M+")|.)","ig"),ee=function(e,t,n){var r="0x"+t-65536;return r!==r||n?t:r<0?String.fromCharCode(r+65536):String.fromCharCode(r>>10|55296,1023&r|56320)},te=\/([\\0-\\x1f\\x7f]|^-?\\d)|^-$|[^\\0-\\x1f\\x7f-\\uFFFF\\w-]\/g,ne=function(e,t){return t?"\\0"===e?"\\ufffd":e.slice(0,-1)+"\\\\"+e.charCodeAt(e.length-1).toString(16)+" ":"\\\\"+e},re=function(){p()},ie=me(function(e){return!0===e.disabled&&("form"in e||"label"in e)},{dir:"parentNode",next:"legend"});try{L.apply(A=H.call(w.childNodes),w.childNodes),A[w.childNodes.length].nodeType}catch(e){L={apply:A.length?function(e,t){q.apply(e,H.call(t))}:function(e,t){var n=e.length,r=0;while(e[n++]=t[r++]);e.length=n-1}}}function oe(e,t,r,i){var o,s,l,c,f,h,v,m=t&&t.ownerDocument,T=t?t.nodeType:9;if(r=r||[],"string"!=typeof e||!e||1!==T&&9!==T&&11!==T)return r;if(!i&&((t?t.ownerDocument||t:w)!==d&&p(t),t=t||d,g)){if(11!==T&&(f=J.exec(e)))if(o=f[1]){if(9===T){if(!(l=t.getElementById(o)))return r;if(l.id===o)return r.push(l),r}else if(m&&(l=m.getElementById(o))&&x(t,l)&&l.id===o)return r.push(l),r}else{if(f[2])return L.apply(r,t.getElementsByTagName(e)),r;if((o=f[3])&&n.getElementsByClassName&&t.getElementsByClassName)return L.apply(r,t.getElementsByClassName(o)),r}if(n.qsa&&!S[e+" "]&&(!y||!y.test(e))){if(1!==T)m=t,v=e;else if("object"!==t.nodeName.toLowerCase()){(c=t.getAttribute("id"))?c=c.replace(te,ne):t.setAttribute("id",c=b),s=(h=a(e)).length;while(s--)h[s]="#"+c+" "+ve(h[s]);v=h.join(","),m=K.test(e)&&ge(t.parentNode)||t}if(v)try{return L.apply(r,m.querySelectorAll(v)),r}catch(e){}finally{c===b&&t.removeAttribute("id")}}}return u(e.replace(B,"$1"),t,r,i)}function ae(){var e=[];function t(n,i){return e.push(n+" ")>r.cacheLength&&delete t[e.shift()],t[n+" "]=i}return t}function se(e){return e[b]=!0,e}function ue(e){var t=d.createElement("fieldset");try{return!!e(t)}catch(e){return!1}finally{t.parentNode&&t.parentNode.removeChild(t),t=null}}function le(e,t){var n=e.split("|"),i=n.length;while(i--)r.attrHandle[n[i]]=t}function ce(e,t){var n=t&&e,r=n&&1===e.nodeType&&1===t.nodeType&&e.sourceIndex-t.sourceIndex;if(r)return r;if(n)while(n=n.nextSibling)if(n===t)return-1;return e?1:-1}function fe(e){return function(t){return"input"===t.nodeName.toLowerCase()&&t.type===e}}function pe(e){return function(t){var n=t.nodeName.toLowerCase();return("input"===n||"button"===n)&&t.type===e}}function de(e){return function(t){return"form"in t?t.parentNode&&!1===t.disabled?"label"in t?"label"in t.parentNode?t.parentNode.disabled===e:t.disabled===e:t.isDisabled===e||t.isDisabled!==!e&&ie(t)===e:t.disabled===e:"label"in t&&t.disabled===e}}function he(e){return se(function(t){return t=+t,se(function(n,r){var i,o=e([],n.length,t),a=o.length;while(a--)n[i=o[a]]&&(n[i]=!(r[i]=n[i]))})})}function ge(e){return e&&"undefined"!=typeof e.getElementsByTagName&&e}n=oe.support={},o=oe.isXML=function(e){var t=e&&(e.ownerDocument||e).documentElement;return!!t&&"HTML"!==t.nodeName},p=oe.setDocument=function(e){var t,i,a=e?e.ownerDocument||e:w;return a!==d&&9===a.nodeType&&a.documentElement?(d=a,h=d.documentElement,g=!o(d),w!==d&&(i=d.defaultView)&&i.top!==i&&(i.addEventListener?i.addEventListener("unload",re,!1):i.attachEvent&&i.attachEvent("onunload",re)),n.attributes=ue(function(e){return e.className="i",!e.getAttribute("className")}),n.getElementsByTagName=ue(function(e){return e.appendChild(d.createComment("")),!e.getElementsByTagName("*").length}),n.getElementsByClassName=Q.test(d.getElementsByClassName),n.getById=ue(function(e){return h.appendChild(e).id=b,!d.getElementsByName||!d.getElementsByName(b).length}),n.getById?(r.filter.ID=function(e){var t=e.replace(Z,ee);return function(e){return e.getAttribute("id")===t}},r.find.ID=function(e,t){if("undefined"!=typeof t.getElementById&&g){var n=t.getElementById(e);return n?[n]:[]}}):(r.filter.ID=function(e){var t=e.replace(Z,ee);return function(e){var n="undefined"!=typeof e.getAttributeNode&&e.getAttributeNode("id");return n&&n.value===t}},r.find.ID=function(e,t){if("undefined"!=typeof t.getElementById&&g){var n,r,i,o=t.getElementById(e);if(o){if((n=o.getAttributeNode("id"))&&n.value===e)return[o];i=t.getElementsByName(e),r=0;while(o=i[r++])if((n=o.getAttributeNode("id"))&&n.value===e)return[o]}return[]}}),r.find.TAG=n.getElementsByTagName?function(e,t){return"undefined"!=typeof t.getElementsByTagName?t.getElementsByTagName(e):n.qsa?t.querySelectorAll(e):void 0}:function(e,t){var n,r=[],i=0,o=t.getElementsByTagName(e);if("*"===e){while(n=o[i++])1===n.nodeType&&r.push(n);return r}return o},r.find.CLASS=n.getElementsByClassName&&function(e,t){if("undefined"!=typeof t.getElementsByClassName&&g)return t.getElementsByClassName(e)},v=[],y=[],(n.qsa=Q.test(d.querySelectorAll))&&(ue(function(e){h.appendChild(e).innerHTML="<a id='"+b+"'><\/a><select id='"+b+"-\\r\\\\' msallowcapture=''><option selected=''><\/option><\/select>",e.querySelectorAll("[msallowcapture^='']").length&&y.push("[*^$]="+M+"*(?:''|\\"\\")"),e.querySelectorAll("[selected]").length||y.push("\\\\["+M+"*(?:value|"+P+")"),e.querySelectorAll("[id~="+b+"-]").length||y.push("~="),e.querySelectorAll(":checked").length||y.push(":checked"),e.querySelectorAll("a#"+b+"+*").length||y.push(".#.+[+~]")}),ue(function(e){e.innerHTML="<a href='' disabled='disabled'><\/a><select disabled='disabled'><option\/><\/select>";var t=d.createElement("input");t.setAttribute("type","hidden"),e.appendChild(t).setAttribute("name","D"),e.querySelectorAll("[name=d]").length&&y.push("name"+M+"*[*^$|!~]?="),2!==e.querySelectorAll(":enabled").length&&y.push(":enabled",":disabled"),h.appendChild(e).disabled=!0,2!==e.querySelectorAll(":disabled").length&&y.push(":enabled",":disabled"),e.querySelectorAll("*,:x"),y.push(",.*:")})),(n.matchesSelector=Q.test(m=h.matches||h.webkitMatchesSelector||h.mozMatchesSelector||h.oMatchesSelector||h.msMatchesSelector))&&ue(function(e){n.disconnectedMatch=m.call(e,"*"),m.call(e,"[s!='']:x"),v.push("!=",W)}),y=y.length&&new RegExp(y.join("|")),v=v.length&&new RegExp(v.join("|")),t=Q.test(h.compareDocumentPosition),x=t||Q.test(h.contains)?function(e,t){var n=9===e.nodeType?e.documentElement:e,r=t&&t.parentNode;return e===r||!(!r||1!==r.nodeType||!(n.contains?n.contains(r):e.compareDocumentPosition&&16&e.compareDocumentPosition(r)))}:function(e,t){if(t)while(t=t.parentNode)if(t===e)return!0;return!1},D=t?function(e,t){if(e===t)return f=!0,0;var r=!e.compareDocumentPosition-!t.compareDocumentPosition;return r||(1&(r=(e.ownerDocument||e)===(t.ownerDocument||t)?e.compareDocumentPosition(t):1)||!n.sortDetached&&t.compareDocumentPosition(e)===r?e===d||e.ownerDocument===w&&x(w,e)?-1:t===d||t.ownerDocument===w&&x(w,t)?1:c?O(c,e)-O(c,t):0:4&r?-1:1)}:function(e,t){if(e===t)return f=!0,0;var n,r=0,i=e.parentNode,o=t.parentNode,a=[e],s=[t];if(!i||!o)return e===d?-1:t===d?1:i?-1:o?1:c?O(c,e)-O(c,t):0;if(i===o)return ce(e,t);n=e;while(n=n.parentNode)a.unshift(n);n=t;while(n=n.parentNode)s.unshift(n);while(a[r]===s[r])r++;return r?ce(a[r],s[r]):a[r]===w?-1:s[r]===w?1:0},d):d},oe.matches=function(e,t){return oe(e,null,null,t)},oe.matchesSelector=function(e,t){if((e.ownerDocument||e)!==d&&p(e),t=t.replace(z,"='$1']"),n.matchesSelector&&g&&!S[t+" "]&&(!v||!v.test(t))&&(!y||!y.test(t)))try{var r=m.call(e,t);if(r||n.disconnectedMatch||e.document&&11!==e.document.nodeType)return r}catch(e){}return oe(t,d,null,[e]).length>0},oe.contains=function(e,t){return(e.ownerDocument||e)!==d&&p(e),x(e,t)},oe.attr=function(e,t){(e.ownerDocument||e)!==d&&p(e);var i=r.attrHandle[t.toLowerCase()],o=i&&N.call(r.attrHandle,t.toLowerCase())?i(e,t,!g):void 0;return void 0!==o?o:n.attributes||!g?e.getAttribute(t):(o=e.getAttributeNode(t))&&o.specified?o.value:null},oe.escape=function(e){return(e+"").replace(te,ne)},oe.error=function(e){throw new Error("Syntax error, unrecognized expression: "+e)},oe.uniqueSort=function(e){var t,r=[],i=0,o=0;if(f=!n.detectDuplicates,c=!n.sortStable&&e.slice(0),e.sort(D),f){while(t=e[o++])t===e[o]&&(i=r.push(o));while(i--)e.splice(r[i],1)}return c=null,e},i=oe.getText=function(e){var t,n="",r=0,o=e.nodeType;if(o){if(1===o||9===o||11===o){if("string"==typeof e.textContent)return e.textContent;for(e=e.firstChild;e;e=e.nextSibling)n+=i(e)}else if(3===o||4===o)return e.nodeValue}else while(t=e[r++])n+=i(t);return n},(r=oe.selectors={cacheLength:50,createPseudo:se,match:V,attrHandle:{},find:{},relative:{">":{dir:"parentNode",first:!0}," ":{dir:"parentNode"},"+":{dir:"previousSibling",first:!0},"~":{dir:"previousSibling"}},preFilter:{ATTR:function(e){return e[1]=e[1].replace(Z,ee),e[3]=(e[3]||e[4]||e[5]||"").replace(Z,ee),"~="===e[2]&&(e[3]=" "+e[3]+" "),e.slice(0,4)},CHILD:function(e){return e[1]=e[1].toLowerCase(),"nth"===e[1].slice(0,3)?(e[3]||oe.error(e[0]),e[4]=+(e[4]?e[5]+(e[6]||1):2*("even"===e[3]||"odd"===e[3])),e[5]=+(e[7]+e[8]||"odd"===e[3])):e[3]&&oe.error(e[0]),e},PSEUDO:function(e){var t,n=!e[6]&&e[2];return V.CHILD.test(e[0])?null:(e[3]?e[2]=e[4]||e[5]||"":n&&X.test(n)&&(t=a(n,!0))&&(t=n.indexOf(")",n.length-t)-n.length)&&(e[0]=e[0].slice(0,t),e[2]=n.slice(0,t)),e.slice(0,3))}},filter:{TAG:function(e){var t=e.replace(Z,ee).toLowerCase();return"*"===e?function(){return!0}:function(e){return e.nodeName&&e.nodeName.toLowerCase()===t}},CLASS:function(e){var t=E[e+" "];return t||(t=new RegExp("(^|"+M+")"+e+"("+M+"|$)"))&&E(e,function(e){return t.test("string"==typeof e.className&&e.className||"undefined"!=typeof e.getAttribute&&e.getAttribute("class")||"")})},ATTR:function(e,t,n){return function(r){var i=oe.attr(r,e);return null==i?"!="===t:!t||(i+="","="===t?i===n:"!="===t?i!==n:"^="===t?n&&0===i.indexOf(n):"*="===t?n&&i.indexOf(n)>-1:"$="===t?n&&i.slice(-n.length)===n:"~="===t?(" "+i.replace($," ")+" ").indexOf(n)>-1:"|="===t&&(i===n||i.slice(0,n.length+1)===n+"-"))}},CHILD:function(e,t,n,r,i){var o="nth"!==e.slice(0,3),a="last"!==e.slice(-4),s="of-type"===t;return 1===r&&0===i?function(e){return!!e.parentNode}:function(t,n,u){var l,c,f,p,d,h,g=o!==a?"nextSibling":"previousSibling",y=t.parentNode,v=s&&t.nodeName.toLowerCase(),m=!u&&!s,x=!1;if(y){if(o){while(g){p=t;while(p=p[g])if(s?p.nodeName.toLowerCase()===v:1===p.nodeType)return!1;h=g="only"===e&&!h&&"nextSibling"}return!0}if(h=[a?y.firstChild:y.lastChild],a&&m){x=(d=(l=(c=(f=(p=y)[b]||(p[b]={}))[p.uniqueID]||(f[p.uniqueID]={}))[e]||[])[0]===T&&l[1])&&l[2],p=d&&y.childNodes[d];while(p=++d&&p&&p[g]||(x=d=0)||h.pop())if(1===p.nodeType&&++x&&p===t){c[e]=[T,d,x];break}}else if(m&&(x=d=(l=(c=(f=(p=t)[b]||(p[b]={}))[p.uniqueID]||(f[p.uniqueID]={}))[e]||[])[0]===T&&l[1]),!1===x)while(p=++d&&p&&p[g]||(x=d=0)||h.pop())if((s?p.nodeName.toLowerCase()===v:1===p.nodeType)&&++x&&(m&&((c=(f=p[b]||(p[b]={}))[p.uniqueID]||(f[p.uniqueID]={}))[e]=[T,x]),p===t))break;return(x-=i)===r||x%r==0&&x\/r>=0}}},PSEUDO:function(e,t){var n,i=r.pseudos[e]||r.setFilters[e.toLowerCase()]||oe.error("unsupported pseudo: "+e);return i[b]?i(t):i.length>1?(n=[e,e,"",t],r.setFilters.hasOwnProperty(e.toLowerCase())?se(function(e,n){var r,o=i(e,t),a=o.length;while(a--)e[r=O(e,o[a])]=!(n[r]=o[a])}):function(e){return i(e,0,n)}):i}},pseudos:{not:se(function(e){var t=[],n=[],r=s(e.replace(B,"$1"));return r[b]?se(function(e,t,n,i){var o,a=r(e,null,i,[]),s=e.length;while(s--)(o=a[s])&&(e[s]=!(t[s]=o))}):function(e,i,o){return t[0]=e,r(t,null,o,n),t[0]=null,!n.pop()}}),has:se(function(e){return function(t){return oe(e,t).length>0}}),contains:se(function(e){return e=e.replace(Z,ee),function(t){return(t.textContent||t.innerText||i(t)).indexOf(e)>-1}}),lang:se(function(e){return U.test(e||"")||oe.error("unsupported lang: "+e),e=e.replace(Z,ee).toLowerCase(),function(t){var n;do{if(n=g?t.lang:t.getAttribute("xml:lang")||t.getAttribute("lang"))return(n=n.toLowerCase())===e||0===n.indexOf(e+"-")}while((t=t.parentNode)&&1===t.nodeType);return!1}}),target:function(t){var n=e.location&&e.location.hash;return n&&n.slice(1)===t.id},root:function(e){return e===h},focus:function(e){return e===d.activeElement&&(!d.hasFocus||d.hasFocus())&&!!(e.type||e.href||~e.tabIndex)},enabled:de(!1),disabled:de(!0),checked:function(e){var t=e.nodeName.toLowerCase();return"input"===t&&!!e.checked||"option"===t&&!!e.selected},selected:function(e){return e.parentNode&&e.parentNode.selectedIndex,!0===e.selected},empty:function(e){for(e=e.firstChild;e;e=e.nextSibling)if(e.nodeType<6)return!1;return!0},parent:function(e){return!r.pseudos.empty(e)},header:function(e){return Y.test(e.nodeName)},input:function(e){return G.test(e.nodeName)},button:function(e){var t=e.nodeName.toLowerCase();return"input"===t&&"button"===e.type||"button"===t},text:function(e){var t;return"input"===e.nodeName.toLowerCase()&&"text"===e.type&&(null==(t=e.getAttribute("type"))||"text"===t.toLowerCase())},first:he(function(){return[0]}),last:he(function(e,t){return[t-1]}),eq:he(function(e,t,n){return[n<0?n+t:n]}),even:he(function(e,t){for(var n=0;n<t;n+=2)e.push(n);return e}),odd:he(function(e,t){for(var n=1;n<t;n+=2)e.push(n);return e}),lt:he(function(e,t,n){for(var r=n<0?n+t:n;--r>=0;)e.push(r);return e}),gt:he(function(e,t,n){for(var r=n<0?n+t:n;++r<t;)e.push(r);return e})}}).pseudos.nth=r.pseudos.eq;for(t in{radio:!0,checkbox:!0,file:!0,password:!0,image:!0})r.pseudos[t]=fe(t);for(t in{submit:!0,reset:!0})r.pseudos[t]=pe(t);function ye(){}ye.prototype=r.filters=r.pseudos,r.setFilters=new ye,a=oe.tokenize=function(e,t){var n,i,o,a,s,u,l,c=k[e+" "];if(c)return t?0:c.slice(0);s=e,u=[],l=r.preFilter;while(s){n&&!(i=F.exec(s))||(i&&(s=s.slice(i[0].length)||s),u.push(o=[])),n=!1,(i=_.exec(s))&&(n=i.shift(),o.push({value:n,type:i[0].replace(B," ")}),s=s.slice(n.length));for(a in r.filter)!(i=V[a].exec(s))||l[a]&&!(i=l[a](i))||(n=i.shift(),o.push({value:n,type:a,matches:i}),s=s.slice(n.length));if(!n)break}return t?s.length:s?oe.error(e):k(e,u).slice(0)};function ve(e){for(var t=0,n=e.length,r="";t<n;t++)r+=e[t].value;return r}function me(e,t,n){var r=t.dir,i=t.next,o=i||r,a=n&&"parentNode"===o,s=C++;return t.first?function(t,n,i){while(t=t[r])if(1===t.nodeType||a)return e(t,n,i);return!1}:function(t,n,u){var l,c,f,p=[T,s];if(u){while(t=t[r])if((1===t.nodeType||a)&&e(t,n,u))return!0}else while(t=t[r])if(1===t.nodeType||a)if(f=t[b]||(t[b]={}),c=f[t.uniqueID]||(f[t.uniqueID]={}),i&&i===t.nodeName.toLowerCase())t=t[r]||t;else{if((l=c[o])&&l[0]===T&&l[1]===s)return p[2]=l[2];if(c[o]=p,p[2]=e(t,n,u))return!0}return!1}}function xe(e){return e.length>1?function(t,n,r){var i=e.length;while(i--)if(!e[i](t,n,r))return!1;return!0}:e[0]}function be(e,t,n){for(var r=0,i=t.length;r<i;r++)oe(e,t[r],n);return n}function we(e,t,n,r,i){for(var o,a=[],s=0,u=e.length,l=null!=t;s<u;s++)(o=e[s])&&(n&&!n(o,r,i)||(a.push(o),l&&t.push(s)));return a}function Te(e,t,n,r,i,o){return r&&!r[b]&&(r=Te(r)),i&&!i[b]&&(i=Te(i,o)),se(function(o,a,s,u){var l,c,f,p=[],d=[],h=a.length,g=o||be(t||"*",s.nodeType?[s]:s,[]),y=!e||!o&&t?g:we(g,p,e,s,u),v=n?i||(o?e:h||r)?[]:a:y;if(n&&n(y,v,s,u),r){l=we(v,d),r(l,[],s,u),c=l.length;while(c--)(f=l[c])&&(v[d[c]]=!(y[d[c]]=f))}if(o){if(i||e){if(i){l=[],c=v.length;while(c--)(f=v[c])&&l.push(y[c]=f);i(null,v=[],l,u)}c=v.length;while(c--)(f=v[c])&&(l=i?O(o,f):p[c])>-1&&(o[l]=!(a[l]=f))}}else v=we(v===a?v.splice(h,v.length):v),i?i(null,a,v,u):L.apply(a,v)})}function Ce(e){for(var t,n,i,o=e.length,a=r.relative[e[0].type],s=a||r.relative[" "],u=a?1:0,c=me(function(e){return e===t},s,!0),f=me(function(e){return O(t,e)>-1},s,!0),p=[function(e,n,r){var i=!a&&(r||n!==l)||((t=n).nodeType?c(e,n,r):f(e,n,r));return t=null,i}];u<o;u++)if(n=r.relative[e[u].type])p=[me(xe(p),n)];else{if((n=r.filter[e[u].type].apply(null,e[u].matches))[b]){for(i=++u;i<o;i++)if(r.relative[e[i].type])break;return Te(u>1&&xe(p),u>1&&ve(e.slice(0,u-1).concat({value:" "===e[u-2].type?"*":""})).replace(B,"$1"),n,u<i&&Ce(e.slice(u,i)),i<o&&Ce(e=e.slice(i)),i<o&&ve(e))}p.push(n)}return xe(p)}function Ee(e,t){var n=t.length>0,i=e.length>0,o=function(o,a,s,u,c){var f,h,y,v=0,m="0",x=o&&[],b=[],w=l,C=o||i&&r.find.TAG("*",c),E=T+=null==w?1:Math.random()||.1,k=C.length;for(c&&(l=a===d||a||c);m!==k&&null!=(f=C[m]);m++){if(i&&f){h=0,a||f.ownerDocument===d||(p(f),s=!g);while(y=e[h++])if(y(f,a||d,s)){u.push(f);break}c&&(T=E)}n&&((f=!y&&f)&&v--,o&&x.push(f))}if(v+=m,n&&m!==v){h=0;while(y=t[h++])y(x,b,a,s);if(o){if(v>0)while(m--)x[m]||b[m]||(b[m]=j.call(u));b=we(b)}L.apply(u,b),c&&!o&&b.length>0&&v+t.length>1&&oe.uniqueSort(u)}return c&&(T=E,l=w),x};return n?se(o):o}return s=oe.compile=function(e,t){var n,r=[],i=[],o=S[e+" "];if(!o){t||(t=a(e)),n=t.length;while(n--)(o=Ce(t[n]))[b]?r.push(o):i.push(o);(o=S(e,Ee(i,r))).selector=e}return o},u=oe.select=function(e,t,n,i){var o,u,l,c,f,p="function"==typeof e&&e,d=!i&&a(e=p.selector||e);if(n=n||[],1===d.length){if((u=d[0]=d[0].slice(0)).length>2&&"ID"===(l=u[0]).type&&9===t.nodeType&&g&&r.relative[u[1].type]){if(!(t=(r.find.ID(l.matches[0].replace(Z,ee),t)||[])[0]))return n;p&&(t=t.parentNode),e=e.slice(u.shift().value.length)}o=V.needsContext.test(e)?0:u.length;while(o--){if(l=u[o],r.relative[c=l.type])break;if((f=r.find[c])&&(i=f(l.matches[0].replace(Z,ee),K.test(u[0].type)&&ge(t.parentNode)||t))){if(u.splice(o,1),!(e=i.length&&ve(u)))return L.apply(n,i),n;break}}}return(p||s(e,d))(i,t,!g,n,!t||K.test(e)&&ge(t.parentNode)||t),n},n.sortStable=b.split("").sort(D).join("")===b,n.detectDuplicates=!!f,p(),n.sortDetached=ue(function(e){return 1&e.compareDocumentPosition(d.createElement("fieldset"))}),ue(function(e){return e.innerHTML="<a href='#'><\/a>","#"===e.firstChild.getAttribute("href")})||le("type|href|height|width",function(e,t,n){if(!n)return e.getAttribute(t,"type"===t.toLowerCase()?1:2)}),n.attributes&&ue(function(e){return e.innerHTML="<input\/>",e.firstChild.setAttribute("value",""),""===e.firstChild.getAttribute("value")})||le("value",function(e,t,n){if(!n&&"input"===e.nodeName.toLowerCase())return e.defaultValue}),ue(function(e){return null==e.getAttribute("disabled")})||le(P,function(e,t,n){var r;if(!n)return!0===e[t]?t.toLowerCase():(r=e.getAttributeNode(t))&&r.specified?r.value:null}),oe}(e);w.find=E,w.expr=E.selectors,w.expr[":"]=w.expr.pseudos,w.uniqueSort=w.unique=E.uniqueSort,w.text=E.getText,w.isXMLDoc=E.isXML,w.contains=E.contains,w.escapeSelector=E.escape;var k=function(e,t,n){var r=[],i=void 0!==n;while((e=e[t])&&9!==e.nodeType)if(1===e.nodeType){if(i&&w(e).is(n))break;r.push(e)}return r},S=function(e,t){for(var n=[];e;e=e.nextSibling)1===e.nodeType&&e!==t&&n.push(e);return n},D=w.expr.match.needsContext;function N(e,t){return e.nodeName&&e.nodeName.toLowerCase()===t.toLowerCase()}var A=\/^<([a-z][^\\\/\\0>:\\x20\\t\\r\\n\\f]*)[\\x20\\t\\r\\n\\f]*\\\/?>(?:<\\\/\\1>|)$\/i;function j(e,t,n){return g(t)?w.grep(e,function(e,r){return!!t.call(e,r,e)!==n}):t.nodeType?w.grep(e,function(e){return e===t!==n}):"string"!=typeof t?w.grep(e,function(e){return u.call(t,e)>-1!==n}):w.filter(t,e,n)}w.filter=function(e,t,n){var r=t[0];return n&&(e=":not("+e+")"),1===t.length&&1===r.nodeType?w.find.matchesSelector(r,e)?[r]:[]:w.find.matches(e,w.grep(t,function(e){return 1===e.nodeType}))},w.fn.extend({find:function(e){var t,n,r=this.length,i=this;if("string"!=typeof e)return this.pushStack(w(e).filter(function(){for(t=0;t<r;t++)if(w.contains(i[t],this))return!0}));for(n=this.pushStack([]),t=0;t<r;t++)w.find(e,i[t],n);return r>1?w.uniqueSort(n):n},filter:function(e){return this.pushStack(j(this,e||[],!1))},not:function(e){return this.pushStack(j(this,e||[],!0))},is:function(e){return!!j(this,"string"==typeof e&&D.test(e)?w(e):e||[],!1).length}});var q,L=\/^(?:\\s*(<[\\w\\W]+>)[^>]*|#([\\w-]+))$\/;(w.fn.init=function(e,t,n){var i,o;if(!e)return this;if(n=n||q,"string"==typeof e){if(!(i="<"===e[0]&&">"===e[e.length-1]&&e.length>=3?[null,e,null]:L.exec(e))||!i[1]&&t)return!t||t.jquery?(t||n).find(e):this.constructor(t).find(e);if(i[1]){if(t=t instanceof w?t[0]:t,w.merge(this,w.parseHTML(i[1],t&&t.nodeType?t.ownerDocument||t:r,!0)),A.test(i[1])&&w.isPlainObject(t))for(i in t)g(this[i])?this[i](t[i]):this.attr(i,t[i]);return this}return(o=r.getElementById(i[2]))&&(this[0]=o,this.length=1),this}return e.nodeType?(this[0]=e,this.length=1,this):g(e)?void 0!==n.ready?n.ready(e):e(w):w.makeArray(e,this)}).prototype=w.fn,q=w(r);var H=\/^(?:parents|prev(?:Until|All))\/,O={children:!0,contents:!0,next:!0,prev:!0};w.fn.extend({has:function(e){var t=w(e,this),n=t.length;return this.filter(function(){for(var e=0;e<n;e++)if(w.contains(this,t[e]))return!0})},closest:function(e,t){var n,r=0,i=this.length,o=[],a="string"!=typeof e&&w(e);if(!D.test(e))for(;r<i;r++)for(n=this[r];n&&n!==t;n=n.parentNode)if(n.nodeType<11&&(a?a.index(n)>-1:1===n.nodeType&&w.find.matchesSelector(n,e))){o.push(n);break}return this.pushStack(o.length>1?w.uniqueSort(o):o)},index:function(e){return e?"string"==typeof e?u.call(w(e),this[0]):u.call(this,e.jquery?e[0]:e):this[0]&&this[0].parentNode?this.first().prevAll().length:-1},add:function(e,t){return this.pushStack(w.uniqueSort(w.merge(this.get(),w(e,t))))},addBack:function(e){return this.add(null==e?this.prevObject:this.prevObject.filter(e))}});function P(e,t){while((e=e[t])&&1!==e.nodeType);return e}w.each({parent:function(e){var t=e.parentNode;return t&&11!==t.nodeType?t:null},parents:function(e){return k(e,"parentNode")},parentsUntil:function(e,t,n){return k(e,"parentNode",n)},next:function(e){return P(e,"nextSibling")},prev:function(e){return P(e,"previousSibling")},nextAll:function(e){return k(e,"nextSibling")},prevAll:function(e){return k(e,"previousSibling")},nextUntil:function(e,t,n){return k(e,"nextSibling",n)},prevUntil:function(e,t,n){return k(e,"previousSibling",n)},siblings:function(e){return S((e.parentNode||{}).firstChild,e)},children:function(e){return S(e.firstChild)},contents:function(e){return N(e,"iframe")?e.contentDocument:(N(e,"template")&&(e=e.content||e),w.merge([],e.childNodes))}},function(e,t){w.fn[e]=function(n,r){var i=w.map(this,t,n);return"Until"!==e.slice(-5)&&(r=n),r&&"string"==typeof r&&(i=w.filter(r,i)),this.length>1&&(O[e]||w.uniqueSort(i),H.test(e)&&i.reverse()),this.pushStack(i)}});var M=\/[^\\x20\\t\\r\\n\\f]+\/g;function R(e){var t={};return w.each(e.match(M)||[],function(e,n){t[n]=!0}),t}w.Callbacks=function(e){e="string"==typeof e?R(e):w.extend({},e);var t,n,r,i,o=[],a=[],s=-1,u=function(){for(i=i||e.once,r=t=!0;a.length;s=-1){n=a.shift();while(++s<o.length)!1===o[s].apply(n[0],n[1])&&e.stopOnFalse&&(s=o.length,n=!1)}e.memory||(n=!1),t=!1,i&&(o=n?[]:"")},l={add:function(){return o&&(n&&!t&&(s=o.length-1,a.push(n)),function t(n){w.each(n,function(n,r){g(r)?e.unique&&l.has(r)||o.push(r):r&&r.length&&"string"!==x(r)&&t(r)})}(arguments),n&&!t&&u()),this},remove:function(){return w.each(arguments,function(e,t){var n;while((n=w.inArray(t,o,n))>-1)o.splice(n,1),n<=s&&s--}),this},has:function(e){return e?w.inArray(e,o)>-1:o.length>0},empty:function(){return o&&(o=[]),this},disable:function(){return i=a=[],o=n="",this},disabled:function(){return!o},lock:function(){return i=a=[],n||t||(o=n=""),this},locked:function(){return!!i},fireWith:function(e,n){return i||(n=[e,(n=n||[]).slice?n.slice():n],a.push(n),t||u()),this},fire:function(){return l.fireWith(this,arguments),this},fired:function(){return!!r}};return l};function I(e){return e}function W(e){throw e}function $(e,t,n,r){var i;try{e&&g(i=e.promise)?i.call(e).done(t).fail(n):e&&g(i=e.then)?i.call(e,t,n):t.apply(void 0,[e].slice(r))}catch(e){n.apply(void 0,[e])}}w.extend({Deferred:function(t){var n=[["notify","progress",w.Callbacks("memory"),w.Callbacks("memory"),2],["resolve","done",w.Callbacks("once memory"),w.Callbacks("once memory"),0,"resolved"],["reject","fail",w.Callbacks("once memory"),w.Callbacks("once memory"),1,"rejected"]],r="pending",i={state:function(){return r},always:function(){return o.done(arguments).fail(arguments),this},"catch":function(e){return i.then(null,e)},pipe:function(){var e=arguments;return w.Deferred(function(t){w.each(n,function(n,r){var i=g(e[r[4]])&&e[r[4]];o[r[1]](function(){var e=i&&i.apply(this,arguments);e&&g(e.promise)?e.promise().progress(t.notify).done(t.resolve).fail(t.reject):t[r[0]+"With"](this,i?[e]:arguments)})}),e=null}).promise()},then:function(t,r,i){var o=0;function a(t,n,r,i){return function(){var s=this,u=arguments,l=function(){var e,l;if(!(t<o)){if((e=r.apply(s,u))===n.promise())throw new TypeError("Thenable self-resolution");l=e&&("object"==typeof e||"function"==typeof e)&&e.then,g(l)?i?l.call(e,a(o,n,I,i),a(o,n,W,i)):(o++,l.call(e,a(o,n,I,i),a(o,n,W,i),a(o,n,I,n.notifyWith))):(r!==I&&(s=void 0,u=[e]),(i||n.resolveWith)(s,u))}},c=i?l:function(){try{l()}catch(e){w.Deferred.exceptionHook&&w.Deferred.exceptionHook(e,c.stackTrace),t+1>=o&&(r!==W&&(s=void 0,u=[e]),n.rejectWith(s,u))}};t?c():(w.Deferred.getStackHook&&(c.stackTrace=w.Deferred.getStackHook()),e.setTimeout(c))}}return w.Deferred(function(e){n[0][3].add(a(0,e,g(i)?i:I,e.notifyWith)),n[1][3].add(a(0,e,g(t)?t:I)),n[2][3].add(a(0,e,g(r)?r:W))}).promise()},promise:function(e){return null!=e?w.extend(e,i):i}},o={};return w.each(n,function(e,t){var a=t[2],s=t[5];i[t[1]]=a.add,s&&a.add(function(){r=s},n[3-e][2].disable,n[3-e][3].disable,n[0][2].lock,n[0][3].lock),a.add(t[3].fire),o[t[0]]=function(){return o[t[0]+"With"](this===o?void 0:this,arguments),this},o[t[0]+"With"]=a.fireWith}),i.promise(o),t&&t.call(o,o),o},when:function(e){var t=arguments.length,n=t,r=Array(n),i=o.call(arguments),a=w.Deferred(),s=function(e){return function(n){r[e]=this,i[e]=arguments.length>1?o.call(arguments):n,--t||a.resolveWith(r,i)}};if(t<=1&&($(e,a.done(s(n)).resolve,a.reject,!t),"pending"===a.state()||g(i[n]&&i[n].then)))return a.then();while(n--)$(i[n],s(n),a.reject);return a.promise()}});var B=\/^(Eval|Internal|Range|Reference|Syntax|Type|URI)Error$\/;w.Deferred.exceptionHook=function(t,n){e.console&&e.console.warn&&t&&B.test(t.name)&&e.console.warn("jQuery.Deferred exception: "+t.message,t.stack,n)},w.readyException=function(t){e.setTimeout(function(){throw t})};var F=w.Deferred();w.fn.ready=function(e){return F.then(e)["catch"](function(e){w.readyException(e)}),this},w.extend({isReady:!1,readyWait:1,ready:function(e){(!0===e?--w.readyWait:w.isReady)||(w.isReady=!0,!0!==e&&--w.readyWait>0||F.resolveWith(r,[w]))}}),w.ready.then=F.then;function _(){r.removeEventListener("DOMContentLoaded",_),e.removeEventListener("load",_),w.ready()}"complete"===r.readyState||"loading"!==r.readyState&&!r.documentElement.doScroll?e.setTimeout(w.ready):(r.addEventListener("DOMContentLoaded",_),e.addEventListener("load",_));var z=function(e,t,n,r,i,o,a){var s=0,u=e.length,l=null==n;if("object"===x(n)){i=!0;for(s in n)z(e,t,s,n[s],!0,o,a)}else if(void 0!==r&&(i=!0,g(r)||(a=!0),l&&(a?(t.call(e,r),t=null):(l=t,t=function(e,t,n){return l.call(w(e),n)})),t))for(;s<u;s++)t(e[s],n,a?r:r.call(e[s],s,t(e[s],n)));return i?e:l?t.call(e):u?t(e[0],n):o},X=\/^-ms-\/,U=\/-([a-z])\/g;function V(e,t){return t.toUpperCase()}function G(e){return e.replace(X,"ms-").replace(U,V)}var Y=function(e){return 1===e.nodeType||9===e.nodeType||!+e.nodeType};function Q(){this.expando=w.expando+Q.uid++}Q.uid=1,Q.prototype={cache:function(e){var t=e[this.expando];return t||(t={},Y(e)&&(e.nodeType?e[this.expando]=t:Object.defineProperty(e,this.expando,{value:t,configurable:!0}))),t},set:function(e,t,n){var r,i=this.cache(e);if("string"==typeof t)i[G(t)]=n;else for(r in t)i[G(r)]=t[r];return i},get:function(e,t){return void 0===t?this.cache(e):e[this.expando]&&e[this.expando][G(t)]},access:function(e,t,n){return void 0===t||t&&"string"==typeof t&&void 0===n?this.get(e,t):(this.set(e,t,n),void 0!==n?n:t)},remove:function(e,t){var n,r=e[this.expando];if(void 0!==r){if(void 0!==t){n=(t=Array.isArray(t)?t.map(G):(t=G(t))in r?[t]:t.match(M)||[]).length;while(n--)delete r[t[n]]}(void 0===t||w.isEmptyObject(r))&&(e.nodeType?e[this.expando]=void 0:delete e[this.expando])}},hasData:function(e){var t=e[this.expando];return void 0!==t&&!w.isEmptyObject(t)}};var J=new Q,K=new Q,Z=\/^(?:\\{[\\w\\W]*\\}|\\[[\\w\\W]*\\])$\/,ee=\/[A-Z]\/g;function te(e){return"true"===e||"false"!==e&&("null"===e?null:e===+e+""?+e:Z.test(e)?JSON.parse(e):e)}function ne(e,t,n){var r;if(void 0===n&&1===e.nodeType)if(r="data-"+t.replace(ee,"-$&").toLowerCase(),"string"==typeof(n=e.getAttribute(r))){try{n=te(n)}catch(e){}K.set(e,t,n)}else n=void 0;return n}w.extend({hasData:function(e){return K.hasData(e)||J.hasData(e)},data:function(e,t,n){return K.access(e,t,n)},removeData:function(e,t){K.remove(e,t)},_data:function(e,t,n){return J.access(e,t,n)},_removeData:function(e,t){J.remove(e,t)}}),w.fn.extend({data:function(e,t){var n,r,i,o=this[0],a=o&&o.attributes;if(void 0===e){if(this.length&&(i=K.get(o),1===o.nodeType&&!J.get(o,"hasDataAttrs"))){n=a.length;while(n--)a[n]&&0===(r=a[n].name).indexOf("data-")&&(r=G(r.slice(5)),ne(o,r,i[r]));J.set(o,"hasDataAttrs",!0)}return i}return"object"==typeof e?this.each(function(){K.set(this,e)}):z(this,function(t){var n;if(o&&void 0===t){if(void 0!==(n=K.get(o,e)))return n;if(void 0!==(n=ne(o,e)))return n}else this.each(function(){K.set(this,e,t)})},null,t,arguments.length>1,null,!0)},removeData:function(e){return this.each(function(){K.remove(this,e)})}}),w.extend({queue:function(e,t,n){var r;if(e)return t=(t||"fx")+"queue",r=J.get(e,t),n&&(!r||Array.isArray(n)?r=J.access(e,t,w.makeArray(n)):r.push(n)),r||[]},dequeue:function(e,t){t=t||"fx";var n=w.queue(e,t),r=n.length,i=n.shift(),o=w._queueHooks(e,t),a=function(){w.dequeue(e,t)};"inprogress"===i&&(i=n.shift(),r--),i&&("fx"===t&&n.unshift("inprogress"),delete o.stop,i.call(e,a,o)),!r&&o&&o.empty.fire()},_queueHooks:function(e,t){var n=t+"queueHooks";return J.get(e,n)||J.access(e,n,{empty:w.Callbacks("once memory").add(function(){J.remove(e,[t+"queue",n])})})}}),w.fn.extend({queue:function(e,t){var n=2;return"string"!=typeof e&&(t=e,e="fx",n--),arguments.length<n?w.queue(this[0],e):void 0===t?this:this.each(function(){var n=w.queue(this,e,t);w._queueHooks(this,e),"fx"===e&&"inprogress"!==n[0]&&w.dequeue(this,e)})},dequeue:function(e){return this.each(function(){w.dequeue(this,e)})},clearQueue:function(e){return this.queue(e||"fx",[])},promise:function(e,t){var n,r=1,i=w.Deferred(),o=this,a=this.length,s=function(){--r||i.resolveWith(o,[o])};"string"!=typeof e&&(t=e,e=void 0),e=e||"fx";while(a--)(n=J.get(o[a],e+"queueHooks"))&&n.empty&&(r++,n.empty.add(s));return s(),i.promise(t)}});var re=\/[+-]?(?:\\d*\\.|)\\d+(?:[eE][+-]?\\d+|)\/.source,ie=new RegExp("^(?:([+-])=|)("+re+")([a-z%]*)$","i"),oe=["Top","Right","Bottom","Left"],ae=function(e,t){return"none"===(e=t||e).style.display||""===e.style.display&&w.contains(e.ownerDocument,e)&&"none"===w.css(e,"display")},se=function(e,t,n,r){var i,o,a={};for(o in t)a[o]=e.style[o],e.style[o]=t[o];i=n.apply(e,r||[]);for(o in t)e.style[o]=a[o];return i};function ue(e,t,n,r){var i,o,a=20,s=r?function(){return r.cur()}:function(){return w.css(e,t,"")},u=s(),l=n&&n[3]||(w.cssNumber[t]?"":"px"),c=(w.cssNumber[t]||"px"!==l&&+u)&&ie.exec(w.css(e,t));if(c&&c[3]!==l){u\/=2,l=l||c[3],c=+u||1;while(a--)w.style(e,t,c+l),(1-o)*(1-(o=s()\/u||.5))<=0&&(a=0),c\/=o;c*=2,w.style(e,t,c+l),n=n||[]}return n&&(c=+c||+u||0,i=n[1]?c+(n[1]+1)*n[2]:+n[2],r&&(r.unit=l,r.start=c,r.end=i)),i}var le={};function ce(e){var t,n=e.ownerDocument,r=e.nodeName,i=le[r];return i||(t=n.body.appendChild(n.createElement(r)),i=w.css(t,"display"),t.parentNode.removeChild(t),"none"===i&&(i="block"),le[r]=i,i)}function fe(e,t){for(var n,r,i=[],o=0,a=e.length;o<a;o++)(r=e[o]).style&&(n=r.style.display,t?("none"===n&&(i[o]=J.get(r,"display")||null,i[o]||(r.style.display="")),""===r.style.display&&ae(r)&&(i[o]=ce(r))):"none"!==n&&(i[o]="none",J.set(r,"display",n)));for(o=0;o<a;o++)null!=i[o]&&(e[o].style.display=i[o]);return e}w.fn.extend({show:function(){return fe(this,!0)},hide:function(){return fe(this)},toggle:function(e){return"boolean"==typeof e?e?this.show():this.hide():this.each(function(){ae(this)?w(this).show():w(this).hide()})}});var pe=\/^(?:checkbox|radio)$\/i,de=\/<([a-z][^\\\/\\0>\\x20\\t\\r\\n\\f]+)\/i,he=\/^$|^module$|\\\/(?:java|ecma)script\/i,ge={option:[1,"<select multiple='multiple'>","<\/select>"],thead:[1,"<table>","<\/table>"],col:[2,"<table><colgroup>","<\/colgroup><\/table>"],tr:[2,"<table><tbody>","<\/tbody><\/table>"],td:[3,"<table><tbody><tr>","<\/tr><\/tbody><\/table>"],_default:[0,"",""]};ge.optgroup=ge.option,ge.tbody=ge.tfoot=ge.colgroup=ge.caption=ge.thead,ge.th=ge.td;function ye(e,t){var n;return n="undefined"!=typeof e.getElementsByTagName?e.getElementsByTagName(t||"*"):"undefined"!=typeof e.querySelectorAll?e.querySelectorAll(t||"*"):[],void 0===t||t&&N(e,t)?w.merge([e],n):n}function ve(e,t){for(var n=0,r=e.length;n<r;n++)J.set(e[n],"globalEval",!t||J.get(t[n],"globalEval"))}var me=\/<|&#?\\w+;\/;function xe(e,t,n,r,i){for(var o,a,s,u,l,c,f=t.createDocumentFragment(),p=[],d=0,h=e.length;d<h;d++)if((o=e[d])||0===o)if("object"===x(o))w.merge(p,o.nodeType?[o]:o);else if(me.test(o)){a=a||f.appendChild(t.createElement("div")),s=(de.exec(o)||["",""])[1].toLowerCase(),u=ge[s]||ge._default,a.innerHTML=u[1]+w.htmlPrefilter(o)+u[2],c=u[0];while(c--)a=a.lastChild;w.merge(p,a.childNodes),(a=f.firstChild).textContent=""}else p.push(t.createTextNode(o));f.textContent="",d=0;while(o=p[d++])if(r&&w.inArray(o,r)>-1)i&&i.push(o);else if(l=w.contains(o.ownerDocument,o),a=ye(f.appendChild(o),"script"),l&&ve(a),n){c=0;while(o=a[c++])he.test(o.type||"")&&n.push(o)}return f}!function(){var e=r.createDocumentFragment().appendChild(r.createElement("div")),t=r.createElement("input");t.setAttribute("type","radio"),t.setAttribute("checked","checked"),t.setAttribute("name","t"),e.appendChild(t),h.checkClone=e.cloneNode(!0).cloneNode(!0).lastChild.checked,e.innerHTML="<textarea>x<\/textarea>",h.noCloneChecked=!!e.cloneNode(!0).lastChild.defaultValue}();var be=r.documentElement,we=\/^key\/,Te=\/^(?:mouse|pointer|contextmenu|drag|drop)|click\/,Ce=\/^([^.]*)(?:\\.(.+)|)\/;function Ee(){return!0}function ke(){return!1}function Se(){try{return r.activeElement}catch(e){}}function De(e,t,n,r,i,o){var a,s;if("object"==typeof t){"string"!=typeof n&&(r=r||n,n=void 0);for(s in t)De(e,s,n,r,t[s],o);return e}if(null==r&&null==i?(i=n,r=n=void 0):null==i&&("string"==typeof n?(i=r,r=void 0):(i=r,r=n,n=void 0)),!1===i)i=ke;else if(!i)return e;return 1===o&&(a=i,(i=function(e){return w().off(e),a.apply(this,arguments)}).guid=a.guid||(a.guid=w.guid++)),e.each(function(){w.event.add(this,t,i,r,n)})}w.event={global:{},add:function(e,t,n,r,i){var o,a,s,u,l,c,f,p,d,h,g,y=J.get(e);if(y){n.handler&&(n=(o=n).handler,i=o.selector),i&&w.find.matchesSelector(be,i),n.guid||(n.guid=w.guid++),(u=y.events)||(u=y.events={}),(a=y.handle)||(a=y.handle=function(t){return"undefined"!=typeof w&&w.event.triggered!==t.type?w.event.dispatch.apply(e,arguments):void 0}),l=(t=(t||"").match(M)||[""]).length;while(l--)d=g=(s=Ce.exec(t[l])||[])[1],h=(s[2]||"").split(".").sort(),d&&(f=w.event.special[d]||{},d=(i?f.delegateType:f.bindType)||d,f=w.event.special[d]||{},c=w.extend({type:d,origType:g,data:r,handler:n,guid:n.guid,selector:i,needsContext:i&&w.expr.match.needsContext.test(i),namespace:h.join(".")},o),(p=u[d])||((p=u[d]=[]).delegateCount=0,f.setup&&!1!==f.setup.call(e,r,h,a)||e.addEventListener&&e.addEventListener(d,a)),f.add&&(f.add.call(e,c),c.handler.guid||(c.handler.guid=n.guid)),i?p.splice(p.delegateCount++,0,c):p.push(c),w.event.global[d]=!0)}},remove:function(e,t,n,r,i){var o,a,s,u,l,c,f,p,d,h,g,y=J.hasData(e)&&J.get(e);if(y&&(u=y.events)){l=(t=(t||"").match(M)||[""]).length;while(l--)if(s=Ce.exec(t[l])||[],d=g=s[1],h=(s[2]||"").split(".").sort(),d){f=w.event.special[d]||{},p=u[d=(r?f.delegateType:f.bindType)||d]||[],s=s[2]&&new RegExp("(^|\\\\.)"+h.join("\\\\.(?:.*\\\\.|)")+"(\\\\.|$)"),a=o=p.length;while(o--)c=p[o],!i&&g!==c.origType||n&&n.guid!==c.guid||s&&!s.test(c.namespace)||r&&r!==c.selector&&("**"!==r||!c.selector)||(p.splice(o,1),c.selector&&p.delegateCount--,f.remove&&f.remove.call(e,c));a&&!p.length&&(f.teardown&&!1!==f.teardown.call(e,h,y.handle)||w.removeEvent(e,d,y.handle),delete u[d])}else for(d in u)w.event.remove(e,d+t[l],n,r,!0);w.isEmptyObject(u)&&J.remove(e,"handle events")}},dispatch:function(e){var t=w.event.fix(e),n,r,i,o,a,s,u=new Array(arguments.length),l=(J.get(this,"events")||{})[t.type]||[],c=w.event.special[t.type]||{};for(u[0]=t,n=1;n<arguments.length;n++)u[n]=arguments[n];if(t.delegateTarget=this,!c.preDispatch||!1!==c.preDispatch.call(this,t)){s=w.event.handlers.call(this,t,l),n=0;while((o=s[n++])&&!t.isPropagationStopped()){t.currentTarget=o.elem,r=0;while((a=o.handlers[r++])&&!t.isImmediatePropagationStopped())t.rnamespace&&!t.rnamespace.test(a.namespace)||(t.handleObj=a,t.data=a.data,void 0!==(i=((w.event.special[a.origType]||{}).handle||a.handler).apply(o.elem,u))&&!1===(t.result=i)&&(t.preventDefault(),t.stopPropagation()))}return c.postDispatch&&c.postDispatch.call(this,t),t.result}},handlers:function(e,t){var n,r,i,o,a,s=[],u=t.delegateCount,l=e.target;if(u&&l.nodeType&&!("click"===e.type&&e.button>=1))for(;l!==this;l=l.parentNode||this)if(1===l.nodeType&&("click"!==e.type||!0!==l.disabled)){for(o=[],a={},n=0;n<u;n++)void 0===a[i=(r=t[n]).selector+" "]&&(a[i]=r.needsContext?w(i,this).index(l)>-1:w.find(i,this,null,[l]).length),a[i]&&o.push(r);o.length&&s.push({elem:l,handlers:o})}return l=this,u<t.length&&s.push({elem:l,handlers:t.slice(u)}),s},addProp:function(e,t){Object.defineProperty(w.Event.prototype,e,{enumerable:!0,configurable:!0,get:g(t)?function(){if(this.originalEvent)return t(this.originalEvent)}:function(){if(this.originalEvent)return this.originalEvent[e]},set:function(t){Object.defineProperty(this,e,{enumerable:!0,configurable:!0,writable:!0,value:t})}})},fix:function(e){return e[w.expando]?e:new w.Event(e)},special:{load:{noBubble:!0},focus:{trigger:function(){if(this!==Se()&&this.focus)return this.focus(),!1},delegateType:"focusin"},blur:{trigger:function(){if(this===Se()&&this.blur)return this.blur(),!1},delegateType:"focusout"},click:{trigger:function(){if("checkbox"===this.type&&this.click&&N(this,"input"))return this.click(),!1},_default:function(e){return N(e.target,"a")}},beforeunload:{postDispatch:function(e){void 0!==e.result&&e.originalEvent&&(e.originalEvent.returnValue=e.result)}}}},w.removeEvent=function(e,t,n){e.removeEventListener&&e.removeEventListener(t,n)},w.Event=function(e,t){if(!(this instanceof w.Event))return new w.Event(e,t);e&&e.type?(this.originalEvent=e,this.type=e.type,this.isDefaultPrevented=e.defaultPrevented||void 0===e.defaultPrevented&&!1===e.returnValue?Ee:ke,this.target=e.target&&3===e.target.nodeType?e.target.parentNode:e.target,this.currentTarget=e.currentTarget,this.relatedTarget=e.relatedTarget):this.type=e,t&&w.extend(this,t),this.timeStamp=e&&e.timeStamp||Date.now(),this[w.expando]=!0},w.Event.prototype={constructor:w.Event,isDefaultPrevented:ke,isPropagationStopped:ke,isImmediatePropagationStopped:ke,isSimulated:!1,preventDefault:function(){var e=this.originalEvent;this.isDefaultPrevented=Ee,e&&!this.isSimulated&&e.preventDefault()},stopPropagation:function(){var e=this.originalEvent;this.isPropagationStopped=Ee,e&&!this.isSimulated&&e.stopPropagation()},stopImmediatePropagation:function(){var e=this.originalEvent;this.isImmediatePropagationStopped=Ee,e&&!this.isSimulated&&e.stopImmediatePropagation(),this.stopPropagation()}},w.each({altKey:!0,bubbles:!0,cancelable:!0,changedTouches:!0,ctrlKey:!0,detail:!0,eventPhase:!0,metaKey:!0,pageX:!0,pageY:!0,shiftKey:!0,view:!0,"char":!0,charCode:!0,key:!0,keyCode:!0,button:!0,buttons:!0,clientX:!0,clientY:!0,offsetX:!0,offsetY:!0,pointerId:!0,pointerType:!0,screenX:!0,screenY:!0,targetTouches:!0,toElement:!0,touches:!0,which:function(e){var t=e.button;return null==e.which&&we.test(e.type)?null!=e.charCode?e.charCode:e.keyCode:!e.which&&void 0!==t&&Te.test(e.type)?1&t?1:2&t?3:4&t?2:0:e.which}},w.event.addProp),w.each({mouseenter:"mouseover",mouseleave:"mouseout",pointerenter:"pointerover",pointerleave:"pointerout"},function(e,t){w.event.special[e]={delegateType:t,bindType:t,handle:function(e){var n,r=this,i=e.relatedTarget,o=e.handleObj;return i&&(i===r||w.contains(r,i))||(e.type=o.origType,n=o.handler.apply(this,arguments),e.type=t),n}}}),w.fn.extend({on:function(e,t,n,r){return De(this,e,t,n,r)},one:function(e,t,n,r){return De(this,e,t,n,r,1)},off:function(e,t,n){var r,i;if(e&&e.preventDefault&&e.handleObj)return r=e.handleObj,w(e.delegateTarget).off(r.namespace?r.origType+"."+r.namespace:r.origType,r.selector,r.handler),this;if("object"==typeof e){for(i in e)this.off(i,t,e[i]);return this}return!1!==t&&"function"!=typeof t||(n=t,t=void 0),!1===n&&(n=ke),this.each(function(){w.event.remove(this,e,n,t)})}});var Ne=\/<(?!area|br|col|embed|hr|img|input|link|meta|param)(([a-z][^\\\/\\0>\\x20\\t\\r\\n\\f]*)[^>]*)\\\/>\/gi,Ae=\/<script|<style|<link\/i,je=\/checked\\s*(?:[^=]|=\\s*.checked.)\/i,qe=\/^\\s*<!(?:\\[CDATA\\[|--)|(?:\\]\\]|--)>\\s*$\/g;function Le(e,t){return N(e,"table")&&N(11!==t.nodeType?t:t.firstChild,"tr")?w(e).children("tbody")[0]||e:e}function He(e){return e.type=(null!==e.getAttribute("type"))+"\/"+e.type,e}function Oe(e){return"true\/"===(e.type||"").slice(0,5)?e.type=e.type.slice(5):e.removeAttribute("type"),e}function Pe(e,t){var n,r,i,o,a,s,u,l;if(1===t.nodeType){if(J.hasData(e)&&(o=J.access(e),a=J.set(t,o),l=o.events)){delete a.handle,a.events={};for(i in l)for(n=0,r=l[i].length;n<r;n++)w.event.add(t,i,l[i][n])}K.hasData(e)&&(s=K.access(e),u=w.extend({},s),K.set(t,u))}}function Me(e,t){var n=t.nodeName.toLowerCase();"input"===n&&pe.test(e.type)?t.checked=e.checked:"input"!==n&&"textarea"!==n||(t.defaultValue=e.defaultValue)}function Re(e,t,n,r){t=a.apply([],t);var i,o,s,u,l,c,f=0,p=e.length,d=p-1,y=t[0],v=g(y);if(v||p>1&&"string"==typeof y&&!h.checkClone&&je.test(y))return e.each(function(i){var o=e.eq(i);v&&(t[0]=y.call(this,i,o.html())),Re(o,t,n,r)});if(p&&(i=xe(t,e[0].ownerDocument,!1,e,r),o=i.firstChild,1===i.childNodes.length&&(i=o),o||r)){for(u=(s=w.map(ye(i,"script"),He)).length;f<p;f++)l=i,f!==d&&(l=w.clone(l,!0,!0),u&&w.merge(s,ye(l,"script"))),n.call(e[f],l,f);if(u)for(c=s[s.length-1].ownerDocument,w.map(s,Oe),f=0;f<u;f++)l=s[f],he.test(l.type||"")&&!J.access(l,"globalEval")&&w.contains(c,l)&&(l.src&&"module"!==(l.type||"").toLowerCase()?w._evalUrl&&w._evalUrl(l.src):m(l.textContent.replace(qe,""),c,l))}return e}function Ie(e,t,n){for(var r,i=t?w.filter(t,e):e,o=0;null!=(r=i[o]);o++)n||1!==r.nodeType||w.cleanData(ye(r)),r.parentNode&&(n&&w.contains(r.ownerDocument,r)&&ve(ye(r,"script")),r.parentNode.removeChild(r));return e}w.extend({htmlPrefilter:function(e){return e.replace(Ne,"<$1><\/$2>")},clone:function(e,t,n){var r,i,o,a,s=e.cloneNode(!0),u=w.contains(e.ownerDocument,e);if(!(h.noCloneChecked||1!==e.nodeType&&11!==e.nodeType||w.isXMLDoc(e)))for(a=ye(s),r=0,i=(o=ye(e)).length;r<i;r++)Me(o[r],a[r]);if(t)if(n)for(o=o||ye(e),a=a||ye(s),r=0,i=o.length;r<i;r++)Pe(o[r],a[r]);else Pe(e,s);return(a=ye(s,"script")).length>0&&ve(a,!u&&ye(e,"script")),s},cleanData:function(e){for(var t,n,r,i=w.event.special,o=0;void 0!==(n=e[o]);o++)if(Y(n)){if(t=n[J.expando]){if(t.events)for(r in t.events)i[r]?w.event.remove(n,r):w.removeEvent(n,r,t.handle);n[J.expando]=void 0}n[K.expando]&&(n[K.expando]=void 0)}}}),w.fn.extend({detach:function(e){return Ie(this,e,!0)},remove:function(e){return Ie(this,e)},text:function(e){return z(this,function(e){return void 0===e?w.text(this):this.empty().each(function(){1!==this.nodeType&&11!==this.nodeType&&9!==this.nodeType||(this.textContent=e)})},null,e,arguments.length)},append:function(){return Re(this,arguments,function(e){1!==this.nodeType&&11!==this.nodeType&&9!==this.nodeType||Le(this,e).appendChild(e)})},prepend:function(){return Re(this,arguments,function(e){if(1===this.nodeType||11===this.nodeType||9===this.nodeType){var t=Le(this,e);t.insertBefore(e,t.firstChild)}})},before:function(){return Re(this,arguments,function(e){this.parentNode&&this.parentNode.insertBefore(e,this)})},after:function(){return Re(this,arguments,function(e){this.parentNode&&this.parentNode.insertBefore(e,this.nextSibling)})},empty:function(){for(var e,t=0;null!=(e=this[t]);t++)1===e.nodeType&&(w.cleanData(ye(e,!1)),e.textContent="");return this},clone:function(e,t){return e=null!=e&&e,t=null==t?e:t,this.map(function(){return w.clone(this,e,t)})},html:function(e){return z(this,function(e){var t=this[0]||{},n=0,r=this.length;if(void 0===e&&1===t.nodeType)return t.innerHTML;if("string"==typeof e&&!Ae.test(e)&&!ge[(de.exec(e)||["",""])[1].toLowerCase()]){e=w.htmlPrefilter(e);try{for(;n<r;n++)1===(t=this[n]||{}).nodeType&&(w.cleanData(ye(t,!1)),t.innerHTML=e);t=0}catch(e){}}t&&this.empty().append(e)},null,e,arguments.length)},replaceWith:function(){var e=[];return Re(this,arguments,function(t){var n=this.parentNode;w.inArray(this,e)<0&&(w.cleanData(ye(this)),n&&n.replaceChild(t,this))},e)}}),w.each({appendTo:"append",prependTo:"prepend",insertBefore:"before",insertAfter:"after",replaceAll:"replaceWith"},function(e,t){w.fn[e]=function(e){for(var n,r=[],i=w(e),o=i.length-1,a=0;a<=o;a++)n=a===o?this:this.clone(!0),w(i[a])[t](n),s.apply(r,n.get());return this.pushStack(r)}});var We=new RegExp("^("+re+")(?!px)[a-z%]+$","i"),$e=function(t){var n=t.ownerDocument.defaultView;return n&&n.opener||(n=e),n.getComputedStyle(t)},Be=new RegExp(oe.join("|"),"i");!function(){function t(){if(c){l.style.cssText="position:absolute;left:-11111px;width:60px;margin-top:1px;padding:0;border:0",c.style.cssText="position:relative;display:block;box-sizing:border-box;overflow:scroll;margin:auto;border:1px;padding:1px;width:60%;top:1%",be.appendChild(l).appendChild(c);var t=e.getComputedStyle(c);i="1%"!==t.top,u=12===n(t.marginLeft),c.style.right="60%",s=36===n(t.right),o=36===n(t.width),c.style.position="absolute",a=36===c.offsetWidth||"absolute",be.removeChild(l),c=null}}function n(e){return Math.round(parseFloat(e))}var i,o,a,s,u,l=r.createElement("div"),c=r.createElement("div");c.style&&(c.style.backgroundClip="content-box",c.cloneNode(!0).style.backgroundClip="",h.clearCloneStyle="content-box"===c.style.backgroundClip,w.extend(h,{boxSizingReliable:function(){return t(),o},pixelBoxStyles:function(){return t(),s},pixelPosition:function(){return t(),i},reliableMarginLeft:function(){return t(),u},scrollboxSize:function(){return t(),a}}))}();function Fe(e,t,n){var r,i,o,a,s=e.style;return(n=n||$e(e))&&(""!==(a=n.getPropertyValue(t)||n[t])||w.contains(e.ownerDocument,e)||(a=w.style(e,t)),!h.pixelBoxStyles()&&We.test(a)&&Be.test(t)&&(r=s.width,i=s.minWidth,o=s.maxWidth,s.minWidth=s.maxWidth=s.width=a,a=n.width,s.width=r,s.minWidth=i,s.maxWidth=o)),void 0!==a?a+"":a}function _e(e,t){return{get:function(){if(!e())return(this.get=t).apply(this,arguments);delete this.get}}}var ze=\/^(none|table(?!-c[ea]).+)\/,Xe=\/^--\/,Ue={position:"absolute",visibility:"hidden",display:"block"},Ve={letterSpacing:"0",fontWeight:"400"},Ge=["Webkit","Moz","ms"],Ye=r.createElement("div").style;function Qe(e){if(e in Ye)return e;var t=e[0].toUpperCase()+e.slice(1),n=Ge.length;while(n--)if((e=Ge[n]+t)in Ye)return e}function Je(e){var t=w.cssProps[e];return t||(t=w.cssProps[e]=Qe(e)||e),t}function Ke(e,t,n){var r=ie.exec(t);return r?Math.max(0,r[2]-(n||0))+(r[3]||"px"):t}function Ze(e,t,n,r,i,o){var a="width"===t?1:0,s=0,u=0;if(n===(r?"border":"content"))return 0;for(;a<4;a+=2)"margin"===n&&(u+=w.css(e,n+oe[a],!0,i)),r?("content"===n&&(u-=w.css(e,"padding"+oe[a],!0,i)),"margin"!==n&&(u-=w.css(e,"border"+oe[a]+"Width",!0,i))):(u+=w.css(e,"padding"+oe[a],!0,i),"padding"!==n?u+=w.css(e,"border"+oe[a]+"Width",!0,i):s+=w.css(e,"border"+oe[a]+"Width",!0,i));return!r&&o>=0&&(u+=Math.max(0,Math.ceil(e["offset"+t[0].toUpperCase()+t.slice(1)]-o-u-s-.5))),u}function et(e,t,n){var r=$e(e),i=Fe(e,t,r),o="border-box"===w.css(e,"boxSizing",!1,r),a=o;if(We.test(i)){if(!n)return i;i="auto"}return a=a&&(h.boxSizingReliable()||i===e.style[t]),("auto"===i||!parseFloat(i)&&"inline"===w.css(e,"display",!1,r))&&(i=e["offset"+t[0].toUpperCase()+t.slice(1)],a=!0),(i=parseFloat(i)||0)+Ze(e,t,n||(o?"border":"content"),a,r,i)+"px"}w.extend({cssHooks:{opacity:{get:function(e,t){if(t){var n=Fe(e,"opacity");return""===n?"1":n}}}},cssNumber:{animationIterationCount:!0,columnCount:!0,fillOpacity:!0,flexGrow:!0,flexShrink:!0,fontWeight:!0,lineHeight:!0,opacity:!0,order:!0,orphans:!0,widows:!0,zIndex:!0,zoom:!0},cssProps:{},style:function(e,t,n,r){if(e&&3!==e.nodeType&&8!==e.nodeType&&e.style){var i,o,a,s=G(t),u=Xe.test(t),l=e.style;if(u||(t=Je(s)),a=w.cssHooks[t]||w.cssHooks[s],void 0===n)return a&&"get"in a&&void 0!==(i=a.get(e,!1,r))?i:l[t];"string"==(o=typeof n)&&(i=ie.exec(n))&&i[1]&&(n=ue(e,t,i),o="number"),null!=n&&n===n&&("number"===o&&(n+=i&&i[3]||(w.cssNumber[s]?"":"px")),h.clearCloneStyle||""!==n||0!==t.indexOf("background")||(l[t]="inherit"),a&&"set"in a&&void 0===(n=a.set(e,n,r))||(u?l.setProperty(t,n):l[t]=n))}},css:function(e,t,n,r){var i,o,a,s=G(t);return Xe.test(t)||(t=Je(s)),(a=w.cssHooks[t]||w.cssHooks[s])&&"get"in a&&(i=a.get(e,!0,n)),void 0===i&&(i=Fe(e,t,r)),"normal"===i&&t in Ve&&(i=Ve[t]),""===n||n?(o=parseFloat(i),!0===n||isFinite(o)?o||0:i):i}}),w.each(["height","width"],function(e,t){w.cssHooks[t]={get:function(e,n,r){if(n)return!ze.test(w.css(e,"display"))||e.getClientRects().length&&e.getBoundingClientRect().width?et(e,t,r):se(e,Ue,function(){return et(e,t,r)})},set:function(e,n,r){var i,o=$e(e),a="border-box"===w.css(e,"boxSizing",!1,o),s=r&&Ze(e,t,r,a,o);return a&&h.scrollboxSize()===o.position&&(s-=Math.ceil(e["offset"+t[0].toUpperCase()+t.slice(1)]-parseFloat(o[t])-Ze(e,t,"border",!1,o)-.5)),s&&(i=ie.exec(n))&&"px"!==(i[3]||"px")&&(e.style[t]=n,n=w.css(e,t)),Ke(e,n,s)}}}),w.cssHooks.marginLeft=_e(h.reliableMarginLeft,function(e,t){if(t)return(parseFloat(Fe(e,"marginLeft"))||e.getBoundingClientRect().left-se(e,{marginLeft:0},function(){return e.getBoundingClientRect().left}))+"px"}),w.each({margin:"",padding:"",border:"Width"},function(e,t){w.cssHooks[e+t]={expand:function(n){for(var r=0,i={},o="string"==typeof n?n.split(" "):[n];r<4;r++)i[e+oe[r]+t]=o[r]||o[r-2]||o[0];return i}},"margin"!==e&&(w.cssHooks[e+t].set=Ke)}),w.fn.extend({css:function(e,t){return z(this,function(e,t,n){var r,i,o={},a=0;if(Array.isArray(t)){for(r=$e(e),i=t.length;a<i;a++)o[t[a]]=w.css(e,t[a],!1,r);return o}return void 0!==n?w.style(e,t,n):w.css(e,t)},e,t,arguments.length>1)}});function tt(e,t,n,r,i){return new tt.prototype.init(e,t,n,r,i)}w.Tween=tt,tt.prototype={constructor:tt,init:function(e,t,n,r,i,o){this.elem=e,this.prop=n,this.easing=i||w.easing._default,this.options=t,this.start=this.now=this.cur(),this.end=r,this.unit=o||(w.cssNumber[n]?"":"px")},cur:function(){var e=tt.propHooks[this.prop];return e&&e.get?e.get(this):tt.propHooks._default.get(this)},run:function(e){var t,n=tt.propHooks[this.prop];return this.options.duration?this.pos=t=w.easing[this.easing](e,this.options.duration*e,0,1,this.options.duration):this.pos=t=e,this.now=(this.end-this.start)*t+this.start,this.options.step&&this.options.step.call(this.elem,this.now,this),n&&n.set?n.set(this):tt.propHooks._default.set(this),this}},tt.prototype.init.prototype=tt.prototype,tt.propHooks={_default:{get:function(e){var t;return 1!==e.elem.nodeType||null!=e.elem[e.prop]&&null==e.elem.style[e.prop]?e.elem[e.prop]:(t=w.css(e.elem,e.prop,""))&&"auto"!==t?t:0},set:function(e){w.fx.step[e.prop]?w.fx.step[e.prop](e):1!==e.elem.nodeType||null==e.elem.style[w.cssProps[e.prop]]&&!w.cssHooks[e.prop]?e.elem[e.prop]=e.now:w.style(e.elem,e.prop,e.now+e.unit)}}},tt.propHooks.scrollTop=tt.propHooks.scrollLeft={set:function(e){e.elem.nodeType&&e.elem.parentNode&&(e.elem[e.prop]=e.now)}},w.easing={linear:function(e){return e},swing:function(e){return.5-Math.cos(e*Math.PI)\/2},_default:"swing"},w.fx=tt.prototype.init,w.fx.step={};var nt,rt,it=\/^(?:toggle|show|hide)$\/,ot=\/queueHooks$\/;function at(){rt&&(!1===r.hidden&&e.requestAnimationFrame?e.requestAnimationFrame(at):e.setTimeout(at,w.fx.interval),w.fx.tick())}function st(){return e.setTimeout(function(){nt=void 0}),nt=Date.now()}function ut(e,t){var n,r=0,i={height:e};for(t=t?1:0;r<4;r+=2-t)i["margin"+(n=oe[r])]=i["padding"+n]=e;return t&&(i.opacity=i.width=e),i}function lt(e,t,n){for(var r,i=(pt.tweeners[t]||[]).concat(pt.tweeners["*"]),o=0,a=i.length;o<a;o++)if(r=i[o].call(n,t,e))return r}function ct(e,t,n){var r,i,o,a,s,u,l,c,f="width"in t||"height"in t,p=this,d={},h=e.style,g=e.nodeType&&ae(e),y=J.get(e,"fxshow");n.queue||(null==(a=w._queueHooks(e,"fx")).unqueued&&(a.unqueued=0,s=a.empty.fire,a.empty.fire=function(){a.unqueued||s()}),a.unqueued++,p.always(function(){p.always(function(){a.unqueued--,w.queue(e,"fx").length||a.empty.fire()})}));for(r in t)if(i=t[r],it.test(i)){if(delete t[r],o=o||"toggle"===i,i===(g?"hide":"show")){if("show"!==i||!y||void 0===y[r])continue;g=!0}d[r]=y&&y[r]||w.style(e,r)}if((u=!w.isEmptyObject(t))||!w.isEmptyObject(d)){f&&1===e.nodeType&&(n.overflow=[h.overflow,h.overflowX,h.overflowY],null==(l=y&&y.display)&&(l=J.get(e,"display")),"none"===(c=w.css(e,"display"))&&(l?c=l:(fe([e],!0),l=e.style.display||l,c=w.css(e,"display"),fe([e]))),("inline"===c||"inline-block"===c&&null!=l)&&"none"===w.css(e,"float")&&(u||(p.done(function(){h.display=l}),null==l&&(c=h.display,l="none"===c?"":c)),h.display="inline-block")),n.overflow&&(h.overflow="hidden",p.always(function(){h.overflow=n.overflow[0],h.overflowX=n.overflow[1],h.overflowY=n.overflow[2]})),u=!1;for(r in d)u||(y?"hidden"in y&&(g=y.hidden):y=J.access(e,"fxshow",{display:l}),o&&(y.hidden=!g),g&&fe([e],!0),p.done(function(){g||fe([e]),J.remove(e,"fxshow");for(r in d)w.style(e,r,d[r])})),u=lt(g?y[r]:0,r,p),r in y||(y[r]=u.start,g&&(u.end=u.start,u.start=0))}}function ft(e,t){var n,r,i,o,a;for(n in e)if(r=G(n),i=t[r],o=e[n],Array.isArray(o)&&(i=o[1],o=e[n]=o[0]),n!==r&&(e[r]=o,delete e[n]),(a=w.cssHooks[r])&&"expand"in a){o=a.expand(o),delete e[r];for(n in o)n in e||(e[n]=o[n],t[n]=i)}else t[r]=i}function pt(e,t,n){var r,i,o=0,a=pt.prefilters.length,s=w.Deferred().always(function(){delete u.elem}),u=function(){if(i)return!1;for(var t=nt||st(),n=Math.max(0,l.startTime+l.duration-t),r=1-(n\/l.duration||0),o=0,a=l.tweens.length;o<a;o++)l.tweens[o].run(r);return s.notifyWith(e,[l,r,n]),r<1&&a?n:(a||s.notifyWith(e,[l,1,0]),s.resolveWith(e,[l]),!1)},l=s.promise({elem:e,props:w.extend({},t),opts:w.extend(!0,{specialEasing:{},easing:w.easing._default},n),originalProperties:t,originalOptions:n,startTime:nt||st(),duration:n.duration,tweens:[],createTween:function(t,n){var r=w.Tween(e,l.opts,t,n,l.opts.specialEasing[t]||l.opts.easing);return l.tweens.push(r),r},stop:function(t){var n=0,r=t?l.tweens.length:0;if(i)return this;for(i=!0;n<r;n++)l.tweens[n].run(1);return t?(s.notifyWith(e,[l,1,0]),s.resolveWith(e,[l,t])):s.rejectWith(e,[l,t]),this}}),c=l.props;for(ft(c,l.opts.specialEasing);o<a;o++)if(r=pt.prefilters[o].call(l,e,c,l.opts))return g(r.stop)&&(w._queueHooks(l.elem,l.opts.queue).stop=r.stop.bind(r)),r;return w.map(c,lt,l),g(l.opts.start)&&l.opts.start.call(e,l),l.progress(l.opts.progress).done(l.opts.done,l.opts.complete).fail(l.opts.fail).always(l.opts.always),w.fx.timer(w.extend(u,{elem:e,anim:l,queue:l.opts.queue})),l}w.Animation=w.extend(pt,{tweeners:{"*":[function(e,t){var n=this.createTween(e,t);return ue(n.elem,e,ie.exec(t),n),n}]},tweener:function(e,t){g(e)?(t=e,e=["*"]):e=e.match(M);for(var n,r=0,i=e.length;r<i;r++)n=e[r],pt.tweeners[n]=pt.tweeners[n]||[],pt.tweeners[n].unshift(t)},prefilters:[ct],prefilter:function(e,t){t?pt.prefilters.unshift(e):pt.prefilters.push(e)}}),w.speed=function(e,t,n){var r=e&&"object"==typeof e?w.extend({},e):{complete:n||!n&&t||g(e)&&e,duration:e,easing:n&&t||t&&!g(t)&&t};return w.fx.off?r.duration=0:"number"!=typeof r.duration&&(r.duration in w.fx.speeds?r.duration=w.fx.speeds[r.duration]:r.duration=w.fx.speeds._default),null!=r.queue&&!0!==r.queue||(r.queue="fx"),r.old=r.complete,r.complete=function(){g(r.old)&&r.old.call(this),r.queue&&w.dequeue(this,r.queue)},r},w.fn.extend({fadeTo:function(e,t,n,r){return this.filter(ae).css("opacity",0).show().end().animate({opacity:t},e,n,r)},animate:function(e,t,n,r){var i=w.isEmptyObject(e),o=w.speed(t,n,r),a=function(){var t=pt(this,w.extend({},e),o);(i||J.get(this,"finish"))&&t.stop(!0)};return a.finish=a,i||!1===o.queue?this.each(a):this.queue(o.queue,a)},stop:function(e,t,n){var r=function(e){var t=e.stop;delete e.stop,t(n)};return"string"!=typeof e&&(n=t,t=e,e=void 0),t&&!1!==e&&this.queue(e||"fx",[]),this.each(function(){var t=!0,i=null!=e&&e+"queueHooks",o=w.timers,a=J.get(this);if(i)a[i]&&a[i].stop&&r(a[i]);else for(i in a)a[i]&&a[i].stop&&ot.test(i)&&r(a[i]);for(i=o.length;i--;)o[i].elem!==this||null!=e&&o[i].queue!==e||(o[i].anim.stop(n),t=!1,o.splice(i,1));!t&&n||w.dequeue(this,e)})},finish:function(e){return!1!==e&&(e=e||"fx"),this.each(function(){var t,n=J.get(this),r=n[e+"queue"],i=n[e+"queueHooks"],o=w.timers,a=r?r.length:0;for(n.finish=!0,w.queue(this,e,[]),i&&i.stop&&i.stop.call(this,!0),t=o.length;t--;)o[t].elem===this&&o[t].queue===e&&(o[t].anim.stop(!0),o.splice(t,1));for(t=0;t<a;t++)r[t]&&r[t].finish&&r[t].finish.call(this);delete n.finish})}}),w.each(["toggle","show","hide"],function(e,t){var n=w.fn[t];w.fn[t]=function(e,r,i){return null==e||"boolean"==typeof e?n.apply(this,arguments):this.animate(ut(t,!0),e,r,i)}}),w.each({slideDown:ut("show"),slideUp:ut("hide"),slideToggle:ut("toggle"),fadeIn:{opacity:"show"},fadeOut:{opacity:"hide"},fadeToggle:{opacity:"toggle"}},function(e,t){w.fn[e]=function(e,n,r){return this.animate(t,e,n,r)}}),w.timers=[],w.fx.tick=function(){var e,t=0,n=w.timers;for(nt=Date.now();t<n.length;t++)(e=n[t])()||n[t]!==e||n.splice(t--,1);n.length||w.fx.stop(),nt=void 0},w.fx.timer=function(e){w.timers.push(e),w.fx.start()},w.fx.interval=13,w.fx.start=function(){rt||(rt=!0,at())},w.fx.stop=function(){rt=null},w.fx.speeds={slow:600,fast:200,_default:400},w.fn.delay=function(t,n){return t=w.fx?w.fx.speeds[t]||t:t,n=n||"fx",this.queue(n,function(n,r){var i=e.setTimeout(n,t);r.stop=function(){e.clearTimeout(i)}})},function(){var e=r.createElement("input"),t=r.createElement("select").appendChild(r.createElement("option"));e.type="checkbox",h.checkOn=""!==e.value,h.optSelected=t.selected,(e=r.createElement("input")).value="t",e.type="radio",h.radioValue="t"===e.value}();var dt,ht=w.expr.attrHandle;w.fn.extend({attr:function(e,t){return z(this,w.attr,e,t,arguments.length>1)},removeAttr:function(e){return this.each(function(){w.removeAttr(this,e)})}}),w.extend({attr:function(e,t,n){var r,i,o=e.nodeType;if(3!==o&&8!==o&&2!==o)return"undefined"==typeof e.getAttribute?w.prop(e,t,n):(1===o&&w.isXMLDoc(e)||(i=w.attrHooks[t.toLowerCase()]||(w.expr.match.bool.test(t)?dt:void 0)),void 0!==n?null===n?void w.removeAttr(e,t):i&&"set"in i&&void 0!==(r=i.set(e,n,t))?r:(e.setAttribute(t,n+""),n):i&&"get"in i&&null!==(r=i.get(e,t))?r:null==(r=w.find.attr(e,t))?void 0:r)},attrHooks:{type:{set:function(e,t){if(!h.radioValue&&"radio"===t&&N(e,"input")){var n=e.value;return e.setAttribute("type",t),n&&(e.value=n),t}}}},removeAttr:function(e,t){var n,r=0,i=t&&t.match(M);if(i&&1===e.nodeType)while(n=i[r++])e.removeAttribute(n)}}),dt={set:function(e,t,n){return!1===t?w.removeAttr(e,n):e.setAttribute(n,n),n}},w.each(w.expr.match.bool.source.match(\/\\w+\/g),function(e,t){var n=ht[t]||w.find.attr;ht[t]=function(e,t,r){var i,o,a=t.toLowerCase();return r||(o=ht[a],ht[a]=i,i=null!=n(e,t,r)?a:null,ht[a]=o),i}});var gt=\/^(?:input|select|textarea|button)$\/i,yt=\/^(?:a|area)$\/i;w.fn.extend({prop:function(e,t){return z(this,w.prop,e,t,arguments.length>1)},removeProp:function(e){return this.each(function(){delete this[w.propFix[e]||e]})}}),w.extend({prop:function(e,t,n){var r,i,o=e.nodeType;if(3!==o&&8!==o&&2!==o)return 1===o&&w.isXMLDoc(e)||(t=w.propFix[t]||t,i=w.propHooks[t]),void 0!==n?i&&"set"in i&&void 0!==(r=i.set(e,n,t))?r:e[t]=n:i&&"get"in i&&null!==(r=i.get(e,t))?r:e[t]},propHooks:{tabIndex:{get:function(e){var t=w.find.attr(e,"tabindex");return t?parseInt(t,10):gt.test(e.nodeName)||yt.test(e.nodeName)&&e.href?0:-1}}},propFix:{"for":"htmlFor","class":"className"}}),h.optSelected||(w.propHooks.selected={get:function(e){var t=e.parentNode;return t&&t.parentNode&&t.parentNode.selectedIndex,null},set:function(e){var t=e.parentNode;t&&(t.selectedIndex,t.parentNode&&t.parentNode.selectedIndex)}}),w.each(["tabIndex","readOnly","maxLength","cellSpacing","cellPadding","rowSpan","colSpan","useMap","frameBorder","contentEditable"],function(){w.propFix[this.toLowerCase()]=this});function vt(e){return(e.match(M)||[]).join(" ")}function mt(e){return e.getAttribute&&e.getAttribute("class")||""}function xt(e){return Array.isArray(e)?e:"string"==typeof e?e.match(M)||[]:[]}w.fn.extend({addClass:function(e){var t,n,r,i,o,a,s,u=0;if(g(e))return this.each(function(t){w(this).addClass(e.call(this,t,mt(this)))});if((t=xt(e)).length)while(n=this[u++])if(i=mt(n),r=1===n.nodeType&&" "+vt(i)+" "){a=0;while(o=t[a++])r.indexOf(" "+o+" ")<0&&(r+=o+" ");i!==(s=vt(r))&&n.setAttribute("class",s)}return this},removeClass:function(e){var t,n,r,i,o,a,s,u=0;if(g(e))return this.each(function(t){w(this).removeClass(e.call(this,t,mt(this)))});if(!arguments.length)return this.attr("class","");if((t=xt(e)).length)while(n=this[u++])if(i=mt(n),r=1===n.nodeType&&" "+vt(i)+" "){a=0;while(o=t[a++])while(r.indexOf(" "+o+" ")>-1)r=r.replace(" "+o+" "," ");i!==(s=vt(r))&&n.setAttribute("class",s)}return this},toggleClass:function(e,t){var n=typeof e,r="string"===n||Array.isArray(e);return"boolean"==typeof t&&r?t?this.addClass(e):this.removeClass(e):g(e)?this.each(function(n){w(this).toggleClass(e.call(this,n,mt(this),t),t)}):this.each(function(){var t,i,o,a;if(r){i=0,o=w(this),a=xt(e);while(t=a[i++])o.hasClass(t)?o.removeClass(t):o.addClass(t)}else void 0!==e&&"boolean"!==n||((t=mt(this))&&J.set(this,"__className__",t),this.setAttribute&&this.setAttribute("class",t||!1===e?"":J.get(this,"__className__")||""))})},hasClass:function(e){var t,n,r=0;t=" "+e+" ";while(n=this[r++])if(1===n.nodeType&&(" "+vt(mt(n))+" ").indexOf(t)>-1)return!0;return!1}});var bt=\/\\r\/g;w.fn.extend({val:function(e){var t,n,r,i=this[0];{if(arguments.length)return r=g(e),this.each(function(n){var i;1===this.nodeType&&(null==(i=r?e.call(this,n,w(this).val()):e)?i="":"number"==typeof i?i+="":Array.isArray(i)&&(i=w.map(i,function(e){return null==e?"":e+""})),(t=w.valHooks[this.type]||w.valHooks[this.nodeName.toLowerCase()])&&"set"in t&&void 0!==t.set(this,i,"value")||(this.value=i))});if(i)return(t=w.valHooks[i.type]||w.valHooks[i.nodeName.toLowerCase()])&&"get"in t&&void 0!==(n=t.get(i,"value"))?n:"string"==typeof(n=i.value)?n.replace(bt,""):null==n?"":n}}}),w.extend({valHooks:{option:{get:function(e){var t=w.find.attr(e,"value");return null!=t?t:vt(w.text(e))}},select:{get:function(e){var t,n,r,i=e.options,o=e.selectedIndex,a="select-one"===e.type,s=a?null:[],u=a?o+1:i.length;for(r=o<0?u:a?o:0;r<u;r++)if(((n=i[r]).selected||r===o)&&!n.disabled&&(!n.parentNode.disabled||!N(n.parentNode,"optgroup"))){if(t=w(n).val(),a)return t;s.push(t)}return s},set:function(e,t){var n,r,i=e.options,o=w.makeArray(t),a=i.length;while(a--)((r=i[a]).selected=w.inArray(w.valHooks.option.get(r),o)>-1)&&(n=!0);return n||(e.selectedIndex=-1),o}}}}),w.each(["radio","checkbox"],function(){w.valHooks[this]={set:function(e,t){if(Array.isArray(t))return e.checked=w.inArray(w(e).val(),t)>-1}},h.checkOn||(w.valHooks[this].get=function(e){return null===e.getAttribute("value")?"on":e.value})}),h.focusin="onfocusin"in e;var wt=\/^(?:focusinfocus|focusoutblur)$\/,Tt=function(e){e.stopPropagation()};w.extend(w.event,{trigger:function(t,n,i,o){var a,s,u,l,c,p,d,h,v=[i||r],m=f.call(t,"type")?t.type:t,x=f.call(t,"namespace")?t.namespace.split("."):[];if(s=h=u=i=i||r,3!==i.nodeType&&8!==i.nodeType&&!wt.test(m+w.event.triggered)&&(m.indexOf(".")>-1&&(m=(x=m.split(".")).shift(),x.sort()),c=m.indexOf(":")<0&&"on"+m,t=t[w.expando]?t:new w.Event(m,"object"==typeof t&&t),t.isTrigger=o?2:3,t.namespace=x.join("."),t.rnamespace=t.namespace?new RegExp("(^|\\\\.)"+x.join("\\\\.(?:.*\\\\.|)")+"(\\\\.|$)"):null,t.result=void 0,t.target||(t.target=i),n=null==n?[t]:w.makeArray(n,[t]),d=w.event.special[m]||{},o||!d.trigger||!1!==d.trigger.apply(i,n))){if(!o&&!d.noBubble&&!y(i)){for(l=d.delegateType||m,wt.test(l+m)||(s=s.parentNode);s;s=s.parentNode)v.push(s),u=s;u===(i.ownerDocument||r)&&v.push(u.defaultView||u.parentWindow||e)}a=0;while((s=v[a++])&&!t.isPropagationStopped())h=s,t.type=a>1?l:d.bindType||m,(p=(J.get(s,"events")||{})[t.type]&&J.get(s,"handle"))&&p.apply(s,n),(p=c&&s[c])&&p.apply&&Y(s)&&(t.result=p.apply(s,n),!1===t.result&&t.preventDefault());return t.type=m,o||t.isDefaultPrevented()||d._default&&!1!==d._default.apply(v.pop(),n)||!Y(i)||c&&g(i[m])&&!y(i)&&((u=i[c])&&(i[c]=null),w.event.triggered=m,t.isPropagationStopped()&&h.addEventListener(m,Tt),i[m](),t.isPropagationStopped()&&h.removeEventListener(m,Tt),w.event.triggered=void 0,u&&(i[c]=u)),t.result}},simulate:function(e,t,n){var r=w.extend(new w.Event,n,{type:e,isSimulated:!0});w.event.trigger(r,null,t)}}),w.fn.extend({trigger:function(e,t){return this.each(function(){w.event.trigger(e,t,this)})},triggerHandler:function(e,t){var n=this[0];if(n)return w.event.trigger(e,t,n,!0)}}),h.focusin||w.each({focus:"focusin",blur:"focusout"},function(e,t){var n=function(e){w.event.simulate(t,e.target,w.event.fix(e))};w.event.special[t]={setup:function(){var r=this.ownerDocument||this,i=J.access(r,t);i||r.addEventListener(e,n,!0),J.access(r,t,(i||0)+1)},teardown:function(){var r=this.ownerDocument||this,i=J.access(r,t)-1;i?J.access(r,t,i):(r.removeEventListener(e,n,!0),J.remove(r,t))}}});var Ct=e.location,Et=Date.now(),kt=\/\\?\/;w.parseXML=function(t){var n;if(!t||"string"!=typeof t)return null;try{n=(new e.DOMParser).parseFromString(t,"text\/xml")}catch(e){n=void 0}return n&&!n.getElementsByTagName("parsererror").length||w.error("Invalid XML: "+t),n};var St=\/\\[\\]$\/,Dt=\/\\r?\\n\/g,Nt=\/^(?:submit|button|image|reset|file)$\/i,At=\/^(?:input|select|textarea|keygen)\/i;function jt(e,t,n,r){var i;if(Array.isArray(t))w.each(t,function(t,i){n||St.test(e)?r(e,i):jt(e+"["+("object"==typeof i&&null!=i?t:"")+"]",i,n,r)});else if(n||"object"!==x(t))r(e,t);else for(i in t)jt(e+"["+i+"]",t[i],n,r)}w.param=function(e,t){var n,r=[],i=function(e,t){var n=g(t)?t():t;r[r.length]=encodeURIComponent(e)+"="+encodeURIComponent(null==n?"":n)};if(Array.isArray(e)||e.jquery&&!w.isPlainObject(e))w.each(e,function(){i(this.name,this.value)});else for(n in e)jt(n,e[n],t,i);return r.join("&")},w.fn.extend({serialize:function(){return w.param(this.serializeArray())},serializeArray:function(){return this.map(function(){var e=w.prop(this,"elements");return e?w.makeArray(e):this}).filter(function(){var e=this.type;return this.name&&!w(this).is(":disabled")&&At.test(this.nodeName)&&!Nt.test(e)&&(this.checked||!pe.test(e))}).map(function(e,t){var n=w(this).val();return null==n?null:Array.isArray(n)?w.map(n,function(e){return{name:t.name,value:e.replace(Dt,"\\r\\n")}}):{name:t.name,value:n.replace(Dt,"\\r\\n")}}).get()}});var qt=\/%20\/g,Lt=\/#.*$\/,Ht=\/([?&])_=[^&]*\/,Ot=\/^(.*?):[ \\t]*([^\\r\\n]*)$\/gm,Pt=\/^(?:about|app|app-storage|.+-extension|file|res|widget):$\/,Mt=\/^(?:GET|HEAD)$\/,Rt=\/^\\\/\\\/\/,It={},Wt={},$t="*\/".concat("*"),Bt=r.createElement("a");Bt.href=Ct.href;function Ft(e){return function(t,n){"string"!=typeof t&&(n=t,t="*");var r,i=0,o=t.toLowerCase().match(M)||[];if(g(n))while(r=o[i++])"+"===r[0]?(r=r.slice(1)||"*",(e[r]=e[r]||[]).unshift(n)):(e[r]=e[r]||[]).push(n)}}function _t(e,t,n,r){var i={},o=e===Wt;function a(s){var u;return i[s]=!0,w.each(e[s]||[],function(e,s){var l=s(t,n,r);return"string"!=typeof l||o||i[l]?o?!(u=l):void 0:(t.dataTypes.unshift(l),a(l),!1)}),u}return a(t.dataTypes[0])||!i["*"]&&a("*")}function zt(e,t){var n,r,i=w.ajaxSettings.flatOptions||{};for(n in t)void 0!==t[n]&&((i[n]?e:r||(r={}))[n]=t[n]);return r&&w.extend(!0,e,r),e}function Xt(e,t,n){var r,i,o,a,s=e.contents,u=e.dataTypes;while("*"===u[0])u.shift(),void 0===r&&(r=e.mimeType||t.getResponseHeader("Content-Type"));if(r)for(i in s)if(s[i]&&s[i].test(r)){u.unshift(i);break}if(u[0]in n)o=u[0];else{for(i in n){if(!u[0]||e.converters[i+" "+u[0]]){o=i;break}a||(a=i)}o=o||a}if(o)return o!==u[0]&&u.unshift(o),n[o]}function Ut(e,t,n,r){var i,o,a,s,u,l={},c=e.dataTypes.slice();if(c[1])for(a in e.converters)l[a.toLowerCase()]=e.converters[a];o=c.shift();while(o)if(e.responseFields[o]&&(n[e.responseFields[o]]=t),!u&&r&&e.dataFilter&&(t=e.dataFilter(t,e.dataType)),u=o,o=c.shift())if("*"===o)o=u;else if("*"!==u&&u!==o){if(!(a=l[u+" "+o]||l["* "+o]))for(i in l)if((s=i.split(" "))[1]===o&&(a=l[u+" "+s[0]]||l["* "+s[0]])){!0===a?a=l[i]:!0!==l[i]&&(o=s[0],c.unshift(s[1]));break}if(!0!==a)if(a&&e["throws"])t=a(t);else try{t=a(t)}catch(e){return{state:"parsererror",error:a?e:"No conversion from "+u+" to "+o}}}return{state:"success",data:t}}w.extend({active:0,lastModified:{},etag:{},ajaxSettings:{url:Ct.href,type:"GET",isLocal:Pt.test(Ct.protocol),global:!0,processData:!0,async:!0,contentType:"application\/x-www-form-urlencoded; charset=UTF-8",accepts:{"*":$t,text:"text\/plain",html:"text\/html",xml:"application\/xml, text\/xml",json:"application\/json, text\/javascript"},contents:{xml:\/\\bxml\\b\/,html:\/\\bhtml\/,json:\/\\bjson\\b\/},responseFields:{xml:"responseXML",text:"responseText",json:"responseJSON"},converters:{"* text":String,"text html":!0,"text json":JSON.parse,"text xml":w.parseXML},flatOptions:{url:!0,context:!0}},ajaxSetup:function(e,t){return t?zt(zt(e,w.ajaxSettings),t):zt(w.ajaxSettings,e)},ajaxPrefilter:Ft(It),ajaxTransport:Ft(Wt),ajax:function(t,n){"object"==typeof t&&(n=t,t=void 0),n=n||{};var i,o,a,s,u,l,c,f,p,d,h=w.ajaxSetup({},n),g=h.context||h,y=h.context&&(g.nodeType||g.jquery)?w(g):w.event,v=w.Deferred(),m=w.Callbacks("once memory"),x=h.statusCode||{},b={},T={},C="canceled",E={readyState:0,getResponseHeader:function(e){var t;if(c){if(!s){s={};while(t=Ot.exec(a))s[t[1].toLowerCase()]=t[2]}t=s[e.toLowerCase()]}return null==t?null:t},getAllResponseHeaders:function(){return c?a:null},setRequestHeader:function(e,t){return null==c&&(e=T[e.toLowerCase()]=T[e.toLowerCase()]||e,b[e]=t),this},overrideMimeType:function(e){return null==c&&(h.mimeType=e),this},statusCode:function(e){var t;if(e)if(c)E.always(e[E.status]);else for(t in e)x[t]=[x[t],e[t]];return this},abort:function(e){var t=e||C;return i&&i.abort(t),k(0,t),this}};if(v.promise(E),h.url=((t||h.url||Ct.href)+"").replace(Rt,Ct.protocol+"\/\/"),h.type=n.method||n.type||h.method||h.type,h.dataTypes=(h.dataType||"*").toLowerCase().match(M)||[""],null==h.crossDomain){l=r.createElement("a");try{l.href=h.url,l.href=l.href,h.crossDomain=Bt.protocol+"\/\/"+Bt.host!=l.protocol+"\/\/"+l.host}catch(e){h.crossDomain=!0}}if(h.data&&h.processData&&"string"!=typeof h.data&&(h.data=w.param(h.data,h.traditional)),_t(It,h,n,E),c)return E;(f=w.event&&h.global)&&0==w.active++&&w.event.trigger("ajaxStart"),h.type=h.type.toUpperCase(),h.hasContent=!Mt.test(h.type),o=h.url.replace(Lt,""),h.hasContent?h.data&&h.processData&&0===(h.contentType||"").indexOf("application\/x-www-form-urlencoded")&&(h.data=h.data.replace(qt,"+")):(d=h.url.slice(o.length),h.data&&(h.processData||"string"==typeof h.data)&&(o+=(kt.test(o)?"&":"?")+h.data,delete h.data),!1===h.cache&&(o=o.replace(Ht,"$1"),d=(kt.test(o)?"&":"?")+"_="+Et+++d),h.url=o+d),h.ifModified&&(w.lastModified[o]&&E.setRequestHeader("If-Modified-Since",w.lastModified[o]),w.etag[o]&&E.setRequestHeader("If-None-Match",w.etag[o])),(h.data&&h.hasContent&&!1!==h.contentType||n.contentType)&&E.setRequestHeader("Content-Type",h.contentType),E.setRequestHeader("Accept",h.dataTypes[0]&&h.accepts[h.dataTypes[0]]?h.accepts[h.dataTypes[0]]+("*"!==h.dataTypes[0]?", "+$t+"; q=0.01":""):h.accepts["*"]);for(p in h.headers)E.setRequestHeader(p,h.headers[p]);if(h.beforeSend&&(!1===h.beforeSend.call(g,E,h)||c))return E.abort();if(C="abort",m.add(h.complete),E.done(h.success),E.fail(h.error),i=_t(Wt,h,n,E)){if(E.readyState=1,f&&y.trigger("ajaxSend",[E,h]),c)return E;h.async&&h.timeout>0&&(u=e.setTimeout(function(){E.abort("timeout")},h.timeout));try{c=!1,i.send(b,k)}catch(e){if(c)throw e;k(-1,e)}}else k(-1,"No Transport");function k(t,n,r,s){var l,p,d,b,T,C=n;c||(c=!0,u&&e.clearTimeout(u),i=void 0,a=s||"",E.readyState=t>0?4:0,l=t>=200&&t<300||304===t,r&&(b=Xt(h,E,r)),b=Ut(h,b,E,l),l?(h.ifModified&&((T=E.getResponseHeader("Last-Modified"))&&(w.lastModified[o]=T),(T=E.getResponseHeader("etag"))&&(w.etag[o]=T)),204===t||"HEAD"===h.type?C="nocontent":304===t?C="notmodified":(C=b.state,p=b.data,l=!(d=b.error))):(d=C,!t&&C||(C="error",t<0&&(t=0))),E.status=t,E.statusText=(n||C)+"",l?v.resolveWith(g,[p,C,E]):v.rejectWith(g,[E,C,d]),E.statusCode(x),x=void 0,f&&y.trigger(l?"ajaxSuccess":"ajaxError",[E,h,l?p:d]),m.fireWith(g,[E,C]),f&&(y.trigger("ajaxComplete",[E,h]),--w.active||w.event.trigger("ajaxStop")))}return E},getJSON:function(e,t,n){return w.get(e,t,n,"json")},getScript:function(e,t){return w.get(e,void 0,t,"script")}}),w.each(["get","post"],function(e,t){w[t]=function(e,n,r,i){return g(n)&&(i=i||r,r=n,n=void 0),w.ajax(w.extend({url:e,type:t,dataType:i,data:n,success:r},w.isPlainObject(e)&&e))}}),w._evalUrl=function(e){return w.ajax({url:e,type:"GET",dataType:"script",cache:!0,async:!1,global:!1,"throws":!0})},w.fn.extend({wrapAll:function(e){var t;return this[0]&&(g(e)&&(e=e.call(this[0])),t=w(e,this[0].ownerDocument).eq(0).clone(!0),this[0].parentNode&&t.insertBefore(this[0]),t.map(function(){var e=this;while(e.firstElementChild)e=e.firstElementChild;return e}).append(this)),this},wrapInner:function(e){return g(e)?this.each(function(t){w(this).wrapInner(e.call(this,t))}):this.each(function(){var t=w(this),n=t.contents();n.length?n.wrapAll(e):t.append(e)})},wrap:function(e){var t=g(e);return this.each(function(n){w(this).wrapAll(t?e.call(this,n):e)})},unwrap:function(e){return this.parent(e).not("body").each(function(){w(this).replaceWith(this.childNodes)}),this}}),w.expr.pseudos.hidden=function(e){return!w.expr.pseudos.visible(e)},w.expr.pseudos.visible=function(e){return!!(e.offsetWidth||e.offsetHeight||e.getClientRects().length)},w.ajaxSettings.xhr=function(){try{return new e.XMLHttpRequest}catch(e){}};var Vt={0:200,1223:204},Gt=w.ajaxSettings.xhr();h.cors=!!Gt&&"withCredentials"in Gt,h.ajax=Gt=!!Gt,w.ajaxTransport(function(t){var n,r;if(h.cors||Gt&&!t.crossDomain)return{send:function(i,o){var a,s=t.xhr();if(s.open(t.type,t.url,t.async,t.username,t.password),t.xhrFields)for(a in t.xhrFields)s[a]=t.xhrFields[a];t.mimeType&&s.overrideMimeType&&s.overrideMimeType(t.mimeType),t.crossDomain||i["X-Requested-With"]||(i["X-Requested-With"]="XMLHttpRequest");for(a in i)s.setRequestHeader(a,i[a]);n=function(e){return function(){n&&(n=r=s.onload=s.onerror=s.onabort=s.ontimeout=s.onreadystatechange=null,"abort"===e?s.abort():"error"===e?"number"!=typeof s.status?o(0,"error"):o(s.status,s.statusText):o(Vt[s.status]||s.status,s.statusText,"text"!==(s.responseType||"text")||"string"!=typeof s.responseText?{binary:s.response}:{text:s.responseText},s.getAllResponseHeaders()))}},s.onload=n(),r=s.onerror=s.ontimeout=n("error"),void 0!==s.onabort?s.onabort=r:s.onreadystatechange=function(){4===s.readyState&&e.setTimeout(function(){n&&r()})},n=n("abort");try{s.send(t.hasContent&&t.data||null)}catch(e){if(n)throw e}},abort:function(){n&&n()}}}),w.ajaxPrefilter(function(e){e.crossDomain&&(e.contents.script=!1)}),w.ajaxSetup({accepts:{script:"text\/javascript, application\/javascript, application\/ecmascript, application\/x-ecmascript"},contents:{script:\/\\b(?:java|ecma)script\\b\/},converters:{"text script":function(e){return w.globalEval(e),e}}}),w.ajaxPrefilter("script",function(e){void 0===e.cache&&(e.cache=!1),e.crossDomain&&(e.type="GET")}),w.ajaxTransport("script",function(e){if(e.crossDomain){var t,n;return{send:function(i,o){t=w("<script>").prop({charset:e.scriptCharset,src:e.url}).on("load error",n=function(e){t.remove(),n=null,e&&o("error"===e.type?404:200,e.type)}),r.head.appendChild(t[0])},abort:function(){n&&n()}}}});var Yt=[],Qt=\/(=)\\?(?=&|$)|\\?\\?\/;w.ajaxSetup({jsonp:"callback",jsonpCallback:function(){var e=Yt.pop()||w.expando+"_"+Et++;return this[e]=!0,e}}),w.ajaxPrefilter("json jsonp",function(t,n,r){var i,o,a,s=!1!==t.jsonp&&(Qt.test(t.url)?"url":"string"==typeof t.data&&0===(t.contentType||"").indexOf("application\/x-www-form-urlencoded")&&Qt.test(t.data)&&"data");if(s||"jsonp"===t.dataTypes[0])return i=t.jsonpCallback=g(t.jsonpCallback)?t.jsonpCallback():t.jsonpCallback,s?t[s]=t[s].replace(Qt,"$1"+i):!1!==t.jsonp&&(t.url+=(kt.test(t.url)?"&":"?")+t.jsonp+"="+i),t.converters["script json"]=function(){return a||w.error(i+" was not called"),a[0]},t.dataTypes[0]="json",o=e[i],e[i]=function(){a=arguments},r.always(function(){void 0===o?w(e).removeProp(i):e[i]=o,t[i]&&(t.jsonpCallback=n.jsonpCallback,Yt.push(i)),a&&g(o)&&o(a[0]),a=o=void 0}),"script"}),h.createHTMLDocument=function(){var e=r.implementation.createHTMLDocument("").body;return e.innerHTML="<form><\/form><form><\/form>",2===e.childNodes.length}(),w.parseHTML=function(e,t,n){if("string"!=typeof e)return[];"boolean"==typeof t&&(n=t,t=!1);var i,o,a;return t||(h.createHTMLDocument?((i=(t=r.implementation.createHTMLDocument("")).createElement("base")).href=r.location.href,t.head.appendChild(i)):t=r),o=A.exec(e),a=!n&&[],o?[t.createElement(o[1])]:(o=xe([e],t,a),a&&a.length&&w(a).remove(),w.merge([],o.childNodes))},w.fn.load=function(e,t,n){var r,i,o,a=this,s=e.indexOf(" ");return s>-1&&(r=vt(e.slice(s)),e=e.slice(0,s)),g(t)?(n=t,t=void 0):t&&"object"==typeof t&&(i="POST"),a.length>0&&w.ajax({url:e,type:i||"GET",dataType:"html",data:t}).done(function(e){o=arguments,a.html(r?w("<div>").append(w.parseHTML(e)).find(r):e)}).always(n&&function(e,t){a.each(function(){n.apply(this,o||[e.responseText,t,e])})}),this},w.each(["ajaxStart","ajaxStop","ajaxComplete","ajaxError","ajaxSuccess","ajaxSend"],function(e,t){w.fn[t]=function(e){return this.on(t,e)}}),w.expr.pseudos.animated=function(e){return w.grep(w.timers,function(t){return e===t.elem}).length},w.offset={setOffset:function(e,t,n){var r,i,o,a,s,u,l,c=w.css(e,"position"),f=w(e),p={};"static"===c&&(e.style.position="relative"),s=f.offset(),o=w.css(e,"top"),u=w.css(e,"left"),(l=("absolute"===c||"fixed"===c)&&(o+u).indexOf("auto")>-1)?(a=(r=f.position()).top,i=r.left):(a=parseFloat(o)||0,i=parseFloat(u)||0),g(t)&&(t=t.call(e,n,w.extend({},s))),null!=t.top&&(p.top=t.top-s.top+a),null!=t.left&&(p.left=t.left-s.left+i),"using"in t?t.using.call(e,p):f.css(p)}},w.fn.extend({offset:function(e){if(arguments.length)return void 0===e?this:this.each(function(t){w.offset.setOffset(this,e,t)});var t,n,r=this[0];if(r)return r.getClientRects().length?(t=r.getBoundingClientRect(),n=r.ownerDocument.defaultView,{top:t.top+n.pageYOffset,left:t.left+n.pageXOffset}):{top:0,left:0}},position:function(){if(this[0]){var e,t,n,r=this[0],i={top:0,left:0};if("fixed"===w.css(r,"position"))t=r.getBoundingClientRect();else{t=this.offset(),n=r.ownerDocument,e=r.offsetParent||n.documentElement;while(e&&(e===n.body||e===n.documentElement)&&"static"===w.css(e,"position"))e=e.parentNode;e&&e!==r&&1===e.nodeType&&((i=w(e).offset()).top+=w.css(e,"borderTopWidth",!0),i.left+=w.css(e,"borderLeftWidth",!0))}return{top:t.top-i.top-w.css(r,"marginTop",!0),left:t.left-i.left-w.css(r,"marginLeft",!0)}}},offsetParent:function(){return this.map(function(){var e=this.offsetParent;while(e&&"static"===w.css(e,"position"))e=e.offsetParent;return e||be})}}),w.each({scrollLeft:"pageXOffset",scrollTop:"pageYOffset"},function(e,t){var n="pageYOffset"===t;w.fn[e]=function(r){return z(this,function(e,r,i){var o;if(y(e)?o=e:9===e.nodeType&&(o=e.defaultView),void 0===i)return o?o[t]:e[r];o?o.scrollTo(n?o.pageXOffset:i,n?i:o.pageYOffset):e[r]=i},e,r,arguments.length)}}),w.each(["top","left"],function(e,t){w.cssHooks[t]=_e(h.pixelPosition,function(e,n){if(n)return n=Fe(e,t),We.test(n)?w(e).position()[t]+"px":n})}),w.each({Height:"height",Width:"width"},function(e,t){w.each({padding:"inner"+e,content:t,"":"outer"+e},function(n,r){w.fn[r]=function(i,o){var a=arguments.length&&(n||"boolean"!=typeof i),s=n||(!0===i||!0===o?"margin":"border");return z(this,function(t,n,i){var o;return y(t)?0===r.indexOf("outer")?t["inner"+e]:t.document.documentElement["client"+e]:9===t.nodeType?(o=t.documentElement,Math.max(t.body["scroll"+e],o["scroll"+e],t.body["offset"+e],o["offset"+e],o["client"+e])):void 0===i?w.css(t,n,s):w.style(t,n,i,s)},t,a?i:void 0,a)}})}),w.each("blur focus focusin focusout resize scroll click dblclick mousedown mouseup mousemove mouseover mouseout mouseenter mouseleave change select submit keydown keypress keyup contextmenu".split(" "),function(e,t){w.fn[t]=function(e,n){return arguments.length>0?this.on(t,null,e,n):this.trigger(t)}}),w.fn.extend({hover:function(e,t){return this.mouseenter(e).mouseleave(t||e)}}),w.fn.extend({bind:function(e,t,n){return this.on(e,null,t,n)},unbind:function(e,t){return this.off(e,null,t)},delegate:function(e,t,n,r){return this.on(t,e,n,r)},undelegate:function(e,t,n){return 1===arguments.length?this.off(e,"**"):this.off(t,e||"**",n)}}),w.proxy=function(e,t){var n,r,i;if("string"==typeof t&&(n=e[t],t=e,e=n),g(e))return r=o.call(arguments,2),i=function(){return e.apply(t||this,r.concat(o.call(arguments)))},i.guid=e.guid=e.guid||w.guid++,i},w.holdReady=function(e){e?w.readyWait++:w.ready(!0)},w.isArray=Array.isArray,w.parseJSON=JSON.parse,w.nodeName=N,w.isFunction=g,w.isWindow=y,w.camelCase=G,w.type=x,w.now=Date.now,w.isNumeric=function(e){var t=w.type(e);return("number"===t||"string"===t)&&!isNaN(e-parseFloat(e))},"function"==typeof define&&define.amd&&define("jquery",[],function(){return w});var Jt=e.jQuery,Kt=e.$;return w.noConflict=function(t){return e.$===w&&(e.$=Kt),t&&e.jQuery===w&&(e.jQuery=Jt),w},t||(e.jQuery=e.$=w),w});$/;"	p
x	public\static\live\js\jquery-3.3.1.min.js	/^!function(e,t){"use strict";"object"==typeof module&&"object"==typeof module.exports?module.exports=e.document?t(e,!0):function(e){if(!e.document)throw new Error("jQuery requires a window with a document");return t(e)}:t(e)}("undefined"!=typeof window?window:this,function(e,t){"use strict";var n=[],r=e.document,i=Object.getPrototypeOf,o=n.slice,a=n.concat,s=n.push,u=n.indexOf,l={},c=l.toString,f=l.hasOwnProperty,p=f.toString,d=p.call(Object),h={},g=function e(t){return"function"==typeof t&&"number"!=typeof t.nodeType},y=function e(t){return null!=t&&t===t.window},v={type:!0,src:!0,noModule:!0};function m(e,t,n){var i,o=(t=t||r).createElement("script");if(o.text=e,n)for(i in v)n[i]&&(o[i]=n[i]);t.head.appendChild(o).parentNode.removeChild(o)}function x(e){return null==e?e+"":"object"==typeof e||"function"==typeof e?l[c.call(e)]||"object":typeof e}var b="3.3.1",w=function(e,t){return new w.fn.init(e,t)},T=\/^[\\s\\uFEFF\\xA0]+|[\\s\\uFEFF\\xA0]+$\/g;w.fn=w.prototype={jquery:"3.3.1",constructor:w,length:0,toArray:function(){return o.call(this)},get:function(e){return null==e?o.call(this):e<0?this[e+this.length]:this[e]},pushStack:function(e){var t=w.merge(this.constructor(),e);return t.prevObject=this,t},each:function(e){return w.each(this,e)},map:function(e){return this.pushStack(w.map(this,function(t,n){return e.call(t,n,t)}))},slice:function(){return this.pushStack(o.apply(this,arguments))},first:function(){return this.eq(0)},last:function(){return this.eq(-1)},eq:function(e){var t=this.length,n=+e+(e<0?t:0);return this.pushStack(n>=0&&n<t?[this[n]]:[])},end:function(){return this.prevObject||this.constructor()},push:s,sort:n.sort,splice:n.splice},w.extend=w.fn.extend=function(){var e,t,n,r,i,o,a=arguments[0]||{},s=1,u=arguments.length,l=!1;for("boolean"==typeof a&&(l=a,a=arguments[s]||{},s++),"object"==typeof a||g(a)||(a={}),s===u&&(a=this,s--);s<u;s++)if(null!=(e=arguments[s]))for(t in e)n=a[t],a!==(r=e[t])&&(l&&r&&(w.isPlainObject(r)||(i=Array.isArray(r)))?(i?(i=!1,o=n&&Array.isArray(n)?n:[]):o=n&&w.isPlainObject(n)?n:{},a[t]=w.extend(l,o,r)):void 0!==r&&(a[t]=r));return a},w.extend({expando:"jQuery"+("3.3.1"+Math.random()).replace(\/\\D\/g,""),isReady:!0,error:function(e){throw new Error(e)},noop:function(){},isPlainObject:function(e){var t,n;return!(!e||"[object Object]"!==c.call(e))&&(!(t=i(e))||"function"==typeof(n=f.call(t,"constructor")&&t.constructor)&&p.call(n)===d)},isEmptyObject:function(e){var t;for(t in e)return!1;return!0},globalEval:function(e){m(e)},each:function(e,t){var n,r=0;if(C(e)){for(n=e.length;r<n;r++)if(!1===t.call(e[r],r,e[r]))break}else for(r in e)if(!1===t.call(e[r],r,e[r]))break;return e},trim:function(e){return null==e?"":(e+"").replace(T,"")},makeArray:function(e,t){var n=t||[];return null!=e&&(C(Object(e))?w.merge(n,"string"==typeof e?[e]:e):s.call(n,e)),n},inArray:function(e,t,n){return null==t?-1:u.call(t,e,n)},merge:function(e,t){for(var n=+t.length,r=0,i=e.length;r<n;r++)e[i++]=t[r];return e.length=i,e},grep:function(e,t,n){for(var r,i=[],o=0,a=e.length,s=!n;o<a;o++)(r=!t(e[o],o))!==s&&i.push(e[o]);return i},map:function(e,t,n){var r,i,o=0,s=[];if(C(e))for(r=e.length;o<r;o++)null!=(i=t(e[o],o,n))&&s.push(i);else for(o in e)null!=(i=t(e[o],o,n))&&s.push(i);return a.apply([],s)},guid:1,support:h}),"function"==typeof Symbol&&(w.fn[Symbol.iterator]=n[Symbol.iterator]),w.each("Boolean Number String Function Array Date RegExp Object Error Symbol".split(" "),function(e,t){l["[object "+t+"]"]=t.toLowerCase()});function C(e){var t=!!e&&"length"in e&&e.length,n=x(e);return!g(e)&&!y(e)&&("array"===n||0===t||"number"==typeof t&&t>0&&t-1 in e)}var E=function(e){var t,n,r,i,o,a,s,u,l,c,f,p,d,h,g,y,v,m,x,b="sizzle"+1*new Date,w=e.document,T=0,C=0,E=ae(),k=ae(),S=ae(),D=function(e,t){return e===t&&(f=!0),0},N={}.hasOwnProperty,A=[],j=A.pop,q=A.push,L=A.push,H=A.slice,O=function(e,t){for(var n=0,r=e.length;n<r;n++)if(e[n]===t)return n;return-1},P="checked|selected|async|autofocus|autoplay|controls|defer|disabled|hidden|ismap|loop|multiple|open|readonly|required|scoped",M="[\\\\x20\\\\t\\\\r\\\\n\\\\f]",R="(?:\\\\\\\\.|[\\\\w-]|[^\\0-\\\\xa0])+",I="\\\\["+M+"*("+R+")(?:"+M+"*([*^$|!~]?=)"+M+"*(?:'((?:\\\\\\\\.|[^\\\\\\\\'])*)'|\\"((?:\\\\\\\\.|[^\\\\\\\\\\"])*)\\"|("+R+"))|)"+M+"*\\\\]",W=":("+R+")(?:\\\\((('((?:\\\\\\\\.|[^\\\\\\\\'])*)'|\\"((?:\\\\\\\\.|[^\\\\\\\\\\"])*)\\")|((?:\\\\\\\\.|[^\\\\\\\\()[\\\\]]|"+I+")*)|.*)\\\\)|)",$=new RegExp(M+"+","g"),B=new RegExp("^"+M+"+|((?:^|[^\\\\\\\\])(?:\\\\\\\\.)*)"+M+"+$","g"),F=new RegExp("^"+M+"*,"+M+"*"),_=new RegExp("^"+M+"*([>+~]|"+M+")"+M+"*"),z=new RegExp("="+M+"*([^\\\\]'\\"]*?)"+M+"*\\\\]","g"),X=new RegExp(W),U=new RegExp("^"+R+"$"),V={ID:new RegExp("^#("+R+")"),CLASS:new RegExp("^\\\\.("+R+")"),TAG:new RegExp("^("+R+"|[*])"),ATTR:new RegExp("^"+I),PSEUDO:new RegExp("^"+W),CHILD:new RegExp("^:(only|first|last|nth|nth-last)-(child|of-type)(?:\\\\("+M+"*(even|odd|(([+-]|)(\\\\d*)n|)"+M+"*(?:([+-]|)"+M+"*(\\\\d+)|))"+M+"*\\\\)|)","i"),bool:new RegExp("^(?:"+P+")$","i"),needsContext:new RegExp("^"+M+"*[>+~]|:(even|odd|eq|gt|lt|nth|first|last)(?:\\\\("+M+"*((?:-\\\\d)?\\\\d*)"+M+"*\\\\)|)(?=[^-]|$)","i")},G=\/^(?:input|select|textarea|button)$\/i,Y=\/^h\\d$\/i,Q=\/^[^{]+\\{\\s*\\[native \\w\/,J=\/^(?:#([\\w-]+)|(\\w+)|\\.([\\w-]+))$\/,K=\/[+~]\/,Z=new RegExp("\\\\\\\\([\\\\da-f]{1,6}"+M+"?|("+M+")|.)","ig"),ee=function(e,t,n){var r="0x"+t-65536;return r!==r||n?t:r<0?String.fromCharCode(r+65536):String.fromCharCode(r>>10|55296,1023&r|56320)},te=\/([\\0-\\x1f\\x7f]|^-?\\d)|^-$|[^\\0-\\x1f\\x7f-\\uFFFF\\w-]\/g,ne=function(e,t){return t?"\\0"===e?"\\ufffd":e.slice(0,-1)+"\\\\"+e.charCodeAt(e.length-1).toString(16)+" ":"\\\\"+e},re=function(){p()},ie=me(function(e){return!0===e.disabled&&("form"in e||"label"in e)},{dir:"parentNode",next:"legend"});try{L.apply(A=H.call(w.childNodes),w.childNodes),A[w.childNodes.length].nodeType}catch(e){L={apply:A.length?function(e,t){q.apply(e,H.call(t))}:function(e,t){var n=e.length,r=0;while(e[n++]=t[r++]);e.length=n-1}}}function oe(e,t,r,i){var o,s,l,c,f,h,v,m=t&&t.ownerDocument,T=t?t.nodeType:9;if(r=r||[],"string"!=typeof e||!e||1!==T&&9!==T&&11!==T)return r;if(!i&&((t?t.ownerDocument||t:w)!==d&&p(t),t=t||d,g)){if(11!==T&&(f=J.exec(e)))if(o=f[1]){if(9===T){if(!(l=t.getElementById(o)))return r;if(l.id===o)return r.push(l),r}else if(m&&(l=m.getElementById(o))&&x(t,l)&&l.id===o)return r.push(l),r}else{if(f[2])return L.apply(r,t.getElementsByTagName(e)),r;if((o=f[3])&&n.getElementsByClassName&&t.getElementsByClassName)return L.apply(r,t.getElementsByClassName(o)),r}if(n.qsa&&!S[e+" "]&&(!y||!y.test(e))){if(1!==T)m=t,v=e;else if("object"!==t.nodeName.toLowerCase()){(c=t.getAttribute("id"))?c=c.replace(te,ne):t.setAttribute("id",c=b),s=(h=a(e)).length;while(s--)h[s]="#"+c+" "+ve(h[s]);v=h.join(","),m=K.test(e)&&ge(t.parentNode)||t}if(v)try{return L.apply(r,m.querySelectorAll(v)),r}catch(e){}finally{c===b&&t.removeAttribute("id")}}}return u(e.replace(B,"$1"),t,r,i)}function ae(){var e=[];function t(n,i){return e.push(n+" ")>r.cacheLength&&delete t[e.shift()],t[n+" "]=i}return t}function se(e){return e[b]=!0,e}function ue(e){var t=d.createElement("fieldset");try{return!!e(t)}catch(e){return!1}finally{t.parentNode&&t.parentNode.removeChild(t),t=null}}function le(e,t){var n=e.split("|"),i=n.length;while(i--)r.attrHandle[n[i]]=t}function ce(e,t){var n=t&&e,r=n&&1===e.nodeType&&1===t.nodeType&&e.sourceIndex-t.sourceIndex;if(r)return r;if(n)while(n=n.nextSibling)if(n===t)return-1;return e?1:-1}function fe(e){return function(t){return"input"===t.nodeName.toLowerCase()&&t.type===e}}function pe(e){return function(t){var n=t.nodeName.toLowerCase();return("input"===n||"button"===n)&&t.type===e}}function de(e){return function(t){return"form"in t?t.parentNode&&!1===t.disabled?"label"in t?"label"in t.parentNode?t.parentNode.disabled===e:t.disabled===e:t.isDisabled===e||t.isDisabled!==!e&&ie(t)===e:t.disabled===e:"label"in t&&t.disabled===e}}function he(e){return se(function(t){return t=+t,se(function(n,r){var i,o=e([],n.length,t),a=o.length;while(a--)n[i=o[a]]&&(n[i]=!(r[i]=n[i]))})})}function ge(e){return e&&"undefined"!=typeof e.getElementsByTagName&&e}n=oe.support={},o=oe.isXML=function(e){var t=e&&(e.ownerDocument||e).documentElement;return!!t&&"HTML"!==t.nodeName},p=oe.setDocument=function(e){var t,i,a=e?e.ownerDocument||e:w;return a!==d&&9===a.nodeType&&a.documentElement?(d=a,h=d.documentElement,g=!o(d),w!==d&&(i=d.defaultView)&&i.top!==i&&(i.addEventListener?i.addEventListener("unload",re,!1):i.attachEvent&&i.attachEvent("onunload",re)),n.attributes=ue(function(e){return e.className="i",!e.getAttribute("className")}),n.getElementsByTagName=ue(function(e){return e.appendChild(d.createComment("")),!e.getElementsByTagName("*").length}),n.getElementsByClassName=Q.test(d.getElementsByClassName),n.getById=ue(function(e){return h.appendChild(e).id=b,!d.getElementsByName||!d.getElementsByName(b).length}),n.getById?(r.filter.ID=function(e){var t=e.replace(Z,ee);return function(e){return e.getAttribute("id")===t}},r.find.ID=function(e,t){if("undefined"!=typeof t.getElementById&&g){var n=t.getElementById(e);return n?[n]:[]}}):(r.filter.ID=function(e){var t=e.replace(Z,ee);return function(e){var n="undefined"!=typeof e.getAttributeNode&&e.getAttributeNode("id");return n&&n.value===t}},r.find.ID=function(e,t){if("undefined"!=typeof t.getElementById&&g){var n,r,i,o=t.getElementById(e);if(o){if((n=o.getAttributeNode("id"))&&n.value===e)return[o];i=t.getElementsByName(e),r=0;while(o=i[r++])if((n=o.getAttributeNode("id"))&&n.value===e)return[o]}return[]}}),r.find.TAG=n.getElementsByTagName?function(e,t){return"undefined"!=typeof t.getElementsByTagName?t.getElementsByTagName(e):n.qsa?t.querySelectorAll(e):void 0}:function(e,t){var n,r=[],i=0,o=t.getElementsByTagName(e);if("*"===e){while(n=o[i++])1===n.nodeType&&r.push(n);return r}return o},r.find.CLASS=n.getElementsByClassName&&function(e,t){if("undefined"!=typeof t.getElementsByClassName&&g)return t.getElementsByClassName(e)},v=[],y=[],(n.qsa=Q.test(d.querySelectorAll))&&(ue(function(e){h.appendChild(e).innerHTML="<a id='"+b+"'><\/a><select id='"+b+"-\\r\\\\' msallowcapture=''><option selected=''><\/option><\/select>",e.querySelectorAll("[msallowcapture^='']").length&&y.push("[*^$]="+M+"*(?:''|\\"\\")"),e.querySelectorAll("[selected]").length||y.push("\\\\["+M+"*(?:value|"+P+")"),e.querySelectorAll("[id~="+b+"-]").length||y.push("~="),e.querySelectorAll(":checked").length||y.push(":checked"),e.querySelectorAll("a#"+b+"+*").length||y.push(".#.+[+~]")}),ue(function(e){e.innerHTML="<a href='' disabled='disabled'><\/a><select disabled='disabled'><option\/><\/select>";var t=d.createElement("input");t.setAttribute("type","hidden"),e.appendChild(t).setAttribute("name","D"),e.querySelectorAll("[name=d]").length&&y.push("name"+M+"*[*^$|!~]?="),2!==e.querySelectorAll(":enabled").length&&y.push(":enabled",":disabled"),h.appendChild(e).disabled=!0,2!==e.querySelectorAll(":disabled").length&&y.push(":enabled",":disabled"),e.querySelectorAll("*,:x"),y.push(",.*:")})),(n.matchesSelector=Q.test(m=h.matches||h.webkitMatchesSelector||h.mozMatchesSelector||h.oMatchesSelector||h.msMatchesSelector))&&ue(function(e){n.disconnectedMatch=m.call(e,"*"),m.call(e,"[s!='']:x"),v.push("!=",W)}),y=y.length&&new RegExp(y.join("|")),v=v.length&&new RegExp(v.join("|")),t=Q.test(h.compareDocumentPosition),x=t||Q.test(h.contains)?function(e,t){var n=9===e.nodeType?e.documentElement:e,r=t&&t.parentNode;return e===r||!(!r||1!==r.nodeType||!(n.contains?n.contains(r):e.compareDocumentPosition&&16&e.compareDocumentPosition(r)))}:function(e,t){if(t)while(t=t.parentNode)if(t===e)return!0;return!1},D=t?function(e,t){if(e===t)return f=!0,0;var r=!e.compareDocumentPosition-!t.compareDocumentPosition;return r||(1&(r=(e.ownerDocument||e)===(t.ownerDocument||t)?e.compareDocumentPosition(t):1)||!n.sortDetached&&t.compareDocumentPosition(e)===r?e===d||e.ownerDocument===w&&x(w,e)?-1:t===d||t.ownerDocument===w&&x(w,t)?1:c?O(c,e)-O(c,t):0:4&r?-1:1)}:function(e,t){if(e===t)return f=!0,0;var n,r=0,i=e.parentNode,o=t.parentNode,a=[e],s=[t];if(!i||!o)return e===d?-1:t===d?1:i?-1:o?1:c?O(c,e)-O(c,t):0;if(i===o)return ce(e,t);n=e;while(n=n.parentNode)a.unshift(n);n=t;while(n=n.parentNode)s.unshift(n);while(a[r]===s[r])r++;return r?ce(a[r],s[r]):a[r]===w?-1:s[r]===w?1:0},d):d},oe.matches=function(e,t){return oe(e,null,null,t)},oe.matchesSelector=function(e,t){if((e.ownerDocument||e)!==d&&p(e),t=t.replace(z,"='$1']"),n.matchesSelector&&g&&!S[t+" "]&&(!v||!v.test(t))&&(!y||!y.test(t)))try{var r=m.call(e,t);if(r||n.disconnectedMatch||e.document&&11!==e.document.nodeType)return r}catch(e){}return oe(t,d,null,[e]).length>0},oe.contains=function(e,t){return(e.ownerDocument||e)!==d&&p(e),x(e,t)},oe.attr=function(e,t){(e.ownerDocument||e)!==d&&p(e);var i=r.attrHandle[t.toLowerCase()],o=i&&N.call(r.attrHandle,t.toLowerCase())?i(e,t,!g):void 0;return void 0!==o?o:n.attributes||!g?e.getAttribute(t):(o=e.getAttributeNode(t))&&o.specified?o.value:null},oe.escape=function(e){return(e+"").replace(te,ne)},oe.error=function(e){throw new Error("Syntax error, unrecognized expression: "+e)},oe.uniqueSort=function(e){var t,r=[],i=0,o=0;if(f=!n.detectDuplicates,c=!n.sortStable&&e.slice(0),e.sort(D),f){while(t=e[o++])t===e[o]&&(i=r.push(o));while(i--)e.splice(r[i],1)}return c=null,e},i=oe.getText=function(e){var t,n="",r=0,o=e.nodeType;if(o){if(1===o||9===o||11===o){if("string"==typeof e.textContent)return e.textContent;for(e=e.firstChild;e;e=e.nextSibling)n+=i(e)}else if(3===o||4===o)return e.nodeValue}else while(t=e[r++])n+=i(t);return n},(r=oe.selectors={cacheLength:50,createPseudo:se,match:V,attrHandle:{},find:{},relative:{">":{dir:"parentNode",first:!0}," ":{dir:"parentNode"},"+":{dir:"previousSibling",first:!0},"~":{dir:"previousSibling"}},preFilter:{ATTR:function(e){return e[1]=e[1].replace(Z,ee),e[3]=(e[3]||e[4]||e[5]||"").replace(Z,ee),"~="===e[2]&&(e[3]=" "+e[3]+" "),e.slice(0,4)},CHILD:function(e){return e[1]=e[1].toLowerCase(),"nth"===e[1].slice(0,3)?(e[3]||oe.error(e[0]),e[4]=+(e[4]?e[5]+(e[6]||1):2*("even"===e[3]||"odd"===e[3])),e[5]=+(e[7]+e[8]||"odd"===e[3])):e[3]&&oe.error(e[0]),e},PSEUDO:function(e){var t,n=!e[6]&&e[2];return V.CHILD.test(e[0])?null:(e[3]?e[2]=e[4]||e[5]||"":n&&X.test(n)&&(t=a(n,!0))&&(t=n.indexOf(")",n.length-t)-n.length)&&(e[0]=e[0].slice(0,t),e[2]=n.slice(0,t)),e.slice(0,3))}},filter:{TAG:function(e){var t=e.replace(Z,ee).toLowerCase();return"*"===e?function(){return!0}:function(e){return e.nodeName&&e.nodeName.toLowerCase()===t}},CLASS:function(e){var t=E[e+" "];return t||(t=new RegExp("(^|"+M+")"+e+"("+M+"|$)"))&&E(e,function(e){return t.test("string"==typeof e.className&&e.className||"undefined"!=typeof e.getAttribute&&e.getAttribute("class")||"")})},ATTR:function(e,t,n){return function(r){var i=oe.attr(r,e);return null==i?"!="===t:!t||(i+="","="===t?i===n:"!="===t?i!==n:"^="===t?n&&0===i.indexOf(n):"*="===t?n&&i.indexOf(n)>-1:"$="===t?n&&i.slice(-n.length)===n:"~="===t?(" "+i.replace($," ")+" ").indexOf(n)>-1:"|="===t&&(i===n||i.slice(0,n.length+1)===n+"-"))}},CHILD:function(e,t,n,r,i){var o="nth"!==e.slice(0,3),a="last"!==e.slice(-4),s="of-type"===t;return 1===r&&0===i?function(e){return!!e.parentNode}:function(t,n,u){var l,c,f,p,d,h,g=o!==a?"nextSibling":"previousSibling",y=t.parentNode,v=s&&t.nodeName.toLowerCase(),m=!u&&!s,x=!1;if(y){if(o){while(g){p=t;while(p=p[g])if(s?p.nodeName.toLowerCase()===v:1===p.nodeType)return!1;h=g="only"===e&&!h&&"nextSibling"}return!0}if(h=[a?y.firstChild:y.lastChild],a&&m){x=(d=(l=(c=(f=(p=y)[b]||(p[b]={}))[p.uniqueID]||(f[p.uniqueID]={}))[e]||[])[0]===T&&l[1])&&l[2],p=d&&y.childNodes[d];while(p=++d&&p&&p[g]||(x=d=0)||h.pop())if(1===p.nodeType&&++x&&p===t){c[e]=[T,d,x];break}}else if(m&&(x=d=(l=(c=(f=(p=t)[b]||(p[b]={}))[p.uniqueID]||(f[p.uniqueID]={}))[e]||[])[0]===T&&l[1]),!1===x)while(p=++d&&p&&p[g]||(x=d=0)||h.pop())if((s?p.nodeName.toLowerCase()===v:1===p.nodeType)&&++x&&(m&&((c=(f=p[b]||(p[b]={}))[p.uniqueID]||(f[p.uniqueID]={}))[e]=[T,x]),p===t))break;return(x-=i)===r||x%r==0&&x\/r>=0}}},PSEUDO:function(e,t){var n,i=r.pseudos[e]||r.setFilters[e.toLowerCase()]||oe.error("unsupported pseudo: "+e);return i[b]?i(t):i.length>1?(n=[e,e,"",t],r.setFilters.hasOwnProperty(e.toLowerCase())?se(function(e,n){var r,o=i(e,t),a=o.length;while(a--)e[r=O(e,o[a])]=!(n[r]=o[a])}):function(e){return i(e,0,n)}):i}},pseudos:{not:se(function(e){var t=[],n=[],r=s(e.replace(B,"$1"));return r[b]?se(function(e,t,n,i){var o,a=r(e,null,i,[]),s=e.length;while(s--)(o=a[s])&&(e[s]=!(t[s]=o))}):function(e,i,o){return t[0]=e,r(t,null,o,n),t[0]=null,!n.pop()}}),has:se(function(e){return function(t){return oe(e,t).length>0}}),contains:se(function(e){return e=e.replace(Z,ee),function(t){return(t.textContent||t.innerText||i(t)).indexOf(e)>-1}}),lang:se(function(e){return U.test(e||"")||oe.error("unsupported lang: "+e),e=e.replace(Z,ee).toLowerCase(),function(t){var n;do{if(n=g?t.lang:t.getAttribute("xml:lang")||t.getAttribute("lang"))return(n=n.toLowerCase())===e||0===n.indexOf(e+"-")}while((t=t.parentNode)&&1===t.nodeType);return!1}}),target:function(t){var n=e.location&&e.location.hash;return n&&n.slice(1)===t.id},root:function(e){return e===h},focus:function(e){return e===d.activeElement&&(!d.hasFocus||d.hasFocus())&&!!(e.type||e.href||~e.tabIndex)},enabled:de(!1),disabled:de(!0),checked:function(e){var t=e.nodeName.toLowerCase();return"input"===t&&!!e.checked||"option"===t&&!!e.selected},selected:function(e){return e.parentNode&&e.parentNode.selectedIndex,!0===e.selected},empty:function(e){for(e=e.firstChild;e;e=e.nextSibling)if(e.nodeType<6)return!1;return!0},parent:function(e){return!r.pseudos.empty(e)},header:function(e){return Y.test(e.nodeName)},input:function(e){return G.test(e.nodeName)},button:function(e){var t=e.nodeName.toLowerCase();return"input"===t&&"button"===e.type||"button"===t},text:function(e){var t;return"input"===e.nodeName.toLowerCase()&&"text"===e.type&&(null==(t=e.getAttribute("type"))||"text"===t.toLowerCase())},first:he(function(){return[0]}),last:he(function(e,t){return[t-1]}),eq:he(function(e,t,n){return[n<0?n+t:n]}),even:he(function(e,t){for(var n=0;n<t;n+=2)e.push(n);return e}),odd:he(function(e,t){for(var n=1;n<t;n+=2)e.push(n);return e}),lt:he(function(e,t,n){for(var r=n<0?n+t:n;--r>=0;)e.push(r);return e}),gt:he(function(e,t,n){for(var r=n<0?n+t:n;++r<t;)e.push(r);return e})}}).pseudos.nth=r.pseudos.eq;for(t in{radio:!0,checkbox:!0,file:!0,password:!0,image:!0})r.pseudos[t]=fe(t);for(t in{submit:!0,reset:!0})r.pseudos[t]=pe(t);function ye(){}ye.prototype=r.filters=r.pseudos,r.setFilters=new ye,a=oe.tokenize=function(e,t){var n,i,o,a,s,u,l,c=k[e+" "];if(c)return t?0:c.slice(0);s=e,u=[],l=r.preFilter;while(s){n&&!(i=F.exec(s))||(i&&(s=s.slice(i[0].length)||s),u.push(o=[])),n=!1,(i=_.exec(s))&&(n=i.shift(),o.push({value:n,type:i[0].replace(B," ")}),s=s.slice(n.length));for(a in r.filter)!(i=V[a].exec(s))||l[a]&&!(i=l[a](i))||(n=i.shift(),o.push({value:n,type:a,matches:i}),s=s.slice(n.length));if(!n)break}return t?s.length:s?oe.error(e):k(e,u).slice(0)};function ve(e){for(var t=0,n=e.length,r="";t<n;t++)r+=e[t].value;return r}function me(e,t,n){var r=t.dir,i=t.next,o=i||r,a=n&&"parentNode"===o,s=C++;return t.first?function(t,n,i){while(t=t[r])if(1===t.nodeType||a)return e(t,n,i);return!1}:function(t,n,u){var l,c,f,p=[T,s];if(u){while(t=t[r])if((1===t.nodeType||a)&&e(t,n,u))return!0}else while(t=t[r])if(1===t.nodeType||a)if(f=t[b]||(t[b]={}),c=f[t.uniqueID]||(f[t.uniqueID]={}),i&&i===t.nodeName.toLowerCase())t=t[r]||t;else{if((l=c[o])&&l[0]===T&&l[1]===s)return p[2]=l[2];if(c[o]=p,p[2]=e(t,n,u))return!0}return!1}}function xe(e){return e.length>1?function(t,n,r){var i=e.length;while(i--)if(!e[i](t,n,r))return!1;return!0}:e[0]}function be(e,t,n){for(var r=0,i=t.length;r<i;r++)oe(e,t[r],n);return n}function we(e,t,n,r,i){for(var o,a=[],s=0,u=e.length,l=null!=t;s<u;s++)(o=e[s])&&(n&&!n(o,r,i)||(a.push(o),l&&t.push(s)));return a}function Te(e,t,n,r,i,o){return r&&!r[b]&&(r=Te(r)),i&&!i[b]&&(i=Te(i,o)),se(function(o,a,s,u){var l,c,f,p=[],d=[],h=a.length,g=o||be(t||"*",s.nodeType?[s]:s,[]),y=!e||!o&&t?g:we(g,p,e,s,u),v=n?i||(o?e:h||r)?[]:a:y;if(n&&n(y,v,s,u),r){l=we(v,d),r(l,[],s,u),c=l.length;while(c--)(f=l[c])&&(v[d[c]]=!(y[d[c]]=f))}if(o){if(i||e){if(i){l=[],c=v.length;while(c--)(f=v[c])&&l.push(y[c]=f);i(null,v=[],l,u)}c=v.length;while(c--)(f=v[c])&&(l=i?O(o,f):p[c])>-1&&(o[l]=!(a[l]=f))}}else v=we(v===a?v.splice(h,v.length):v),i?i(null,a,v,u):L.apply(a,v)})}function Ce(e){for(var t,n,i,o=e.length,a=r.relative[e[0].type],s=a||r.relative[" "],u=a?1:0,c=me(function(e){return e===t},s,!0),f=me(function(e){return O(t,e)>-1},s,!0),p=[function(e,n,r){var i=!a&&(r||n!==l)||((t=n).nodeType?c(e,n,r):f(e,n,r));return t=null,i}];u<o;u++)if(n=r.relative[e[u].type])p=[me(xe(p),n)];else{if((n=r.filter[e[u].type].apply(null,e[u].matches))[b]){for(i=++u;i<o;i++)if(r.relative[e[i].type])break;return Te(u>1&&xe(p),u>1&&ve(e.slice(0,u-1).concat({value:" "===e[u-2].type?"*":""})).replace(B,"$1"),n,u<i&&Ce(e.slice(u,i)),i<o&&Ce(e=e.slice(i)),i<o&&ve(e))}p.push(n)}return xe(p)}function Ee(e,t){var n=t.length>0,i=e.length>0,o=function(o,a,s,u,c){var f,h,y,v=0,m="0",x=o&&[],b=[],w=l,C=o||i&&r.find.TAG("*",c),E=T+=null==w?1:Math.random()||.1,k=C.length;for(c&&(l=a===d||a||c);m!==k&&null!=(f=C[m]);m++){if(i&&f){h=0,a||f.ownerDocument===d||(p(f),s=!g);while(y=e[h++])if(y(f,a||d,s)){u.push(f);break}c&&(T=E)}n&&((f=!y&&f)&&v--,o&&x.push(f))}if(v+=m,n&&m!==v){h=0;while(y=t[h++])y(x,b,a,s);if(o){if(v>0)while(m--)x[m]||b[m]||(b[m]=j.call(u));b=we(b)}L.apply(u,b),c&&!o&&b.length>0&&v+t.length>1&&oe.uniqueSort(u)}return c&&(T=E,l=w),x};return n?se(o):o}return s=oe.compile=function(e,t){var n,r=[],i=[],o=S[e+" "];if(!o){t||(t=a(e)),n=t.length;while(n--)(o=Ce(t[n]))[b]?r.push(o):i.push(o);(o=S(e,Ee(i,r))).selector=e}return o},u=oe.select=function(e,t,n,i){var o,u,l,c,f,p="function"==typeof e&&e,d=!i&&a(e=p.selector||e);if(n=n||[],1===d.length){if((u=d[0]=d[0].slice(0)).length>2&&"ID"===(l=u[0]).type&&9===t.nodeType&&g&&r.relative[u[1].type]){if(!(t=(r.find.ID(l.matches[0].replace(Z,ee),t)||[])[0]))return n;p&&(t=t.parentNode),e=e.slice(u.shift().value.length)}o=V.needsContext.test(e)?0:u.length;while(o--){if(l=u[o],r.relative[c=l.type])break;if((f=r.find[c])&&(i=f(l.matches[0].replace(Z,ee),K.test(u[0].type)&&ge(t.parentNode)||t))){if(u.splice(o,1),!(e=i.length&&ve(u)))return L.apply(n,i),n;break}}}return(p||s(e,d))(i,t,!g,n,!t||K.test(e)&&ge(t.parentNode)||t),n},n.sortStable=b.split("").sort(D).join("")===b,n.detectDuplicates=!!f,p(),n.sortDetached=ue(function(e){return 1&e.compareDocumentPosition(d.createElement("fieldset"))}),ue(function(e){return e.innerHTML="<a href='#'><\/a>","#"===e.firstChild.getAttribute("href")})||le("type|href|height|width",function(e,t,n){if(!n)return e.getAttribute(t,"type"===t.toLowerCase()?1:2)}),n.attributes&&ue(function(e){return e.innerHTML="<input\/>",e.firstChild.setAttribute("value",""),""===e.firstChild.getAttribute("value")})||le("value",function(e,t,n){if(!n&&"input"===e.nodeName.toLowerCase())return e.defaultValue}),ue(function(e){return null==e.getAttribute("disabled")})||le(P,function(e,t,n){var r;if(!n)return!0===e[t]?t.toLowerCase():(r=e.getAttributeNode(t))&&r.specified?r.value:null}),oe}(e);w.find=E,w.expr=E.selectors,w.expr[":"]=w.expr.pseudos,w.uniqueSort=w.unique=E.uniqueSort,w.text=E.getText,w.isXMLDoc=E.isXML,w.contains=E.contains,w.escapeSelector=E.escape;var k=function(e,t,n){var r=[],i=void 0!==n;while((e=e[t])&&9!==e.nodeType)if(1===e.nodeType){if(i&&w(e).is(n))break;r.push(e)}return r},S=function(e,t){for(var n=[];e;e=e.nextSibling)1===e.nodeType&&e!==t&&n.push(e);return n},D=w.expr.match.needsContext;function N(e,t){return e.nodeName&&e.nodeName.toLowerCase()===t.toLowerCase()}var A=\/^<([a-z][^\\\/\\0>:\\x20\\t\\r\\n\\f]*)[\\x20\\t\\r\\n\\f]*\\\/?>(?:<\\\/\\1>|)$\/i;function j(e,t,n){return g(t)?w.grep(e,function(e,r){return!!t.call(e,r,e)!==n}):t.nodeType?w.grep(e,function(e){return e===t!==n}):"string"!=typeof t?w.grep(e,function(e){return u.call(t,e)>-1!==n}):w.filter(t,e,n)}w.filter=function(e,t,n){var r=t[0];return n&&(e=":not("+e+")"),1===t.length&&1===r.nodeType?w.find.matchesSelector(r,e)?[r]:[]:w.find.matches(e,w.grep(t,function(e){return 1===e.nodeType}))},w.fn.extend({find:function(e){var t,n,r=this.length,i=this;if("string"!=typeof e)return this.pushStack(w(e).filter(function(){for(t=0;t<r;t++)if(w.contains(i[t],this))return!0}));for(n=this.pushStack([]),t=0;t<r;t++)w.find(e,i[t],n);return r>1?w.uniqueSort(n):n},filter:function(e){return this.pushStack(j(this,e||[],!1))},not:function(e){return this.pushStack(j(this,e||[],!0))},is:function(e){return!!j(this,"string"==typeof e&&D.test(e)?w(e):e||[],!1).length}});var q,L=\/^(?:\\s*(<[\\w\\W]+>)[^>]*|#([\\w-]+))$\/;(w.fn.init=function(e,t,n){var i,o;if(!e)return this;if(n=n||q,"string"==typeof e){if(!(i="<"===e[0]&&">"===e[e.length-1]&&e.length>=3?[null,e,null]:L.exec(e))||!i[1]&&t)return!t||t.jquery?(t||n).find(e):this.constructor(t).find(e);if(i[1]){if(t=t instanceof w?t[0]:t,w.merge(this,w.parseHTML(i[1],t&&t.nodeType?t.ownerDocument||t:r,!0)),A.test(i[1])&&w.isPlainObject(t))for(i in t)g(this[i])?this[i](t[i]):this.attr(i,t[i]);return this}return(o=r.getElementById(i[2]))&&(this[0]=o,this.length=1),this}return e.nodeType?(this[0]=e,this.length=1,this):g(e)?void 0!==n.ready?n.ready(e):e(w):w.makeArray(e,this)}).prototype=w.fn,q=w(r);var H=\/^(?:parents|prev(?:Until|All))\/,O={children:!0,contents:!0,next:!0,prev:!0};w.fn.extend({has:function(e){var t=w(e,this),n=t.length;return this.filter(function(){for(var e=0;e<n;e++)if(w.contains(this,t[e]))return!0})},closest:function(e,t){var n,r=0,i=this.length,o=[],a="string"!=typeof e&&w(e);if(!D.test(e))for(;r<i;r++)for(n=this[r];n&&n!==t;n=n.parentNode)if(n.nodeType<11&&(a?a.index(n)>-1:1===n.nodeType&&w.find.matchesSelector(n,e))){o.push(n);break}return this.pushStack(o.length>1?w.uniqueSort(o):o)},index:function(e){return e?"string"==typeof e?u.call(w(e),this[0]):u.call(this,e.jquery?e[0]:e):this[0]&&this[0].parentNode?this.first().prevAll().length:-1},add:function(e,t){return this.pushStack(w.uniqueSort(w.merge(this.get(),w(e,t))))},addBack:function(e){return this.add(null==e?this.prevObject:this.prevObject.filter(e))}});function P(e,t){while((e=e[t])&&1!==e.nodeType);return e}w.each({parent:function(e){var t=e.parentNode;return t&&11!==t.nodeType?t:null},parents:function(e){return k(e,"parentNode")},parentsUntil:function(e,t,n){return k(e,"parentNode",n)},next:function(e){return P(e,"nextSibling")},prev:function(e){return P(e,"previousSibling")},nextAll:function(e){return k(e,"nextSibling")},prevAll:function(e){return k(e,"previousSibling")},nextUntil:function(e,t,n){return k(e,"nextSibling",n)},prevUntil:function(e,t,n){return k(e,"previousSibling",n)},siblings:function(e){return S((e.parentNode||{}).firstChild,e)},children:function(e){return S(e.firstChild)},contents:function(e){return N(e,"iframe")?e.contentDocument:(N(e,"template")&&(e=e.content||e),w.merge([],e.childNodes))}},function(e,t){w.fn[e]=function(n,r){var i=w.map(this,t,n);return"Until"!==e.slice(-5)&&(r=n),r&&"string"==typeof r&&(i=w.filter(r,i)),this.length>1&&(O[e]||w.uniqueSort(i),H.test(e)&&i.reverse()),this.pushStack(i)}});var M=\/[^\\x20\\t\\r\\n\\f]+\/g;function R(e){var t={};return w.each(e.match(M)||[],function(e,n){t[n]=!0}),t}w.Callbacks=function(e){e="string"==typeof e?R(e):w.extend({},e);var t,n,r,i,o=[],a=[],s=-1,u=function(){for(i=i||e.once,r=t=!0;a.length;s=-1){n=a.shift();while(++s<o.length)!1===o[s].apply(n[0],n[1])&&e.stopOnFalse&&(s=o.length,n=!1)}e.memory||(n=!1),t=!1,i&&(o=n?[]:"")},l={add:function(){return o&&(n&&!t&&(s=o.length-1,a.push(n)),function t(n){w.each(n,function(n,r){g(r)?e.unique&&l.has(r)||o.push(r):r&&r.length&&"string"!==x(r)&&t(r)})}(arguments),n&&!t&&u()),this},remove:function(){return w.each(arguments,function(e,t){var n;while((n=w.inArray(t,o,n))>-1)o.splice(n,1),n<=s&&s--}),this},has:function(e){return e?w.inArray(e,o)>-1:o.length>0},empty:function(){return o&&(o=[]),this},disable:function(){return i=a=[],o=n="",this},disabled:function(){return!o},lock:function(){return i=a=[],n||t||(o=n=""),this},locked:function(){return!!i},fireWith:function(e,n){return i||(n=[e,(n=n||[]).slice?n.slice():n],a.push(n),t||u()),this},fire:function(){return l.fireWith(this,arguments),this},fired:function(){return!!r}};return l};function I(e){return e}function W(e){throw e}function $(e,t,n,r){var i;try{e&&g(i=e.promise)?i.call(e).done(t).fail(n):e&&g(i=e.then)?i.call(e,t,n):t.apply(void 0,[e].slice(r))}catch(e){n.apply(void 0,[e])}}w.extend({Deferred:function(t){var n=[["notify","progress",w.Callbacks("memory"),w.Callbacks("memory"),2],["resolve","done",w.Callbacks("once memory"),w.Callbacks("once memory"),0,"resolved"],["reject","fail",w.Callbacks("once memory"),w.Callbacks("once memory"),1,"rejected"]],r="pending",i={state:function(){return r},always:function(){return o.done(arguments).fail(arguments),this},"catch":function(e){return i.then(null,e)},pipe:function(){var e=arguments;return w.Deferred(function(t){w.each(n,function(n,r){var i=g(e[r[4]])&&e[r[4]];o[r[1]](function(){var e=i&&i.apply(this,arguments);e&&g(e.promise)?e.promise().progress(t.notify).done(t.resolve).fail(t.reject):t[r[0]+"With"](this,i?[e]:arguments)})}),e=null}).promise()},then:function(t,r,i){var o=0;function a(t,n,r,i){return function(){var s=this,u=arguments,l=function(){var e,l;if(!(t<o)){if((e=r.apply(s,u))===n.promise())throw new TypeError("Thenable self-resolution");l=e&&("object"==typeof e||"function"==typeof e)&&e.then,g(l)?i?l.call(e,a(o,n,I,i),a(o,n,W,i)):(o++,l.call(e,a(o,n,I,i),a(o,n,W,i),a(o,n,I,n.notifyWith))):(r!==I&&(s=void 0,u=[e]),(i||n.resolveWith)(s,u))}},c=i?l:function(){try{l()}catch(e){w.Deferred.exceptionHook&&w.Deferred.exceptionHook(e,c.stackTrace),t+1>=o&&(r!==W&&(s=void 0,u=[e]),n.rejectWith(s,u))}};t?c():(w.Deferred.getStackHook&&(c.stackTrace=w.Deferred.getStackHook()),e.setTimeout(c))}}return w.Deferred(function(e){n[0][3].add(a(0,e,g(i)?i:I,e.notifyWith)),n[1][3].add(a(0,e,g(t)?t:I)),n[2][3].add(a(0,e,g(r)?r:W))}).promise()},promise:function(e){return null!=e?w.extend(e,i):i}},o={};return w.each(n,function(e,t){var a=t[2],s=t[5];i[t[1]]=a.add,s&&a.add(function(){r=s},n[3-e][2].disable,n[3-e][3].disable,n[0][2].lock,n[0][3].lock),a.add(t[3].fire),o[t[0]]=function(){return o[t[0]+"With"](this===o?void 0:this,arguments),this},o[t[0]+"With"]=a.fireWith}),i.promise(o),t&&t.call(o,o),o},when:function(e){var t=arguments.length,n=t,r=Array(n),i=o.call(arguments),a=w.Deferred(),s=function(e){return function(n){r[e]=this,i[e]=arguments.length>1?o.call(arguments):n,--t||a.resolveWith(r,i)}};if(t<=1&&($(e,a.done(s(n)).resolve,a.reject,!t),"pending"===a.state()||g(i[n]&&i[n].then)))return a.then();while(n--)$(i[n],s(n),a.reject);return a.promise()}});var B=\/^(Eval|Internal|Range|Reference|Syntax|Type|URI)Error$\/;w.Deferred.exceptionHook=function(t,n){e.console&&e.console.warn&&t&&B.test(t.name)&&e.console.warn("jQuery.Deferred exception: "+t.message,t.stack,n)},w.readyException=function(t){e.setTimeout(function(){throw t})};var F=w.Deferred();w.fn.ready=function(e){return F.then(e)["catch"](function(e){w.readyException(e)}),this},w.extend({isReady:!1,readyWait:1,ready:function(e){(!0===e?--w.readyWait:w.isReady)||(w.isReady=!0,!0!==e&&--w.readyWait>0||F.resolveWith(r,[w]))}}),w.ready.then=F.then;function _(){r.removeEventListener("DOMContentLoaded",_),e.removeEventListener("load",_),w.ready()}"complete"===r.readyState||"loading"!==r.readyState&&!r.documentElement.doScroll?e.setTimeout(w.ready):(r.addEventListener("DOMContentLoaded",_),e.addEventListener("load",_));var z=function(e,t,n,r,i,o,a){var s=0,u=e.length,l=null==n;if("object"===x(n)){i=!0;for(s in n)z(e,t,s,n[s],!0,o,a)}else if(void 0!==r&&(i=!0,g(r)||(a=!0),l&&(a?(t.call(e,r),t=null):(l=t,t=function(e,t,n){return l.call(w(e),n)})),t))for(;s<u;s++)t(e[s],n,a?r:r.call(e[s],s,t(e[s],n)));return i?e:l?t.call(e):u?t(e[0],n):o},X=\/^-ms-\/,U=\/-([a-z])\/g;function V(e,t){return t.toUpperCase()}function G(e){return e.replace(X,"ms-").replace(U,V)}var Y=function(e){return 1===e.nodeType||9===e.nodeType||!+e.nodeType};function Q(){this.expando=w.expando+Q.uid++}Q.uid=1,Q.prototype={cache:function(e){var t=e[this.expando];return t||(t={},Y(e)&&(e.nodeType?e[this.expando]=t:Object.defineProperty(e,this.expando,{value:t,configurable:!0}))),t},set:function(e,t,n){var r,i=this.cache(e);if("string"==typeof t)i[G(t)]=n;else for(r in t)i[G(r)]=t[r];return i},get:function(e,t){return void 0===t?this.cache(e):e[this.expando]&&e[this.expando][G(t)]},access:function(e,t,n){return void 0===t||t&&"string"==typeof t&&void 0===n?this.get(e,t):(this.set(e,t,n),void 0!==n?n:t)},remove:function(e,t){var n,r=e[this.expando];if(void 0!==r){if(void 0!==t){n=(t=Array.isArray(t)?t.map(G):(t=G(t))in r?[t]:t.match(M)||[]).length;while(n--)delete r[t[n]]}(void 0===t||w.isEmptyObject(r))&&(e.nodeType?e[this.expando]=void 0:delete e[this.expando])}},hasData:function(e){var t=e[this.expando];return void 0!==t&&!w.isEmptyObject(t)}};var J=new Q,K=new Q,Z=\/^(?:\\{[\\w\\W]*\\}|\\[[\\w\\W]*\\])$\/,ee=\/[A-Z]\/g;function te(e){return"true"===e||"false"!==e&&("null"===e?null:e===+e+""?+e:Z.test(e)?JSON.parse(e):e)}function ne(e,t,n){var r;if(void 0===n&&1===e.nodeType)if(r="data-"+t.replace(ee,"-$&").toLowerCase(),"string"==typeof(n=e.getAttribute(r))){try{n=te(n)}catch(e){}K.set(e,t,n)}else n=void 0;return n}w.extend({hasData:function(e){return K.hasData(e)||J.hasData(e)},data:function(e,t,n){return K.access(e,t,n)},removeData:function(e,t){K.remove(e,t)},_data:function(e,t,n){return J.access(e,t,n)},_removeData:function(e,t){J.remove(e,t)}}),w.fn.extend({data:function(e,t){var n,r,i,o=this[0],a=o&&o.attributes;if(void 0===e){if(this.length&&(i=K.get(o),1===o.nodeType&&!J.get(o,"hasDataAttrs"))){n=a.length;while(n--)a[n]&&0===(r=a[n].name).indexOf("data-")&&(r=G(r.slice(5)),ne(o,r,i[r]));J.set(o,"hasDataAttrs",!0)}return i}return"object"==typeof e?this.each(function(){K.set(this,e)}):z(this,function(t){var n;if(o&&void 0===t){if(void 0!==(n=K.get(o,e)))return n;if(void 0!==(n=ne(o,e)))return n}else this.each(function(){K.set(this,e,t)})},null,t,arguments.length>1,null,!0)},removeData:function(e){return this.each(function(){K.remove(this,e)})}}),w.extend({queue:function(e,t,n){var r;if(e)return t=(t||"fx")+"queue",r=J.get(e,t),n&&(!r||Array.isArray(n)?r=J.access(e,t,w.makeArray(n)):r.push(n)),r||[]},dequeue:function(e,t){t=t||"fx";var n=w.queue(e,t),r=n.length,i=n.shift(),o=w._queueHooks(e,t),a=function(){w.dequeue(e,t)};"inprogress"===i&&(i=n.shift(),r--),i&&("fx"===t&&n.unshift("inprogress"),delete o.stop,i.call(e,a,o)),!r&&o&&o.empty.fire()},_queueHooks:function(e,t){var n=t+"queueHooks";return J.get(e,n)||J.access(e,n,{empty:w.Callbacks("once memory").add(function(){J.remove(e,[t+"queue",n])})})}}),w.fn.extend({queue:function(e,t){var n=2;return"string"!=typeof e&&(t=e,e="fx",n--),arguments.length<n?w.queue(this[0],e):void 0===t?this:this.each(function(){var n=w.queue(this,e,t);w._queueHooks(this,e),"fx"===e&&"inprogress"!==n[0]&&w.dequeue(this,e)})},dequeue:function(e){return this.each(function(){w.dequeue(this,e)})},clearQueue:function(e){return this.queue(e||"fx",[])},promise:function(e,t){var n,r=1,i=w.Deferred(),o=this,a=this.length,s=function(){--r||i.resolveWith(o,[o])};"string"!=typeof e&&(t=e,e=void 0),e=e||"fx";while(a--)(n=J.get(o[a],e+"queueHooks"))&&n.empty&&(r++,n.empty.add(s));return s(),i.promise(t)}});var re=\/[+-]?(?:\\d*\\.|)\\d+(?:[eE][+-]?\\d+|)\/.source,ie=new RegExp("^(?:([+-])=|)("+re+")([a-z%]*)$","i"),oe=["Top","Right","Bottom","Left"],ae=function(e,t){return"none"===(e=t||e).style.display||""===e.style.display&&w.contains(e.ownerDocument,e)&&"none"===w.css(e,"display")},se=function(e,t,n,r){var i,o,a={};for(o in t)a[o]=e.style[o],e.style[o]=t[o];i=n.apply(e,r||[]);for(o in t)e.style[o]=a[o];return i};function ue(e,t,n,r){var i,o,a=20,s=r?function(){return r.cur()}:function(){return w.css(e,t,"")},u=s(),l=n&&n[3]||(w.cssNumber[t]?"":"px"),c=(w.cssNumber[t]||"px"!==l&&+u)&&ie.exec(w.css(e,t));if(c&&c[3]!==l){u\/=2,l=l||c[3],c=+u||1;while(a--)w.style(e,t,c+l),(1-o)*(1-(o=s()\/u||.5))<=0&&(a=0),c\/=o;c*=2,w.style(e,t,c+l),n=n||[]}return n&&(c=+c||+u||0,i=n[1]?c+(n[1]+1)*n[2]:+n[2],r&&(r.unit=l,r.start=c,r.end=i)),i}var le={};function ce(e){var t,n=e.ownerDocument,r=e.nodeName,i=le[r];return i||(t=n.body.appendChild(n.createElement(r)),i=w.css(t,"display"),t.parentNode.removeChild(t),"none"===i&&(i="block"),le[r]=i,i)}function fe(e,t){for(var n,r,i=[],o=0,a=e.length;o<a;o++)(r=e[o]).style&&(n=r.style.display,t?("none"===n&&(i[o]=J.get(r,"display")||null,i[o]||(r.style.display="")),""===r.style.display&&ae(r)&&(i[o]=ce(r))):"none"!==n&&(i[o]="none",J.set(r,"display",n)));for(o=0;o<a;o++)null!=i[o]&&(e[o].style.display=i[o]);return e}w.fn.extend({show:function(){return fe(this,!0)},hide:function(){return fe(this)},toggle:function(e){return"boolean"==typeof e?e?this.show():this.hide():this.each(function(){ae(this)?w(this).show():w(this).hide()})}});var pe=\/^(?:checkbox|radio)$\/i,de=\/<([a-z][^\\\/\\0>\\x20\\t\\r\\n\\f]+)\/i,he=\/^$|^module$|\\\/(?:java|ecma)script\/i,ge={option:[1,"<select multiple='multiple'>","<\/select>"],thead:[1,"<table>","<\/table>"],col:[2,"<table><colgroup>","<\/colgroup><\/table>"],tr:[2,"<table><tbody>","<\/tbody><\/table>"],td:[3,"<table><tbody><tr>","<\/tr><\/tbody><\/table>"],_default:[0,"",""]};ge.optgroup=ge.option,ge.tbody=ge.tfoot=ge.colgroup=ge.caption=ge.thead,ge.th=ge.td;function ye(e,t){var n;return n="undefined"!=typeof e.getElementsByTagName?e.getElementsByTagName(t||"*"):"undefined"!=typeof e.querySelectorAll?e.querySelectorAll(t||"*"):[],void 0===t||t&&N(e,t)?w.merge([e],n):n}function ve(e,t){for(var n=0,r=e.length;n<r;n++)J.set(e[n],"globalEval",!t||J.get(t[n],"globalEval"))}var me=\/<|&#?\\w+;\/;function xe(e,t,n,r,i){for(var o,a,s,u,l,c,f=t.createDocumentFragment(),p=[],d=0,h=e.length;d<h;d++)if((o=e[d])||0===o)if("object"===x(o))w.merge(p,o.nodeType?[o]:o);else if(me.test(o)){a=a||f.appendChild(t.createElement("div")),s=(de.exec(o)||["",""])[1].toLowerCase(),u=ge[s]||ge._default,a.innerHTML=u[1]+w.htmlPrefilter(o)+u[2],c=u[0];while(c--)a=a.lastChild;w.merge(p,a.childNodes),(a=f.firstChild).textContent=""}else p.push(t.createTextNode(o));f.textContent="",d=0;while(o=p[d++])if(r&&w.inArray(o,r)>-1)i&&i.push(o);else if(l=w.contains(o.ownerDocument,o),a=ye(f.appendChild(o),"script"),l&&ve(a),n){c=0;while(o=a[c++])he.test(o.type||"")&&n.push(o)}return f}!function(){var e=r.createDocumentFragment().appendChild(r.createElement("div")),t=r.createElement("input");t.setAttribute("type","radio"),t.setAttribute("checked","checked"),t.setAttribute("name","t"),e.appendChild(t),h.checkClone=e.cloneNode(!0).cloneNode(!0).lastChild.checked,e.innerHTML="<textarea>x<\/textarea>",h.noCloneChecked=!!e.cloneNode(!0).lastChild.defaultValue}();var be=r.documentElement,we=\/^key\/,Te=\/^(?:mouse|pointer|contextmenu|drag|drop)|click\/,Ce=\/^([^.]*)(?:\\.(.+)|)\/;function Ee(){return!0}function ke(){return!1}function Se(){try{return r.activeElement}catch(e){}}function De(e,t,n,r,i,o){var a,s;if("object"==typeof t){"string"!=typeof n&&(r=r||n,n=void 0);for(s in t)De(e,s,n,r,t[s],o);return e}if(null==r&&null==i?(i=n,r=n=void 0):null==i&&("string"==typeof n?(i=r,r=void 0):(i=r,r=n,n=void 0)),!1===i)i=ke;else if(!i)return e;return 1===o&&(a=i,(i=function(e){return w().off(e),a.apply(this,arguments)}).guid=a.guid||(a.guid=w.guid++)),e.each(function(){w.event.add(this,t,i,r,n)})}w.event={global:{},add:function(e,t,n,r,i){var o,a,s,u,l,c,f,p,d,h,g,y=J.get(e);if(y){n.handler&&(n=(o=n).handler,i=o.selector),i&&w.find.matchesSelector(be,i),n.guid||(n.guid=w.guid++),(u=y.events)||(u=y.events={}),(a=y.handle)||(a=y.handle=function(t){return"undefined"!=typeof w&&w.event.triggered!==t.type?w.event.dispatch.apply(e,arguments):void 0}),l=(t=(t||"").match(M)||[""]).length;while(l--)d=g=(s=Ce.exec(t[l])||[])[1],h=(s[2]||"").split(".").sort(),d&&(f=w.event.special[d]||{},d=(i?f.delegateType:f.bindType)||d,f=w.event.special[d]||{},c=w.extend({type:d,origType:g,data:r,handler:n,guid:n.guid,selector:i,needsContext:i&&w.expr.match.needsContext.test(i),namespace:h.join(".")},o),(p=u[d])||((p=u[d]=[]).delegateCount=0,f.setup&&!1!==f.setup.call(e,r,h,a)||e.addEventListener&&e.addEventListener(d,a)),f.add&&(f.add.call(e,c),c.handler.guid||(c.handler.guid=n.guid)),i?p.splice(p.delegateCount++,0,c):p.push(c),w.event.global[d]=!0)}},remove:function(e,t,n,r,i){var o,a,s,u,l,c,f,p,d,h,g,y=J.hasData(e)&&J.get(e);if(y&&(u=y.events)){l=(t=(t||"").match(M)||[""]).length;while(l--)if(s=Ce.exec(t[l])||[],d=g=s[1],h=(s[2]||"").split(".").sort(),d){f=w.event.special[d]||{},p=u[d=(r?f.delegateType:f.bindType)||d]||[],s=s[2]&&new RegExp("(^|\\\\.)"+h.join("\\\\.(?:.*\\\\.|)")+"(\\\\.|$)"),a=o=p.length;while(o--)c=p[o],!i&&g!==c.origType||n&&n.guid!==c.guid||s&&!s.test(c.namespace)||r&&r!==c.selector&&("**"!==r||!c.selector)||(p.splice(o,1),c.selector&&p.delegateCount--,f.remove&&f.remove.call(e,c));a&&!p.length&&(f.teardown&&!1!==f.teardown.call(e,h,y.handle)||w.removeEvent(e,d,y.handle),delete u[d])}else for(d in u)w.event.remove(e,d+t[l],n,r,!0);w.isEmptyObject(u)&&J.remove(e,"handle events")}},dispatch:function(e){var t=w.event.fix(e),n,r,i,o,a,s,u=new Array(arguments.length),l=(J.get(this,"events")||{})[t.type]||[],c=w.event.special[t.type]||{};for(u[0]=t,n=1;n<arguments.length;n++)u[n]=arguments[n];if(t.delegateTarget=this,!c.preDispatch||!1!==c.preDispatch.call(this,t)){s=w.event.handlers.call(this,t,l),n=0;while((o=s[n++])&&!t.isPropagationStopped()){t.currentTarget=o.elem,r=0;while((a=o.handlers[r++])&&!t.isImmediatePropagationStopped())t.rnamespace&&!t.rnamespace.test(a.namespace)||(t.handleObj=a,t.data=a.data,void 0!==(i=((w.event.special[a.origType]||{}).handle||a.handler).apply(o.elem,u))&&!1===(t.result=i)&&(t.preventDefault(),t.stopPropagation()))}return c.postDispatch&&c.postDispatch.call(this,t),t.result}},handlers:function(e,t){var n,r,i,o,a,s=[],u=t.delegateCount,l=e.target;if(u&&l.nodeType&&!("click"===e.type&&e.button>=1))for(;l!==this;l=l.parentNode||this)if(1===l.nodeType&&("click"!==e.type||!0!==l.disabled)){for(o=[],a={},n=0;n<u;n++)void 0===a[i=(r=t[n]).selector+" "]&&(a[i]=r.needsContext?w(i,this).index(l)>-1:w.find(i,this,null,[l]).length),a[i]&&o.push(r);o.length&&s.push({elem:l,handlers:o})}return l=this,u<t.length&&s.push({elem:l,handlers:t.slice(u)}),s},addProp:function(e,t){Object.defineProperty(w.Event.prototype,e,{enumerable:!0,configurable:!0,get:g(t)?function(){if(this.originalEvent)return t(this.originalEvent)}:function(){if(this.originalEvent)return this.originalEvent[e]},set:function(t){Object.defineProperty(this,e,{enumerable:!0,configurable:!0,writable:!0,value:t})}})},fix:function(e){return e[w.expando]?e:new w.Event(e)},special:{load:{noBubble:!0},focus:{trigger:function(){if(this!==Se()&&this.focus)return this.focus(),!1},delegateType:"focusin"},blur:{trigger:function(){if(this===Se()&&this.blur)return this.blur(),!1},delegateType:"focusout"},click:{trigger:function(){if("checkbox"===this.type&&this.click&&N(this,"input"))return this.click(),!1},_default:function(e){return N(e.target,"a")}},beforeunload:{postDispatch:function(e){void 0!==e.result&&e.originalEvent&&(e.originalEvent.returnValue=e.result)}}}},w.removeEvent=function(e,t,n){e.removeEventListener&&e.removeEventListener(t,n)},w.Event=function(e,t){if(!(this instanceof w.Event))return new w.Event(e,t);e&&e.type?(this.originalEvent=e,this.type=e.type,this.isDefaultPrevented=e.defaultPrevented||void 0===e.defaultPrevented&&!1===e.returnValue?Ee:ke,this.target=e.target&&3===e.target.nodeType?e.target.parentNode:e.target,this.currentTarget=e.currentTarget,this.relatedTarget=e.relatedTarget):this.type=e,t&&w.extend(this,t),this.timeStamp=e&&e.timeStamp||Date.now(),this[w.expando]=!0},w.Event.prototype={constructor:w.Event,isDefaultPrevented:ke,isPropagationStopped:ke,isImmediatePropagationStopped:ke,isSimulated:!1,preventDefault:function(){var e=this.originalEvent;this.isDefaultPrevented=Ee,e&&!this.isSimulated&&e.preventDefault()},stopPropagation:function(){var e=this.originalEvent;this.isPropagationStopped=Ee,e&&!this.isSimulated&&e.stopPropagation()},stopImmediatePropagation:function(){var e=this.originalEvent;this.isImmediatePropagationStopped=Ee,e&&!this.isSimulated&&e.stopImmediatePropagation(),this.stopPropagation()}},w.each({altKey:!0,bubbles:!0,cancelable:!0,changedTouches:!0,ctrlKey:!0,detail:!0,eventPhase:!0,metaKey:!0,pageX:!0,pageY:!0,shiftKey:!0,view:!0,"char":!0,charCode:!0,key:!0,keyCode:!0,button:!0,buttons:!0,clientX:!0,clientY:!0,offsetX:!0,offsetY:!0,pointerId:!0,pointerType:!0,screenX:!0,screenY:!0,targetTouches:!0,toElement:!0,touches:!0,which:function(e){var t=e.button;return null==e.which&&we.test(e.type)?null!=e.charCode?e.charCode:e.keyCode:!e.which&&void 0!==t&&Te.test(e.type)?1&t?1:2&t?3:4&t?2:0:e.which}},w.event.addProp),w.each({mouseenter:"mouseover",mouseleave:"mouseout",pointerenter:"pointerover",pointerleave:"pointerout"},function(e,t){w.event.special[e]={delegateType:t,bindType:t,handle:function(e){var n,r=this,i=e.relatedTarget,o=e.handleObj;return i&&(i===r||w.contains(r,i))||(e.type=o.origType,n=o.handler.apply(this,arguments),e.type=t),n}}}),w.fn.extend({on:function(e,t,n,r){return De(this,e,t,n,r)},one:function(e,t,n,r){return De(this,e,t,n,r,1)},off:function(e,t,n){var r,i;if(e&&e.preventDefault&&e.handleObj)return r=e.handleObj,w(e.delegateTarget).off(r.namespace?r.origType+"."+r.namespace:r.origType,r.selector,r.handler),this;if("object"==typeof e){for(i in e)this.off(i,t,e[i]);return this}return!1!==t&&"function"!=typeof t||(n=t,t=void 0),!1===n&&(n=ke),this.each(function(){w.event.remove(this,e,n,t)})}});var Ne=\/<(?!area|br|col|embed|hr|img|input|link|meta|param)(([a-z][^\\\/\\0>\\x20\\t\\r\\n\\f]*)[^>]*)\\\/>\/gi,Ae=\/<script|<style|<link\/i,je=\/checked\\s*(?:[^=]|=\\s*.checked.)\/i,qe=\/^\\s*<!(?:\\[CDATA\\[|--)|(?:\\]\\]|--)>\\s*$\/g;function Le(e,t){return N(e,"table")&&N(11!==t.nodeType?t:t.firstChild,"tr")?w(e).children("tbody")[0]||e:e}function He(e){return e.type=(null!==e.getAttribute("type"))+"\/"+e.type,e}function Oe(e){return"true\/"===(e.type||"").slice(0,5)?e.type=e.type.slice(5):e.removeAttribute("type"),e}function Pe(e,t){var n,r,i,o,a,s,u,l;if(1===t.nodeType){if(J.hasData(e)&&(o=J.access(e),a=J.set(t,o),l=o.events)){delete a.handle,a.events={};for(i in l)for(n=0,r=l[i].length;n<r;n++)w.event.add(t,i,l[i][n])}K.hasData(e)&&(s=K.access(e),u=w.extend({},s),K.set(t,u))}}function Me(e,t){var n=t.nodeName.toLowerCase();"input"===n&&pe.test(e.type)?t.checked=e.checked:"input"!==n&&"textarea"!==n||(t.defaultValue=e.defaultValue)}function Re(e,t,n,r){t=a.apply([],t);var i,o,s,u,l,c,f=0,p=e.length,d=p-1,y=t[0],v=g(y);if(v||p>1&&"string"==typeof y&&!h.checkClone&&je.test(y))return e.each(function(i){var o=e.eq(i);v&&(t[0]=y.call(this,i,o.html())),Re(o,t,n,r)});if(p&&(i=xe(t,e[0].ownerDocument,!1,e,r),o=i.firstChild,1===i.childNodes.length&&(i=o),o||r)){for(u=(s=w.map(ye(i,"script"),He)).length;f<p;f++)l=i,f!==d&&(l=w.clone(l,!0,!0),u&&w.merge(s,ye(l,"script"))),n.call(e[f],l,f);if(u)for(c=s[s.length-1].ownerDocument,w.map(s,Oe),f=0;f<u;f++)l=s[f],he.test(l.type||"")&&!J.access(l,"globalEval")&&w.contains(c,l)&&(l.src&&"module"!==(l.type||"").toLowerCase()?w._evalUrl&&w._evalUrl(l.src):m(l.textContent.replace(qe,""),c,l))}return e}function Ie(e,t,n){for(var r,i=t?w.filter(t,e):e,o=0;null!=(r=i[o]);o++)n||1!==r.nodeType||w.cleanData(ye(r)),r.parentNode&&(n&&w.contains(r.ownerDocument,r)&&ve(ye(r,"script")),r.parentNode.removeChild(r));return e}w.extend({htmlPrefilter:function(e){return e.replace(Ne,"<$1><\/$2>")},clone:function(e,t,n){var r,i,o,a,s=e.cloneNode(!0),u=w.contains(e.ownerDocument,e);if(!(h.noCloneChecked||1!==e.nodeType&&11!==e.nodeType||w.isXMLDoc(e)))for(a=ye(s),r=0,i=(o=ye(e)).length;r<i;r++)Me(o[r],a[r]);if(t)if(n)for(o=o||ye(e),a=a||ye(s),r=0,i=o.length;r<i;r++)Pe(o[r],a[r]);else Pe(e,s);return(a=ye(s,"script")).length>0&&ve(a,!u&&ye(e,"script")),s},cleanData:function(e){for(var t,n,r,i=w.event.special,o=0;void 0!==(n=e[o]);o++)if(Y(n)){if(t=n[J.expando]){if(t.events)for(r in t.events)i[r]?w.event.remove(n,r):w.removeEvent(n,r,t.handle);n[J.expando]=void 0}n[K.expando]&&(n[K.expando]=void 0)}}}),w.fn.extend({detach:function(e){return Ie(this,e,!0)},remove:function(e){return Ie(this,e)},text:function(e){return z(this,function(e){return void 0===e?w.text(this):this.empty().each(function(){1!==this.nodeType&&11!==this.nodeType&&9!==this.nodeType||(this.textContent=e)})},null,e,arguments.length)},append:function(){return Re(this,arguments,function(e){1!==this.nodeType&&11!==this.nodeType&&9!==this.nodeType||Le(this,e).appendChild(e)})},prepend:function(){return Re(this,arguments,function(e){if(1===this.nodeType||11===this.nodeType||9===this.nodeType){var t=Le(this,e);t.insertBefore(e,t.firstChild)}})},before:function(){return Re(this,arguments,function(e){this.parentNode&&this.parentNode.insertBefore(e,this)})},after:function(){return Re(this,arguments,function(e){this.parentNode&&this.parentNode.insertBefore(e,this.nextSibling)})},empty:function(){for(var e,t=0;null!=(e=this[t]);t++)1===e.nodeType&&(w.cleanData(ye(e,!1)),e.textContent="");return this},clone:function(e,t){return e=null!=e&&e,t=null==t?e:t,this.map(function(){return w.clone(this,e,t)})},html:function(e){return z(this,function(e){var t=this[0]||{},n=0,r=this.length;if(void 0===e&&1===t.nodeType)return t.innerHTML;if("string"==typeof e&&!Ae.test(e)&&!ge[(de.exec(e)||["",""])[1].toLowerCase()]){e=w.htmlPrefilter(e);try{for(;n<r;n++)1===(t=this[n]||{}).nodeType&&(w.cleanData(ye(t,!1)),t.innerHTML=e);t=0}catch(e){}}t&&this.empty().append(e)},null,e,arguments.length)},replaceWith:function(){var e=[];return Re(this,arguments,function(t){var n=this.parentNode;w.inArray(this,e)<0&&(w.cleanData(ye(this)),n&&n.replaceChild(t,this))},e)}}),w.each({appendTo:"append",prependTo:"prepend",insertBefore:"before",insertAfter:"after",replaceAll:"replaceWith"},function(e,t){w.fn[e]=function(e){for(var n,r=[],i=w(e),o=i.length-1,a=0;a<=o;a++)n=a===o?this:this.clone(!0),w(i[a])[t](n),s.apply(r,n.get());return this.pushStack(r)}});var We=new RegExp("^("+re+")(?!px)[a-z%]+$","i"),$e=function(t){var n=t.ownerDocument.defaultView;return n&&n.opener||(n=e),n.getComputedStyle(t)},Be=new RegExp(oe.join("|"),"i");!function(){function t(){if(c){l.style.cssText="position:absolute;left:-11111px;width:60px;margin-top:1px;padding:0;border:0",c.style.cssText="position:relative;display:block;box-sizing:border-box;overflow:scroll;margin:auto;border:1px;padding:1px;width:60%;top:1%",be.appendChild(l).appendChild(c);var t=e.getComputedStyle(c);i="1%"!==t.top,u=12===n(t.marginLeft),c.style.right="60%",s=36===n(t.right),o=36===n(t.width),c.style.position="absolute",a=36===c.offsetWidth||"absolute",be.removeChild(l),c=null}}function n(e){return Math.round(parseFloat(e))}var i,o,a,s,u,l=r.createElement("div"),c=r.createElement("div");c.style&&(c.style.backgroundClip="content-box",c.cloneNode(!0).style.backgroundClip="",h.clearCloneStyle="content-box"===c.style.backgroundClip,w.extend(h,{boxSizingReliable:function(){return t(),o},pixelBoxStyles:function(){return t(),s},pixelPosition:function(){return t(),i},reliableMarginLeft:function(){return t(),u},scrollboxSize:function(){return t(),a}}))}();function Fe(e,t,n){var r,i,o,a,s=e.style;return(n=n||$e(e))&&(""!==(a=n.getPropertyValue(t)||n[t])||w.contains(e.ownerDocument,e)||(a=w.style(e,t)),!h.pixelBoxStyles()&&We.test(a)&&Be.test(t)&&(r=s.width,i=s.minWidth,o=s.maxWidth,s.minWidth=s.maxWidth=s.width=a,a=n.width,s.width=r,s.minWidth=i,s.maxWidth=o)),void 0!==a?a+"":a}function _e(e,t){return{get:function(){if(!e())return(this.get=t).apply(this,arguments);delete this.get}}}var ze=\/^(none|table(?!-c[ea]).+)\/,Xe=\/^--\/,Ue={position:"absolute",visibility:"hidden",display:"block"},Ve={letterSpacing:"0",fontWeight:"400"},Ge=["Webkit","Moz","ms"],Ye=r.createElement("div").style;function Qe(e){if(e in Ye)return e;var t=e[0].toUpperCase()+e.slice(1),n=Ge.length;while(n--)if((e=Ge[n]+t)in Ye)return e}function Je(e){var t=w.cssProps[e];return t||(t=w.cssProps[e]=Qe(e)||e),t}function Ke(e,t,n){var r=ie.exec(t);return r?Math.max(0,r[2]-(n||0))+(r[3]||"px"):t}function Ze(e,t,n,r,i,o){var a="width"===t?1:0,s=0,u=0;if(n===(r?"border":"content"))return 0;for(;a<4;a+=2)"margin"===n&&(u+=w.css(e,n+oe[a],!0,i)),r?("content"===n&&(u-=w.css(e,"padding"+oe[a],!0,i)),"margin"!==n&&(u-=w.css(e,"border"+oe[a]+"Width",!0,i))):(u+=w.css(e,"padding"+oe[a],!0,i),"padding"!==n?u+=w.css(e,"border"+oe[a]+"Width",!0,i):s+=w.css(e,"border"+oe[a]+"Width",!0,i));return!r&&o>=0&&(u+=Math.max(0,Math.ceil(e["offset"+t[0].toUpperCase()+t.slice(1)]-o-u-s-.5))),u}function et(e,t,n){var r=$e(e),i=Fe(e,t,r),o="border-box"===w.css(e,"boxSizing",!1,r),a=o;if(We.test(i)){if(!n)return i;i="auto"}return a=a&&(h.boxSizingReliable()||i===e.style[t]),("auto"===i||!parseFloat(i)&&"inline"===w.css(e,"display",!1,r))&&(i=e["offset"+t[0].toUpperCase()+t.slice(1)],a=!0),(i=parseFloat(i)||0)+Ze(e,t,n||(o?"border":"content"),a,r,i)+"px"}w.extend({cssHooks:{opacity:{get:function(e,t){if(t){var n=Fe(e,"opacity");return""===n?"1":n}}}},cssNumber:{animationIterationCount:!0,columnCount:!0,fillOpacity:!0,flexGrow:!0,flexShrink:!0,fontWeight:!0,lineHeight:!0,opacity:!0,order:!0,orphans:!0,widows:!0,zIndex:!0,zoom:!0},cssProps:{},style:function(e,t,n,r){if(e&&3!==e.nodeType&&8!==e.nodeType&&e.style){var i,o,a,s=G(t),u=Xe.test(t),l=e.style;if(u||(t=Je(s)),a=w.cssHooks[t]||w.cssHooks[s],void 0===n)return a&&"get"in a&&void 0!==(i=a.get(e,!1,r))?i:l[t];"string"==(o=typeof n)&&(i=ie.exec(n))&&i[1]&&(n=ue(e,t,i),o="number"),null!=n&&n===n&&("number"===o&&(n+=i&&i[3]||(w.cssNumber[s]?"":"px")),h.clearCloneStyle||""!==n||0!==t.indexOf("background")||(l[t]="inherit"),a&&"set"in a&&void 0===(n=a.set(e,n,r))||(u?l.setProperty(t,n):l[t]=n))}},css:function(e,t,n,r){var i,o,a,s=G(t);return Xe.test(t)||(t=Je(s)),(a=w.cssHooks[t]||w.cssHooks[s])&&"get"in a&&(i=a.get(e,!0,n)),void 0===i&&(i=Fe(e,t,r)),"normal"===i&&t in Ve&&(i=Ve[t]),""===n||n?(o=parseFloat(i),!0===n||isFinite(o)?o||0:i):i}}),w.each(["height","width"],function(e,t){w.cssHooks[t]={get:function(e,n,r){if(n)return!ze.test(w.css(e,"display"))||e.getClientRects().length&&e.getBoundingClientRect().width?et(e,t,r):se(e,Ue,function(){return et(e,t,r)})},set:function(e,n,r){var i,o=$e(e),a="border-box"===w.css(e,"boxSizing",!1,o),s=r&&Ze(e,t,r,a,o);return a&&h.scrollboxSize()===o.position&&(s-=Math.ceil(e["offset"+t[0].toUpperCase()+t.slice(1)]-parseFloat(o[t])-Ze(e,t,"border",!1,o)-.5)),s&&(i=ie.exec(n))&&"px"!==(i[3]||"px")&&(e.style[t]=n,n=w.css(e,t)),Ke(e,n,s)}}}),w.cssHooks.marginLeft=_e(h.reliableMarginLeft,function(e,t){if(t)return(parseFloat(Fe(e,"marginLeft"))||e.getBoundingClientRect().left-se(e,{marginLeft:0},function(){return e.getBoundingClientRect().left}))+"px"}),w.each({margin:"",padding:"",border:"Width"},function(e,t){w.cssHooks[e+t]={expand:function(n){for(var r=0,i={},o="string"==typeof n?n.split(" "):[n];r<4;r++)i[e+oe[r]+t]=o[r]||o[r-2]||o[0];return i}},"margin"!==e&&(w.cssHooks[e+t].set=Ke)}),w.fn.extend({css:function(e,t){return z(this,function(e,t,n){var r,i,o={},a=0;if(Array.isArray(t)){for(r=$e(e),i=t.length;a<i;a++)o[t[a]]=w.css(e,t[a],!1,r);return o}return void 0!==n?w.style(e,t,n):w.css(e,t)},e,t,arguments.length>1)}});function tt(e,t,n,r,i){return new tt.prototype.init(e,t,n,r,i)}w.Tween=tt,tt.prototype={constructor:tt,init:function(e,t,n,r,i,o){this.elem=e,this.prop=n,this.easing=i||w.easing._default,this.options=t,this.start=this.now=this.cur(),this.end=r,this.unit=o||(w.cssNumber[n]?"":"px")},cur:function(){var e=tt.propHooks[this.prop];return e&&e.get?e.get(this):tt.propHooks._default.get(this)},run:function(e){var t,n=tt.propHooks[this.prop];return this.options.duration?this.pos=t=w.easing[this.easing](e,this.options.duration*e,0,1,this.options.duration):this.pos=t=e,this.now=(this.end-this.start)*t+this.start,this.options.step&&this.options.step.call(this.elem,this.now,this),n&&n.set?n.set(this):tt.propHooks._default.set(this),this}},tt.prototype.init.prototype=tt.prototype,tt.propHooks={_default:{get:function(e){var t;return 1!==e.elem.nodeType||null!=e.elem[e.prop]&&null==e.elem.style[e.prop]?e.elem[e.prop]:(t=w.css(e.elem,e.prop,""))&&"auto"!==t?t:0},set:function(e){w.fx.step[e.prop]?w.fx.step[e.prop](e):1!==e.elem.nodeType||null==e.elem.style[w.cssProps[e.prop]]&&!w.cssHooks[e.prop]?e.elem[e.prop]=e.now:w.style(e.elem,e.prop,e.now+e.unit)}}},tt.propHooks.scrollTop=tt.propHooks.scrollLeft={set:function(e){e.elem.nodeType&&e.elem.parentNode&&(e.elem[e.prop]=e.now)}},w.easing={linear:function(e){return e},swing:function(e){return.5-Math.cos(e*Math.PI)\/2},_default:"swing"},w.fx=tt.prototype.init,w.fx.step={};var nt,rt,it=\/^(?:toggle|show|hide)$\/,ot=\/queueHooks$\/;function at(){rt&&(!1===r.hidden&&e.requestAnimationFrame?e.requestAnimationFrame(at):e.setTimeout(at,w.fx.interval),w.fx.tick())}function st(){return e.setTimeout(function(){nt=void 0}),nt=Date.now()}function ut(e,t){var n,r=0,i={height:e};for(t=t?1:0;r<4;r+=2-t)i["margin"+(n=oe[r])]=i["padding"+n]=e;return t&&(i.opacity=i.width=e),i}function lt(e,t,n){for(var r,i=(pt.tweeners[t]||[]).concat(pt.tweeners["*"]),o=0,a=i.length;o<a;o++)if(r=i[o].call(n,t,e))return r}function ct(e,t,n){var r,i,o,a,s,u,l,c,f="width"in t||"height"in t,p=this,d={},h=e.style,g=e.nodeType&&ae(e),y=J.get(e,"fxshow");n.queue||(null==(a=w._queueHooks(e,"fx")).unqueued&&(a.unqueued=0,s=a.empty.fire,a.empty.fire=function(){a.unqueued||s()}),a.unqueued++,p.always(function(){p.always(function(){a.unqueued--,w.queue(e,"fx").length||a.empty.fire()})}));for(r in t)if(i=t[r],it.test(i)){if(delete t[r],o=o||"toggle"===i,i===(g?"hide":"show")){if("show"!==i||!y||void 0===y[r])continue;g=!0}d[r]=y&&y[r]||w.style(e,r)}if((u=!w.isEmptyObject(t))||!w.isEmptyObject(d)){f&&1===e.nodeType&&(n.overflow=[h.overflow,h.overflowX,h.overflowY],null==(l=y&&y.display)&&(l=J.get(e,"display")),"none"===(c=w.css(e,"display"))&&(l?c=l:(fe([e],!0),l=e.style.display||l,c=w.css(e,"display"),fe([e]))),("inline"===c||"inline-block"===c&&null!=l)&&"none"===w.css(e,"float")&&(u||(p.done(function(){h.display=l}),null==l&&(c=h.display,l="none"===c?"":c)),h.display="inline-block")),n.overflow&&(h.overflow="hidden",p.always(function(){h.overflow=n.overflow[0],h.overflowX=n.overflow[1],h.overflowY=n.overflow[2]})),u=!1;for(r in d)u||(y?"hidden"in y&&(g=y.hidden):y=J.access(e,"fxshow",{display:l}),o&&(y.hidden=!g),g&&fe([e],!0),p.done(function(){g||fe([e]),J.remove(e,"fxshow");for(r in d)w.style(e,r,d[r])})),u=lt(g?y[r]:0,r,p),r in y||(y[r]=u.start,g&&(u.end=u.start,u.start=0))}}function ft(e,t){var n,r,i,o,a;for(n in e)if(r=G(n),i=t[r],o=e[n],Array.isArray(o)&&(i=o[1],o=e[n]=o[0]),n!==r&&(e[r]=o,delete e[n]),(a=w.cssHooks[r])&&"expand"in a){o=a.expand(o),delete e[r];for(n in o)n in e||(e[n]=o[n],t[n]=i)}else t[r]=i}function pt(e,t,n){var r,i,o=0,a=pt.prefilters.length,s=w.Deferred().always(function(){delete u.elem}),u=function(){if(i)return!1;for(var t=nt||st(),n=Math.max(0,l.startTime+l.duration-t),r=1-(n\/l.duration||0),o=0,a=l.tweens.length;o<a;o++)l.tweens[o].run(r);return s.notifyWith(e,[l,r,n]),r<1&&a?n:(a||s.notifyWith(e,[l,1,0]),s.resolveWith(e,[l]),!1)},l=s.promise({elem:e,props:w.extend({},t),opts:w.extend(!0,{specialEasing:{},easing:w.easing._default},n),originalProperties:t,originalOptions:n,startTime:nt||st(),duration:n.duration,tweens:[],createTween:function(t,n){var r=w.Tween(e,l.opts,t,n,l.opts.specialEasing[t]||l.opts.easing);return l.tweens.push(r),r},stop:function(t){var n=0,r=t?l.tweens.length:0;if(i)return this;for(i=!0;n<r;n++)l.tweens[n].run(1);return t?(s.notifyWith(e,[l,1,0]),s.resolveWith(e,[l,t])):s.rejectWith(e,[l,t]),this}}),c=l.props;for(ft(c,l.opts.specialEasing);o<a;o++)if(r=pt.prefilters[o].call(l,e,c,l.opts))return g(r.stop)&&(w._queueHooks(l.elem,l.opts.queue).stop=r.stop.bind(r)),r;return w.map(c,lt,l),g(l.opts.start)&&l.opts.start.call(e,l),l.progress(l.opts.progress).done(l.opts.done,l.opts.complete).fail(l.opts.fail).always(l.opts.always),w.fx.timer(w.extend(u,{elem:e,anim:l,queue:l.opts.queue})),l}w.Animation=w.extend(pt,{tweeners:{"*":[function(e,t){var n=this.createTween(e,t);return ue(n.elem,e,ie.exec(t),n),n}]},tweener:function(e,t){g(e)?(t=e,e=["*"]):e=e.match(M);for(var n,r=0,i=e.length;r<i;r++)n=e[r],pt.tweeners[n]=pt.tweeners[n]||[],pt.tweeners[n].unshift(t)},prefilters:[ct],prefilter:function(e,t){t?pt.prefilters.unshift(e):pt.prefilters.push(e)}}),w.speed=function(e,t,n){var r=e&&"object"==typeof e?w.extend({},e):{complete:n||!n&&t||g(e)&&e,duration:e,easing:n&&t||t&&!g(t)&&t};return w.fx.off?r.duration=0:"number"!=typeof r.duration&&(r.duration in w.fx.speeds?r.duration=w.fx.speeds[r.duration]:r.duration=w.fx.speeds._default),null!=r.queue&&!0!==r.queue||(r.queue="fx"),r.old=r.complete,r.complete=function(){g(r.old)&&r.old.call(this),r.queue&&w.dequeue(this,r.queue)},r},w.fn.extend({fadeTo:function(e,t,n,r){return this.filter(ae).css("opacity",0).show().end().animate({opacity:t},e,n,r)},animate:function(e,t,n,r){var i=w.isEmptyObject(e),o=w.speed(t,n,r),a=function(){var t=pt(this,w.extend({},e),o);(i||J.get(this,"finish"))&&t.stop(!0)};return a.finish=a,i||!1===o.queue?this.each(a):this.queue(o.queue,a)},stop:function(e,t,n){var r=function(e){var t=e.stop;delete e.stop,t(n)};return"string"!=typeof e&&(n=t,t=e,e=void 0),t&&!1!==e&&this.queue(e||"fx",[]),this.each(function(){var t=!0,i=null!=e&&e+"queueHooks",o=w.timers,a=J.get(this);if(i)a[i]&&a[i].stop&&r(a[i]);else for(i in a)a[i]&&a[i].stop&&ot.test(i)&&r(a[i]);for(i=o.length;i--;)o[i].elem!==this||null!=e&&o[i].queue!==e||(o[i].anim.stop(n),t=!1,o.splice(i,1));!t&&n||w.dequeue(this,e)})},finish:function(e){return!1!==e&&(e=e||"fx"),this.each(function(){var t,n=J.get(this),r=n[e+"queue"],i=n[e+"queueHooks"],o=w.timers,a=r?r.length:0;for(n.finish=!0,w.queue(this,e,[]),i&&i.stop&&i.stop.call(this,!0),t=o.length;t--;)o[t].elem===this&&o[t].queue===e&&(o[t].anim.stop(!0),o.splice(t,1));for(t=0;t<a;t++)r[t]&&r[t].finish&&r[t].finish.call(this);delete n.finish})}}),w.each(["toggle","show","hide"],function(e,t){var n=w.fn[t];w.fn[t]=function(e,r,i){return null==e||"boolean"==typeof e?n.apply(this,arguments):this.animate(ut(t,!0),e,r,i)}}),w.each({slideDown:ut("show"),slideUp:ut("hide"),slideToggle:ut("toggle"),fadeIn:{opacity:"show"},fadeOut:{opacity:"hide"},fadeToggle:{opacity:"toggle"}},function(e,t){w.fn[e]=function(e,n,r){return this.animate(t,e,n,r)}}),w.timers=[],w.fx.tick=function(){var e,t=0,n=w.timers;for(nt=Date.now();t<n.length;t++)(e=n[t])()||n[t]!==e||n.splice(t--,1);n.length||w.fx.stop(),nt=void 0},w.fx.timer=function(e){w.timers.push(e),w.fx.start()},w.fx.interval=13,w.fx.start=function(){rt||(rt=!0,at())},w.fx.stop=function(){rt=null},w.fx.speeds={slow:600,fast:200,_default:400},w.fn.delay=function(t,n){return t=w.fx?w.fx.speeds[t]||t:t,n=n||"fx",this.queue(n,function(n,r){var i=e.setTimeout(n,t);r.stop=function(){e.clearTimeout(i)}})},function(){var e=r.createElement("input"),t=r.createElement("select").appendChild(r.createElement("option"));e.type="checkbox",h.checkOn=""!==e.value,h.optSelected=t.selected,(e=r.createElement("input")).value="t",e.type="radio",h.radioValue="t"===e.value}();var dt,ht=w.expr.attrHandle;w.fn.extend({attr:function(e,t){return z(this,w.attr,e,t,arguments.length>1)},removeAttr:function(e){return this.each(function(){w.removeAttr(this,e)})}}),w.extend({attr:function(e,t,n){var r,i,o=e.nodeType;if(3!==o&&8!==o&&2!==o)return"undefined"==typeof e.getAttribute?w.prop(e,t,n):(1===o&&w.isXMLDoc(e)||(i=w.attrHooks[t.toLowerCase()]||(w.expr.match.bool.test(t)?dt:void 0)),void 0!==n?null===n?void w.removeAttr(e,t):i&&"set"in i&&void 0!==(r=i.set(e,n,t))?r:(e.setAttribute(t,n+""),n):i&&"get"in i&&null!==(r=i.get(e,t))?r:null==(r=w.find.attr(e,t))?void 0:r)},attrHooks:{type:{set:function(e,t){if(!h.radioValue&&"radio"===t&&N(e,"input")){var n=e.value;return e.setAttribute("type",t),n&&(e.value=n),t}}}},removeAttr:function(e,t){var n,r=0,i=t&&t.match(M);if(i&&1===e.nodeType)while(n=i[r++])e.removeAttribute(n)}}),dt={set:function(e,t,n){return!1===t?w.removeAttr(e,n):e.setAttribute(n,n),n}},w.each(w.expr.match.bool.source.match(\/\\w+\/g),function(e,t){var n=ht[t]||w.find.attr;ht[t]=function(e,t,r){var i,o,a=t.toLowerCase();return r||(o=ht[a],ht[a]=i,i=null!=n(e,t,r)?a:null,ht[a]=o),i}});var gt=\/^(?:input|select|textarea|button)$\/i,yt=\/^(?:a|area)$\/i;w.fn.extend({prop:function(e,t){return z(this,w.prop,e,t,arguments.length>1)},removeProp:function(e){return this.each(function(){delete this[w.propFix[e]||e]})}}),w.extend({prop:function(e,t,n){var r,i,o=e.nodeType;if(3!==o&&8!==o&&2!==o)return 1===o&&w.isXMLDoc(e)||(t=w.propFix[t]||t,i=w.propHooks[t]),void 0!==n?i&&"set"in i&&void 0!==(r=i.set(e,n,t))?r:e[t]=n:i&&"get"in i&&null!==(r=i.get(e,t))?r:e[t]},propHooks:{tabIndex:{get:function(e){var t=w.find.attr(e,"tabindex");return t?parseInt(t,10):gt.test(e.nodeName)||yt.test(e.nodeName)&&e.href?0:-1}}},propFix:{"for":"htmlFor","class":"className"}}),h.optSelected||(w.propHooks.selected={get:function(e){var t=e.parentNode;return t&&t.parentNode&&t.parentNode.selectedIndex,null},set:function(e){var t=e.parentNode;t&&(t.selectedIndex,t.parentNode&&t.parentNode.selectedIndex)}}),w.each(["tabIndex","readOnly","maxLength","cellSpacing","cellPadding","rowSpan","colSpan","useMap","frameBorder","contentEditable"],function(){w.propFix[this.toLowerCase()]=this});function vt(e){return(e.match(M)||[]).join(" ")}function mt(e){return e.getAttribute&&e.getAttribute("class")||""}function xt(e){return Array.isArray(e)?e:"string"==typeof e?e.match(M)||[]:[]}w.fn.extend({addClass:function(e){var t,n,r,i,o,a,s,u=0;if(g(e))return this.each(function(t){w(this).addClass(e.call(this,t,mt(this)))});if((t=xt(e)).length)while(n=this[u++])if(i=mt(n),r=1===n.nodeType&&" "+vt(i)+" "){a=0;while(o=t[a++])r.indexOf(" "+o+" ")<0&&(r+=o+" ");i!==(s=vt(r))&&n.setAttribute("class",s)}return this},removeClass:function(e){var t,n,r,i,o,a,s,u=0;if(g(e))return this.each(function(t){w(this).removeClass(e.call(this,t,mt(this)))});if(!arguments.length)return this.attr("class","");if((t=xt(e)).length)while(n=this[u++])if(i=mt(n),r=1===n.nodeType&&" "+vt(i)+" "){a=0;while(o=t[a++])while(r.indexOf(" "+o+" ")>-1)r=r.replace(" "+o+" "," ");i!==(s=vt(r))&&n.setAttribute("class",s)}return this},toggleClass:function(e,t){var n=typeof e,r="string"===n||Array.isArray(e);return"boolean"==typeof t&&r?t?this.addClass(e):this.removeClass(e):g(e)?this.each(function(n){w(this).toggleClass(e.call(this,n,mt(this),t),t)}):this.each(function(){var t,i,o,a;if(r){i=0,o=w(this),a=xt(e);while(t=a[i++])o.hasClass(t)?o.removeClass(t):o.addClass(t)}else void 0!==e&&"boolean"!==n||((t=mt(this))&&J.set(this,"__className__",t),this.setAttribute&&this.setAttribute("class",t||!1===e?"":J.get(this,"__className__")||""))})},hasClass:function(e){var t,n,r=0;t=" "+e+" ";while(n=this[r++])if(1===n.nodeType&&(" "+vt(mt(n))+" ").indexOf(t)>-1)return!0;return!1}});var bt=\/\\r\/g;w.fn.extend({val:function(e){var t,n,r,i=this[0];{if(arguments.length)return r=g(e),this.each(function(n){var i;1===this.nodeType&&(null==(i=r?e.call(this,n,w(this).val()):e)?i="":"number"==typeof i?i+="":Array.isArray(i)&&(i=w.map(i,function(e){return null==e?"":e+""})),(t=w.valHooks[this.type]||w.valHooks[this.nodeName.toLowerCase()])&&"set"in t&&void 0!==t.set(this,i,"value")||(this.value=i))});if(i)return(t=w.valHooks[i.type]||w.valHooks[i.nodeName.toLowerCase()])&&"get"in t&&void 0!==(n=t.get(i,"value"))?n:"string"==typeof(n=i.value)?n.replace(bt,""):null==n?"":n}}}),w.extend({valHooks:{option:{get:function(e){var t=w.find.attr(e,"value");return null!=t?t:vt(w.text(e))}},select:{get:function(e){var t,n,r,i=e.options,o=e.selectedIndex,a="select-one"===e.type,s=a?null:[],u=a?o+1:i.length;for(r=o<0?u:a?o:0;r<u;r++)if(((n=i[r]).selected||r===o)&&!n.disabled&&(!n.parentNode.disabled||!N(n.parentNode,"optgroup"))){if(t=w(n).val(),a)return t;s.push(t)}return s},set:function(e,t){var n,r,i=e.options,o=w.makeArray(t),a=i.length;while(a--)((r=i[a]).selected=w.inArray(w.valHooks.option.get(r),o)>-1)&&(n=!0);return n||(e.selectedIndex=-1),o}}}}),w.each(["radio","checkbox"],function(){w.valHooks[this]={set:function(e,t){if(Array.isArray(t))return e.checked=w.inArray(w(e).val(),t)>-1}},h.checkOn||(w.valHooks[this].get=function(e){return null===e.getAttribute("value")?"on":e.value})}),h.focusin="onfocusin"in e;var wt=\/^(?:focusinfocus|focusoutblur)$\/,Tt=function(e){e.stopPropagation()};w.extend(w.event,{trigger:function(t,n,i,o){var a,s,u,l,c,p,d,h,v=[i||r],m=f.call(t,"type")?t.type:t,x=f.call(t,"namespace")?t.namespace.split("."):[];if(s=h=u=i=i||r,3!==i.nodeType&&8!==i.nodeType&&!wt.test(m+w.event.triggered)&&(m.indexOf(".")>-1&&(m=(x=m.split(".")).shift(),x.sort()),c=m.indexOf(":")<0&&"on"+m,t=t[w.expando]?t:new w.Event(m,"object"==typeof t&&t),t.isTrigger=o?2:3,t.namespace=x.join("."),t.rnamespace=t.namespace?new RegExp("(^|\\\\.)"+x.join("\\\\.(?:.*\\\\.|)")+"(\\\\.|$)"):null,t.result=void 0,t.target||(t.target=i),n=null==n?[t]:w.makeArray(n,[t]),d=w.event.special[m]||{},o||!d.trigger||!1!==d.trigger.apply(i,n))){if(!o&&!d.noBubble&&!y(i)){for(l=d.delegateType||m,wt.test(l+m)||(s=s.parentNode);s;s=s.parentNode)v.push(s),u=s;u===(i.ownerDocument||r)&&v.push(u.defaultView||u.parentWindow||e)}a=0;while((s=v[a++])&&!t.isPropagationStopped())h=s,t.type=a>1?l:d.bindType||m,(p=(J.get(s,"events")||{})[t.type]&&J.get(s,"handle"))&&p.apply(s,n),(p=c&&s[c])&&p.apply&&Y(s)&&(t.result=p.apply(s,n),!1===t.result&&t.preventDefault());return t.type=m,o||t.isDefaultPrevented()||d._default&&!1!==d._default.apply(v.pop(),n)||!Y(i)||c&&g(i[m])&&!y(i)&&((u=i[c])&&(i[c]=null),w.event.triggered=m,t.isPropagationStopped()&&h.addEventListener(m,Tt),i[m](),t.isPropagationStopped()&&h.removeEventListener(m,Tt),w.event.triggered=void 0,u&&(i[c]=u)),t.result}},simulate:function(e,t,n){var r=w.extend(new w.Event,n,{type:e,isSimulated:!0});w.event.trigger(r,null,t)}}),w.fn.extend({trigger:function(e,t){return this.each(function(){w.event.trigger(e,t,this)})},triggerHandler:function(e,t){var n=this[0];if(n)return w.event.trigger(e,t,n,!0)}}),h.focusin||w.each({focus:"focusin",blur:"focusout"},function(e,t){var n=function(e){w.event.simulate(t,e.target,w.event.fix(e))};w.event.special[t]={setup:function(){var r=this.ownerDocument||this,i=J.access(r,t);i||r.addEventListener(e,n,!0),J.access(r,t,(i||0)+1)},teardown:function(){var r=this.ownerDocument||this,i=J.access(r,t)-1;i?J.access(r,t,i):(r.removeEventListener(e,n,!0),J.remove(r,t))}}});var Ct=e.location,Et=Date.now(),kt=\/\\?\/;w.parseXML=function(t){var n;if(!t||"string"!=typeof t)return null;try{n=(new e.DOMParser).parseFromString(t,"text\/xml")}catch(e){n=void 0}return n&&!n.getElementsByTagName("parsererror").length||w.error("Invalid XML: "+t),n};var St=\/\\[\\]$\/,Dt=\/\\r?\\n\/g,Nt=\/^(?:submit|button|image|reset|file)$\/i,At=\/^(?:input|select|textarea|keygen)\/i;function jt(e,t,n,r){var i;if(Array.isArray(t))w.each(t,function(t,i){n||St.test(e)?r(e,i):jt(e+"["+("object"==typeof i&&null!=i?t:"")+"]",i,n,r)});else if(n||"object"!==x(t))r(e,t);else for(i in t)jt(e+"["+i+"]",t[i],n,r)}w.param=function(e,t){var n,r=[],i=function(e,t){var n=g(t)?t():t;r[r.length]=encodeURIComponent(e)+"="+encodeURIComponent(null==n?"":n)};if(Array.isArray(e)||e.jquery&&!w.isPlainObject(e))w.each(e,function(){i(this.name,this.value)});else for(n in e)jt(n,e[n],t,i);return r.join("&")},w.fn.extend({serialize:function(){return w.param(this.serializeArray())},serializeArray:function(){return this.map(function(){var e=w.prop(this,"elements");return e?w.makeArray(e):this}).filter(function(){var e=this.type;return this.name&&!w(this).is(":disabled")&&At.test(this.nodeName)&&!Nt.test(e)&&(this.checked||!pe.test(e))}).map(function(e,t){var n=w(this).val();return null==n?null:Array.isArray(n)?w.map(n,function(e){return{name:t.name,value:e.replace(Dt,"\\r\\n")}}):{name:t.name,value:n.replace(Dt,"\\r\\n")}}).get()}});var qt=\/%20\/g,Lt=\/#.*$\/,Ht=\/([?&])_=[^&]*\/,Ot=\/^(.*?):[ \\t]*([^\\r\\n]*)$\/gm,Pt=\/^(?:about|app|app-storage|.+-extension|file|res|widget):$\/,Mt=\/^(?:GET|HEAD)$\/,Rt=\/^\\\/\\\/\/,It={},Wt={},$t="*\/".concat("*"),Bt=r.createElement("a");Bt.href=Ct.href;function Ft(e){return function(t,n){"string"!=typeof t&&(n=t,t="*");var r,i=0,o=t.toLowerCase().match(M)||[];if(g(n))while(r=o[i++])"+"===r[0]?(r=r.slice(1)||"*",(e[r]=e[r]||[]).unshift(n)):(e[r]=e[r]||[]).push(n)}}function _t(e,t,n,r){var i={},o=e===Wt;function a(s){var u;return i[s]=!0,w.each(e[s]||[],function(e,s){var l=s(t,n,r);return"string"!=typeof l||o||i[l]?o?!(u=l):void 0:(t.dataTypes.unshift(l),a(l),!1)}),u}return a(t.dataTypes[0])||!i["*"]&&a("*")}function zt(e,t){var n,r,i=w.ajaxSettings.flatOptions||{};for(n in t)void 0!==t[n]&&((i[n]?e:r||(r={}))[n]=t[n]);return r&&w.extend(!0,e,r),e}function Xt(e,t,n){var r,i,o,a,s=e.contents,u=e.dataTypes;while("*"===u[0])u.shift(),void 0===r&&(r=e.mimeType||t.getResponseHeader("Content-Type"));if(r)for(i in s)if(s[i]&&s[i].test(r)){u.unshift(i);break}if(u[0]in n)o=u[0];else{for(i in n){if(!u[0]||e.converters[i+" "+u[0]]){o=i;break}a||(a=i)}o=o||a}if(o)return o!==u[0]&&u.unshift(o),n[o]}function Ut(e,t,n,r){var i,o,a,s,u,l={},c=e.dataTypes.slice();if(c[1])for(a in e.converters)l[a.toLowerCase()]=e.converters[a];o=c.shift();while(o)if(e.responseFields[o]&&(n[e.responseFields[o]]=t),!u&&r&&e.dataFilter&&(t=e.dataFilter(t,e.dataType)),u=o,o=c.shift())if("*"===o)o=u;else if("*"!==u&&u!==o){if(!(a=l[u+" "+o]||l["* "+o]))for(i in l)if((s=i.split(" "))[1]===o&&(a=l[u+" "+s[0]]||l["* "+s[0]])){!0===a?a=l[i]:!0!==l[i]&&(o=s[0],c.unshift(s[1]));break}if(!0!==a)if(a&&e["throws"])t=a(t);else try{t=a(t)}catch(e){return{state:"parsererror",error:a?e:"No conversion from "+u+" to "+o}}}return{state:"success",data:t}}w.extend({active:0,lastModified:{},etag:{},ajaxSettings:{url:Ct.href,type:"GET",isLocal:Pt.test(Ct.protocol),global:!0,processData:!0,async:!0,contentType:"application\/x-www-form-urlencoded; charset=UTF-8",accepts:{"*":$t,text:"text\/plain",html:"text\/html",xml:"application\/xml, text\/xml",json:"application\/json, text\/javascript"},contents:{xml:\/\\bxml\\b\/,html:\/\\bhtml\/,json:\/\\bjson\\b\/},responseFields:{xml:"responseXML",text:"responseText",json:"responseJSON"},converters:{"* text":String,"text html":!0,"text json":JSON.parse,"text xml":w.parseXML},flatOptions:{url:!0,context:!0}},ajaxSetup:function(e,t){return t?zt(zt(e,w.ajaxSettings),t):zt(w.ajaxSettings,e)},ajaxPrefilter:Ft(It),ajaxTransport:Ft(Wt),ajax:function(t,n){"object"==typeof t&&(n=t,t=void 0),n=n||{};var i,o,a,s,u,l,c,f,p,d,h=w.ajaxSetup({},n),g=h.context||h,y=h.context&&(g.nodeType||g.jquery)?w(g):w.event,v=w.Deferred(),m=w.Callbacks("once memory"),x=h.statusCode||{},b={},T={},C="canceled",E={readyState:0,getResponseHeader:function(e){var t;if(c){if(!s){s={};while(t=Ot.exec(a))s[t[1].toLowerCase()]=t[2]}t=s[e.toLowerCase()]}return null==t?null:t},getAllResponseHeaders:function(){return c?a:null},setRequestHeader:function(e,t){return null==c&&(e=T[e.toLowerCase()]=T[e.toLowerCase()]||e,b[e]=t),this},overrideMimeType:function(e){return null==c&&(h.mimeType=e),this},statusCode:function(e){var t;if(e)if(c)E.always(e[E.status]);else for(t in e)x[t]=[x[t],e[t]];return this},abort:function(e){var t=e||C;return i&&i.abort(t),k(0,t),this}};if(v.promise(E),h.url=((t||h.url||Ct.href)+"").replace(Rt,Ct.protocol+"\/\/"),h.type=n.method||n.type||h.method||h.type,h.dataTypes=(h.dataType||"*").toLowerCase().match(M)||[""],null==h.crossDomain){l=r.createElement("a");try{l.href=h.url,l.href=l.href,h.crossDomain=Bt.protocol+"\/\/"+Bt.host!=l.protocol+"\/\/"+l.host}catch(e){h.crossDomain=!0}}if(h.data&&h.processData&&"string"!=typeof h.data&&(h.data=w.param(h.data,h.traditional)),_t(It,h,n,E),c)return E;(f=w.event&&h.global)&&0==w.active++&&w.event.trigger("ajaxStart"),h.type=h.type.toUpperCase(),h.hasContent=!Mt.test(h.type),o=h.url.replace(Lt,""),h.hasContent?h.data&&h.processData&&0===(h.contentType||"").indexOf("application\/x-www-form-urlencoded")&&(h.data=h.data.replace(qt,"+")):(d=h.url.slice(o.length),h.data&&(h.processData||"string"==typeof h.data)&&(o+=(kt.test(o)?"&":"?")+h.data,delete h.data),!1===h.cache&&(o=o.replace(Ht,"$1"),d=(kt.test(o)?"&":"?")+"_="+Et+++d),h.url=o+d),h.ifModified&&(w.lastModified[o]&&E.setRequestHeader("If-Modified-Since",w.lastModified[o]),w.etag[o]&&E.setRequestHeader("If-None-Match",w.etag[o])),(h.data&&h.hasContent&&!1!==h.contentType||n.contentType)&&E.setRequestHeader("Content-Type",h.contentType),E.setRequestHeader("Accept",h.dataTypes[0]&&h.accepts[h.dataTypes[0]]?h.accepts[h.dataTypes[0]]+("*"!==h.dataTypes[0]?", "+$t+"; q=0.01":""):h.accepts["*"]);for(p in h.headers)E.setRequestHeader(p,h.headers[p]);if(h.beforeSend&&(!1===h.beforeSend.call(g,E,h)||c))return E.abort();if(C="abort",m.add(h.complete),E.done(h.success),E.fail(h.error),i=_t(Wt,h,n,E)){if(E.readyState=1,f&&y.trigger("ajaxSend",[E,h]),c)return E;h.async&&h.timeout>0&&(u=e.setTimeout(function(){E.abort("timeout")},h.timeout));try{c=!1,i.send(b,k)}catch(e){if(c)throw e;k(-1,e)}}else k(-1,"No Transport");function k(t,n,r,s){var l,p,d,b,T,C=n;c||(c=!0,u&&e.clearTimeout(u),i=void 0,a=s||"",E.readyState=t>0?4:0,l=t>=200&&t<300||304===t,r&&(b=Xt(h,E,r)),b=Ut(h,b,E,l),l?(h.ifModified&&((T=E.getResponseHeader("Last-Modified"))&&(w.lastModified[o]=T),(T=E.getResponseHeader("etag"))&&(w.etag[o]=T)),204===t||"HEAD"===h.type?C="nocontent":304===t?C="notmodified":(C=b.state,p=b.data,l=!(d=b.error))):(d=C,!t&&C||(C="error",t<0&&(t=0))),E.status=t,E.statusText=(n||C)+"",l?v.resolveWith(g,[p,C,E]):v.rejectWith(g,[E,C,d]),E.statusCode(x),x=void 0,f&&y.trigger(l?"ajaxSuccess":"ajaxError",[E,h,l?p:d]),m.fireWith(g,[E,C]),f&&(y.trigger("ajaxComplete",[E,h]),--w.active||w.event.trigger("ajaxStop")))}return E},getJSON:function(e,t,n){return w.get(e,t,n,"json")},getScript:function(e,t){return w.get(e,void 0,t,"script")}}),w.each(["get","post"],function(e,t){w[t]=function(e,n,r,i){return g(n)&&(i=i||r,r=n,n=void 0),w.ajax(w.extend({url:e,type:t,dataType:i,data:n,success:r},w.isPlainObject(e)&&e))}}),w._evalUrl=function(e){return w.ajax({url:e,type:"GET",dataType:"script",cache:!0,async:!1,global:!1,"throws":!0})},w.fn.extend({wrapAll:function(e){var t;return this[0]&&(g(e)&&(e=e.call(this[0])),t=w(e,this[0].ownerDocument).eq(0).clone(!0),this[0].parentNode&&t.insertBefore(this[0]),t.map(function(){var e=this;while(e.firstElementChild)e=e.firstElementChild;return e}).append(this)),this},wrapInner:function(e){return g(e)?this.each(function(t){w(this).wrapInner(e.call(this,t))}):this.each(function(){var t=w(this),n=t.contents();n.length?n.wrapAll(e):t.append(e)})},wrap:function(e){var t=g(e);return this.each(function(n){w(this).wrapAll(t?e.call(this,n):e)})},unwrap:function(e){return this.parent(e).not("body").each(function(){w(this).replaceWith(this.childNodes)}),this}}),w.expr.pseudos.hidden=function(e){return!w.expr.pseudos.visible(e)},w.expr.pseudos.visible=function(e){return!!(e.offsetWidth||e.offsetHeight||e.getClientRects().length)},w.ajaxSettings.xhr=function(){try{return new e.XMLHttpRequest}catch(e){}};var Vt={0:200,1223:204},Gt=w.ajaxSettings.xhr();h.cors=!!Gt&&"withCredentials"in Gt,h.ajax=Gt=!!Gt,w.ajaxTransport(function(t){var n,r;if(h.cors||Gt&&!t.crossDomain)return{send:function(i,o){var a,s=t.xhr();if(s.open(t.type,t.url,t.async,t.username,t.password),t.xhrFields)for(a in t.xhrFields)s[a]=t.xhrFields[a];t.mimeType&&s.overrideMimeType&&s.overrideMimeType(t.mimeType),t.crossDomain||i["X-Requested-With"]||(i["X-Requested-With"]="XMLHttpRequest");for(a in i)s.setRequestHeader(a,i[a]);n=function(e){return function(){n&&(n=r=s.onload=s.onerror=s.onabort=s.ontimeout=s.onreadystatechange=null,"abort"===e?s.abort():"error"===e?"number"!=typeof s.status?o(0,"error"):o(s.status,s.statusText):o(Vt[s.status]||s.status,s.statusText,"text"!==(s.responseType||"text")||"string"!=typeof s.responseText?{binary:s.response}:{text:s.responseText},s.getAllResponseHeaders()))}},s.onload=n(),r=s.onerror=s.ontimeout=n("error"),void 0!==s.onabort?s.onabort=r:s.onreadystatechange=function(){4===s.readyState&&e.setTimeout(function(){n&&r()})},n=n("abort");try{s.send(t.hasContent&&t.data||null)}catch(e){if(n)throw e}},abort:function(){n&&n()}}}),w.ajaxPrefilter(function(e){e.crossDomain&&(e.contents.script=!1)}),w.ajaxSetup({accepts:{script:"text\/javascript, application\/javascript, application\/ecmascript, application\/x-ecmascript"},contents:{script:\/\\b(?:java|ecma)script\\b\/},converters:{"text script":function(e){return w.globalEval(e),e}}}),w.ajaxPrefilter("script",function(e){void 0===e.cache&&(e.cache=!1),e.crossDomain&&(e.type="GET")}),w.ajaxTransport("script",function(e){if(e.crossDomain){var t,n;return{send:function(i,o){t=w("<script>").prop({charset:e.scriptCharset,src:e.url}).on("load error",n=function(e){t.remove(),n=null,e&&o("error"===e.type?404:200,e.type)}),r.head.appendChild(t[0])},abort:function(){n&&n()}}}});var Yt=[],Qt=\/(=)\\?(?=&|$)|\\?\\?\/;w.ajaxSetup({jsonp:"callback",jsonpCallback:function(){var e=Yt.pop()||w.expando+"_"+Et++;return this[e]=!0,e}}),w.ajaxPrefilter("json jsonp",function(t,n,r){var i,o,a,s=!1!==t.jsonp&&(Qt.test(t.url)?"url":"string"==typeof t.data&&0===(t.contentType||"").indexOf("application\/x-www-form-urlencoded")&&Qt.test(t.data)&&"data");if(s||"jsonp"===t.dataTypes[0])return i=t.jsonpCallback=g(t.jsonpCallback)?t.jsonpCallback():t.jsonpCallback,s?t[s]=t[s].replace(Qt,"$1"+i):!1!==t.jsonp&&(t.url+=(kt.test(t.url)?"&":"?")+t.jsonp+"="+i),t.converters["script json"]=function(){return a||w.error(i+" was not called"),a[0]},t.dataTypes[0]="json",o=e[i],e[i]=function(){a=arguments},r.always(function(){void 0===o?w(e).removeProp(i):e[i]=o,t[i]&&(t.jsonpCallback=n.jsonpCallback,Yt.push(i)),a&&g(o)&&o(a[0]),a=o=void 0}),"script"}),h.createHTMLDocument=function(){var e=r.implementation.createHTMLDocument("").body;return e.innerHTML="<form><\/form><form><\/form>",2===e.childNodes.length}(),w.parseHTML=function(e,t,n){if("string"!=typeof e)return[];"boolean"==typeof t&&(n=t,t=!1);var i,o,a;return t||(h.createHTMLDocument?((i=(t=r.implementation.createHTMLDocument("")).createElement("base")).href=r.location.href,t.head.appendChild(i)):t=r),o=A.exec(e),a=!n&&[],o?[t.createElement(o[1])]:(o=xe([e],t,a),a&&a.length&&w(a).remove(),w.merge([],o.childNodes))},w.fn.load=function(e,t,n){var r,i,o,a=this,s=e.indexOf(" ");return s>-1&&(r=vt(e.slice(s)),e=e.slice(0,s)),g(t)?(n=t,t=void 0):t&&"object"==typeof t&&(i="POST"),a.length>0&&w.ajax({url:e,type:i||"GET",dataType:"html",data:t}).done(function(e){o=arguments,a.html(r?w("<div>").append(w.parseHTML(e)).find(r):e)}).always(n&&function(e,t){a.each(function(){n.apply(this,o||[e.responseText,t,e])})}),this},w.each(["ajaxStart","ajaxStop","ajaxComplete","ajaxError","ajaxSuccess","ajaxSend"],function(e,t){w.fn[t]=function(e){return this.on(t,e)}}),w.expr.pseudos.animated=function(e){return w.grep(w.timers,function(t){return e===t.elem}).length},w.offset={setOffset:function(e,t,n){var r,i,o,a,s,u,l,c=w.css(e,"position"),f=w(e),p={};"static"===c&&(e.style.position="relative"),s=f.offset(),o=w.css(e,"top"),u=w.css(e,"left"),(l=("absolute"===c||"fixed"===c)&&(o+u).indexOf("auto")>-1)?(a=(r=f.position()).top,i=r.left):(a=parseFloat(o)||0,i=parseFloat(u)||0),g(t)&&(t=t.call(e,n,w.extend({},s))),null!=t.top&&(p.top=t.top-s.top+a),null!=t.left&&(p.left=t.left-s.left+i),"using"in t?t.using.call(e,p):f.css(p)}},w.fn.extend({offset:function(e){if(arguments.length)return void 0===e?this:this.each(function(t){w.offset.setOffset(this,e,t)});var t,n,r=this[0];if(r)return r.getClientRects().length?(t=r.getBoundingClientRect(),n=r.ownerDocument.defaultView,{top:t.top+n.pageYOffset,left:t.left+n.pageXOffset}):{top:0,left:0}},position:function(){if(this[0]){var e,t,n,r=this[0],i={top:0,left:0};if("fixed"===w.css(r,"position"))t=r.getBoundingClientRect();else{t=this.offset(),n=r.ownerDocument,e=r.offsetParent||n.documentElement;while(e&&(e===n.body||e===n.documentElement)&&"static"===w.css(e,"position"))e=e.parentNode;e&&e!==r&&1===e.nodeType&&((i=w(e).offset()).top+=w.css(e,"borderTopWidth",!0),i.left+=w.css(e,"borderLeftWidth",!0))}return{top:t.top-i.top-w.css(r,"marginTop",!0),left:t.left-i.left-w.css(r,"marginLeft",!0)}}},offsetParent:function(){return this.map(function(){var e=this.offsetParent;while(e&&"static"===w.css(e,"position"))e=e.offsetParent;return e||be})}}),w.each({scrollLeft:"pageXOffset",scrollTop:"pageYOffset"},function(e,t){var n="pageYOffset"===t;w.fn[e]=function(r){return z(this,function(e,r,i){var o;if(y(e)?o=e:9===e.nodeType&&(o=e.defaultView),void 0===i)return o?o[t]:e[r];o?o.scrollTo(n?o.pageXOffset:i,n?i:o.pageYOffset):e[r]=i},e,r,arguments.length)}}),w.each(["top","left"],function(e,t){w.cssHooks[t]=_e(h.pixelPosition,function(e,n){if(n)return n=Fe(e,t),We.test(n)?w(e).position()[t]+"px":n})}),w.each({Height:"height",Width:"width"},function(e,t){w.each({padding:"inner"+e,content:t,"":"outer"+e},function(n,r){w.fn[r]=function(i,o){var a=arguments.length&&(n||"boolean"!=typeof i),s=n||(!0===i||!0===o?"margin":"border");return z(this,function(t,n,i){var o;return y(t)?0===r.indexOf("outer")?t["inner"+e]:t.document.documentElement["client"+e]:9===t.nodeType?(o=t.documentElement,Math.max(t.body["scroll"+e],o["scroll"+e],t.body["offset"+e],o["offset"+e],o["client"+e])):void 0===i?w.css(t,n,s):w.style(t,n,i,s)},t,a?i:void 0,a)}})}),w.each("blur focus focusin focusout resize scroll click dblclick mousedown mouseup mousemove mouseover mouseout mouseenter mouseleave change select submit keydown keypress keyup contextmenu".split(" "),function(e,t){w.fn[t]=function(e,n){return arguments.length>0?this.on(t,null,e,n):this.trigger(t)}}),w.fn.extend({hover:function(e,t){return this.mouseenter(e).mouseleave(t||e)}}),w.fn.extend({bind:function(e,t,n){return this.on(e,null,t,n)},unbind:function(e,t){return this.off(e,null,t)},delegate:function(e,t,n,r){return this.on(t,e,n,r)},undelegate:function(e,t,n){return 1===arguments.length?this.off(e,"**"):this.off(t,e||"**",n)}}),w.proxy=function(e,t){var n,r,i;if("string"==typeof t&&(n=e[t],t=e,e=n),g(e))return r=o.call(arguments,2),i=function(){return e.apply(t||this,r.concat(o.call(arguments)))},i.guid=e.guid=e.guid||w.guid++,i},w.holdReady=function(e){e?w.readyWait++:w.ready(!0)},w.isArray=Array.isArray,w.parseJSON=JSON.parse,w.nodeName=N,w.isFunction=g,w.isWindow=y,w.camelCase=G,w.type=x,w.now=Date.now,w.isNumeric=function(e){var t=w.type(e);return("number"===t||"string"===t)&&!isNaN(e-parseFloat(e))},"function"==typeof define&&define.amd&&define("jquery",[],function(){return w});var Jt=e.jQuery,Kt=e.$;return w.noConflict=function(t){return e.$===w&&(e.$=Kt),t&&e.jQuery===w&&(e.jQuery=Jt),w},t||(e.jQuery=e.$=w),w});$/;"	f
APP_PATH	server\http.php	/^    define('APP_PATH', __DIR__ . '\/..\/application\/');$/;"	d
_GET	server\http.php	/^	$_GET = [];$/;"	v
_POST	server\http.php	/^	$_POST = [];$/;"	v
_SERVER	server\http.php	/^	$_SERVER  =  [];$/;"	v
con	server\http.php	/^    $con=ob_get_contents();$/;"	v
http	server\http.php	/^$http=new swoole_http_server('0.0.0.0',8881);$/;"	v
k	server\http.php	/^		foreach($request->get as $k => $v) {$/;"	v
k	server\http.php	/^		foreach($request->header as $k => $v) {$/;"	v
k	server\http.php	/^		foreach($request->post as $k => $v) {$/;"	v
k	server\http.php	/^		foreach($request->server as $k => $v) {$/;"	v
LoggerInterface	thinkphp\base.php	/^    interface LoggerInterface extends \\Psr\\Log\\LoggerInterface$/;"	i
LoggerInterface	thinkphp\base.php	/^    interface LoggerInterface$/;"	i
abort	thinkphp\helper.php	/^    function abort($code, $message = null, $header = [])$/;"	f
action	thinkphp\helper.php	/^    function action($url, $vars = [], $layer = 'controller', $appendSuffix = false)$/;"	f
app	thinkphp\helper.php	/^    function app($name = 'think\\App', $args = [])$/;"	f
args	thinkphp\helper.php	/^    function app($name = 'think\\App', $args = [])$/;"	v
args	thinkphp\helper.php	/^    function behavior($behavior, $args = null)$/;"	v
args	thinkphp\helper.php	/^    function call($callable, $args = [])$/;"	v
behavior	thinkphp\helper.php	/^    function behavior($behavior, $args = null)$/;"	f
bind	thinkphp\helper.php	/^    function bind($abstract, $concrete = null)$/;"	f
cache	thinkphp\helper.php	/^    function cache($name, $value = '', $options = null, $tag = null)$/;"	f
call	thinkphp\helper.php	/^    function call($callable, $args = [])$/;"	f
class	thinkphp\helper.php	/^            $class = get_class($class);$/;"	v
class	thinkphp\helper.php	/^        $class = is_object($class) ? get_class($class) : $class;$/;"	v
class_basename	thinkphp\helper.php	/^    function class_basename($class)$/;"	f
class_uses_recursive	thinkphp\helper.php	/^    function class_uses_recursive($class)$/;"	f
classes	thinkphp\helper.php	/^        $classes = array_merge([$class => $class], class_parents($class));$/;"	v
code	thinkphp\helper.php	/^            $code   = $params;$/;"	v
code	thinkphp\helper.php	/^    function exception($msg, $code = 0, $exception = '')$/;"	v
code	thinkphp\helper.php	/^    function json($data = [], $code = 200, $header = [], $options = [])$/;"	v
code	thinkphp\helper.php	/^    function jsonp($data = [], $code = 200, $header = [], $options = [])$/;"	v
code	thinkphp\helper.php	/^    function response($data = [], $code = 200, $header = [], $type = 'html')$/;"	v
code	thinkphp\helper.php	/^    function xml($data = [], $code = 200, $header = [], $options = [])$/;"	v
concrete	thinkphp\helper.php	/^    function bind($abstract, $concrete = null)$/;"	v
config	thinkphp\helper.php	/^    function config($name = '', $value = null)$/;"	f
config	thinkphp\helper.php	/^    function db($name = '', $config = [], $force = true)$/;"	v
container	thinkphp\helper.php	/^    function container()$/;"	f
controller	thinkphp\helper.php	/^    function controller($name, $layer = 'controller', $appendSuffix = false)$/;"	f
cookie	thinkphp\helper.php	/^    function cookie($name, $value = '', $option = null)$/;"	f
data	thinkphp\helper.php	/^    function widget($name, $data = [])$/;"	v
db	thinkphp\helper.php	/^    function db($name = '', $config = [], $force = true)$/;"	f
debug	thinkphp\helper.php	/^    function debug($start, $end = '', $dec = 6)$/;"	f
default	thinkphp\helper.php	/^    function input($key = '', $default = null, $filter = null)$/;"	v
dump	thinkphp\helper.php	/^    function dump($var, $echo = true, $label = null)$/;"	f
e	thinkphp\helper.php	/^        $e = $exception ?: '\\think\\Exception';$/;"	v
echo	thinkphp\helper.php	/^    function dump($var, $echo = true, $label = null)$/;"	v
end	thinkphp\helper.php	/^    function debug($start, $end = '', $dec = 6)$/;"	v
exception	thinkphp\helper.php	/^    function exception($msg, $code = 0, $exception = '')$/;"	f
expire	thinkphp\helper.php	/^                $expire = is_numeric($options) ? $options : null; \/\/默认快捷缓存设置过期时间$/;"	v
expire	thinkphp\helper.php	/^                $expire = isset($options['expire']) ? $options['expire'] : null; \/\/修复查询缓存无法设置过期时间$/;"	v
halt	thinkphp\helper.php	/^    function halt($var)$/;"	f
has	thinkphp\helper.php	/^            $has = true;$/;"	v
input	thinkphp\helper.php	/^    function input($key = '', $default = null, $filter = null)$/;"	f
json	thinkphp\helper.php	/^    function json($data = [], $code = 200, $header = [], $options = [])$/;"	f
jsonp	thinkphp\helper.php	/^    function jsonp($data = [], $code = 200, $header = [], $options = [])$/;"	f
key	thinkphp\helper.php	/^                $key = substr($key, $pos + 1);$/;"	v
key	thinkphp\helper.php	/^            $key = substr($key, 1);$/;"	v
lang	thinkphp\helper.php	/^    function lang($name, $vars = [], $lang = '')$/;"	f
layer	thinkphp\helper.php	/^    function controller($name, $layer = 'controller', $appendSuffix = false)$/;"	v
layer	thinkphp\helper.php	/^    function model($name = '', $layer = 'model', $appendSuffix = false)$/;"	v
layer	thinkphp\helper.php	/^    function validate($name = '', $layer = 'validate', $appendSuffix = false)$/;"	v
level	thinkphp\helper.php	/^    function trace($log = '[think]', $level = 'log')$/;"	v
message	thinkphp\helper.php	/^    function abort($code, $message = null, $header = [])$/;"	v
method	thinkphp\helper.php	/^                $method = 'param';$/;"	v
method	thinkphp\helper.php	/^            $method = 'param';$/;"	v
method	thinkphp\helper.php	/^            $method = substr($key, 0, $pos);$/;"	v
model	thinkphp\helper.php	/^    function model($name = '', $layer = 'model', $appendSuffix = false)$/;"	f
name	thinkphp\helper.php	/^            $name = preg_replace_callback('\/_([a-zA-Z])\/', function ($match) {$/;"	v
params	thinkphp\helper.php	/^            $params = [];$/;"	v
params	thinkphp\helper.php	/^    function redirect($url = [], $params = [], $code = 302)$/;"	v
parse_name	thinkphp\helper.php	/^    function parse_name($name, $type = 0, $ucfirst = true)$/;"	f
redirect	thinkphp\helper.php	/^    function redirect($url = [], $params = [], $code = 302)$/;"	f
request	thinkphp\helper.php	/^    function request()$/;"	f
response	thinkphp\helper.php	/^    function response($data = [], $code = 200, $header = [], $type = 'html')$/;"	f
results	thinkphp\helper.php	/^        $results = [];$/;"	v
session	thinkphp\helper.php	/^    function session($name, $value = '', $prefix = null)$/;"	f
token	thinkphp\helper.php	/^        $token = Request::token($name, $type);$/;"	v
token	thinkphp\helper.php	/^    function token($name = '__token__', $type = 'md5')$/;"	f
trace	thinkphp\helper.php	/^    function trace($log = '[think]', $level = 'log')$/;"	f
trait_uses_recursive	thinkphp\helper.php	/^    function trait_uses_recursive($trait)$/;"	f
traits	thinkphp\helper.php	/^        $traits = class_uses($trait);$/;"	v
type	thinkphp\helper.php	/^    function parse_name($name, $type = 0, $ucfirst = true)$/;"	v
type	thinkphp\helper.php	/^    function token($name = '__token__', $type = 'md5')$/;"	v
url	thinkphp\helper.php	/^    function url($url = '', $vars = '', $suffix = true, $domain = false)$/;"	f
validate	thinkphp\helper.php	/^    function validate($name = '', $layer = 'validate', $appendSuffix = false)$/;"	f
value	thinkphp\helper.php	/^    function cache($name, $value = '', $options = null, $tag = null)$/;"	v
value	thinkphp\helper.php	/^    function config($name = '', $value = null)$/;"	v
value	thinkphp\helper.php	/^    function cookie($name, $value = '', $option = null)$/;"	v
value	thinkphp\helper.php	/^    function session($name, $value = '', $prefix = null)$/;"	v
vars	thinkphp\helper.php	/^    function action($url, $vars = [], $layer = 'controller', $appendSuffix = false)$/;"	v
vars	thinkphp\helper.php	/^    function lang($name, $vars = [], $lang = '')$/;"	v
vars	thinkphp\helper.php	/^    function url($url = '', $vars = '', $suffix = true, $domain = false)$/;"	v
vars	thinkphp\helper.php	/^    function view($template = '', $vars = [], $replace = [], $code = 200)$/;"	v
view	thinkphp\helper.php	/^    function view($template = '', $vars = [], $replace = [], $code = 200)$/;"	f
widget	thinkphp\helper.php	/^    function widget($name, $data = [])$/;"	f
xml	thinkphp\helper.php	/^    function xml($data = [], $code = 200, $header = [], $options = [])$/;"	f
App	thinkphp\library\think\App.php	/^class App implements \\ArrayAccess$/;"	c
__construct	thinkphp\library\think\App.php	/^    public function __construct($appPath = '')$/;"	f
__get	thinkphp\library\think\App.php	/^    public function __get($name)$/;"	f
__isset	thinkphp\library\think\App.php	/^    public function __isset($name)$/;"	f
__set	thinkphp\library\think\App.php	/^    public function __set($name, $value)$/;"	f
__unset	thinkphp\library\think\App.php	/^    public function __unset($name)$/;"	f
action	thinkphp\library\think\App.php	/^        $action = $info['basename'];$/;"	v
action	thinkphp\library\think\App.php	/^    public function action($url, $vars = [], $layer = 'controller', $appendSuffix = false)$/;"	f
appPath	thinkphp\library\think\App.php	/^        $this->appPath     = $appPath ?: realpath(dirname($_SERVER['SCRIPT_FILENAME']) . '\/..\/application') . '\/';$/;"	v
appPath	thinkphp\library\think\App.php	/^    protected $appPath;$/;"	v
appendSuffix	thinkphp\library\think\App.php	/^    public function parseClass($module, $layer, $name, $appendSuffix = false)$/;"	v
array	thinkphp\library\think\App.php	/^        $array = explode('\\\\', $name);$/;"	v
beginMem	thinkphp\library\think\App.php	/^        $this->beginMem    = memory_get_usage();$/;"	v
beginMem	thinkphp\library\think\App.php	/^    protected $beginMem;$/;"	v
beginTime	thinkphp\library\think\App.php	/^        $this->beginTime   = microtime(true);$/;"	v
beginTime	thinkphp\library\think\App.php	/^    protected $beginTime;$/;"	v
class	thinkphp\library\think\App.php	/^            $class  = $name;$/;"	v
class	thinkphp\library\think\App.php	/^            $class = $this->parseClass($module, $layer, $name, $appendSuffix);$/;"	v
class	thinkphp\library\think\App.php	/^            $class = str_replace('\\\\' . $module . '\\\\', '\\\\' . $common . '\\\\', $class);$/;"	v
class	thinkphp\library\think\App.php	/^        $class  = $this->controller($module, $layer, $appendSuffix);$/;"	v
class	thinkphp\library\think\App.php	/^        $class = Loader::parseName(array_pop($array), 1) . ($this->suffix || $appendSuffix ? ucfirst($layer) : '');$/;"	v
config	thinkphp\library\think\App.php	/^    public function config($name = '')$/;"	f
configExt	thinkphp\library\think\App.php	/^        $this->configExt = $this->env->get('config_ext', '.php');$/;"	v
configExt	thinkphp\library\think\App.php	/^    protected $configExt;$/;"	v
configPath	thinkphp\library\think\App.php	/^        $this->configPath  = $this->rootPath . 'config\/';$/;"	v
configPath	thinkphp\library\think\App.php	/^    protected $configPath;$/;"	v
container	thinkphp\library\think\App.php	/^        $this->container   = Container::getInstance();$/;"	v
container	thinkphp\library\think\App.php	/^    protected $container;$/;"	v
container	thinkphp\library\think\App.php	/^    public function container()$/;"	f
controller	thinkphp\library\think\App.php	/^    public function controller($name, $layer = 'controller', $appendSuffix = false, $empty = '')$/;"	f
data	thinkphp\library\think\App.php	/^            $data = $dispatch->run();$/;"	v
data	thinkphp\library\think\App.php	/^            $data = $exception->getResponse();$/;"	v
db	thinkphp\library\think\App.php	/^    public function db($config = [], $name = false)$/;"	f
debug	thinkphp\library\think\App.php	/^        $this->debug = $this->env->get('app_debug', $this->config('app.app_debug'));$/;"	v
debug	thinkphp\library\think\App.php	/^    protected $debug = true;$/;"	v
depr	thinkphp\library\think\App.php	/^        $depr = $this->config('app.pathinfo_depr');$/;"	v
dir	thinkphp\library\think\App.php	/^                $dir = $path . 'config';$/;"	v
dir	thinkphp\library\think\App.php	/^                $dir = $this->configPath . $module;$/;"	v
dispatch	thinkphp\library\think\App.php	/^                $dispatch = $this->routeCheck();$/;"	v
dispatch	thinkphp\library\think\App.php	/^            $dispatch = $this->dispatch;$/;"	v
dispatch	thinkphp\library\think\App.php	/^        $this->dispatch = $dispatch;$/;"	v
dispatch	thinkphp\library\think\App.php	/^    protected $dispatch;$/;"	v
dispatch	thinkphp\library\think\App.php	/^    public function dispatch(Dispatch $dispatch)$/;"	f
filename	thinkphp\library\think\App.php	/^                        $filename = $dir . DIRECTORY_SEPARATOR . $file;$/;"	v
filename	thinkphp\library\think\App.php	/^                $filename = $this->routePath . DIRECTORY_SEPARATOR . $file;$/;"	v
files	thinkphp\library\think\App.php	/^                $files = scandir($dir);$/;"	v
files	thinkphp\library\think\App.php	/^        $files = scandir($this->routePath);$/;"	v
getAppPath	thinkphp\library\think\App.php	/^    public function getAppPath()$/;"	f
getBeginMem	thinkphp\library\think\App.php	/^    public function getBeginMem()$/;"	f
getBeginTime	thinkphp\library\think\App.php	/^    public function getBeginTime()$/;"	f
getConfigExt	thinkphp\library\think\App.php	/^    public function getConfigExt()$/;"	f
getConfigPath	thinkphp\library\think\App.php	/^    public function getConfigPath()$/;"	f
getModulePath	thinkphp\library\think\App.php	/^    public function getModulePath()$/;"	f
getNamespace	thinkphp\library\think\App.php	/^    public function getNamespace()$/;"	f
getRootPath	thinkphp\library\think\App.php	/^    public function getRootPath()$/;"	f
getRoutePath	thinkphp\library\think\App.php	/^    public function getRoutePath()$/;"	f
getRuntimePath	thinkphp\library\think\App.php	/^    public function getRuntimePath()$/;"	f
getSuffix	thinkphp\library\think\App.php	/^    public function getSuffix()$/;"	f
getThinkPath	thinkphp\library\think\App.php	/^    public function getThinkPath()$/;"	f
guid	thinkphp\library\think\App.php	/^        $guid = $name . $layer;$/;"	v
info	thinkphp\library\think\App.php	/^        $info   = pathinfo($url);$/;"	v
init	thinkphp\library\think\App.php	/^    public function init($module = '')$/;"	f
initialize	thinkphp\library\think\App.php	/^    public function initialize()$/;"	f
isAjax	thinkphp\library\think\App.php	/^            $isAjax = $this->request->isAjax();$/;"	v
isDebug	thinkphp\library\think\App.php	/^    public function isDebug()$/;"	f
layer	thinkphp\library\think\App.php	/^    public function controller($name, $layer = 'controller', $appendSuffix = false, $empty = '')$/;"	v
layer	thinkphp\library\think\App.php	/^    public function model($name = '', $layer = 'model', $appendSuffix = false, $common = 'common')$/;"	v
layer	thinkphp\library\think\App.php	/^    public function validate($name = '', $layer = 'validate', $appendSuffix = false, $common = 'common')$/;"	v
log	thinkphp\library\think\App.php	/^    public function log($log, $type = 'info')$/;"	f
model	thinkphp\library\think\App.php	/^                $model = $this->__get($class);$/;"	v
model	thinkphp\library\think\App.php	/^            $model = $this->__get($class);$/;"	v
model	thinkphp\library\think\App.php	/^    public function model($name = '', $layer = 'model', $appendSuffix = false, $common = 'common')$/;"	f
module	thinkphp\library\think\App.php	/^                $module = $this->request->module();$/;"	v
module	thinkphp\library\think\App.php	/^            $module = $this->request->module();$/;"	v
module	thinkphp\library\think\App.php	/^        $module = $module ? $module . DIRECTORY_SEPARATOR : '';$/;"	v
module	thinkphp\library\think\App.php	/^        $module = '.' != $info['dirname'] ? $info['dirname'] : $this->request->controller();$/;"	v
modulePath	thinkphp\library\think\App.php	/^        $this->modulePath = $path;$/;"	v
modulePath	thinkphp\library\think\App.php	/^    protected $modulePath;$/;"	v
must	thinkphp\library\think\App.php	/^        $must = !is_null($this->routeMust) ? $this->routeMust : $this->config('app.url_route_must');$/;"	v
name	thinkphp\library\think\App.php	/^                $name = pathinfo($this->request->baseFile(), PATHINFO_FILENAME);$/;"	v
name	thinkphp\library\think\App.php	/^        $name  = str_replace(['\/', '.'], '\\\\', $name);$/;"	v
name	thinkphp\library\think\App.php	/^        $name = $name ?: $this->config('default_validate');$/;"	v
name	thinkphp\library\think\App.php	/^    public function db($config = [], $name = false)$/;"	v
namespace	thinkphp\library\think\App.php	/^        $this->namespace = $namespace;$/;"	v
namespace	thinkphp\library\think\App.php	/^        $this->namespace = $this->env->get('app_namespace', $this->namespace);$/;"	v
namespace	thinkphp\library\think\App.php	/^    protected $namespace = 'app';$/;"	v
offsetExists	thinkphp\library\think\App.php	/^    public function offsetExists($key)$/;"	f
offsetGet	thinkphp\library\think\App.php	/^    public function offsetGet($key)$/;"	f
offsetSet	thinkphp\library\think\App.php	/^    public function offsetSet($key, $value)$/;"	f
offsetUnset	thinkphp\library\think\App.php	/^    public function offsetUnset($key)$/;"	f
output	thinkphp\library\think\App.php	/^                $output = ob_get_clean();$/;"	v
parseClass	thinkphp\library\think\App.php	/^    public function parseClass($module, $layer, $name, $appendSuffix = false)$/;"	f
path	thinkphp\library\think\App.php	/^        $path   = $this->appPath . $module;$/;"	v
path	thinkphp\library\think\App.php	/^        $path  = $array ? implode('\\\\', $array) . '\\\\' : '';$/;"	v
path	thinkphp\library\think\App.php	/^        $path = $this->request->path();$/;"	v
response	thinkphp\library\think\App.php	/^            $response = $data;$/;"	v
response	thinkphp\library\think\App.php	/^            $response = Response::create($data, $type);$/;"	v
response	thinkphp\library\think\App.php	/^            $response = Response::create();$/;"	v
rootPath	thinkphp\library\think\App.php	/^        $this->rootPath    = dirname(realpath($this->appPath)) . '\/';$/;"	v
rootPath	thinkphp\library\think\App.php	/^    protected $rootPath;$/;"	v
routeCheck	thinkphp\library\think\App.php	/^    public function routeCheck()$/;"	f
routeMust	thinkphp\library\think\App.php	/^        $this->routeMust = $must;$/;"	v
routeMust	thinkphp\library\think\App.php	/^    protected $routeMust;$/;"	v
routeMust	thinkphp\library\think\App.php	/^    public function routeMust($must = false)$/;"	f
routePath	thinkphp\library\think\App.php	/^        $this->routePath   = $this->rootPath . 'route\/';$/;"	v
routePath	thinkphp\library\think\App.php	/^    protected $routePath;$/;"	v
rules	thinkphp\library\think\App.php	/^                $rules = include $filename;$/;"	v
run	thinkphp\library\think\App.php	/^    public function run()$/;"	f
runtimePath	thinkphp\library\think\App.php	/^        $this->runtimePath = $this->rootPath . 'runtime\/';$/;"	v
runtimePath	thinkphp\library\think\App.php	/^    protected $runtimePath;$/;"	v
setModulePath	thinkphp\library\think\App.php	/^    public function setModulePath($path)$/;"	f
setNamespace	thinkphp\library\think\App.php	/^    public function setNamespace($namespace)$/;"	f
suffix	thinkphp\library\think\App.php	/^        $this->suffix = $this->config('app.class_suffix');$/;"	v
suffix	thinkphp\library\think\App.php	/^    protected $suffix = false;$/;"	v
thinkPath	thinkphp\library\think\App.php	/^        $this->thinkPath   = dirname(dirname(__DIR__)) . '\/';$/;"	v
thinkPath	thinkphp\library\think\App.php	/^    protected $thinkPath;$/;"	v
type	thinkphp\library\think\App.php	/^            $type   = $isAjax ? $this->config('app.default_ajax_return') : $this->config('app.default_return_type');$/;"	v
type	thinkphp\library\think\App.php	/^    public function log($log, $type = 'info')$/;"	v
validate	thinkphp\library\think\App.php	/^                $validate = $this->__get($class);$/;"	v
validate	thinkphp\library\think\App.php	/^            $validate = $this->__get($class);$/;"	v
validate	thinkphp\library\think\App.php	/^    public function validate($name = '', $layer = 'validate', $appendSuffix = false, $common = 'common')$/;"	f
vars	thinkphp\library\think\App.php	/^                $vars = [$vars];$/;"	v
vars	thinkphp\library\think\App.php	/^    public function action($url, $vars = [], $layer = 'controller', $appendSuffix = false)$/;"	v
version	thinkphp\library\think\App.php	/^    public function version()$/;"	f
Build	thinkphp\library\think\Build.php	/^class Build$/;"	c
__construct	thinkphp\library\think\Build.php	/^    public function __construct(App $app)$/;"	f
app	thinkphp\library\think\Build.php	/^        $this->app      = $app;$/;"	v
app	thinkphp\library\think\Build.php	/^    protected $app;$/;"	v
basePath	thinkphp\library\think\Build.php	/^        $this->basePath = $this->app->getAppPath();$/;"	v
basePath	thinkphp\library\think\Build.php	/^    protected $basePath;$/;"	v
build	thinkphp\library\think\Build.php	/^    public function run(array $build = [], $namespace = 'app', $suffix = false)$/;"	v
buildCommon	thinkphp\library\think\Build.php	/^    protected function buildCommon($module)$/;"	f
buildDir	thinkphp\library\think\Build.php	/^    protected function buildDir($list)$/;"	f
buildFile	thinkphp\library\think\Build.php	/^    protected function buildFile($list)$/;"	f
buildHello	thinkphp\library\think\Build.php	/^    protected function buildHello($module, $namespace, $suffix = false)$/;"	f
checkDirBuild	thinkphp\library\think\Build.php	/^    protected function checkDirBuild($dirname)$/;"	f
class	thinkphp\library\think\Build.php	/^                    $class    = $val . ($suffix ? ucfirst($path) : '');$/;"	v
content	thinkphp\library\think\Build.php	/^                            $content = "<?php\\nnamespace {$space};\\n\\nclass {$class}\\n{\\n\\n}";$/;"	v
content	thinkphp\library\think\Build.php	/^                            $content = "<?php\\nnamespace {$space};\\n\\nuse think\\Model;\\n\\nclass {$class} extends Model\\n{\\n\\n}";$/;"	v
content	thinkphp\library\think\Build.php	/^                            $content = '';$/;"	v
content	thinkphp\library\think\Build.php	/^            $content = file_get_contents($this->app->getThinkPath() . 'tpl' . DIRECTORY_SEPARATOR . 'default_index.tpl');$/;"	v
content	thinkphp\library\think\Build.php	/^            $content = str_replace(['{$app}', '{$module}', '{layer}', '{$suffix}'], [$namespace, $module ? $module . '\\\\' : '', 'controller', $suffix ? 'Controller' : ''], $content);$/;"	v
filename	thinkphp\library\think\Build.php	/^                            $filename = $modulePath . $path . DIRECTORY_SEPARATOR . $val . '.html';$/;"	v
filename	thinkphp\library\think\Build.php	/^                    $filename = $modulePath . $path . DIRECTORY_SEPARATOR . $val . ($suffix ? ucfirst($path) : '') . '.php';$/;"	v
filename	thinkphp\library\think\Build.php	/^        $filename = $this->app->getConfigPath() . ($module ? $module . DIRECTORY_SEPARATOR : '') . 'config.php';$/;"	v
filename	thinkphp\library\think\Build.php	/^        $filename = $this->basePath . ($module ? $module . DIRECTORY_SEPARATOR : '') . 'common.php';$/;"	v
filename	thinkphp\library\think\Build.php	/^        $filename = $this->basePath . ($module ? $module . DIRECTORY_SEPARATOR : '') . 'controller' . DIRECTORY_SEPARATOR . 'Index' . ($suffix ? 'Controller' : '') . '.php';$/;"	v
list	thinkphp\library\think\Build.php	/^            $list = [$/;"	v
list	thinkphp\library\think\Build.php	/^    public function module($module = '', $list = [], $namespace = 'app', $suffix = false)$/;"	v
lockfile	thinkphp\library\think\Build.php	/^        $lockfile = $this->basePath . 'build.lock';$/;"	v
module	thinkphp\library\think\Build.php	/^        $module = $module ? $module : '';$/;"	v
module	thinkphp\library\think\Build.php	/^        foreach ($build as $module => $list) {$/;"	v
module	thinkphp\library\think\Build.php	/^    public function module($module = '', $list = [], $namespace = 'app', $suffix = false)$/;"	f
modulePath	thinkphp\library\think\Build.php	/^            $modulePath = $this->basePath . $module . '\/';$/;"	v
path	thinkphp\library\think\Build.php	/^        foreach ($list as $path => $file) {$/;"	v
run	thinkphp\library\think\Build.php	/^    public function run(array $build = [], $namespace = 'app', $suffix = false)$/;"	f
space	thinkphp\library\think\Build.php	/^                    $space    = $namespace . '\\\\' . ($module ? $module . '\\\\' : '') . $path;$/;"	v
suffix	thinkphp\library\think\Build.php	/^    protected function buildHello($module, $namespace, $suffix = false)$/;"	v
val	thinkphp\library\think\Build.php	/^                    $val      = trim($val);$/;"	v
Cache	thinkphp\library\think\Cache.php	/^class Cache$/;"	c
__call	thinkphp\library\think\Cache.php	/^    public function __call($method, $args)$/;"	f
__construct	thinkphp\library\think\Cache.php	/^    public function __construct(App $app)$/;"	f
app	thinkphp\library\think\Cache.php	/^        $this->app = $app;$/;"	v
app	thinkphp\library\think\Cache.php	/^    protected $app;$/;"	v
class	thinkphp\library\think\Cache.php	/^            $class = false !== strpos($type, '\\\\') ? $type : '\\\\think\\\\cache\\\\driver\\\\' . ucwords($type);$/;"	v
connect	thinkphp\library\think\Cache.php	/^                $connect = $this->connect($options);$/;"	v
connect	thinkphp\library\think\Cache.php	/^                $connect = $this->connect($this->app['config']->get('cache.default'));$/;"	v
connect	thinkphp\library\think\Cache.php	/^                $connect = $this->connect($this->app['config']->pull('cache'));$/;"	v
connect	thinkphp\library\think\Cache.php	/^    public function connect(array $options = [], $name = false)$/;"	f
handler	thinkphp\library\think\Cache.php	/^            $this->handler = $connect;$/;"	v
handler	thinkphp\library\think\Cache.php	/^    protected $handler;$/;"	v
init	thinkphp\library\think\Cache.php	/^    public function init(array $options = [])$/;"	f
instance	thinkphp\library\think\Cache.php	/^    protected $instance = [];$/;"	v
name	thinkphp\library\think\Cache.php	/^                $name = md5(serialize($options));$/;"	v
name	thinkphp\library\think\Cache.php	/^            $name = md5(serialize($options));$/;"	v
options	thinkphp\library\think\Cache.php	/^    public function connect(array $options = [], $name = false)$/;"	v
options	thinkphp\library\think\Cache.php	/^    public function init(array $options = [])$/;"	v
store	thinkphp\library\think\Cache.php	/^    public function store($name = '')$/;"	f
type	thinkphp\library\think\Cache.php	/^        $type = !empty($options['type']) ? $options['type'] : 'File';$/;"	v
Collection	thinkphp\library\think\Collection.php	/^class Collection implements ArrayAccess, Countable, IteratorAggregate, JsonSerializable$/;"	c
__construct	thinkphp\library\think\Collection.php	/^    public function __construct($items = [])$/;"	f
__toString	thinkphp\library\think\Collection.php	/^    public function __toString()$/;"	f
all	thinkphp\library\think\Collection.php	/^    public function all()$/;"	f
callback	thinkphp\library\think\Collection.php	/^    public function filter(callable $callback = null)$/;"	v
callback	thinkphp\library\think\Collection.php	/^    public function sort(callable $callback = null)$/;"	v
chunk	thinkphp\library\think\Collection.php	/^    public function chunk($size, $preserveKeys = false)$/;"	f
chunks	thinkphp\library\think\Collection.php	/^        $chunks = [];$/;"	v
column	thinkphp\library\think\Collection.php	/^    public function column($column_key, $index_key = null)$/;"	f
convertToArray	thinkphp\library\think\Collection.php	/^    protected function convertToArray($items)$/;"	f
count	thinkphp\library\think\Collection.php	/^    public function count()$/;"	f
diff	thinkphp\library\think\Collection.php	/^    public function diff($items)$/;"	f
each	thinkphp\library\think\Collection.php	/^    public function each(callable $callback)$/;"	f
filter	thinkphp\library\think\Collection.php	/^    public function filter(callable $callback = null)$/;"	f
flip	thinkphp\library\think\Collection.php	/^    public function flip()$/;"	f
getIterator	thinkphp\library\think\Collection.php	/^    public function getIterator()$/;"	f
index_key	thinkphp\library\think\Collection.php	/^    public function column($column_key, $index_key = null)$/;"	v
initial	thinkphp\library\think\Collection.php	/^    public function reduce(callable $callback, $initial = null)$/;"	v
intersect	thinkphp\library\think\Collection.php	/^    public function intersect($items)$/;"	f
isEmpty	thinkphp\library\think\Collection.php	/^    public function isEmpty()$/;"	f
items	thinkphp\library\think\Collection.php	/^            $this->items = [$key => $value] + $this->items;$/;"	v
items	thinkphp\library\think\Collection.php	/^        $items = $this->items;$/;"	v
items	thinkphp\library\think\Collection.php	/^        $this->items = $this->convertToArray($items);$/;"	v
items	thinkphp\library\think\Collection.php	/^    protected $items = [];$/;"	v
jsonSerialize	thinkphp\library\think\Collection.php	/^    public function jsonSerialize()$/;"	f
key	thinkphp\library\think\Collection.php	/^        foreach ($this->items as $key => $item) {$/;"	v
key	thinkphp\library\think\Collection.php	/^    public function unshift($value, $key = null)$/;"	v
keys	thinkphp\library\think\Collection.php	/^    public function keys()$/;"	f
length	thinkphp\library\think\Collection.php	/^    public function slice($offset, $length = null, $preserveKeys = false)$/;"	v
make	thinkphp\library\think\Collection.php	/^    public static function make($items = [])$/;"	f
merge	thinkphp\library\think\Collection.php	/^    public function merge($items)$/;"	f
offsetExists	thinkphp\library\think\Collection.php	/^    public function offsetExists($offset)$/;"	f
offsetGet	thinkphp\library\think\Collection.php	/^    public function offsetGet($offset)$/;"	f
offsetSet	thinkphp\library\think\Collection.php	/^    public function offsetSet($offset, $value)$/;"	f
offsetUnset	thinkphp\library\think\Collection.php	/^    public function offsetUnset($offset)$/;"	f
pop	thinkphp\library\think\Collection.php	/^    public function pop()$/;"	f
preserveKeys	thinkphp\library\think\Collection.php	/^    public function chunk($size, $preserveKeys = false)$/;"	v
reduce	thinkphp\library\think\Collection.php	/^    public function reduce(callable $callback, $initial = null)$/;"	f
result	thinkphp\library\think\Collection.php	/^            $result = $callback($item, $key);$/;"	v
reverse	thinkphp\library\think\Collection.php	/^    public function reverse()$/;"	f
shift	thinkphp\library\think\Collection.php	/^    public function shift()$/;"	f
shuffle	thinkphp\library\think\Collection.php	/^    public function shuffle()$/;"	f
slice	thinkphp\library\think\Collection.php	/^    public function slice($offset, $length = null, $preserveKeys = false)$/;"	f
sort	thinkphp\library\think\Collection.php	/^    public function sort(callable $callback = null)$/;"	f
toArray	thinkphp\library\think\Collection.php	/^    public function toArray()$/;"	f
toJson	thinkphp\library\think\Collection.php	/^    public function toJson($options = JSON_UNESCAPED_UNICODE)$/;"	f
unshift	thinkphp\library\think\Collection.php	/^    public function unshift($value, $key = null)$/;"	f
Config	thinkphp\library\think\Config.php	/^class Config$/;"	c
__get	thinkphp\library\think\Config.php	/^    public function __get($name)$/;"	f
__isset	thinkphp\library\think\Config.php	/^    public function __isset($name)$/;"	f
__set	thinkphp\library\think\Config.php	/^    public function __set($name, $value)$/;"	f
class	thinkphp\library\think\Config.php	/^        $class = false !== strpos($type, '\\\\') ? $type : '\\\\think\\\\config\\\\driver\\\\' . ucwords($type);$/;"	v
config	thinkphp\library\think\Config.php	/^                $config = $config[$val];$/;"	v
config	thinkphp\library\think\Config.php	/^            $this->config = [];$/;"	v
config	thinkphp\library\think\Config.php	/^        $config = $this->config;$/;"	v
config	thinkphp\library\think\Config.php	/^    private $config = [];$/;"	v
file	thinkphp\library\think\Config.php	/^                $file = $path . 'config\/' . $name[0] . Container::get('app')->getConfigExt();$/;"	v
file	thinkphp\library\think\Config.php	/^                $file = Container::get('app')->getConfigPath() . $module . $name[0] . Container::get('app')->getConfigExt();$/;"	v
get	thinkphp\library\think\Config.php	/^    public function get($name = null)$/;"	f
has	thinkphp\library\think\Config.php	/^    public function has($name)$/;"	f
load	thinkphp\library\think\Config.php	/^    public function load($file, $name = '')$/;"	f
module	thinkphp\library\think\Config.php	/^            $module = $module ? $module . '\/' : '';$/;"	v
module	thinkphp\library\think\Config.php	/^            $module = Container::get('request')->module();$/;"	v
name	thinkphp\library\think\Config.php	/^                $name = $this->prefix . '.' . $name;$/;"	v
name	thinkphp\library\think\Config.php	/^            $name = $this->prefix . '.' . $name;$/;"	v
name	thinkphp\library\think\Config.php	/^            $name = array_change_key_case($name);$/;"	v
name	thinkphp\library\think\Config.php	/^            $name = explode('.', strtolower($name));$/;"	v
name	thinkphp\library\think\Config.php	/^            $name = strtolower($name);$/;"	v
name	thinkphp\library\think\Config.php	/^        $name   = explode('.', strtolower($name));$/;"	v
name	thinkphp\library\think\Config.php	/^        $name = strtolower($name);$/;"	v
name	thinkphp\library\think\Config.php	/^    public function load($file, $name = '')$/;"	v
parse	thinkphp\library\think\Config.php	/^    public function parse($config, $type = '', $name = '')$/;"	f
path	thinkphp\library\think\Config.php	/^            $path   = Container::get('app')->getAppPath() . $module;$/;"	v
prefix	thinkphp\library\think\Config.php	/^        $this->prefix = $prefix;$/;"	v
prefix	thinkphp\library\think\Config.php	/^    private $prefix = 'app';$/;"	v
pull	thinkphp\library\think\Config.php	/^    public function pull($name)$/;"	f
reset	thinkphp\library\think\Config.php	/^    public function reset($prefix = '')$/;"	f
result	thinkphp\library\think\Config.php	/^                    $result = $name;$/;"	v
result	thinkphp\library\think\Config.php	/^                    $result = array_merge($this->config[$value], $name);$/;"	v
result	thinkphp\library\think\Config.php	/^                $result = $this->config = array_merge($this->config, $name);$/;"	v
result	thinkphp\library\think\Config.php	/^            $result = $this->config;$/;"	v
set	thinkphp\library\think\Config.php	/^    public function set($name, $value = null)$/;"	f
setDefaultPrefix	thinkphp\library\think\Config.php	/^    public function setDefaultPrefix($prefix)$/;"	f
type	thinkphp\library\think\Config.php	/^            $type = pathinfo($config, PATHINFO_EXTENSION);$/;"	v
type	thinkphp\library\think\Config.php	/^            $type = pathinfo($file, PATHINFO_EXTENSION);$/;"	v
type	thinkphp\library\think\Config.php	/^    public function parse($config, $type = '', $name = '')$/;"	v
value	thinkphp\library\think\Config.php	/^    public function set($name, $value = null)$/;"	v
Console	thinkphp\library\think\Console.php	/^class Console$/;"	c
__construct	thinkphp\library\think\Console.php	/^    public function __construct($name = 'UNKNOWN', $version = 'UNKNOWN')$/;"	f
abbrev	thinkphp\library\think\Console.php	/^                $abbrev             = substr($name, 0, $len);$/;"	v
abbrevs	thinkphp\library\think\Console.php	/^        $abbrevs = [];$/;"	v
add	thinkphp\library\think\Console.php	/^    public function add(Command $command)$/;"	f
addCommands	thinkphp\library\think\Console.php	/^    public function addCommands(array $commands)$/;"	f
addDefaultCommands	thinkphp\library\think\Console.php	/^    public static function addDefaultCommands(array $classnames)$/;"	f
all	thinkphp\library\think\Console.php	/^    public function all($namespace = null)$/;"	f
allCommands	thinkphp\library\think\Console.php	/^        $allCommands = array_keys($this->commands);$/;"	v
allNamespaces	thinkphp\library\think\Console.php	/^        $allNamespaces = $this->getNamespaces();$/;"	v
alternatives	thinkphp\library\think\Console.php	/^        $alternatives = [];$/;"	v
alternatives	thinkphp\library\think\Console.php	/^        $alternatives = array_filter($alternatives, function ($lev) use ($threshold) {$/;"	v
autoExit	thinkphp\library\think\Console.php	/^        $this->autoExit = (bool) $boolean;$/;"	v
autoExit	thinkphp\library\think\Console.php	/^    private $autoExit        = true;$/;"	v
call	thinkphp\library\think\Console.php	/^    public static function call($command, array $parameters = [], $driver = 'buffer')$/;"	f
catchExceptions	thinkphp\library\think\Console.php	/^        $this->catchExceptions = (bool) $boolean;$/;"	v
catchExceptions	thinkphp\library\think\Console.php	/^    private $catchExceptions = true;$/;"	v
collectionName	thinkphp\library\think\Console.php	/^            foreach ($collectionParts as $collectionName => $parts) {$/;"	v
collectionParts	thinkphp\library\think\Console.php	/^        $collectionParts = [];$/;"	v
command	thinkphp\library\think\Console.php	/^        $command = $this->commands[$name];$/;"	v
command	thinkphp\library\think\Console.php	/^        $command = $this->find($name);$/;"	v
commandList	thinkphp\library\think\Console.php	/^            $commandList = $this->commands;$/;"	v
commandName	thinkphp\library\think\Console.php	/^                $commandName = $commandList[$nameOrAlias]->getName();$/;"	v
commandName	thinkphp\library\think\Console.php	/^                return $commandName === $nameOrAlias || !in_array($commandName, $commands);$/;"	v
commands	thinkphp\library\think\Console.php	/^                $commands = include Container::get('env')->get('config_path') . 'command.php';$/;"	v
commands	thinkphp\library\think\Console.php	/^            $commands = array_filter($commands, function ($nameOrAlias) use ($commandList, $commands) {$/;"	v
commands	thinkphp\library\think\Console.php	/^        $commands = [];$/;"	v
commands	thinkphp\library\think\Console.php	/^        $commands = preg_grep('{^' . $expr . '}', $allCommands);$/;"	v
commands	thinkphp\library\think\Console.php	/^    private $commands = [];$/;"	v
configureIO	thinkphp\library\think\Console.php	/^    protected function configureIO(Input $input, Output $output)$/;"	f
console	thinkphp\library\think\Console.php	/^            $console = new self('Think Console', '0.1');$/;"	v
console	thinkphp\library\think\Console.php	/^        $console = self::init(false);$/;"	v
console	thinkphp\library\think\Console.php	/^        static $console;$/;"	v
defaultCommand	thinkphp\library\think\Console.php	/^        $this->defaultCommand = $commandName;$/;"	v
defaultCommand	thinkphp\library\think\Console.php	/^        $this->defaultCommand = 'list';$/;"	v
defaultCommand	thinkphp\library\think\Console.php	/^    private $defaultCommand;$/;"	v
defaultCommands	thinkphp\library\think\Console.php	/^        $defaultCommands = [];$/;"	v
defaultCommands	thinkphp\library\think\Console.php	/^    private static $defaultCommands = [$/;"	v
definition	thinkphp\library\think\Console.php	/^        $this->definition     = $this->getDefaultInputDefinition();$/;"	v
definition	thinkphp\library\think\Console.php	/^        $this->definition = $definition;$/;"	v
definition	thinkphp\library\think\Console.php	/^    private $definition;$/;"	v
doRun	thinkphp\library\think\Console.php	/^    public function doRun(Input $input, Output $output)$/;"	f
doRunCommand	thinkphp\library\think\Console.php	/^    protected function doRunCommand(Command $command, Input $input, Output $output)$/;"	f
exact	thinkphp\library\think\Console.php	/^        $exact = in_array($name, $commands, true);$/;"	v
exact	thinkphp\library\think\Console.php	/^        $exact = in_array($namespace, $namespaces, true);$/;"	v
exists	thinkphp\library\think\Console.php	/^                $exists = isset($alternatives[$collectionName]);$/;"	v
exitCode	thinkphp\library\think\Console.php	/^                    $exitCode = 1;$/;"	v
exitCode	thinkphp\library\think\Console.php	/^                $exitCode = (int) $exitCode;$/;"	v
exitCode	thinkphp\library\think\Console.php	/^                $exitCode = 1;$/;"	v
exitCode	thinkphp\library\think\Console.php	/^                $exitCode = 255;$/;"	v
exitCode	thinkphp\library\think\Console.php	/^            $exitCode = $e->getCode();$/;"	v
exitCode	thinkphp\library\think\Console.php	/^            $exitCode = $this->doRun($input, $output);$/;"	v
exitCode	thinkphp\library\think\Console.php	/^        $exitCode = $this->doRunCommand($command, $input, $output);$/;"	v
expr	thinkphp\library\think\Console.php	/^        $expr          = preg_replace_callback('{([^:]+|)}', function ($matches) {$/;"	v
expr	thinkphp\library\think\Console.php	/^        $expr = preg_replace_callback('{([^:]+|)}', function ($matches) {$/;"	v
extractAllNamespaces	thinkphp\library\think\Console.php	/^    private function extractAllNamespaces($name)$/;"	f
extractNamespace	thinkphp\library\think\Console.php	/^    public function extractNamespace($name, $limit = null)$/;"	f
find	thinkphp\library\think\Console.php	/^    public function find($name)$/;"	f
findAlternatives	thinkphp\library\think\Console.php	/^    private function findAlternatives($name, $collection)$/;"	f
findNamespace	thinkphp\library\think\Console.php	/^    public function findNamespace($namespace)$/;"	f
get	thinkphp\library\think\Console.php	/^    public function get($name)$/;"	f
getAbbreviationSuggestions	thinkphp\library\think\Console.php	/^    private function getAbbreviationSuggestions($abbrevs)$/;"	f
getAbbreviations	thinkphp\library\think\Console.php	/^    public static function getAbbreviations($names)$/;"	f
getCommandName	thinkphp\library\think\Console.php	/^    protected function getCommandName(Input $input)$/;"	f
getDefaultCommands	thinkphp\library\think\Console.php	/^    protected function getDefaultCommands()$/;"	f
getDefaultInputDefinition	thinkphp\library\think\Console.php	/^    protected function getDefaultInputDefinition()$/;"	f
getDefinition	thinkphp\library\think\Console.php	/^    public function getDefinition()$/;"	f
getHelp	thinkphp\library\think\Console.php	/^    public function getHelp()$/;"	f
getLongVersion	thinkphp\library\think\Console.php	/^    public function getLongVersion()$/;"	f
getName	thinkphp\library\think\Console.php	/^    public function getName()$/;"	f
getNamespaces	thinkphp\library\think\Console.php	/^    public function getNamespaces()$/;"	f
getVersion	thinkphp\library\think\Console.php	/^    public function getVersion()$/;"	f
has	thinkphp\library\think\Console.php	/^    public function has($name)$/;"	f
helpCommand	thinkphp\library\think\Console.php	/^            $helpCommand = $this->get('help');$/;"	v
i	thinkphp\library\think\Console.php	/^        foreach (explode(':', $name) as $i => $subname) {$/;"	v
init	thinkphp\library\think\Console.php	/^    public static function init($run = true)$/;"	f
input	thinkphp\library\think\Console.php	/^                $input = new Input(['help']);$/;"	v
input	thinkphp\library\think\Console.php	/^            $input = new Input([$this->defaultCommand]);$/;"	v
input	thinkphp\library\think\Console.php	/^        $input  = new Input($parameters);$/;"	v
input	thinkphp\library\think\Console.php	/^        $input  = new Input();$/;"	v
lev	thinkphp\library\think\Console.php	/^                $lev = levenshtein($subname, $parts[$i]);$/;"	v
lev	thinkphp\library\think\Console.php	/^            $lev = levenshtein($name, $item);$/;"	v
limit	thinkphp\library\think\Console.php	/^    public function extractNamespace($name, $limit = null)$/;"	v
message	thinkphp\library\think\Console.php	/^            $message = sprintf('Command "%s" is not defined.', $name);$/;"	v
message	thinkphp\library\think\Console.php	/^            $message = sprintf('There are no commands defined in the "%s" namespace.', $namespace);$/;"	v
name	thinkphp\library\think\Console.php	/^                $name  = 'help';$/;"	v
name	thinkphp\library\think\Console.php	/^            $name  = $this->defaultCommand;$/;"	v
name	thinkphp\library\think\Console.php	/^        $name = $this->getCommandName($input);$/;"	v
name	thinkphp\library\think\Console.php	/^        $this->name    = $name;$/;"	v
name	thinkphp\library\think\Console.php	/^        $this->name = $name;$/;"	v
name	thinkphp\library\think\Console.php	/^        foreach ($this->commands as $name => $command) {$/;"	v
name	thinkphp\library\think\Console.php	/^    private $name;$/;"	v
namespaces	thinkphp\library\think\Console.php	/^                $namespaces = array_merge($namespaces, $this->extractAllNamespaces($alias));$/;"	v
namespaces	thinkphp\library\think\Console.php	/^            $namespaces = array_merge($namespaces, $this->extractAllNamespaces($command->getName()));$/;"	v
namespaces	thinkphp\library\think\Console.php	/^        $namespaces = [];$/;"	v
namespaces	thinkphp\library\think\Console.php	/^        $namespaces = preg_grep('{^' . $expr . '}', $allNamespaces);$/;"	v
output	thinkphp\library\think\Console.php	/^        $output = new Output($driver);$/;"	v
output	thinkphp\library\think\Console.php	/^        $output = new Output();$/;"	v
parameters	thinkphp\library\think\Console.php	/^    public static function call($command, array $parameters = [], $driver = 'buffer')$/;"	v
parts	thinkphp\library\think\Console.php	/^        $parts      = explode(':', $name, -1);$/;"	v
parts	thinkphp\library\think\Console.php	/^        $parts = explode(':', $name);$/;"	v
pos	thinkphp\library\think\Console.php	/^            if (false !== $pos = strrpos($name, ':')) {$/;"	v
register	thinkphp\library\think\Console.php	/^    public function register($name)$/;"	f
run	thinkphp\library\think\Console.php	/^    public function run()$/;"	f
setAutoExit	thinkphp\library\think\Console.php	/^    public function setAutoExit($boolean)$/;"	f
setCatchExceptions	thinkphp\library\think\Console.php	/^    public function setCatchExceptions($boolean)$/;"	f
setDefaultCommand	thinkphp\library\think\Console.php	/^    public function setDefaultCommand($commandName)$/;"	f
setDefinition	thinkphp\library\think\Console.php	/^    public function setDefinition(InputDefinition $definition)$/;"	f
setName	thinkphp\library\think\Console.php	/^    public function setName($name)$/;"	f
setVersion	thinkphp\library\think\Console.php	/^    public function setVersion($version)$/;"	f
suggestions	thinkphp\library\think\Console.php	/^            $suggestions = $this->getAbbreviationSuggestions(array_values($commands));$/;"	v
threshold	thinkphp\library\think\Console.php	/^        $threshold    = 1e3;$/;"	v
version	thinkphp\library\think\Console.php	/^        $this->version = $version;$/;"	v
version	thinkphp\library\think\Console.php	/^    private $version;$/;"	v
version	thinkphp\library\think\Console.php	/^    public function __construct($name = 'UNKNOWN', $version = 'UNKNOWN')$/;"	v
wantHelps	thinkphp\library\think\Console.php	/^                $this->wantHelps = true;$/;"	v
wantHelps	thinkphp\library\think\Console.php	/^            $this->wantHelps = false;$/;"	v
wantHelps	thinkphp\library\think\Console.php	/^    private $wantHelps = false;$/;"	v
Container	thinkphp\library\think\Container.php	/^class Container$/;"	c
abstract	thinkphp\library\think\Container.php	/^            $abstract = $this->bind[$abstract];$/;"	v
args	thinkphp\library\think\Container.php	/^            $args = $this->bindParams($constructor, $vars);$/;"	v
args	thinkphp\library\think\Container.php	/^            $args = [];$/;"	v
args	thinkphp\library\think\Container.php	/^        $args    = $this->bindParams($reflect, $vars);$/;"	v
args	thinkphp\library\think\Container.php	/^        $args = $this->bindParams($reflect, $vars);$/;"	v
args	thinkphp\library\think\Container.php	/^        $args = [];$/;"	v
bind	thinkphp\library\think\Container.php	/^            $this->bind = array_merge($this->bind, $abstract);$/;"	v
bind	thinkphp\library\think\Container.php	/^    protected $bind = [];$/;"	v
bind	thinkphp\library\think\Container.php	/^    public function bind($abstract, $concrete = null)$/;"	f
bindParams	thinkphp\library\think\Container.php	/^    protected function bindParams($reflect, $vars = [])$/;"	f
bound	thinkphp\library\think\Container.php	/^    public function bound($abstract)$/;"	f
class	thinkphp\library\think\Container.php	/^                $class = $param->getClass();$/;"	v
class	thinkphp\library\think\Container.php	/^            $class   = is_object($method[0]) ? $method[0] : $this->invokeClass($method[0]);$/;"	v
className	thinkphp\library\think\Container.php	/^                    $className = $class->getName();$/;"	v
concrete	thinkphp\library\think\Container.php	/^                $concrete = $this->bind[$abstract];$/;"	v
concrete	thinkphp\library\think\Container.php	/^    public function bind($abstract, $concrete = null)$/;"	v
concrete	thinkphp\library\think\Container.php	/^    public static function set($abstract, $concrete = null)$/;"	v
constructor	thinkphp\library\think\Container.php	/^        $constructor = $reflect->getConstructor();$/;"	v
get	thinkphp\library\think\Container.php	/^    public static function get($abstract, $vars = [], $newInstance = false)$/;"	f
getInstance	thinkphp\library\think\Container.php	/^    public static function getInstance()$/;"	f
instance	thinkphp\library\think\Container.php	/^    protected static $instance;$/;"	v
instance	thinkphp\library\think\Container.php	/^    public function instance($abstract, $instance)$/;"	f
instances	thinkphp\library\think\Container.php	/^    protected $instances = [];$/;"	v
invoke	thinkphp\library\think\Container.php	/^    public function invoke($callable, $vars = [])$/;"	f
invokeClass	thinkphp\library\think\Container.php	/^    public function invokeClass($class, $vars = [])$/;"	f
invokeFunction	thinkphp\library\think\Container.php	/^    public function invokeFunction($function, $vars = [])$/;"	f
invokeMethod	thinkphp\library\think\Container.php	/^    public function invokeMethod($method, $vars = [])$/;"	f
make	thinkphp\library\think\Container.php	/^    public function make($abstract, $vars = [], $newInstance = false)$/;"	f
name	thinkphp\library\think\Container.php	/^                $name  = $param->getName();$/;"	v
newInstance	thinkphp\library\think\Container.php	/^            $newInstance = true;$/;"	v
object	thinkphp\library\think\Container.php	/^                    $object = $this->invokeFunction($concrete, $vars);$/;"	v
object	thinkphp\library\think\Container.php	/^                    $object = $this->make($concrete, $vars, $newInstance);$/;"	v
object	thinkphp\library\think\Container.php	/^                $object = $this->invokeClass($abstract, $vars);$/;"	v
object	thinkphp\library\think\Container.php	/^            $object = $this->instances[$abstract];$/;"	v
params	thinkphp\library\think\Container.php	/^            $params = $reflect->getParameters();$/;"	v
reflect	thinkphp\library\think\Container.php	/^            $reflect = new \\ReflectionMethod($class, $method[1]);$/;"	v
reflect	thinkphp\library\think\Container.php	/^            $reflect = new \\ReflectionMethod($method);$/;"	v
reflect	thinkphp\library\think\Container.php	/^        $reflect     = new \\ReflectionClass($class);$/;"	v
reflect	thinkphp\library\think\Container.php	/^        $reflect = new \\ReflectionFunction($function);$/;"	v
result	thinkphp\library\think\Container.php	/^            $result = $this->invokeFunction($callable, $vars);$/;"	v
result	thinkphp\library\think\Container.php	/^            $result = $this->invokeMethod($callable, $vars);$/;"	v
set	thinkphp\library\think\Container.php	/^    public static function set($abstract, $concrete = null)$/;"	f
type	thinkphp\library\think\Container.php	/^            $type   = key($vars) === 0 ? 1 : 0;$/;"	v
vars	thinkphp\library\think\Container.php	/^            $vars        = [];$/;"	v
vars	thinkphp\library\think\Container.php	/^    protected function bindParams($reflect, $vars = [])$/;"	v
vars	thinkphp\library\think\Container.php	/^    public function invoke($callable, $vars = [])$/;"	v
vars	thinkphp\library\think\Container.php	/^    public function invokeClass($class, $vars = [])$/;"	v
vars	thinkphp\library\think\Container.php	/^    public function invokeFunction($function, $vars = [])$/;"	v
vars	thinkphp\library\think\Container.php	/^    public function invokeMethod($method, $vars = [])$/;"	v
vars	thinkphp\library\think\Container.php	/^    public function make($abstract, $vars = [], $newInstance = false)$/;"	v
vars	thinkphp\library\think\Container.php	/^    public static function get($abstract, $vars = [], $newInstance = false)$/;"	v
Controller	thinkphp\library\think\Controller.php	/^class Controller$/;"	c
__construct	thinkphp\library\think\Controller.php	/^    public function __construct(Request $request, App $app)$/;"	f
app	thinkphp\library\think\Controller.php	/^        $this->app     = $app;$/;"	v
app	thinkphp\library\think\Controller.php	/^    protected $app;$/;"	v
assign	thinkphp\library\think\Controller.php	/^    protected function assign($name, $value = '')$/;"	f
batchValidate	thinkphp\library\think\Controller.php	/^    protected $batchValidate = false;$/;"	v
beforeAction	thinkphp\library\think\Controller.php	/^    protected function beforeAction($method, $options = [])$/;"	f
beforeActionList	thinkphp\library\think\Controller.php	/^    protected $beforeActionList = [];$/;"	v
display	thinkphp\library\think\Controller.php	/^    protected function display($content = '', $vars = [], $replace = [], $config = [])$/;"	f
engine	thinkphp\library\think\Controller.php	/^    protected function engine($engine)$/;"	f
failException	thinkphp\library\think\Controller.php	/^        $this->failException = $fail;$/;"	v
failException	thinkphp\library\think\Controller.php	/^    protected $failException = false;$/;"	v
fetch	thinkphp\library\think\Controller.php	/^    protected function fetch($template = '', $vars = [], $replace = [], $config = [])$/;"	f
initialize	thinkphp\library\think\Controller.php	/^    protected function initialize()$/;"	f
message	thinkphp\library\think\Controller.php	/^    protected function validate($data, $validate, $message = [], $batch = false, $callback = null)$/;"	v
method	thinkphp\library\think\Controller.php	/^            foreach ($this->beforeActionList as $method => $options) {$/;"	v
options	thinkphp\library\think\Controller.php	/^    protected function beforeAction($method, $options = [])$/;"	v
request	thinkphp\library\think\Controller.php	/^        $this->request = $request;$/;"	v
request	thinkphp\library\think\Controller.php	/^    protected $request;$/;"	v
v	thinkphp\library\think\Controller.php	/^            $v = $this->app->validate($validate);$/;"	v
v	thinkphp\library\think\Controller.php	/^            $v = $this->app->validate();$/;"	v
validate	thinkphp\library\think\Controller.php	/^    protected function validate($data, $validate, $message = [], $batch = false, $callback = null)$/;"	f
validateFailException	thinkphp\library\think\Controller.php	/^    protected function validateFailException($fail = true)$/;"	f
value	thinkphp\library\think\Controller.php	/^    protected function assign($name, $value = '')$/;"	v
vars	thinkphp\library\think\Controller.php	/^    protected function display($content = '', $vars = [], $replace = [], $config = [])$/;"	v
vars	thinkphp\library\think\Controller.php	/^    protected function fetch($template = '', $vars = [], $replace = [], $config = [])$/;"	v
view	thinkphp\library\think\Controller.php	/^        $this->view = Container::get('view')->init($/;"	v
view	thinkphp\library\think\Controller.php	/^    protected $view;$/;"	v
Cookie	thinkphp\library\think\Cookie.php	/^class Cookie$/;"	c
clear	thinkphp\library\think\Cookie.php	/^    public function clear($prefix = null)$/;"	f
config	thinkphp\library\think\Cookie.php	/^            $config = $this->config;$/;"	v
config	thinkphp\library\think\Cookie.php	/^            $config = Container::get('config')->pull('cookie');$/;"	v
config	thinkphp\library\think\Cookie.php	/^            $config = array_merge($this->config, array_change_key_case($option));$/;"	v
config	thinkphp\library\think\Cookie.php	/^        $config = $this->config;$/;"	v
config	thinkphp\library\think\Cookie.php	/^        $this->config = array_merge($this->config, array_change_key_case($config));$/;"	v
config	thinkphp\library\think\Cookie.php	/^    protected $config = [$/;"	v
config	thinkphp\library\think\Cookie.php	/^    public function init(array $config = [])$/;"	v
delete	thinkphp\library\think\Cookie.php	/^    public function delete($name, $prefix = null)$/;"	f
expire	thinkphp\library\think\Cookie.php	/^        $expire = !empty($config['expire']) ? $_SERVER['REQUEST_TIME'] + intval($config['expire']) : 0;$/;"	v
forever	thinkphp\library\think\Cookie.php	/^    public function forever($name, $value = '', $option = null)$/;"	f
get	thinkphp\library\think\Cookie.php	/^    public function get($name = '', $prefix = null)$/;"	f
has	thinkphp\library\think\Cookie.php	/^    public function has($name, $prefix = null)$/;"	f
init	thinkphp\library\think\Cookie.php	/^        $this->init = true;$/;"	v
init	thinkphp\library\think\Cookie.php	/^    protected $init;$/;"	v
init	thinkphp\library\think\Cookie.php	/^    public function init(array $config = [])$/;"	f
jsonFormatProtect	thinkphp\library\think\Cookie.php	/^    private function jsonFormatProtect(&$val, $key, $type = 'encode')$/;"	f
k	thinkphp\library\think\Cookie.php	/^                foreach ($_COOKIE as $k => $val) {$/;"	v
key	thinkphp\library\think\Cookie.php	/^            foreach ($_COOKIE as $key => $val) {$/;"	v
key	thinkphp\library\think\Cookie.php	/^        $key    = $prefix . $name;$/;"	v
name	thinkphp\library\think\Cookie.php	/^        $name   = $prefix . $name;$/;"	v
name	thinkphp\library\think\Cookie.php	/^        $name = $config['prefix'] . $name;$/;"	v
option	thinkphp\library\think\Cookie.php	/^                $option = ['expire' => $option];$/;"	v
option	thinkphp\library\think\Cookie.php	/^            $option = [];$/;"	v
prefix	thinkphp\library\think\Cookie.php	/^        $prefix = !is_null($prefix) ? $prefix : $config['prefix'];$/;"	v
prefix	thinkphp\library\think\Cookie.php	/^        $prefix = !is_null($prefix) ? $prefix : $this->config['prefix'];$/;"	v
prefix	thinkphp\library\think\Cookie.php	/^    public function delete($name, $prefix = null)$/;"	v
prefix	thinkphp\library\think\Cookie.php	/^    public function get($name = '', $prefix = null)$/;"	v
prefix	thinkphp\library\think\Cookie.php	/^    public function has($name, $prefix = null)$/;"	v
prefix	thinkphp\library\think\Cookie.php	/^    public function prefix($prefix = '')$/;"	f
set	thinkphp\library\think\Cookie.php	/^    public function set($name, $value = '', $option = null)$/;"	f
type	thinkphp\library\think\Cookie.php	/^    private function jsonFormatProtect(&$val, $key, $type = 'encode')$/;"	v
val	thinkphp\library\think\Cookie.php	/^            $val = 'decode' == $type ? urldecode($val) : urlencode($val);$/;"	v
value	thinkphp\library\think\Cookie.php	/^                $value = $_COOKIE;$/;"	v
value	thinkphp\library\think\Cookie.php	/^                $value = [];$/;"	v
value	thinkphp\library\think\Cookie.php	/^                $value = json_decode($value, true);$/;"	v
value	thinkphp\library\think\Cookie.php	/^                $value = substr($value, 6);$/;"	v
value	thinkphp\library\think\Cookie.php	/^            $value = $_COOKIE[$key];$/;"	v
value	thinkphp\library\think\Cookie.php	/^            $value = 'think:' . json_encode($value);$/;"	v
value	thinkphp\library\think\Cookie.php	/^            $value = null;$/;"	v
value	thinkphp\library\think\Cookie.php	/^    public function forever($name, $value = '', $option = null)$/;"	v
value	thinkphp\library\think\Cookie.php	/^    public function set($name, $value = '', $option = null)$/;"	v
Db	thinkphp\library\think\Db.php	/^class Db$/;"	c
__callStatic	thinkphp\library\think\Db.php	/^    public static function __callStatic($method, $args)$/;"	f
class	thinkphp\library\think\Db.php	/^        $class = Container::get('config')->get('database.query') ?: '\\\\think\\\\db\\\\Query';$/;"	v
executeTimes	thinkphp\library\think\Db.php	/^    public static $executeTimes = 0;$/;"	v
query	thinkphp\library\think\Db.php	/^        $query = new $class();$/;"	v
queryTimes	thinkphp\library\think\Db.php	/^    public static $queryTimes = 0;$/;"	v
Debug	thinkphp\library\think\Debug.php	/^class Debug$/;"	c
__construct	thinkphp\library\think\Debug.php	/^    public function __construct(App $app)$/;"	f
a	thinkphp\library\think\Debug.php	/^        $a    = ['B', 'KB', 'MB', 'GB', 'TB'];$/;"	v
app	thinkphp\library\think\Debug.php	/^        $this->app = $app;$/;"	v
app	thinkphp\library\think\Debug.php	/^    protected $app;$/;"	v
class	thinkphp\library\think\Debug.php	/^        $class  = false !== strpos($type, '\\\\') ? $type : '\\\\think\\\\debug\\\\' . ucwords($type);$/;"	v
config	thinkphp\library\think\Debug.php	/^        $config = $this->app['config']->pull('trace');$/;"	v
content	thinkphp\library\think\Debug.php	/^                    $content = $content . $output;$/;"	v
content	thinkphp\library\think\Debug.php	/^                    $content = substr($content, 0, $pos) . $output . substr($content, $pos);$/;"	v
dec	thinkphp\library\think\Debug.php	/^    public function getMemPeak($start, $end, $dec = 2)$/;"	v
dec	thinkphp\library\think\Debug.php	/^    public function getRangeMem($start, $end, $dec = 2)$/;"	v
dec	thinkphp\library\think\Debug.php	/^    public function getRangeTime($start, $end, $dec = 6)$/;"	v
dump	thinkphp\library\think\Debug.php	/^    public function dump($var, $echo = true, $label = null, $flags = ENT_SUBSTITUTE)$/;"	f
echo	thinkphp\library\think\Debug.php	/^    public function dump($var, $echo = true, $label = null, $flags = ENT_SUBSTITUTE)$/;"	v
files	thinkphp\library\think\Debug.php	/^            $files = get_included_files();$/;"	v
getFile	thinkphp\library\think\Debug.php	/^    public function getFile($detail = false)$/;"	f
getMemPeak	thinkphp\library\think\Debug.php	/^    public function getMemPeak($start, $end, $dec = 2)$/;"	f
getRangeMem	thinkphp\library\think\Debug.php	/^    public function getRangeMem($start, $end, $dec = 2)$/;"	f
getRangeTime	thinkphp\library\think\Debug.php	/^    public function getRangeTime($start, $end, $dec = 6)$/;"	f
getThroughputRate	thinkphp\library\think\Debug.php	/^    public function getThroughputRate()$/;"	f
getUseMem	thinkphp\library\think\Debug.php	/^    public function getUseMem($dec = 2)$/;"	f
getUseTime	thinkphp\library\think\Debug.php	/^    public function getUseTime($dec = 6)$/;"	f
info	thinkphp\library\think\Debug.php	/^            $info  = [];$/;"	v
info	thinkphp\library\think\Debug.php	/^    protected $info = [];$/;"	v
inject	thinkphp\library\think\Debug.php	/^    public function inject(Response $response, &$content)$/;"	f
key	thinkphp\library\think\Debug.php	/^            foreach ($files as $key => $file) {$/;"	v
label	thinkphp\library\think\Debug.php	/^        $label = (null === $label) ? '' : rtrim($label) . ':';$/;"	v
mem	thinkphp\library\think\Debug.php	/^    protected $mem = [];$/;"	v
output	thinkphp\library\think\Debug.php	/^                $output = htmlspecialchars($output, $flags);$/;"	v
output	thinkphp\library\think\Debug.php	/^            $output = $trace->output($response, $this->app['log']->getLog());$/;"	v
output	thinkphp\library\think\Debug.php	/^            $output = '<pre>' . $label . $output . '<\/pre>';$/;"	v
output	thinkphp\library\think\Debug.php	/^            $output = PHP_EOL . $label . $output . PHP_EOL;$/;"	v
output	thinkphp\library\think\Debug.php	/^        $output = ob_get_clean();$/;"	v
output	thinkphp\library\think\Debug.php	/^        $output = preg_replace('\/\\]\\=\\>\\n(\\s+)\/m', '] => ', $output);$/;"	v
pos	thinkphp\library\think\Debug.php	/^                $pos = strripos($content, '<\/body>');$/;"	v
pos	thinkphp\library\think\Debug.php	/^        $pos  = 0;$/;"	v
remark	thinkphp\library\think\Debug.php	/^    public function remark($name, $value = '')$/;"	f
size	thinkphp\library\think\Debug.php	/^        $size = $this->mem['mem'][$end] - $this->mem['mem'][$start];$/;"	v
size	thinkphp\library\think\Debug.php	/^        $size = $this->mem['peak'][$end] - $this->mem['peak'][$start];$/;"	v
size	thinkphp\library\think\Debug.php	/^        $size = memory_get_usage() - $this->app->getBeginMem();$/;"	v
trace	thinkphp\library\think\Debug.php	/^            $trace = new $class($config);$/;"	v
type	thinkphp\library\think\Debug.php	/^        $type   = isset($config['type']) ? $config['type'] : 'Html';$/;"	v
value	thinkphp\library\think\Debug.php	/^    public function remark($name, $value = '')$/;"	v
var	thinkphp\library\think\Debug.php	/^            $var = $var->toArray();$/;"	v
Env	thinkphp\library\think\Env.php	/^class Env$/;"	c
__construct	thinkphp\library\think\Env.php	/^    public function __construct()$/;"	f
data	thinkphp\library\think\Env.php	/^            $this->data = array_merge($this->data, $env);$/;"	v
data	thinkphp\library\think\Env.php	/^        $this->data = $_ENV;$/;"	v
data	thinkphp\library\think\Env.php	/^    protected $data = [];$/;"	v
default	thinkphp\library\think\Env.php	/^    public function get($name = null, $default = null)$/;"	v
env	thinkphp\library\think\Env.php	/^            $env = array_change_key_case($env, CASE_UPPER);$/;"	v
env	thinkphp\library\think\Env.php	/^        $env = parse_ini_file($file, true);$/;"	v
get	thinkphp\library\think\Env.php	/^    public function get($name = null, $default = null)$/;"	f
item	thinkphp\library\think\Env.php	/^                        $item = $name . '_' . strtoupper($k);$/;"	v
k	thinkphp\library\think\Env.php	/^                    foreach ($val as $k => $v) {$/;"	v
key	thinkphp\library\think\Env.php	/^            $key  = strtoupper($env);$/;"	v
key	thinkphp\library\think\Env.php	/^            foreach ($env as $key => $val) {$/;"	v
load	thinkphp\library\think\Env.php	/^    public function load($file)$/;"	f
name	thinkphp\library\think\Env.php	/^                $name = 'PHP_' . $key;$/;"	v
name	thinkphp\library\think\Env.php	/^            $name = 'PHP_' . $key;$/;"	v
name	thinkphp\library\think\Env.php	/^        $name = strtoupper(str_replace('.', '_', $name));$/;"	v
result	thinkphp\library\think\Env.php	/^                $result = false;$/;"	v
result	thinkphp\library\think\Env.php	/^                $result = true;$/;"	v
result	thinkphp\library\think\Env.php	/^        $result = getenv('PHP_' . $name);$/;"	v
set	thinkphp\library\think\Env.php	/^    public function set($env, $value = null)$/;"	f
value	thinkphp\library\think\Env.php	/^    public function set($env, $value = null)$/;"	v
Error	thinkphp\library\think\Error.php	/^class Error$/;"	c
appError	thinkphp\library\think\Error.php	/^    public static function appError($errno, $errstr, $errfile = '', $errline = 0, $errcontext = [])$/;"	f
appException	thinkphp\library\think\Error.php	/^    public static function appException($e)$/;"	f
appShutdown	thinkphp\library\think\Error.php	/^    public static function appShutdown()$/;"	f
class	thinkphp\library\think\Error.php	/^            $class = Container::get('app')->config('exception_handle');$/;"	v
e	thinkphp\library\think\Error.php	/^            $e = new ThrowableError($e);$/;"	v
errfile	thinkphp\library\think\Error.php	/^    public static function appError($errno, $errstr, $errfile = '', $errline = 0, $errcontext = [])$/;"	v
exception	thinkphp\library\think\Error.php	/^            $exception = new ErrorException($error['type'], $error['message'], $error['file'], $error['line']);$/;"	v
exception	thinkphp\library\think\Error.php	/^        $exception = new ErrorException($errno, $errstr, $errfile, $errline, $errcontext);$/;"	v
getExceptionHandler	thinkphp\library\think\Error.php	/^    public static function getExceptionHandler()$/;"	f
handle	thinkphp\library\think\Error.php	/^                $handle = new $class;$/;"	v
handle	thinkphp\library\think\Error.php	/^                $handle = new Handle;$/;"	v
handle	thinkphp\library\think\Error.php	/^        static $handle;$/;"	v
isFatal	thinkphp\library\think\Error.php	/^    protected static function isFatal($type)$/;"	f
register	thinkphp\library\think\Error.php	/^    public static function register()$/;"	f
Exception	thinkphp\library\think\Exception.php	/^class Exception extends \\Exception$/;"	c
data	thinkphp\library\think\Exception.php	/^    protected $data = [];$/;"	v
getData	thinkphp\library\think\Exception.php	/^    final public function getData()$/;"	f
setData	thinkphp\library\think\Exception.php	/^    final protected function setData($label, array $data)$/;"	f
Facade	thinkphp\library\think\Facade.php	/^class Facade$/;"	c
__callStatic	thinkphp\library\think\Facade.php	/^    public static function __callStatic($method, $params)$/;"	f
alwaysNewInstance	thinkphp\library\think\Facade.php	/^    protected static $alwaysNewInstance;$/;"	v
args	thinkphp\library\think\Facade.php	/^            $args        = [];$/;"	v
args	thinkphp\library\think\Facade.php	/^    protected static function createFacade($class = '', $args = [], $newInstance = false)$/;"	v
args	thinkphp\library\think\Facade.php	/^    public static function make($class, $args = [], $newInstance = false)$/;"	v
bind	thinkphp\library\think\Facade.php	/^    protected static $bind = [];$/;"	v
bind	thinkphp\library\think\Facade.php	/^    public static function bind($name, $class = null)$/;"	f
class	thinkphp\library\think\Facade.php	/^            $class = $facadeClass;$/;"	v
class	thinkphp\library\think\Facade.php	/^            $class = self::$bind[$class];$/;"	v
class	thinkphp\library\think\Facade.php	/^        $class       = $class ?: static::class;$/;"	v
class	thinkphp\library\think\Facade.php	/^    public static function bind($name, $class = null)$/;"	v
createFacade	thinkphp\library\think\Facade.php	/^    protected static function createFacade($class = '', $args = [], $newInstance = false)$/;"	f
facadeClass	thinkphp\library\think\Facade.php	/^        $facadeClass = static::getFacadeClass();$/;"	v
getFacadeClass	thinkphp\library\think\Facade.php	/^    protected static function getFacadeClass()$/;"	f
instance	thinkphp\library\think\Facade.php	/^    public static function instance(...$args)$/;"	f
make	thinkphp\library\think\Facade.php	/^    public static function make($class, $args = [], $newInstance = false)$/;"	f
newInstance	thinkphp\library\think\Facade.php	/^            $newInstance = true;$/;"	v
File	thinkphp\library\think\File.php	/^class File extends SplFileObject$/;"	c
__call	thinkphp\library\think\File.php	/^    public function __call($method, $args)$/;"	f
__construct	thinkphp\library\think\File.php	/^    public function __construct($filename, $mode = 'r')$/;"	f
buildSaveName	thinkphp\library\think\File.php	/^    protected function buildSaveName($savename)$/;"	f
check	thinkphp\library\think\File.php	/^    public function check($rule = [])$/;"	f
checkExt	thinkphp\library\think\File.php	/^    public function checkExt($ext)$/;"	f
checkImg	thinkphp\library\think\File.php	/^    public function checkImg()$/;"	f
checkMime	thinkphp\library\think\File.php	/^    public function checkMime($mime)$/;"	f
checkPath	thinkphp\library\think\File.php	/^    protected function checkPath($path)$/;"	f
checkSize	thinkphp\library\think\File.php	/^    public function checkSize($size)$/;"	f
error	thinkphp\library\think\File.php	/^                $this->error = '上传文件大小超过了最大值！';$/;"	v
error	thinkphp\library\think\File.php	/^                $this->error = '找不到临时文件夹！';$/;"	v
error	thinkphp\library\think\File.php	/^                $this->error = '文件写入失败！';$/;"	v
error	thinkphp\library\think\File.php	/^                $this->error = '文件只有部分被上传！';$/;"	v
error	thinkphp\library\think\File.php	/^                $this->error = '未知上传错误！';$/;"	v
error	thinkphp\library\think\File.php	/^                $this->error = '没有文件被上传！';$/;"	v
error	thinkphp\library\think\File.php	/^            $this->error = "目录 {$path} 创建失败！";$/;"	v
error	thinkphp\library\think\File.php	/^            $this->error = '上传文件MIME类型不允许！';$/;"	v
error	thinkphp\library\think\File.php	/^            $this->error = '上传文件后缀不允许';$/;"	v
error	thinkphp\library\think\File.php	/^            $this->error = '上传文件大小不符！';$/;"	v
error	thinkphp\library\think\File.php	/^            $this->error = '存在同名文件' . $filename;$/;"	v
error	thinkphp\library\think\File.php	/^            $this->error = '文件上传保存错误！';$/;"	v
error	thinkphp\library\think\File.php	/^            $this->error = '非法上传文件';$/;"	v
error	thinkphp\library\think\File.php	/^            $this->error = '非法图像文件！';$/;"	v
error	thinkphp\library\think\File.php	/^    private $error = '';$/;"	v
error	thinkphp\library\think\File.php	/^    private function error($errorNo)$/;"	f
ext	thinkphp\library\think\File.php	/^            $ext = explode(',', $ext);$/;"	v
extension	thinkphp\library\think\File.php	/^        $extension = strtolower(pathinfo($this->getInfo('name'), PATHINFO_EXTENSION));$/;"	v
file	thinkphp\library\think\File.php	/^        $file = new self($filename);$/;"	v
filename	thinkphp\library\think\File.php	/^        $filename = $path . $saveName;$/;"	v
filename	thinkphp\library\think\File.php	/^        $this->filename = $this->getRealPath() ?: $this->getPathname();$/;"	v
filename	thinkphp\library\think\File.php	/^    protected $filename;$/;"	v
finfo	thinkphp\library\think\File.php	/^        $finfo = finfo_open(FILEINFO_MIME_TYPE);$/;"	v
getError	thinkphp\library\think\File.php	/^    public function getError()$/;"	f
getImageType	thinkphp\library\think\File.php	/^    protected function getImageType($image)$/;"	f
getInfo	thinkphp\library\think\File.php	/^    public function getInfo($name = '')$/;"	f
getMime	thinkphp\library\think\File.php	/^    public function getMime()$/;"	f
getSaveName	thinkphp\library\think\File.php	/^    public function getSaveName()$/;"	f
hash	thinkphp\library\think\File.php	/^                            $hash     = $this->hash($this->rule);$/;"	v
hash	thinkphp\library\think\File.php	/^    protected $hash = [];$/;"	v
hash	thinkphp\library\think\File.php	/^    public function hash($type = 'sha1')$/;"	f
info	thinkphp\library\think\File.php	/^            $info = getimagesize($image);$/;"	v
info	thinkphp\library\think\File.php	/^        $this->info = $info;$/;"	v
info	thinkphp\library\think\File.php	/^    protected $info;$/;"	v
isTest	thinkphp\library\think\File.php	/^        $this->isTest = $test;$/;"	v
isTest	thinkphp\library\think\File.php	/^    protected $isTest;$/;"	v
isTest	thinkphp\library\think\File.php	/^    public function isTest($test = false)$/;"	f
isValid	thinkphp\library\think\File.php	/^    public function isValid()$/;"	f
mime	thinkphp\library\think\File.php	/^            $mime = explode(',', $mime);$/;"	v
mode	thinkphp\library\think\File.php	/^    public function __construct($filename, $mode = 'r')$/;"	v
move	thinkphp\library\think\File.php	/^    public function move($path, $savename = true, $replace = true)$/;"	f
path	thinkphp\library\think\File.php	/^        $path = rtrim($path, DIRECTORY_SEPARATOR) . DIRECTORY_SEPARATOR;$/;"	v
rule	thinkphp\library\think\File.php	/^        $rule = $rule ?: $this->validate;$/;"	v
rule	thinkphp\library\think\File.php	/^        $this->rule = $rule;$/;"	v
rule	thinkphp\library\think\File.php	/^    protected $rule = 'date';$/;"	v
rule	thinkphp\library\think\File.php	/^    public function rule($rule)$/;"	f
saveName	thinkphp\library\think\File.php	/^        $saveName = $this->buildSaveName($savename);$/;"	v
saveName	thinkphp\library\think\File.php	/^        $this->saveName = $saveName;$/;"	v
saveName	thinkphp\library\think\File.php	/^    protected $saveName;$/;"	v
savename	thinkphp\library\think\File.php	/^                            $savename = call_user_func($this->rule);$/;"	v
savename	thinkphp\library\think\File.php	/^                            $savename = date('Ymd') . '\/' . md5(microtime(true));$/;"	v
savename	thinkphp\library\think\File.php	/^                            $savename = substr($hash, 0, 2) . '\/' . substr($hash, 2);$/;"	v
savename	thinkphp\library\think\File.php	/^                        $savename = date('Ymd') . '\/' . md5(microtime(true));$/;"	v
savename	thinkphp\library\think\File.php	/^                $savename = call_user_func_array($this->rule, [$this]);$/;"	v
savename	thinkphp\library\think\File.php	/^            $savename = $this->getInfo('name');$/;"	v
savename	thinkphp\library\think\File.php	/^    public function move($path, $savename = true, $replace = true)$/;"	v
setSaveName	thinkphp\library\think\File.php	/^    public function setSaveName($saveName)$/;"	f
setUploadInfo	thinkphp\library\think\File.php	/^    public function setUploadInfo($info)$/;"	f
validate	thinkphp\library\think\File.php	/^        $this->validate = $rule;$/;"	v
validate	thinkphp\library\think\File.php	/^    protected $validate = [];$/;"	v
validate	thinkphp\library\think\File.php	/^    public function validate($rule = [])$/;"	f
Hook	thinkphp\library\think\Hook.php	/^class Hook$/;"	c
add	thinkphp\library\think\Hook.php	/^    public function add($tag, $behavior, $first = false)$/;"	f
alias	thinkphp\library\think\Hook.php	/^    public function alias($name, $behavior = null)$/;"	f
app	thinkphp\library\think\Hook.php	/^        $app = Container::get('app');$/;"	v
behavior	thinkphp\library\think\Hook.php	/^    public function alias($name, $behavior = null)$/;"	v
bind	thinkphp\library\think\Hook.php	/^            $this->bind = array_merge($this->bind, $name);$/;"	v
bind	thinkphp\library\think\Hook.php	/^    protected $bind = [];$/;"	v
call	thinkphp\library\think\Hook.php	/^            $call  = $class;$/;"	v
call	thinkphp\library\think\Hook.php	/^            $call  = [$class, $method];$/;"	v
call	thinkphp\library\think\Hook.php	/^            $call = $class;$/;"	v
class	thinkphp\library\think\Hook.php	/^                $class = $this->bind[$class];$/;"	v
class	thinkphp\library\think\Hook.php	/^            $class = $class . '->' . $method;$/;"	v
class	thinkphp\library\think\Hook.php	/^            $class = 'Closure';$/;"	v
debug	thinkphp\library\think\Hook.php	/^            $debug = $app['debug'];$/;"	v
exec	thinkphp\library\think\Hook.php	/^    public function exec($class, $params = null)$/;"	f
execTag	thinkphp\library\think\Hook.php	/^    protected function execTag($class, $tag = '', $params = null)$/;"	f
first	thinkphp\library\think\Hook.php	/^    public function add($tag, $behavior, $first = false)$/;"	v
get	thinkphp\library\think\Hook.php	/^    public function get($tag = '')$/;"	f
import	thinkphp\library\think\Hook.php	/^    public function import(array $tags, $recursive = true)$/;"	f
key	thinkphp\library\think\Hook.php	/^        foreach ($tags as $key => $name) {$/;"	v
listen	thinkphp\library\think\Hook.php	/^    public function listen($tag, $params = null, $once = false)$/;"	f
method	thinkphp\library\think\Hook.php	/^                $method = 'run';$/;"	v
method	thinkphp\library\think\Hook.php	/^            $method = $class;$/;"	v
method	thinkphp\library\think\Hook.php	/^            $method = [$class, 'run'];$/;"	v
method	thinkphp\library\think\Hook.php	/^        $method = Loader::parseName($tag, 1, false);$/;"	v
obj	thinkphp\library\think\Hook.php	/^            $obj = Container::get($class);$/;"	v
params	thinkphp\library\think\Hook.php	/^    public function exec($class, $params = null)$/;"	v
params	thinkphp\library\think\Hook.php	/^    public function listen($tag, $params = null, $once = false)$/;"	v
recursive	thinkphp\library\think\Hook.php	/^    public function import(array $tags, $recursive = true)$/;"	v
result	thinkphp\library\think\Hook.php	/^        $result = Container::getInstance()->invoke($call, [$params]);$/;"	v
results	thinkphp\library\think\Hook.php	/^        $results = [];$/;"	v
tag	thinkphp\library\think\Hook.php	/^            foreach ($tags as $tag => $behavior) {$/;"	v
tag	thinkphp\library\think\Hook.php	/^    protected function execTag($class, $tag = '', $params = null)$/;"	v
tags	thinkphp\library\think\Hook.php	/^            $this->tags = $tags + $this->tags;$/;"	v
tags	thinkphp\library\think\Hook.php	/^        $tags    = $this->get($tag);$/;"	v
tags	thinkphp\library\think\Hook.php	/^    private $tags   = [];$/;"	v
Lang	thinkphp\library\think\Lang.php	/^class Lang$/;"	c
_lang	thinkphp\library\think\Lang.php	/^                $_lang = include $_file;$/;"	v
acceptLangs	thinkphp\library\think\Lang.php	/^            $acceptLangs = Container::get('config')->get('header_accept_lang');$/;"	v
acceptLanguage	thinkphp\library\think\Lang.php	/^    protected $acceptLanguage = [$/;"	v
allowLangList	thinkphp\library\think\Lang.php	/^        $this->allowLangList = $list;$/;"	v
allowLangList	thinkphp\library\think\Lang.php	/^    protected $allowLangList = [];$/;"	v
detect	thinkphp\library\think\Lang.php	/^    public function detect()$/;"	f
file	thinkphp\library\think\Lang.php	/^            $file = [$file];$/;"	v
get	thinkphp\library\think\Lang.php	/^    public function get($name = null, $vars = [], $range = '')$/;"	f
has	thinkphp\library\think\Lang.php	/^    public function has($name, $range = '')$/;"	f
key	thinkphp\library\think\Lang.php	/^        $key   = strtolower($name);$/;"	v
lang	thinkphp\library\think\Lang.php	/^                    $lang = array_change_key_case($_lang) + $lang;$/;"	v
lang	thinkphp\library\think\Lang.php	/^        $lang = [];$/;"	v
lang	thinkphp\library\think\Lang.php	/^    private $lang = [];$/;"	v
langCookieVar	thinkphp\library\think\Lang.php	/^        $this->langCookieVar = $var;$/;"	v
langCookieVar	thinkphp\library\think\Lang.php	/^    protected $langCookieVar = 'think_var';$/;"	v
langDetectVar	thinkphp\library\think\Lang.php	/^        $this->langDetectVar = $var;$/;"	v
langDetectVar	thinkphp\library\think\Lang.php	/^    protected $langDetectVar = 'lang';$/;"	v
langSet	thinkphp\library\think\Lang.php	/^                $langSet = $acceptLangs[$langSet];$/;"	v
langSet	thinkphp\library\think\Lang.php	/^                $langSet = $this->acceptLanguage[$langSet];$/;"	v
langSet	thinkphp\library\think\Lang.php	/^            $langSet     = strtolower($matches[1]);$/;"	v
langSet	thinkphp\library\think\Lang.php	/^            $langSet = strtolower($_COOKIE[$this->langCookieVar]);$/;"	v
langSet	thinkphp\library\think\Lang.php	/^            $langSet = strtolower($_GET[$this->langDetectVar]);$/;"	v
langSet	thinkphp\library\think\Lang.php	/^        $langSet = '';$/;"	v
load	thinkphp\library\think\Lang.php	/^    public function load($file, $range = '')$/;"	f
range	thinkphp\library\think\Lang.php	/^            $this->range = $langSet ?: $this->range;$/;"	v
range	thinkphp\library\think\Lang.php	/^            $this->range = $range;$/;"	v
range	thinkphp\library\think\Lang.php	/^        $range = $lang ?: $this->range;$/;"	v
range	thinkphp\library\think\Lang.php	/^        $range = $range ?: $this->range;$/;"	v
range	thinkphp\library\think\Lang.php	/^    private $range = 'zh-cn';$/;"	v
range	thinkphp\library\think\Lang.php	/^    public function has($name, $range = '')$/;"	v
range	thinkphp\library\think\Lang.php	/^    public function load($file, $range = '')$/;"	v
range	thinkphp\library\think\Lang.php	/^    public function range($range = '')$/;"	f
replace	thinkphp\library\think\Lang.php	/^                $replace = array_keys($vars);$/;"	v
saveToCookie	thinkphp\library\think\Lang.php	/^    public function saveToCookie($lang = null)$/;"	f
set	thinkphp\library\think\Lang.php	/^    public function set($name, $value = null, $range = '')$/;"	f
setAllowLangList	thinkphp\library\think\Lang.php	/^    public function setAllowLangList($list)$/;"	f
setLangCookieVar	thinkphp\library\think\Lang.php	/^    public static function setLangCookieVar($var)$/;"	f
setLangDetectVar	thinkphp\library\think\Lang.php	/^    public function setLangDetectVar($var)$/;"	f
v	thinkphp\library\think\Lang.php	/^                    $v = "{:{$v}}";$/;"	v
value	thinkphp\library\think\Lang.php	/^                $value = call_user_func_array('sprintf', $vars);$/;"	v
value	thinkphp\library\think\Lang.php	/^                $value = str_replace($replace, $vars, $value);$/;"	v
value	thinkphp\library\think\Lang.php	/^        $value = isset($this->lang[$range][$key]) ? $this->lang[$range][$key] : $name;$/;"	v
value	thinkphp\library\think\Lang.php	/^    public function set($name, $value = null, $range = '')$/;"	v
vars	thinkphp\library\think\Lang.php	/^    public function get($name = null, $vars = [], $range = '')$/;"	v
Loader	thinkphp\library\think\Loader.php	/^class Loader$/;"	c
__include_file	thinkphp\library\think\Loader.php	/^function __include_file($file)$/;"	f
__require_file	thinkphp\library\think\Loader.php	/^function __require_file($file)$/;"	f
addAutoLoadDir	thinkphp\library\think\Loader.php	/^    public static function addAutoLoadDir($path)$/;"	f
addClassAlias	thinkphp\library\think\Loader.php	/^    public static function addClassAlias($alias, $class = null)$/;"	f
addClassMap	thinkphp\library\think\Loader.php	/^    public static function addClassMap($class, $map = '')$/;"	f
addNamespace	thinkphp\library\think\Loader.php	/^    public static function addNamespace($namespace, $path = '')$/;"	f
addPsr0	thinkphp\library\think\Loader.php	/^    private static function addPsr0($prefix, $paths, $prepend = false)$/;"	f
addPsr4	thinkphp\library\think\Loader.php	/^    private static function addPsr4($prefix, $paths, $prepend = false)$/;"	f
autoload	thinkphp\library\think\Loader.php	/^    public static function autoload($class)$/;"	f
autoloadFiles	thinkphp\library\think\Loader.php	/^    private static $autoloadFiles = [];$/;"	v
class	thinkphp\library\think\Loader.php	/^    public static function addClassAlias($alias, $class = null)$/;"	v
classAlias	thinkphp\library\think\Loader.php	/^    protected static $classAlias = [];$/;"	v
classMap	thinkphp\library\think\Loader.php	/^            $classMap = require $composerPath . 'autoload_classmap.php';$/;"	v
fallbackDirsPsr0	thinkphp\library\think\Loader.php	/^    private static $fallbackDirsPsr0 = [];$/;"	v
fallbackDirsPsr4	thinkphp\library\think\Loader.php	/^    private static $fallbackDirsPsr4  = [];$/;"	v
fileIdentifier	thinkphp\library\think\Loader.php	/^            foreach ($includeFiles as $fileIdentifier => $file) {$/;"	v
findFile	thinkphp\library\think\Loader.php	/^    private static function findFile($class)$/;"	f
first	thinkphp\library\think\Loader.php	/^        $first = $class[0];$/;"	v
first	thinkphp\library\think\Loader.php	/^        $first = $prefix[0];$/;"	v
includeFiles	thinkphp\library\think\Loader.php	/^            $includeFiles = require $composerPath . 'autoload_files.php';$/;"	v
length	thinkphp\library\think\Loader.php	/^            $length = strlen($prefix);$/;"	v
logicalPathPsr0	thinkphp\library\think\Loader.php	/^            $logicalPathPsr0 = strtr($class, '_', DIRECTORY_SEPARATOR) . '.php';$/;"	v
logicalPathPsr0	thinkphp\library\think\Loader.php	/^            $logicalPathPsr0 = substr($logicalPathPsr4, 0, $pos + 1)$/;"	v
logicalPathPsr4	thinkphp\library\think\Loader.php	/^        $logicalPathPsr4 = strtr($class, '\\\\', DIRECTORY_SEPARATOR) . '.php';$/;"	v
map	thinkphp\library\think\Loader.php	/^            $map = require $composerPath . 'autoload_namespaces.php';$/;"	v
map	thinkphp\library\think\Loader.php	/^            $map = require $composerPath . 'autoload_psr4.php';$/;"	v
map	thinkphp\library\think\Loader.php	/^    protected static $map = [];$/;"	v
map	thinkphp\library\think\Loader.php	/^    public static function addClassMap($class, $map = '')$/;"	v
name	thinkphp\library\think\Loader.php	/^            $name = preg_replace_callback('\/_([a-zA-Z])\/', function ($match) {$/;"	v
name	thinkphp\library\think\Loader.php	/^            \/\/ PEAR-like class name$/;"	c
name	thinkphp\library\think\Loader.php	/^            \/\/ namespaced class name$/;"	c
namespace	thinkphp\library\think\Loader.php	/^            foreach ($map as $namespace => $path) {$/;"	v
parseName	thinkphp\library\think\Loader.php	/^    public static function parseName($name, $type = 0, $ucfirst = true)$/;"	f
path	thinkphp\library\think\Loader.php	/^        $path = dirname($_SERVER['SCRIPT_FILENAME']);$/;"	v
path	thinkphp\library\think\Loader.php	/^    public static function addNamespace($namespace, $path = '')$/;"	v
pos	thinkphp\library\think\Loader.php	/^        if (false !== $pos = strrpos($class, '\\\\')) {$/;"	v
prefix	thinkphp\library\think\Loader.php	/^            foreach ($namespace as $prefix => $paths) {$/;"	v
prefix	thinkphp\library\think\Loader.php	/^            foreach (self::$prefixLengthsPsr4[$first] as $prefix => $length) {$/;"	v
prefix	thinkphp\library\think\Loader.php	/^            foreach (self::$prefixesPsr0[$first] as $prefix => $dirs) {$/;"	v
prefixDirsPsr4	thinkphp\library\think\Loader.php	/^    private static $prefixDirsPsr4    = [];$/;"	v
prefixLengthsPsr4	thinkphp\library\think\Loader.php	/^    private static $prefixLengthsPsr4 = [];$/;"	v
prefixesPsr0	thinkphp\library\think\Loader.php	/^    private static $prefixesPsr0     = [];$/;"	v
prepend	thinkphp\library\think\Loader.php	/^    private static function addPsr0($prefix, $paths, $prepend = false)$/;"	v
prepend	thinkphp\library\think\Loader.php	/^    private static function addPsr4($prefix, $paths, $prepend = false)$/;"	v
register	thinkphp\library\think\Loader.php	/^    public static function register($autoload = '')$/;"	f
registerComposerLoader	thinkphp\library\think\Loader.php	/^    public static function registerComposerLoader($composerPath)$/;"	f
rootPath	thinkphp\library\think\Loader.php	/^            $rootPath = realpath($path . '\/..\/') . '\/';$/;"	v
rootPath	thinkphp\library\think\Loader.php	/^            $rootPath = realpath($path) . '\/';$/;"	v
type	thinkphp\library\think\Loader.php	/^    public static function parseName($name, $type = 0, $ucfirst = true)$/;"	v
Log	thinkphp\library\think\Log.php	/^class Log implements LoggerInterface$/;"	c
__construct	thinkphp\library\think\Log.php	/^    public function __construct(App $app)$/;"	f
alert	thinkphp\library\think\Log.php	/^    public function alert($message, array $context = [])$/;"	f
app	thinkphp\library\think\Log.php	/^        $this->app = $app;$/;"	v
app	thinkphp\library\think\Log.php	/^    protected $app;$/;"	v
check	thinkphp\library\think\Log.php	/^    public function check($config)$/;"	f
class	thinkphp\library\think\Log.php	/^        $class = false !== strpos($type, '\\\\') ? $type : '\\\\think\\\\log\\\\driver\\\\' . ucwords($type);$/;"	v
clear	thinkphp\library\think\Log.php	/^    public function clear()$/;"	f
config	thinkphp\library\think\Log.php	/^        $this->config = $config;$/;"	v
config	thinkphp\library\think\Log.php	/^    protected $config = [];$/;"	v
context	thinkphp\library\think\Log.php	/^    public function alert($message, array $context = [])$/;"	v
context	thinkphp\library\think\Log.php	/^    public function critical($message, array $context = [])$/;"	v
context	thinkphp\library\think\Log.php	/^    public function debug($message, array $context = [])$/;"	v
context	thinkphp\library\think\Log.php	/^    public function emergency($message, array $context = [])$/;"	v
context	thinkphp\library\think\Log.php	/^    public function error($message, array $context = [])$/;"	v
context	thinkphp\library\think\Log.php	/^    public function info($message, array $context = [])$/;"	v
context	thinkphp\library\think\Log.php	/^    public function log($level, $message, array $context = [])$/;"	v
context	thinkphp\library\think\Log.php	/^    public function notice($message, array $context = [])$/;"	v
context	thinkphp\library\think\Log.php	/^    public function sql($message, array $context = [])$/;"	v
context	thinkphp\library\think\Log.php	/^    public function warning($message, array $context = [])$/;"	v
critical	thinkphp\library\think\Log.php	/^    public function critical($message, array $context = [])$/;"	f
debug	thinkphp\library\think\Log.php	/^    public function debug($message, array $context = [])$/;"	f
driver	thinkphp\library\think\Log.php	/^            $this->driver = new $class($config);$/;"	v
driver	thinkphp\library\think\Log.php	/^    protected $driver;$/;"	v
emergency	thinkphp\library\think\Log.php	/^    public function emergency($message, array $context = [])$/;"	f
error	thinkphp\library\think\Log.php	/^    public function error($message, array $context = [])$/;"	f
getLog	thinkphp\library\think\Log.php	/^    public function getLog($type = '')$/;"	f
info	thinkphp\library\think\Log.php	/^    public function info($message, array $context = [])$/;"	f
init	thinkphp\library\think\Log.php	/^    public function init($config = [])$/;"	f
key	thinkphp\library\think\Log.php	/^            foreach ($context as $key => $val) {$/;"	v
key	thinkphp\library\think\Log.php	/^        $this->key = $key;$/;"	v
key	thinkphp\library\think\Log.php	/^    protected $key;$/;"	v
key	thinkphp\library\think\Log.php	/^    public function key($key)$/;"	f
log	thinkphp\library\think\Log.php	/^                $log = $this->log;$/;"	v
log	thinkphp\library\think\Log.php	/^                $log = [];$/;"	v
log	thinkphp\library\think\Log.php	/^                $this->log = [];$/;"	v
log	thinkphp\library\think\Log.php	/^            $this->log = [];$/;"	v
log	thinkphp\library\think\Log.php	/^        $log = $this->log;$/;"	v
log	thinkphp\library\think\Log.php	/^        $this->log = [];$/;"	v
log	thinkphp\library\think\Log.php	/^    protected $log = [];$/;"	v
log	thinkphp\library\think\Log.php	/^    public function log($level, $message, array $context = [])$/;"	f
msg	thinkphp\library\think\Log.php	/^            $msg = strtr($msg, $replace);$/;"	v
notice	thinkphp\library\think\Log.php	/^    public function notice($message, array $context = [])$/;"	f
record	thinkphp\library\think\Log.php	/^    public function record($msg, $type = 'info', array $context = [])$/;"	f
replace	thinkphp\library\think\Log.php	/^            $replace = [];$/;"	v
result	thinkphp\library\think\Log.php	/^            $result = $this->driver->save($log);$/;"	v
result	thinkphp\library\think\Log.php	/^        $result = $this->driver->save($log);$/;"	v
save	thinkphp\library\think\Log.php	/^    public function save()$/;"	f
sql	thinkphp\library\think\Log.php	/^    public function sql($message, array $context = [])$/;"	f
type	thinkphp\library\think\Log.php	/^        $type  = isset($config['type']) ? $config['type'] : 'File';$/;"	v
type	thinkphp\library\think\Log.php	/^    public function record($msg, $type = 'info', array $context = [])$/;"	v
type	thinkphp\library\think\Log.php	/^    public function write($msg, $type = 'info', $force = false)$/;"	v
warning	thinkphp\library\think\Log.php	/^    public function warning($message, array $context = [])$/;"	f
write	thinkphp\library\think\Log.php	/^    public function write($msg, $type = 'info', $force = false)$/;"	f
Model	thinkphp\library\think\Model.php	/^abstract class Model implements \\JsonSerializable, \\ArrayAccess$/;"	c
__call	thinkphp\library\think\Model.php	/^    public function __call($method, $args)$/;"	f
__callStatic	thinkphp\library\think\Model.php	/^    public static function __callStatic($method, $args)$/;"	f
__construct	thinkphp\library\think\Model.php	/^    public function __construct($data = [])$/;"	f
__debugInfo	thinkphp\library\think\Model.php	/^    public function __debugInfo()$/;"	f
__get	thinkphp\library\think\Model.php	/^    public function __get($name)$/;"	f
__isset	thinkphp\library\think\Model.php	/^    public function __isset($name)$/;"	f
__set	thinkphp\library\think\Model.php	/^    public function __set($name, $value)$/;"	f
__unset	thinkphp\library\think\Model.php	/^    public function __unset($name)$/;"	f
__wakeup	thinkphp\library\think\Model.php	/^    public function __wakeup()$/;"	f
all	thinkphp\library\think\Model.php	/^    public static function all($data = null, $with = [], $cache = false)$/;"	f
allowFields	thinkphp\library\think\Model.php	/^        $allowFields = $this->checkAllowFields(array_merge($this->auto, $this->insert));$/;"	v
allowFields	thinkphp\library\think\Model.php	/^        $allowFields = $this->checkAllowFields(array_merge($this->auto, $this->update));$/;"	v
auto	thinkphp\library\think\Model.php	/^                $auto = true;$/;"	v
auto	thinkphp\library\think\Model.php	/^        $this->auto = $fields;$/;"	v
auto	thinkphp\library\think\Model.php	/^    protected $auto = [];$/;"	v
auto	thinkphp\library\think\Model.php	/^    public function auto($fields)$/;"	f
autoCompleteData	thinkphp\library\think\Model.php	/^    protected function autoCompleteData($auto = [])$/;"	f
autoWriteTimestamp	thinkphp\library\think\Model.php	/^            $this->autoWriteTimestamp = $config->get('database.auto_timestamp');$/;"	v
buildQuery	thinkphp\library\think\Model.php	/^    protected function buildQuery()$/;"	f
cache	thinkphp\library\think\Model.php	/^            $cache = $with;$/;"	v
checkAllowFields	thinkphp\library\think\Model.php	/^    protected function checkAllowFields($append = [])$/;"	f
checkBeforeSave	thinkphp\library\think\Model.php	/^    protected function checkBeforeSave($data, $where)$/;"	f
class	thinkphp\library\think\Model.php	/^        $class = $this->query;$/;"	v
config	thinkphp\library\think\Model.php	/^        $config = Container::get('config');$/;"	v
connection	thinkphp\library\think\Model.php	/^            $this->connection = array_merge($config->pull('database'), $this->connection);$/;"	v
connection	thinkphp\library\think\Model.php	/^    protected $connection = [];$/;"	v
count	thinkphp\library\think\Model.php	/^        $count     = 0;$/;"	v
create	thinkphp\library\think\Model.php	/^    public static function create($data = [], $field = null)$/;"	f
data	thinkphp\library\think\Model.php	/^            $data     = [];$/;"	v
data	thinkphp\library\think\Model.php	/^            $data   = null;$/;"	v
data	thinkphp\library\think\Model.php	/^            $data = null;$/;"	v
data	thinkphp\library\think\Model.php	/^            $this->data = $data;$/;"	v
data	thinkphp\library\think\Model.php	/^            $this->data = get_object_vars($data);$/;"	v
data	thinkphp\library\think\Model.php	/^        $data = $this->getChangedData();$/;"	v
data	thinkphp\library\think\Model.php	/^        $this->data   = [];$/;"	v
dateFormat	thinkphp\library\think\Model.php	/^            $this->dateFormat = $config->get('database.datetime_format');$/;"	v
db	thinkphp\library\think\Model.php	/^        $db = $this->db(false);$/;"	v
db	thinkphp\library\think\Model.php	/^    public function db($useBaseQuery = true)$/;"	f
default	thinkphp\library\think\Model.php	/^                $default = $this->data[$field];$/;"	v
default	thinkphp\library\think\Model.php	/^                $default = null;$/;"	v
delete	thinkphp\library\think\Model.php	/^    public function delete()$/;"	f
destroy	thinkphp\library\think\Model.php	/^    public static function destroy($data)$/;"	f
field	thinkphp\library\think\Model.php	/^                $field = $this->getDeleteTimeField(true);$/;"	v
field	thinkphp\library\think\Model.php	/^                $field = $value;$/;"	v
field	thinkphp\library\think\Model.php	/^            $field = $this->field;$/;"	v
field	thinkphp\library\think\Model.php	/^            $field = array_merge($this->field, $append);$/;"	v
field	thinkphp\library\think\Model.php	/^            $this->field = $query->getConnection()->getTableFields($table);$/;"	v
field	thinkphp\library\think\Model.php	/^        foreach ($auto as $field => $value) {$/;"	v
field	thinkphp\library\think\Model.php	/^    public static function create($data = [], $field = null)$/;"	v
get	thinkphp\library\think\Model.php	/^    public static function get($data, $with = [], $cache = false)$/;"	f
getWhere	thinkphp\library\think\Model.php	/^    protected function getWhere()$/;"	f
init	thinkphp\library\think\Model.php	/^    protected static function init()$/;"	f
initialize	thinkphp\library\think\Model.php	/^    protected function initialize()$/;"	f
initialized	thinkphp\library\think\Model.php	/^    protected static $initialized = [];$/;"	v
insert	thinkphp\library\think\Model.php	/^    protected $insert = [];$/;"	v
insertData	thinkphp\library\think\Model.php	/^    protected function insertData($sequence)$/;"	f
insertId	thinkphp\library\think\Model.php	/^            $insertId = $this->db(false)->getLastInsID($sequence);$/;"	v
isUpdate	thinkphp\library\think\Model.php	/^                $this->isUpdate    = true;$/;"	v
isUpdate	thinkphp\library\think\Model.php	/^            $this->isUpdate    = true;$/;"	v
isUpdate	thinkphp\library\think\Model.php	/^            $this->isUpdate = $update;$/;"	v
isUpdate	thinkphp\library\think\Model.php	/^        $this->isUpdate = true;$/;"	v
isUpdate	thinkphp\library\think\Model.php	/^    private $isUpdate = false;$/;"	v
isUpdate	thinkphp\library\think\Model.php	/^    public function isUpdate($update = true, $where = null)$/;"	f
isUpdate	thinkphp\library\think\Model.php	/^    public function newInstance($data = [], $isUpdate = false, $where = null)$/;"	v
item	thinkphp\library\think\Model.php	/^            $item = [];$/;"	v
key	thinkphp\library\think\Model.php	/^            foreach ($data as $key => $value) {$/;"	v
key	thinkphp\library\think\Model.php	/^            foreach ($dataSet as $key => $data) {$/;"	v
key	thinkphp\library\think\Model.php	/^            foreach ($where as $key => $val) {$/;"	v
key	thinkphp\library\think\Model.php	/^        foreach ($this->data as $key => $val) {$/;"	v
model	thinkphp\library\think\Model.php	/^        $model = new static();$/;"	v
name	thinkphp\library\think\Model.php	/^                $this->name = substr($this->name, 0, -strlen($suffix));$/;"	v
name	thinkphp\library\think\Model.php	/^            $name       = str_replace('\\\\', '\/', static::class);$/;"	v
name	thinkphp\library\think\Model.php	/^            $this->name = basename($name);$/;"	v
name	thinkphp\library\think\Model.php	/^            foreach ($this->relationWrite as $name => $val) {$/;"	v
name	thinkphp\library\think\Model.php	/^    protected $name;$/;"	v
newInstance	thinkphp\library\think\Model.php	/^    public function newInstance($data = [], $isUpdate = false, $where = null)$/;"	f
offsetExists	thinkphp\library\think\Model.php	/^    public function offsetExists($name)$/;"	f
offsetGet	thinkphp\library\think\Model.php	/^    public function offsetGet($name)$/;"	f
offsetSet	thinkphp\library\think\Model.php	/^    public function offsetSet($name, $value)$/;"	f
offsetUnset	thinkphp\library\think\Model.php	/^    public function offsetUnset($name)$/;"	f
origin	thinkphp\library\think\Model.php	/^        $this->origin = $this->data;$/;"	v
origin	thinkphp\library\think\Model.php	/^        $this->origin = [];$/;"	v
parseQuery	thinkphp\library\think\Model.php	/^    protected static function parseQuery(&$data, $with, $cache)$/;"	f
parseWhere	thinkphp\library\think\Model.php	/^    protected static function parseWhere($where)$/;"	f
pk	thinkphp\library\think\Model.php	/^            $pk = $this->getPk();$/;"	v
pk	thinkphp\library\think\Model.php	/^        $pk = $this->getPk();$/;"	v
query	thinkphp\library\think\Model.php	/^            $query = $this->db(false);$/;"	v
query	thinkphp\library\think\Model.php	/^            $this->query = $config->get('database.query');$/;"	v
query	thinkphp\library\think\Model.php	/^        $query = $model->db();$/;"	v
query	thinkphp\library\think\Model.php	/^        $query = $this->buildQuery();$/;"	v
query	thinkphp\library\think\Model.php	/^        $query = new $class();$/;"	v
query	thinkphp\library\think\Model.php	/^        $query = static::parseQuery($data, $with, $cache);$/;"	v
query	thinkphp\library\think\Model.php	/^    protected $query;$/;"	v
replace	thinkphp\library\think\Model.php	/^    public function saveAll($dataSet, $replace = true)$/;"	v
result	thinkphp\library\think\Model.php	/^                $result = $data->delete();$/;"	v
result	thinkphp\library\think\Model.php	/^            $result = $data->with($with)->cache($cache);$/;"	v
result	thinkphp\library\think\Model.php	/^            $result = $result->where(self::parseWhere($data));$/;"	v
result	thinkphp\library\think\Model.php	/^        $result = $model->isUpdate(true)->save($data, $where);$/;"	v
result	thinkphp\library\think\Model.php	/^        $result = $this->db(false)->strict(false)->field($allowFields)->insert($this->data);$/;"	v
result	thinkphp\library\think\Model.php	/^        $result = $this->db(false)->where($where)->delete();$/;"	v
result	thinkphp\library\think\Model.php	/^        $result = $this->db(false)->where($where)->setDec($field, $step, $lazyTime);$/;"	v
result	thinkphp\library\think\Model.php	/^        $result = $this->db(false)->where($where)->setInc($field, $step, $lazyTime);$/;"	v
result	thinkphp\library\think\Model.php	/^        $result = $this->db(false)->where($where)->strict(false)->field($allowFields)->update($data);$/;"	v
result	thinkphp\library\think\Model.php	/^        $result = $this->isUpdate ? $this->updateData($where) : $this->insertData($sequence);$/;"	v
result	thinkphp\library\think\Model.php	/^        $result = [];$/;"	v
result	thinkphp\library\think\Model.php	/^        $result = self::with($with)->cache($cache);$/;"	v
resultSet	thinkphp\library\think\Model.php	/^        $resultSet = $query->select($data);$/;"	v
resultSetType	thinkphp\library\think\Model.php	/^            $this->resultSetType = $config->get('database.resultset_type');$/;"	v
save	thinkphp\library\think\Model.php	/^    public function save($data = [], $where = [], $sequence = null)$/;"	f
saveAll	thinkphp\library\think\Model.php	/^    public function saveAll($dataSet, $replace = true)$/;"	f
sequence	thinkphp\library\think\Model.php	/^            $sequence = $data;$/;"	v
setDec	thinkphp\library\think\Model.php	/^    public function setDec($field, $step = 1, $lazyTime = 0)$/;"	f
setInc	thinkphp\library\think\Model.php	/^    public function setInc($field, $step = 1, $lazyTime = 0)$/;"	f
step	thinkphp\library\think\Model.php	/^    public function setDec($field, $step = 1, $lazyTime = 0)$/;"	v
step	thinkphp\library\think\Model.php	/^    public function setInc($field, $step = 1, $lazyTime = 0)$/;"	v
suffix	thinkphp\library\think\Model.php	/^                $suffix     = basename(dirname($name));$/;"	v
table	thinkphp\library\think\Model.php	/^            $table = $query->getTable();$/;"	v
table	thinkphp\library\think\Model.php	/^    protected $table;$/;"	v
update	thinkphp\library\think\Model.php	/^    protected $update = [];$/;"	v
update	thinkphp\library\think\Model.php	/^    public static function update($data = [], $where = [], $field = null)$/;"	f
updateData	thinkphp\library\think\Model.php	/^    protected function updateData($where)$/;"	f
updateWhere	thinkphp\library\think\Model.php	/^                $this->updateWhere = self::parseWhere($where);$/;"	v
updateWhere	thinkphp\library\think\Model.php	/^            $this->updateWhere = self::parseWhere($update);$/;"	v
updateWhere	thinkphp\library\think\Model.php	/^    private $updateWhere;$/;"	v
useGlobalScope	thinkphp\library\think\Model.php	/^    public static function useGlobalScope($use)$/;"	f
value	thinkphp\library\think\Model.php	/^                $value = null;$/;"	v
where	thinkphp\library\think\Model.php	/^            $where = $this->updateWhere;$/;"	v
where	thinkphp\library\think\Model.php	/^            $where = null;$/;"	v
where	thinkphp\library\think\Model.php	/^        $where = $this->getWhere();$/;"	v
where	thinkphp\library\think\Model.php	/^    public function isUpdate($update = true, $where = null)$/;"	v
where	thinkphp\library\think\Model.php	/^    public function save($data = [], $where = [], $sequence = null)$/;"	v
where	thinkphp\library\think\Model.php	/^    public static function update($data = [], $where = [], $field = null)$/;"	v
with	thinkphp\library\think\Model.php	/^            $with  = [];$/;"	v
with	thinkphp\library\think\Model.php	/^    public static function all($data = null, $with = [], $cache = false)$/;"	v
with	thinkphp\library\think\Model.php	/^    public static function get($data, $with = [], $cache = false)$/;"	v
Paginator	thinkphp\library\think\Paginator.php	/^abstract class Paginator implements ArrayAccess, Countable, IteratorAggregate, JsonSerializable$/;"	c
__call	thinkphp\library\think\Paginator.php	/^    public function __call($name, $arguments)$/;"	f
__construct	thinkphp\library\think\Paginator.php	/^    public function __construct($items, $listRows, $currentPage = null, $total = null, $simple = false, $options = [])$/;"	f
__toString	thinkphp\library\think\Paginator.php	/^    public function __toString()$/;"	f
appends	thinkphp\library\think\Paginator.php	/^    public function appends($key, $value = null)$/;"	f
buildFragment	thinkphp\library\think\Paginator.php	/^    protected function buildFragment()$/;"	f
count	thinkphp\library\think\Paginator.php	/^    public function count()$/;"	f
currentPage	thinkphp\library\think\Paginator.php	/^            $this->currentPage = $this->setCurrentPage($currentPage);$/;"	v
currentPage	thinkphp\library\think\Paginator.php	/^    protected $currentPage;$/;"	v
currentPage	thinkphp\library\think\Paginator.php	/^    public function __construct($items, $listRows, $currentPage = null, $total = null, $simple = false, $options = [])$/;"	v
currentPage	thinkphp\library\think\Paginator.php	/^    public function currentPage()$/;"	f
currentPage	thinkphp\library\think\Paginator.php	/^    public static function make($items, $listRows, $currentPage = null, $total = null, $simple = false, $options = [])$/;"	v
default	thinkphp\library\think\Paginator.php	/^    public static function getCurrentPage($varPage = 'page', $default = 1)$/;"	v
each	thinkphp\library\think\Paginator.php	/^    public function each(callable $callback)$/;"	f
fragment	thinkphp\library\think\Paginator.php	/^    public function fragment($fragment)$/;"	f
getCollection	thinkphp\library\think\Paginator.php	/^    public function getCollection()$/;"	f
getCurrentPage	thinkphp\library\think\Paginator.php	/^    public static function getCurrentPage($varPage = 'page', $default = 1)$/;"	f
getCurrentPath	thinkphp\library\think\Paginator.php	/^    public static function getCurrentPath()$/;"	f
getIterator	thinkphp\library\think\Paginator.php	/^    public function getIterator()$/;"	f
getUrlRange	thinkphp\library\think\Paginator.php	/^    public function getUrlRange($start, $end)$/;"	f
hasMore	thinkphp\library\think\Paginator.php	/^            $this->hasMore     = $this->currentPage < $this->lastPage;$/;"	v
hasMore	thinkphp\library\think\Paginator.php	/^            $this->hasMore     = count($items) > ($this->listRows);$/;"	v
hasMore	thinkphp\library\think\Paginator.php	/^    protected $hasMore;$/;"	v
hasPages	thinkphp\library\think\Paginator.php	/^    public function hasPages()$/;"	f
isEmpty	thinkphp\library\think\Paginator.php	/^    public function isEmpty()$/;"	f
items	thinkphp\library\think\Paginator.php	/^            $items             = $items->slice(0, $this->listRows);$/;"	v
items	thinkphp\library\think\Paginator.php	/^            $items = Collection::make($items);$/;"	v
items	thinkphp\library\think\Paginator.php	/^        $this->items = $items;$/;"	v
items	thinkphp\library\think\Paginator.php	/^    protected $items;$/;"	v
items	thinkphp\library\think\Paginator.php	/^    public function items()$/;"	f
jsonSerialize	thinkphp\library\think\Paginator.php	/^    public function jsonSerialize()$/;"	f
k	thinkphp\library\think\Paginator.php	/^        foreach ($queries as $k => $v) {$/;"	v
key	thinkphp\library\think\Paginator.php	/^        foreach ($this->items as $key => $item) {$/;"	v
lastPage	thinkphp\library\think\Paginator.php	/^            $this->lastPage    = (int) ceil($total \/ $listRows);$/;"	v
lastPage	thinkphp\library\think\Paginator.php	/^    protected $lastPage;$/;"	v
lastPage	thinkphp\library\think\Paginator.php	/^    public function lastPage()$/;"	f
listRows	thinkphp\library\think\Paginator.php	/^        $this->listRows = $listRows;$/;"	v
listRows	thinkphp\library\think\Paginator.php	/^    protected $listRows;$/;"	v
listRows	thinkphp\library\think\Paginator.php	/^    public function listRows()$/;"	f
make	thinkphp\library\think\Paginator.php	/^    public static function make($items, $listRows, $currentPage = null, $total = null, $simple = false, $options = [])$/;"	f
offsetExists	thinkphp\library\think\Paginator.php	/^    public function offsetExists($offset)$/;"	f
offsetGet	thinkphp\library\think\Paginator.php	/^    public function offsetGet($offset)$/;"	f
offsetSet	thinkphp\library\think\Paginator.php	/^    public function offsetSet($offset, $value)$/;"	f
offsetUnset	thinkphp\library\think\Paginator.php	/^    public function offsetUnset($offset)$/;"	f
options	thinkphp\library\think\Paginator.php	/^        $this->options = array_merge($this->options, $options);$/;"	v
options	thinkphp\library\think\Paginator.php	/^    protected $options = [$/;"	v
page	thinkphp\library\think\Paginator.php	/^            $page = 1;$/;"	v
page	thinkphp\library\think\Paginator.php	/^        $page = Container::get('request')->request($varPage);$/;"	v
parameters	thinkphp\library\think\Paginator.php	/^            $parameters = [$this->options['var_page'] => $page];$/;"	v
parameters	thinkphp\library\think\Paginator.php	/^            $parameters = [];$/;"	v
parameters	thinkphp\library\think\Paginator.php	/^            $parameters = array_merge($this->options['query'], $parameters);$/;"	v
path	thinkphp\library\think\Paginator.php	/^            $path       = $this->options['path'];$/;"	v
path	thinkphp\library\think\Paginator.php	/^            $path       = str_replace('[PAGE]', $page, $this->options['path']);$/;"	v
queries	thinkphp\library\think\Paginator.php	/^            $queries = $key;$/;"	v
queries	thinkphp\library\think\Paginator.php	/^            $queries = [$key => $value];$/;"	v
render	thinkphp\library\think\Paginator.php	/^    abstract public function render();$/;"	f
result	thinkphp\library\think\Paginator.php	/^            $result = $callback($item, $key);$/;"	v
setCurrentPage	thinkphp\library\think\Paginator.php	/^    protected function setCurrentPage($currentPage)$/;"	f
simple	thinkphp\library\think\Paginator.php	/^        $this->simple   = $simple;$/;"	v
simple	thinkphp\library\think\Paginator.php	/^    protected $simple = false;$/;"	v
toArray	thinkphp\library\think\Paginator.php	/^    public function toArray()$/;"	f
total	thinkphp\library\think\Paginator.php	/^            $this->total       = $total;$/;"	v
total	thinkphp\library\think\Paginator.php	/^            $total = $this->total();$/;"	v
total	thinkphp\library\think\Paginator.php	/^            $total = null;$/;"	v
total	thinkphp\library\think\Paginator.php	/^    protected $total;$/;"	v
total	thinkphp\library\think\Paginator.php	/^    public function total()$/;"	f
url	thinkphp\library\think\Paginator.php	/^        $url = $path;$/;"	v
url	thinkphp\library\think\Paginator.php	/^    protected function url($page)$/;"	f
urls	thinkphp\library\think\Paginator.php	/^        $urls = [];$/;"	v
value	thinkphp\library\think\Paginator.php	/^    public function appends($key, $value = null)$/;"	v
Process	thinkphp\library\think\Process.php	/^class Process$/;"	c
__clone	thinkphp\library\think\Process.php	/^    public function __clone()$/;"	f
__construct	thinkphp\library\think\Process.php	/^    public function __construct($commandline, $cwd = null, array $env = null, $input = null, $timeout = 60, array $options = [])$/;"	f
__destruct	thinkphp\library\think\Process.php	/^    public function __destruct()$/;"	f
addErrorOutput	thinkphp\library\think\Process.php	/^    public function addErrorOutput($line)$/;"	f
addOutput	thinkphp\library\think\Process.php	/^    public function addOutput($line)$/;"	f
buildCallback	thinkphp\library\think\Process.php	/^    protected function buildCallback($callback)$/;"	f
callback	thinkphp\library\think\Process.php	/^            $this->callback = $this->buildCallback($callback);$/;"	v
callback	thinkphp\library\think\Process.php	/^        $callback = $this->callback;$/;"	v
callback	thinkphp\library\think\Process.php	/^        $callback = function ($type, $data) use ($callback, $out) {$/;"	v
callback	thinkphp\library\think\Process.php	/^        $this->callback                     = null;$/;"	v
callback	thinkphp\library\think\Process.php	/^        $this->callback  = $this->buildCallback($callback);$/;"	v
callback	thinkphp\library\think\Process.php	/^    private $callback;$/;"	v
captureExitCode	thinkphp\library\think\Process.php	/^    private function captureExitCode()$/;"	f
checkTimeout	thinkphp\library\think\Process.php	/^    public function checkTimeout()$/;"	f
clearErrorOutput	thinkphp\library\think\Process.php	/^    public function clearErrorOutput()$/;"	f
clearOutput	thinkphp\library\think\Process.php	/^    public function clearOutput()$/;"	f
close	thinkphp\library\think\Process.php	/^            $close   = '\\\\' !== DIRECTORY_SEPARATOR || !$running;$/;"	v
close	thinkphp\library\think\Process.php	/^    private function close()$/;"	f
commandline	thinkphp\library\think\Process.php	/^            $commandline = 'cmd \/V:ON \/E:ON \/C "(' . $commandline . ')';$/;"	v
commandline	thinkphp\library\think\Process.php	/^            $this->commandline = '(' . $this->commandline . ') 3>\/dev\/null; code=$?; echo $code >&3; exit $code';$/;"	v
commandline	thinkphp\library\think\Process.php	/^        $commandline = $this->commandline;$/;"	v
commandline	thinkphp\library\think\Process.php	/^        $this->commandline = $commandline;$/;"	v
commandline	thinkphp\library\think\Process.php	/^    private $commandline;$/;"	v
cwd	thinkphp\library\think\Process.php	/^            $this->cwd = getcwd();$/;"	v
cwd	thinkphp\library\think\Process.php	/^        $this->cwd         = $cwd;$/;"	v
cwd	thinkphp\library\think\Process.php	/^        $this->cwd = $cwd;$/;"	v
cwd	thinkphp\library\think\Process.php	/^    private $cwd;$/;"	v
cwd	thinkphp\library\think\Process.php	/^    public function __construct($commandline, $cwd = null, array $env = null, $input = null, $timeout = 60, array $options = [])$/;"	v
data	thinkphp\library\think\Process.php	/^        $data = $this->getErrorOutput();$/;"	v
data	thinkphp\library\think\Process.php	/^        $data = $this->getOutput();$/;"	v
descriptors	thinkphp\library\think\Process.php	/^            $descriptors = array_merge($descriptors, [['pipe', 'w']]);$/;"	v
descriptors	thinkphp\library\think\Process.php	/^        $descriptors     = $this->getDescriptors();$/;"	v
descriptors	thinkphp\library\think\Process.php	/^        $descriptors = $this->processPipes->getDescriptors($this->outputDisabled);$/;"	v
disableOutput	thinkphp\library\think\Process.php	/^    public function disableOutput()$/;"	f
doSignal	thinkphp\library\think\Process.php	/^    private function doSignal($signal, $throwException)$/;"	f
enableOutput	thinkphp\library\think\Process.php	/^    public function enableOutput()$/;"	f
enhanceSigchildCompatibility	thinkphp\library\think\Process.php	/^        $this->enhanceSigchildCompatibility = '\\\\' !== DIRECTORY_SEPARATOR && $this->isSigchildEnabled();$/;"	v
enhanceSigchildCompatibility	thinkphp\library\think\Process.php	/^        $this->enhanceSigchildCompatibility = (bool) $enhance;$/;"	v
enhanceSigchildCompatibility	thinkphp\library\think\Process.php	/^    private $enhanceSigchildCompatibility;$/;"	v
enhanceWindowsCompatibility	thinkphp\library\think\Process.php	/^        $this->enhanceWindowsCompatibility  = true;$/;"	v
enhanceWindowsCompatibility	thinkphp\library\think\Process.php	/^        $this->enhanceWindowsCompatibility = (bool) $enhance;$/;"	v
enhanceWindowsCompatibility	thinkphp\library\think\Process.php	/^    private $enhanceWindowsCompatibility = true;$/;"	v
env	thinkphp\library\think\Process.php	/^        $env = array_filter($env, function ($value) {$/;"	v
env	thinkphp\library\think\Process.php	/^        $this->env = [];$/;"	v
env	thinkphp\library\think\Process.php	/^    private $env;$/;"	v
exitCodes	thinkphp\library\think\Process.php	/^    public static $exitCodes = [$/;"	v
exitcode	thinkphp\library\think\Process.php	/^            $exitcode = -1;$/;"	v
exitcode	thinkphp\library\think\Process.php	/^            $exitcode = proc_close($this->process);$/;"	v
exitcode	thinkphp\library\think\Process.php	/^            $this->exitcode = $this->fallbackExitcode;$/;"	v
exitcode	thinkphp\library\think\Process.php	/^            $this->exitcode = $this->processInformation['exitcode'];$/;"	v
exitcode	thinkphp\library\think\Process.php	/^            $this->exitcode = 128 + $this->processInformation['termsig'];$/;"	v
exitcode	thinkphp\library\think\Process.php	/^        $this->exitcode                     = null;$/;"	v
exitcode	thinkphp\library\think\Process.php	/^        $this->exitcode = -1 !== $exitcode ? $exitcode : (null !== $this->exitcode ? $this->exitcode : -1);$/;"	v
exitcode	thinkphp\library\think\Process.php	/^        if (null === $exitcode = $this->getExitCode()) {$/;"	v
exitcode	thinkphp\library\think\Process.php	/^    private $exitcode;$/;"	v
fallbackExitcode	thinkphp\library\think\Process.php	/^                $this->fallbackExitcode = (int) $data;$/;"	v
fallbackExitcode	thinkphp\library\think\Process.php	/^        $this->fallbackExitcode             = null;$/;"	v
fallbackExitcode	thinkphp\library\think\Process.php	/^    private $fallbackExitcode;$/;"	v
getCommandLine	thinkphp\library\think\Process.php	/^    public function getCommandLine()$/;"	f
getDescriptors	thinkphp\library\think\Process.php	/^    private function getDescriptors()$/;"	f
getEnhanceSigchildCompatibility	thinkphp\library\think\Process.php	/^    public function getEnhanceSigchildCompatibility()$/;"	f
getEnhanceWindowsCompatibility	thinkphp\library\think\Process.php	/^    public function getEnhanceWindowsCompatibility()$/;"	f
getEnv	thinkphp\library\think\Process.php	/^    public function getEnv()$/;"	f
getErrorOutput	thinkphp\library\think\Process.php	/^    public function getErrorOutput()$/;"	f
getExitCode	thinkphp\library\think\Process.php	/^    public function getExitCode()$/;"	f
getExitCodeText	thinkphp\library\think\Process.php	/^    public function getExitCodeText()$/;"	f
getIdleTimeout	thinkphp\library\think\Process.php	/^    public function getIdleTimeout()$/;"	f
getIncrementalErrorOutput	thinkphp\library\think\Process.php	/^    public function getIncrementalErrorOutput()$/;"	f
getIncrementalOutput	thinkphp\library\think\Process.php	/^    public function getIncrementalOutput()$/;"	f
getInput	thinkphp\library\think\Process.php	/^    public function getInput()$/;"	f
getOptions	thinkphp\library\think\Process.php	/^    public function getOptions()$/;"	f
getOutput	thinkphp\library\think\Process.php	/^    public function getOutput()$/;"	f
getPid	thinkphp\library\think\Process.php	/^    public function getPid()$/;"	f
getStatus	thinkphp\library\think\Process.php	/^    public function getStatus()$/;"	f
getStopSignal	thinkphp\library\think\Process.php	/^    public function getStopSignal()$/;"	f
getTermSignal	thinkphp\library\think\Process.php	/^    public function getTermSignal()$/;"	f
getTimeout	thinkphp\library\think\Process.php	/^    public function getTimeout()$/;"	f
getWorkingDirectory	thinkphp\library\think\Process.php	/^    public function getWorkingDirectory()$/;"	f
hasBeenSignaled	thinkphp\library\think\Process.php	/^    public function hasBeenSignaled()$/;"	f
hasBeenStopped	thinkphp\library\think\Process.php	/^    public function hasBeenStopped()$/;"	f
idleTimeout	thinkphp\library\think\Process.php	/^        $this->idleTimeout = $this->validateTimeout($timeout);$/;"	v
idleTimeout	thinkphp\library\think\Process.php	/^    private $idleTimeout;$/;"	v
incrementalErrorOutputOffset	thinkphp\library\think\Process.php	/^        $this->incrementalErrorOutputOffset = 0;$/;"	v
incrementalErrorOutputOffset	thinkphp\library\think\Process.php	/^        $this->incrementalErrorOutputOffset = strlen($data);$/;"	v
incrementalErrorOutputOffset	thinkphp\library\think\Process.php	/^    private $incrementalErrorOutputOffset = 0;$/;"	v
incrementalOutputOffset	thinkphp\library\think\Process.php	/^        $this->incrementalOutputOffset      = 0;$/;"	v
incrementalOutputOffset	thinkphp\library\think\Process.php	/^        $this->incrementalOutputOffset = 0;$/;"	v
incrementalOutputOffset	thinkphp\library\think\Process.php	/^        $this->incrementalOutputOffset = strlen($data);$/;"	v
incrementalOutputOffset	thinkphp\library\think\Process.php	/^    private $incrementalOutputOffset      = 0;$/;"	v
input	thinkphp\library\think\Process.php	/^        $this->input = $input;$/;"	v
input	thinkphp\library\think\Process.php	/^        $this->input = Utils::validateInput(sprintf('%s::%s', __CLASS__, __FUNCTION__), $input);$/;"	v
input	thinkphp\library\think\Process.php	/^    private $input;$/;"	v
isOutputDisabled	thinkphp\library\think\Process.php	/^    public function isOutputDisabled()$/;"	f
isPty	thinkphp\library\think\Process.php	/^    public function isPty()$/;"	f
isPtySupported	thinkphp\library\think\Process.php	/^    public static function isPtySupported()$/;"	f
isRunning	thinkphp\library\think\Process.php	/^    public function isRunning()$/;"	f
isSigchildEnabled	thinkphp\library\think\Process.php	/^    protected function isSigchildEnabled()$/;"	f
isStarted	thinkphp\library\think\Process.php	/^    public function isStarted()$/;"	f
isSuccessful	thinkphp\library\think\Process.php	/^    public function isSuccessful()$/;"	f
isTerminated	thinkphp\library\think\Process.php	/^    public function isTerminated()$/;"	f
isTty	thinkphp\library\think\Process.php	/^    public function isTty()$/;"	f
key	thinkphp\library\think\Process.php	/^        foreach ($env as $key => $value) {$/;"	v
lastOutputTime	thinkphp\library\think\Process.php	/^        $this->lastOutputTime = microtime(true);$/;"	v
lastOutputTime	thinkphp\library\think\Process.php	/^    private $lastOutputTime;$/;"	v
latest	thinkphp\library\think\Process.php	/^        $latest = substr($data, $this->incrementalErrorOutputOffset);$/;"	v
latest	thinkphp\library\think\Process.php	/^        $latest = substr($data, $this->incrementalOutputOffset);$/;"	v
latestSignal	thinkphp\library\think\Process.php	/^        $this->latestSignal                 = null;$/;"	v
latestSignal	thinkphp\library\think\Process.php	/^        $this->latestSignal = $signal;$/;"	v
latestSignal	thinkphp\library\think\Process.php	/^    private $latestSignal;$/;"	v
mustRun	thinkphp\library\think\Process.php	/^    public function mustRun($callback = null)$/;"	f
offset	thinkphp\library\think\Process.php	/^            foreach ($this->processPipes->getFiles() as $offset => $filename) {$/;"	v
options	thinkphp\library\think\Process.php	/^        $this->options                      = array_replace([$/;"	v
options	thinkphp\library\think\Process.php	/^        $this->options = $options;$/;"	v
options	thinkphp\library\think\Process.php	/^    private $options;$/;"	v
out	thinkphp\library\think\Process.php	/^        $out      = self::OUT;$/;"	v
outputDisabled	thinkphp\library\think\Process.php	/^        $this->outputDisabled = false;$/;"	v
outputDisabled	thinkphp\library\think\Process.php	/^        $this->outputDisabled = true;$/;"	v
outputDisabled	thinkphp\library\think\Process.php	/^    private $outputDisabled = false;$/;"	v
pids	thinkphp\library\think\Process.php	/^                $pids = preg_split('\/\\s+\/', `ps -o pid --no-heading --ppid {$this->getPid()}`);$/;"	v
proc	thinkphp\library\think\Process.php	/^        $proc = @proc_open('echo 1', [['pty'], ['pty'], ['pty']], $pipes);$/;"	v
process	thinkphp\library\think\Process.php	/^        $process = clone $this;$/;"	v
process	thinkphp\library\think\Process.php	/^        $this->process                      = null;$/;"	v
process	thinkphp\library\think\Process.php	/^        $this->process = proc_open($commandline, $descriptors, $this->processPipes->pipes, $this->cwd, $this->env, $this->options);$/;"	v
process	thinkphp\library\think\Process.php	/^    private $process;$/;"	v
processInformation	thinkphp\library\think\Process.php	/^        $this->processInformation           = null;$/;"	v
processInformation	thinkphp\library\think\Process.php	/^        $this->processInformation = proc_get_status($this->process);$/;"	v
processInformation	thinkphp\library\think\Process.php	/^    private $processInformation;$/;"	v
processPipes	thinkphp\library\think\Process.php	/^            $this->processPipes = UnixPipes::create($this, $this->input);$/;"	v
processPipes	thinkphp\library\think\Process.php	/^            $this->processPipes = WindowsPipes::create($this, $this->input);$/;"	v
processPipes	thinkphp\library\think\Process.php	/^    private $processPipes;$/;"	v
pty	thinkphp\library\think\Process.php	/^        $this->pty                          = false;$/;"	v
pty	thinkphp\library\think\Process.php	/^        $this->pty = (bool) $bool;$/;"	v
pty	thinkphp\library\think\Process.php	/^    private $pty;$/;"	v
readPipes	thinkphp\library\think\Process.php	/^    private function readPipes($blocking, $close)$/;"	f
relies	thinkphp\library\think\Process.php	/^            throw new \\RuntimeException('The Process class relies on proc_open, which is not available on your PHP installation.');$/;"	c
requireProcessIsStarted	thinkphp\library\think\Process.php	/^    private function requireProcessIsStarted($functionName)$/;"	f
requireProcessIsTerminated	thinkphp\library\think\Process.php	/^    private function requireProcessIsTerminated($functionName)$/;"	f
resetProcessData	thinkphp\library\think\Process.php	/^    private function resetProcessData()$/;"	f
restart	thinkphp\library\think\Process.php	/^    public function restart($callback = null)$/;"	f
result	thinkphp\library\think\Process.php	/^            return $result = false;$/;"	v
result	thinkphp\library\think\Process.php	/^            return $result = true;$/;"	v
result	thinkphp\library\think\Process.php	/^        $result = $this->processPipes->readAndWrite($blocking, $close);$/;"	v
result	thinkphp\library\think\Process.php	/^        return $result = false;$/;"	v
result	thinkphp\library\think\Process.php	/^        static $result;$/;"	v
run	thinkphp\library\think\Process.php	/^    public function run($callback = null)$/;"	f
running	thinkphp\library\think\Process.php	/^            $running = '\\\\' === DIRECTORY_SEPARATOR ? $this->isRunning() : $this->processPipes->areOpen();$/;"	v
setCommandLine	thinkphp\library\think\Process.php	/^    public function setCommandLine($commandline)$/;"	f
setEnhanceSigchildCompatibility	thinkphp\library\think\Process.php	/^    public function setEnhanceSigchildCompatibility($enhance)$/;"	f
setEnhanceWindowsCompatibility	thinkphp\library\think\Process.php	/^    public function setEnhanceWindowsCompatibility($enhance)$/;"	f
setEnv	thinkphp\library\think\Process.php	/^    public function setEnv(array $env)$/;"	f
setIdleTimeout	thinkphp\library\think\Process.php	/^    public function setIdleTimeout($timeout)$/;"	f
setInput	thinkphp\library\think\Process.php	/^    public function setInput($input)$/;"	f
setOptions	thinkphp\library\think\Process.php	/^    public function setOptions(array $options)$/;"	f
setPty	thinkphp\library\think\Process.php	/^    public function setPty($bool)$/;"	f
setTimeout	thinkphp\library\think\Process.php	/^    public function setTimeout($timeout)$/;"	f
setTty	thinkphp\library\think\Process.php	/^    public function setTty($tty)$/;"	f
setWorkingDirectory	thinkphp\library\think\Process.php	/^    public function setWorkingDirectory($cwd)$/;"	f
sigchild	thinkphp\library\think\Process.php	/^    private static $sigchild;$/;"	v
signal	thinkphp\library\think\Process.php	/^    public function signal($signal)$/;"	f
start	thinkphp\library\think\Process.php	/^    public function start($callback = null)$/;"	f
starttime	thinkphp\library\think\Process.php	/^        $this->starttime                    = null;$/;"	v
starttime	thinkphp\library\think\Process.php	/^        $this->starttime = $this->lastOutputTime = microtime(true);$/;"	v
starttime	thinkphp\library\think\Process.php	/^    private $starttime;$/;"	v
status	thinkphp\library\think\Process.php	/^        $this->status                       = self::STATUS_READY;$/;"	v
status	thinkphp\library\think\Process.php	/^        $this->status   = self::STATUS_TERMINATED;$/;"	v
status	thinkphp\library\think\Process.php	/^        $this->status = self::STATUS_STARTED;$/;"	v
status	thinkphp\library\think\Process.php	/^    private $status                       = self::STATUS_READY;$/;"	v
stderr	thinkphp\library\think\Process.php	/^        $this->stderr                       = '';$/;"	v
stderr	thinkphp\library\think\Process.php	/^        $this->stderr                       = null;$/;"	v
stderr	thinkphp\library\think\Process.php	/^    private $stderr;$/;"	v
stdout	thinkphp\library\think\Process.php	/^        $this->stdout                       = null;$/;"	v
stdout	thinkphp\library\think\Process.php	/^        $this->stdout                  = '';$/;"	v
stdout	thinkphp\library\think\Process.php	/^    private $stdout;$/;"	v
stop	thinkphp\library\think\Process.php	/^    public function stop()$/;"	f
timeout	thinkphp\library\think\Process.php	/^            $timeout = null;$/;"	v
timeout	thinkphp\library\think\Process.php	/^        $this->timeout = $this->validateTimeout($timeout);$/;"	v
timeout	thinkphp\library\think\Process.php	/^        $timeout = (float) $timeout;$/;"	v
timeout	thinkphp\library\think\Process.php	/^    private $timeout;$/;"	v
tty	thinkphp\library\think\Process.php	/^        $this->tty = (bool) $tty;$/;"	v
tty	thinkphp\library\think\Process.php	/^    private $tty;$/;"	v
type	thinkphp\library\think\Process.php	/^        foreach ($result as $type => $data) {$/;"	v
updateStatus	thinkphp\library\think\Process.php	/^    protected function updateStatus($blocking)$/;"	f
useFileHandles	thinkphp\library\think\Process.php	/^        $this->useFileHandles               = '\\\\' === DIRECTORY_SEPARATOR;$/;"	v
useFileHandles	thinkphp\library\think\Process.php	/^    private $useFileHandles = false;$/;"	v
validateTimeout	thinkphp\library\think\Process.php	/^    private function validateTimeout($timeout)$/;"	f
wait	thinkphp\library\think\Process.php	/^    public function wait($callback = null)$/;"	f
Request	thinkphp\library\think\Request.php	/^class Request$/;"	c
__call	thinkphp\library\think\Request.php	/^    public function __call($method, $args)$/;"	f
__construct	thinkphp\library\think\Request.php	/^    public function __construct(Config $config, $options = [])$/;"	f
accept	thinkphp\library\think\Request.php	/^        $accept = $this->server('HTTP_ACCEPT');$/;"	v
action	thinkphp\library\think\Request.php	/^            $this->action = $action;$/;"	v
action	thinkphp\library\think\Request.php	/^    protected $action;$/;"	v
action	thinkphp\library\think\Request.php	/^    public function action($action = null)$/;"	f
adv	thinkphp\library\think\Request.php	/^    public function ip($type = 0, $adv = true)$/;"	v
arr	thinkphp\library\think\Request.php	/^                $arr = explode(',', $_SERVER['HTTP_X_FORWARDED_FOR']);$/;"	v
array	thinkphp\library\think\Request.php	/^            $array = [];$/;"	v
array	thinkphp\library\think\Request.php	/^            $array = explode(',', $val);$/;"	v
base	thinkphp\library\think\Request.php	/^        $base = $this->root();$/;"	v
baseFile	thinkphp\library\think\Request.php	/^            $this->baseFile = $file;$/;"	v
baseFile	thinkphp\library\think\Request.php	/^            $this->baseFile = $url;$/;"	v
baseFile	thinkphp\library\think\Request.php	/^    protected $baseFile;$/;"	v
baseFile	thinkphp\library\think\Request.php	/^    public function baseFile($file = null)$/;"	f
baseUrl	thinkphp\library\think\Request.php	/^            $this->baseUrl = $url;$/;"	v
baseUrl	thinkphp\library\think\Request.php	/^            $this->baseUrl = strpos($str, '?') ? strstr($str, '?', true) : $str;$/;"	v
baseUrl	thinkphp\library\think\Request.php	/^    protected $baseUrl;$/;"	v
baseUrl	thinkphp\library\think\Request.php	/^    public function baseUrl($url = null)$/;"	f
cache	thinkphp\library\think\Request.php	/^                $this->cache = [$key, $expire, $tag];$/;"	v
cache	thinkphp\library\think\Request.php	/^            $cache = Container::get('cache');$/;"	v
cache	thinkphp\library\think\Request.php	/^    protected $cache;$/;"	v
cache	thinkphp\library\think\Request.php	/^    public function cache($key, $expire = null, $except = [], $tag = null)$/;"	f
callback	thinkphp\library\think\Request.php	/^    public function hook($method, $callback = null)$/;"	v
config	thinkphp\library\think\Request.php	/^        $this->config = $config;$/;"	v
config	thinkphp\library\think\Request.php	/^    protected $config;$/;"	v
content	thinkphp\library\think\Request.php	/^            $content = $this->input;$/;"	v
content	thinkphp\library\think\Request.php	/^            $this->content = $this->input;$/;"	v
content	thinkphp\library\think\Request.php	/^    protected $content;$/;"	v
contentType	thinkphp\library\think\Request.php	/^        $contentType = $this->server('CONTENT_TYPE');$/;"	v
contentType	thinkphp\library\think\Request.php	/^    public function contentType()$/;"	f
controller	thinkphp\library\think\Request.php	/^            $this->controller = $controller;$/;"	v
controller	thinkphp\library\think\Request.php	/^    protected $controller;$/;"	v
controller	thinkphp\library\think\Request.php	/^    public function controller($controller = null)$/;"	f
cookie	thinkphp\library\think\Request.php	/^            $this->cookie = $cookie->get();$/;"	v
cookie	thinkphp\library\think\Request.php	/^            return $this->cookie = array_merge($this->cookie, $name);$/;"	v
cookie	thinkphp\library\think\Request.php	/^        $cookie = Container::get('cookie');$/;"	v
cookie	thinkphp\library\think\Request.php	/^    protected $cookie  = [];$/;"	v
cookie	thinkphp\library\think\Request.php	/^    public function cookie($name = '', $default = null, $filter = '')$/;"	f
count	thinkphp\library\think\Request.php	/^                    $count = count($file['name']);$/;"	v
create	thinkphp\library\think\Request.php	/^    public function create($uri, $method = 'GET', $params = [], $cookie = [], $files = [], $server = [], $content = null)$/;"	f
data	thinkphp\library\think\Request.php	/^                    $data = $data[$val];$/;"	v
data	thinkphp\library\think\Request.php	/^                    $data = (string) $data;$/;"	v
data	thinkphp\library\think\Request.php	/^                $data = (array) $data;$/;"	v
data	thinkphp\library\think\Request.php	/^                $data = (boolean) $data;$/;"	v
data	thinkphp\library\think\Request.php	/^                $data = (float) $data;$/;"	v
data	thinkphp\library\think\Request.php	/^                $data = (int) $data;$/;"	v
data	thinkphp\library\think\Request.php	/^            $data = $cookie->has($name) ? $cookie->get($name) : $default;$/;"	v
data	thinkphp\library\think\Request.php	/^            $data = $this->cookie;$/;"	v
data	thinkphp\library\think\Request.php	/^            $data = is_array($file) ? array_merge($this->param, $file) : $this->param;$/;"	v
default	thinkphp\library\think\Request.php	/^        $default = array_pop($filters);$/;"	v
default	thinkphp\library\think\Request.php	/^    public function cookie($name = '', $default = null, $filter = '')$/;"	v
default	thinkphp\library\think\Request.php	/^    public function delete($name = '', $default = null, $filter = '')$/;"	v
default	thinkphp\library\think\Request.php	/^    public function env($name = '', $default = null, $filter = '')$/;"	v
default	thinkphp\library\think\Request.php	/^    public function get($name = '', $default = null, $filter = '')$/;"	v
default	thinkphp\library\think\Request.php	/^    public function header($name = '', $default = null)$/;"	v
default	thinkphp\library\think\Request.php	/^    public function param($name = '', $default = null, $filter = '')$/;"	v
default	thinkphp\library\think\Request.php	/^    public function patch($name = '', $default = null, $filter = '')$/;"	v
default	thinkphp\library\think\Request.php	/^    public function post($name = '', $default = null, $filter = '')$/;"	v
default	thinkphp\library\think\Request.php	/^    public function put($name = '', $default = null, $filter = '')$/;"	v
default	thinkphp\library\think\Request.php	/^    public function request($name = '', $default = null, $filter = '')$/;"	v
default	thinkphp\library\think\Request.php	/^    public function route($name = '', $default = null, $filter = '')$/;"	v
default	thinkphp\library\think\Request.php	/^    public function server($name = '', $default = null, $filter = '')$/;"	v
default	thinkphp\library\think\Request.php	/^    public function session($name = '', $default = null, $filter = '')$/;"	v
delete	thinkphp\library\think\Request.php	/^    public function delete($name = '', $default = null, $filter = '')$/;"	f
dispatch	thinkphp\library\think\Request.php	/^            $this->dispatch = $dispatch;$/;"	v
dispatch	thinkphp\library\think\Request.php	/^    protected $dispatch = [];$/;"	v
dispatch	thinkphp\library\think\Request.php	/^    public function dispatch($dispatch = null)$/;"	f
domain	thinkphp\library\think\Request.php	/^            $this->domain = $domain;$/;"	v
domain	thinkphp\library\think\Request.php	/^            $this->domain = $this->scheme() . ':\/\/' . $this->host();$/;"	v
domain	thinkphp\library\think\Request.php	/^    protected $domain;$/;"	v
domain	thinkphp\library\think\Request.php	/^    public function domain($domain = null)$/;"	f
env	thinkphp\library\think\Request.php	/^            $this->env = Container::get('env')->get();$/;"	v
env	thinkphp\library\think\Request.php	/^            return $this->env = array_merge($this->env, $name);$/;"	v
env	thinkphp\library\think\Request.php	/^    protected $env     = [];$/;"	v
env	thinkphp\library\think\Request.php	/^    public function env($name = '', $default = null, $filter = '')$/;"	f
except	thinkphp\library\think\Request.php	/^            $except = [];$/;"	v
except	thinkphp\library\think\Request.php	/^    public function except($name, $type = 'param')$/;"	f
expire	thinkphp\library\think\Request.php	/^    public function cache($key, $expire = null, $except = [], $tag = null)$/;"	v
ext	thinkphp\library\think\Request.php	/^    public function ext()$/;"	f
file	thinkphp\library\think\Request.php	/^                $file = str_replace('\\\\', '\/', dirname($file));$/;"	v
file	thinkphp\library\think\Request.php	/^            $file = $this->baseFile();$/;"	v
file	thinkphp\library\think\Request.php	/^            $file = $this->file();$/;"	v
file	thinkphp\library\think\Request.php	/^            $this->file = isset($_FILES) ? $_FILES : [];$/;"	v
file	thinkphp\library\think\Request.php	/^            return $this->file = array_merge($this->file, $name);$/;"	v
file	thinkphp\library\think\Request.php	/^    protected $file    = [];$/;"	v
file	thinkphp\library\think\Request.php	/^    public function file($name = '')$/;"	f
files	thinkphp\library\think\Request.php	/^        $files = $this->file;$/;"	v
filter	thinkphp\library\think\Request.php	/^                $filter = (array) $filter;$/;"	v
filter	thinkphp\library\think\Request.php	/^                $filter = explode(',', $filter);$/;"	v
filter	thinkphp\library\think\Request.php	/^            $filter = $filter ?: $this->filter;$/;"	v
filter	thinkphp\library\think\Request.php	/^            $filter = [];$/;"	v
filter	thinkphp\library\think\Request.php	/^            $this->filter = $filter;$/;"	v
filter	thinkphp\library\think\Request.php	/^            $this->filter = $this->config->get('default_filter');$/;"	v
filter	thinkphp\library\think\Request.php	/^        $filter = $this->getFilter($filter, $default);$/;"	v
filter	thinkphp\library\think\Request.php	/^    protected $filter;$/;"	v
filter	thinkphp\library\think\Request.php	/^    public function filter($filter = null)$/;"	f
filterValue	thinkphp\library\think\Request.php	/^    private function filterValue(&$value, $key, $filters)$/;"	f
get	thinkphp\library\think\Request.php	/^            $this->get = $_GET;$/;"	v
get	thinkphp\library\think\Request.php	/^            return $this->get = array_merge($this->get, $name);$/;"	v
get	thinkphp\library\think\Request.php	/^    protected $get     = [];$/;"	v
get	thinkphp\library\think\Request.php	/^    public function get($name = '', $default = null, $filter = '')$/;"	f
getCache	thinkphp\library\think\Request.php	/^    public function getCache()$/;"	f
getContent	thinkphp\library\think\Request.php	/^    public function getContent()$/;"	f
getFilter	thinkphp\library\think\Request.php	/^    protected function getFilter($filter, $default)$/;"	f
getInput	thinkphp\library\think\Request.php	/^    public function getInput()$/;"	f
has	thinkphp\library\think\Request.php	/^    public function has($name, $type = 'param', $checkEmpty = false)$/;"	f
header	thinkphp\library\think\Request.php	/^                $header = $result;$/;"	v
header	thinkphp\library\think\Request.php	/^            $header = [];$/;"	v
header	thinkphp\library\think\Request.php	/^            $this->header = array_change_key_case($header);$/;"	v
header	thinkphp\library\think\Request.php	/^            return $this->header = array_merge($this->header, $name);$/;"	v
header	thinkphp\library\think\Request.php	/^    protected $header  = [];$/;"	v
header	thinkphp\library\think\Request.php	/^    public function header($name = '', $default = null)$/;"	f
hook	thinkphp\library\think\Request.php	/^            $this->hook = array_merge($this->hook, $method);$/;"	v
hook	thinkphp\library\think\Request.php	/^    protected static $hook = [];$/;"	v
hook	thinkphp\library\think\Request.php	/^    public function hook($method, $callback = null)$/;"	f
host	thinkphp\library\think\Request.php	/^    public function host()$/;"	f
info	thinkphp\library\think\Request.php	/^        $info                     = parse_url($uri);$/;"	v
input	thinkphp\library\think\Request.php	/^        $this->input = file_get_contents('php:\/\/input');$/;"	v
input	thinkphp\library\think\Request.php	/^    protected $input;$/;"	v
input	thinkphp\library\think\Request.php	/^    public function input($data = [], $name = '', $default = null, $filter = '')$/;"	f
instance	thinkphp\library\think\Request.php	/^    protected $instance;$/;"	v
ip	thinkphp\library\think\Request.php	/^                $ip = $_SERVER['HTTP_CLIENT_IP'];$/;"	v
ip	thinkphp\library\think\Request.php	/^                $ip = $_SERVER['REMOTE_ADDR'];$/;"	v
ip	thinkphp\library\think\Request.php	/^                $ip = trim(current($arr));$/;"	v
ip	thinkphp\library\think\Request.php	/^            $ip = $_SERVER['REMOTE_ADDR'];$/;"	v
ip	thinkphp\library\think\Request.php	/^        $ip   = $long ? [$ip, $long] : ['0.0.0.0', 0];$/;"	v
ip	thinkphp\library\think\Request.php	/^        static $ip = null;$/;"	v
ip	thinkphp\library\think\Request.php	/^    public function ip($type = 0, $adv = true)$/;"	f
isAjax	thinkphp\library\think\Request.php	/^    public function isAjax($ajax = false)$/;"	f
isCgi	thinkphp\library\think\Request.php	/^    public function isCgi()$/;"	f
isCheckCache	thinkphp\library\think\Request.php	/^            $this->isCheckCache = true;$/;"	v
isCheckCache	thinkphp\library\think\Request.php	/^    protected $isCheckCache;$/;"	v
isCli	thinkphp\library\think\Request.php	/^    public function isCli()$/;"	f
isDelete	thinkphp\library\think\Request.php	/^    public function isDelete()$/;"	f
isGet	thinkphp\library\think\Request.php	/^    public function isGet()$/;"	f
isHead	thinkphp\library\think\Request.php	/^    public function isHead()$/;"	f
isMobile	thinkphp\library\think\Request.php	/^    public function isMobile()$/;"	f
isOptions	thinkphp\library\think\Request.php	/^    public function isOptions()$/;"	f
isPatch	thinkphp\library\think\Request.php	/^    public function isPatch()$/;"	f
isPjax	thinkphp\library\think\Request.php	/^    public function isPjax($pjax = false)$/;"	f
isPost	thinkphp\library\think\Request.php	/^    public function isPost()$/;"	f
isPut	thinkphp\library\think\Request.php	/^    public function isPut()$/;"	f
isSsl	thinkphp\library\think\Request.php	/^    public function isSsl()$/;"	f
item	thinkphp\library\think\Request.php	/^                    $item  = [];$/;"	v
item	thinkphp\library\think\Request.php	/^                foreach ($param as $item => $val) {$/;"	v
item	thinkphp\library\think\Request.php	/^        $item = [];$/;"	v
k	thinkphp\library\think\Request.php	/^            foreach ($array as $k => $v) {$/;"	v
key	thinkphp\library\think\Request.php	/^                        $key          = str_replace('_', '-', strtolower(substr($key, 5)));$/;"	v
key	thinkphp\library\think\Request.php	/^                        $key = str_replace(':' . $item, $val, $key);$/;"	v
key	thinkphp\library\think\Request.php	/^                    $key = md5($this->url());$/;"	v
key	thinkphp\library\think\Request.php	/^                $key = $fun($key);$/;"	v
key	thinkphp\library\think\Request.php	/^                $key = '__URL__';$/;"	v
key	thinkphp\library\think\Request.php	/^                $key = call_user_func_array($key, [$this]);$/;"	v
key	thinkphp\library\think\Request.php	/^                $key = str_replace(['__MODULE__', '__CONTROLLER__', '__ACTION__', '__URL__', ''], [$this->module, $this->controller, $this->action, md5($this->url(true))], $key);$/;"	v
key	thinkphp\library\think\Request.php	/^                foreach ($server as $key => $val) {$/;"	v
key	thinkphp\library\think\Request.php	/^            foreach ($files as $key => $file) {$/;"	v
key	thinkphp\library\think\Request.php	/^        foreach ($this->mimeType as $key => $val) {$/;"	v
keys	thinkphp\library\think\Request.php	/^                    $keys  = array_keys($file);$/;"	v
langset	thinkphp\library\think\Request.php	/^            $this->langset = $lang;$/;"	v
langset	thinkphp\library\think\Request.php	/^    protected $langset;$/;"	v
langset	thinkphp\library\think\Request.php	/^    public function langset($lang = null)$/;"	f
long	thinkphp\library\think\Request.php	/^        $long = sprintf("%u", ip2long($ip));$/;"	v
method	thinkphp\library\think\Request.php	/^                $this->method = $this->isCli() ? 'GET' : (isset($this->server['REQUEST_METHOD']) ? $this->server['REQUEST_METHOD'] : $_SERVER['REQUEST_METHOD']);$/;"	v
method	thinkphp\library\think\Request.php	/^                $this->method = strtoupper($_POST[$this->config->get('var_method')]);$/;"	v
method	thinkphp\library\think\Request.php	/^                $this->method = strtoupper($_SERVER['HTTP_X_HTTP_METHOD_OVERRIDE']);$/;"	v
method	thinkphp\library\think\Request.php	/^            $method = $this->method(true);$/;"	v
method	thinkphp\library\think\Request.php	/^    protected $method;$/;"	v
method	thinkphp\library\think\Request.php	/^    public function create($uri, $method = 'GET', $params = [], $cookie = [], $files = [], $server = [], $content = null)$/;"	v
method	thinkphp\library\think\Request.php	/^    public function method($method = false)$/;"	f
mimeType	thinkphp\library\think\Request.php	/^            $this->mimeType = array_merge($this->mimeType, $type);$/;"	v
mimeType	thinkphp\library\think\Request.php	/^    protected $mimeType = [$/;"	v
mimeType	thinkphp\library\think\Request.php	/^    public function mimeType($type, $val = '')$/;"	f
module	thinkphp\library\think\Request.php	/^            $this->module = $module;$/;"	v
module	thinkphp\library\think\Request.php	/^    protected $module;$/;"	v
module	thinkphp\library\think\Request.php	/^    public function module($module = null)$/;"	f
name	thinkphp\library\think\Request.php	/^            $name = explode(',', $name);$/;"	v
name	thinkphp\library\think\Request.php	/^        $name = (string) $name;$/;"	v
name	thinkphp\library\think\Request.php	/^        $name = str_replace('_', '-', strtolower($name));$/;"	v
name	thinkphp\library\think\Request.php	/^        foreach ($options as $name => $item) {$/;"	v
name	thinkphp\library\think\Request.php	/^    public function input($data = [], $name = '', $default = null, $filter = '')$/;"	v
only	thinkphp\library\think\Request.php	/^    public function only($name, $type = 'param')$/;"	f
options	thinkphp\library\think\Request.php	/^        $options                      = [];$/;"	v
options	thinkphp\library\think\Request.php	/^    public function __construct(Config $config, $options = [])$/;"	v
param	thinkphp\library\think\Request.php	/^                $param = $param[$val];$/;"	v
param	thinkphp\library\think\Request.php	/^                $param = $this->param();$/;"	v
param	thinkphp\library\think\Request.php	/^            $param = $this->$type();$/;"	v
param	thinkphp\library\think\Request.php	/^            $param = $this->$type;$/;"	v
param	thinkphp\library\think\Request.php	/^            $this->param          = [];$/;"	v
param	thinkphp\library\think\Request.php	/^            $this->param        = [];$/;"	v
param	thinkphp\library\think\Request.php	/^            $this->param       = [];$/;"	v
param	thinkphp\library\think\Request.php	/^            $this->param      = [];$/;"	v
param	thinkphp\library\think\Request.php	/^            $this->param = array_merge($this->get(false), $vars, $this->route(false));$/;"	v
param	thinkphp\library\think\Request.php	/^        $param = $this->$type();$/;"	v
param	thinkphp\library\think\Request.php	/^    protected $param   = [];$/;"	v
param	thinkphp\library\think\Request.php	/^    public function param($name = '', $default = null, $filter = '')$/;"	f
params	thinkphp\library\think\Request.php	/^                $params      = $query;$/;"	v
params	thinkphp\library\think\Request.php	/^                $params      = array_replace($query, $params);$/;"	v
patch	thinkphp\library\think\Request.php	/^    public function patch($name = '', $default = null, $filter = '')$/;"	f
path	thinkphp\library\think\Request.php	/^                $this->path = $pathinfo;$/;"	v
path	thinkphp\library\think\Request.php	/^                $this->path = preg_replace('\/\\.' . $this->ext() . '$\/i', '', $pathinfo);$/;"	v
path	thinkphp\library\think\Request.php	/^                $this->path = preg_replace('\/\\.(' . ltrim($suffix, '.') . ')$\/i', '', $pathinfo);$/;"	v
path	thinkphp\library\think\Request.php	/^    protected $path;$/;"	v
path	thinkphp\library\think\Request.php	/^    public function path()$/;"	f
pathinfo	thinkphp\library\think\Request.php	/^            $pathinfo = $this->pathinfo();$/;"	v
pathinfo	thinkphp\library\think\Request.php	/^            $this->pathinfo = empty($_SERVER['PATH_INFO']) ? '\/' : ltrim($_SERVER['PATH_INFO'], '\/');$/;"	v
pathinfo	thinkphp\library\think\Request.php	/^    protected $pathinfo;$/;"	v
pathinfo	thinkphp\library\think\Request.php	/^    public function pathinfo()$/;"	f
port	thinkphp\library\think\Request.php	/^    public function port()$/;"	f
pos	thinkphp\library\think\Request.php	/^                $pos = array_search('unknown', $arr);$/;"	v
post	thinkphp\library\think\Request.php	/^                $this->post = $_POST;$/;"	v
post	thinkphp\library\think\Request.php	/^                $this->post = (array) json_decode($content, true);$/;"	v
post	thinkphp\library\think\Request.php	/^            return $this->post = array_merge($this->post, $name);$/;"	v
post	thinkphp\library\think\Request.php	/^    protected $post    = [];$/;"	v
post	thinkphp\library\think\Request.php	/^    public function post($name = '', $default = null, $filter = '')$/;"	f
protocol	thinkphp\library\think\Request.php	/^    public function protocol()$/;"	f
put	thinkphp\library\think\Request.php	/^                $this->put = (array) json_decode($content, true);$/;"	v
put	thinkphp\library\think\Request.php	/^            return $this->put = is_null($this->put) ? $name : array_merge($this->put, $name);$/;"	v
put	thinkphp\library\think\Request.php	/^    protected $put;$/;"	v
put	thinkphp\library\think\Request.php	/^    public function put($name = '', $default = null, $filter = '')$/;"	f
query	thinkphp\library\think\Request.php	/^    public function query()$/;"	f
queryString	thinkphp\library\think\Request.php	/^                $queryString = $info['query'];$/;"	v
queryString	thinkphp\library\think\Request.php	/^                $queryString = http_build_query($query, '', '&');$/;"	v
queryString	thinkphp\library\think\Request.php	/^            $queryString = http_build_query($params, '', '&');$/;"	v
queryString	thinkphp\library\think\Request.php	/^        $queryString                  = '';$/;"	v
remotePort	thinkphp\library\think\Request.php	/^    public function remotePort()$/;"	f
request	thinkphp\library\think\Request.php	/^            $this->request = $_REQUEST;$/;"	v
request	thinkphp\library\think\Request.php	/^            return $this->request = array_merge($this->request, $name);$/;"	v
request	thinkphp\library\think\Request.php	/^    protected $request = [];$/;"	v
request	thinkphp\library\think\Request.php	/^    public function request($name = '', $default = null, $filter = '')$/;"	f
response	thinkphp\library\think\Request.php	/^                $response               = Response::create($content)->header($header);$/;"	v
response	thinkphp\library\think\Request.php	/^                $response = Response::create()->code(304);$/;"	v
result	thinkphp\library\think\Request.php	/^            if (function_exists('apache_request_headers') && $result = apache_request_headers()) {$/;"	v
result	thinkphp\library\think\Request.php	/^        $result = !is_null($this->server('HTTP_X_PJAX')) ? true : false;$/;"	v
result	thinkphp\library\think\Request.php	/^        $result = ('xmlhttprequest' == $value) ? true : false;$/;"	v
root	thinkphp\library\think\Request.php	/^            $root = '\/' . ltrim($root, '\/');$/;"	v
root	thinkphp\library\think\Request.php	/^            $this->root = $url;$/;"	v
root	thinkphp\library\think\Request.php	/^            $this->root = rtrim($file, '\/');$/;"	v
root	thinkphp\library\think\Request.php	/^        $root = strpos($base, '.') ? ltrim(dirname($base), DIRECTORY_SEPARATOR) : $base;$/;"	v
root	thinkphp\library\think\Request.php	/^    protected $root;$/;"	v
root	thinkphp\library\think\Request.php	/^    public function root($url = null)$/;"	f
rootUrl	thinkphp\library\think\Request.php	/^    public function rootUrl()$/;"	f
route	thinkphp\library\think\Request.php	/^            return $this->route = array_merge($this->route, $name);$/;"	v
route	thinkphp\library\think\Request.php	/^    protected $route   = [];$/;"	v
route	thinkphp\library\think\Request.php	/^    public function route($name = '', $default = null, $filter = '')$/;"	f
routeInfo	thinkphp\library\think\Request.php	/^            $this->routeInfo = $route;$/;"	v
routeInfo	thinkphp\library\think\Request.php	/^    protected $routeInfo = [];$/;"	v
routeInfo	thinkphp\library\think\Request.php	/^    public function routeInfo($route = [])$/;"	f
scheme	thinkphp\library\think\Request.php	/^    public function scheme()$/;"	f
script_name	thinkphp\library\think\Request.php	/^                $script_name = basename($_SERVER['SCRIPT_FILENAME']);$/;"	v
server	thinkphp\library\think\Request.php	/^                $server = $this->server ?: $_SERVER;$/;"	v
server	thinkphp\library\think\Request.php	/^            $this->server = $_SERVER;$/;"	v
server	thinkphp\library\think\Request.php	/^            return $this->server = array_merge($this->server, $name);$/;"	v
server	thinkphp\library\think\Request.php	/^        $server = array_merge($_SERVER, $this->server);$/;"	v
server	thinkphp\library\think\Request.php	/^    protected $server  = [];$/;"	v
server	thinkphp\library\think\Request.php	/^    public function server($name = '', $default = null, $filter = '')$/;"	f
session	thinkphp\library\think\Request.php	/^            $this->session = Container::get('session')->get();$/;"	v
session	thinkphp\library\think\Request.php	/^            return $this->session = array_merge($this->session, $name);$/;"	v
session	thinkphp\library\think\Request.php	/^    protected $session = [];$/;"	v
session	thinkphp\library\think\Request.php	/^    public function session($name = '', $default = null, $filter = '')$/;"	f
str	thinkphp\library\think\Request.php	/^            $str           = $this->url();$/;"	v
suffix	thinkphp\library\think\Request.php	/^            $suffix   = $this->config->get('url_html_suffix');$/;"	v
tag	thinkphp\library\think\Request.php	/^            $tag    = $except;$/;"	v
time	thinkphp\library\think\Request.php	/^    public function time($float = false)$/;"	f
token	thinkphp\library\think\Request.php	/^        $token = call_user_func($type, $_SERVER['REQUEST_TIME_FLOAT']);$/;"	v
token	thinkphp\library\think\Request.php	/^    public function token($name = '__token__', $type = 'md5')$/;"	f
type	thinkphp\library\think\Request.php	/^                $type = $contentType;$/;"	v
type	thinkphp\library\think\Request.php	/^                $type = 's';$/;"	v
type	thinkphp\library\think\Request.php	/^        $type      = $type ? 1 : 0;$/;"	v
type	thinkphp\library\think\Request.php	/^        $type  = is_callable($type) ? $type : 'md5';$/;"	v
type	thinkphp\library\think\Request.php	/^    public function except($name, $type = 'param')$/;"	v
type	thinkphp\library\think\Request.php	/^    public function has($name, $type = 'param', $checkEmpty = false)$/;"	v
type	thinkphp\library\think\Request.php	/^    public function only($name, $type = 'param')$/;"	v
type	thinkphp\library\think\Request.php	/^    public function token($name = '__token__', $type = 'md5')$/;"	v
type	thinkphp\library\think\Request.php	/^    public function type()$/;"	f
typeCast	thinkphp\library\think\Request.php	/^    private function typeCast(&$data, $type)$/;"	f
url	thinkphp\library\think\Request.php	/^                    $url = $_SERVER['ORIG_SCRIPT_NAME'];$/;"	v
url	thinkphp\library\think\Request.php	/^                    $url = $_SERVER['PHP_SELF'];$/;"	v
url	thinkphp\library\think\Request.php	/^                    $url = $_SERVER['SCRIPT_NAME'];$/;"	v
url	thinkphp\library\think\Request.php	/^                    $url = str_replace('\\\\', '\/', str_replace($_SERVER['DOCUMENT_ROOT'], '', $_SERVER['SCRIPT_FILENAME']));$/;"	v
url	thinkphp\library\think\Request.php	/^                    $url = substr($_SERVER['SCRIPT_NAME'], 0, $pos) . '\/' . $script_name;$/;"	v
url	thinkphp\library\think\Request.php	/^                $this->url = $_SERVER['HTTP_X_REWRITE_URL'];$/;"	v
url	thinkphp\library\think\Request.php	/^                $this->url = $_SERVER['ORIG_PATH_INFO'] . (!empty($_SERVER['QUERY_STRING']) ? '?' . $_SERVER['QUERY_STRING'] : '');$/;"	v
url	thinkphp\library\think\Request.php	/^                $this->url = $_SERVER['REQUEST_URI'];$/;"	v
url	thinkphp\library\think\Request.php	/^                $this->url = '';$/;"	v
url	thinkphp\library\think\Request.php	/^                $this->url = isset($_SERVER['argv'][1]) ? $_SERVER['argv'][1] : '';$/;"	v
url	thinkphp\library\think\Request.php	/^            $this->url = $url;$/;"	v
url	thinkphp\library\think\Request.php	/^            $url = '';$/;"	v
url	thinkphp\library\think\Request.php	/^    protected $url;$/;"	v
url	thinkphp\library\think\Request.php	/^    public function url($url = null)$/;"	f
val	thinkphp\library\think\Request.php	/^    public function mimeType($type, $val = '')$/;"	v
value	thinkphp\library\think\Request.php	/^                        $value = $default;$/;"	v
value	thinkphp\library\think\Request.php	/^                    $value = filter_var($value, is_int($filter) ? $filter : filter_id($filter));$/;"	v
value	thinkphp\library\think\Request.php	/^                $value = call_user_func($filter, $value);$/;"	v
value	thinkphp\library\think\Request.php	/^        $value  = $this->server('HTTP_X_REQUESTED_WITH', '', 'strtolower');$/;"	v
vars	thinkphp\library\think\Request.php	/^                    $vars = $this->post(false);$/;"	v
vars	thinkphp\library\think\Request.php	/^                    $vars = $this->put(false);$/;"	v
vars	thinkphp\library\think\Request.php	/^                    $vars = [];$/;"	v
Response	thinkphp\library\think\Response.php	/^class Response$/;"	c
__construct	thinkphp\library\think\Response.php	/^    public function __construct($data = '', $code = 200, array $header = [], $options = [])$/;"	f
cache	thinkphp\library\think\Response.php	/^            $cache = Container::get('request')->getCache();$/;"	v
cacheControl	thinkphp\library\think\Response.php	/^    public function cacheControl($cache)$/;"	f
charset	thinkphp\library\think\Response.php	/^    protected $charset = 'utf-8';$/;"	v
charset	thinkphp\library\think\Response.php	/^    public function contentType($contentType, $charset = 'utf-8')$/;"	v
class	thinkphp\library\think\Response.php	/^        $class = false !== strpos($type, '\\\\') ? $type : '\\\\think\\\\response\\\\' . ucfirst($type);$/;"	v
code	thinkphp\library\think\Response.php	/^        $this->code   = $code;$/;"	v
code	thinkphp\library\think\Response.php	/^        $this->code = $code;$/;"	v
code	thinkphp\library\think\Response.php	/^    protected $code = 200;$/;"	v
code	thinkphp\library\think\Response.php	/^    public function __construct($data = '', $code = 200, array $header = [], $options = [])$/;"	v
code	thinkphp\library\think\Response.php	/^    public function code($code)$/;"	f
content	thinkphp\library\think\Response.php	/^            $content = $this->output($this->data);$/;"	v
content	thinkphp\library\think\Response.php	/^            $this->content = (string) $content;$/;"	v
content	thinkphp\library\think\Response.php	/^        $this->content = (string) $content;$/;"	v
content	thinkphp\library\think\Response.php	/^    protected $content = null;$/;"	v
content	thinkphp\library\think\Response.php	/^    public function content($content)$/;"	f
contentType	thinkphp\library\think\Response.php	/^    protected $contentType = 'text\/html';$/;"	v
contentType	thinkphp\library\think\Response.php	/^    public function contentType($contentType, $charset = 'utf-8')$/;"	f
create	thinkphp\library\think\Response.php	/^    public static function create($data = '', $type = '', $code = 200, array $header = [], $options = [])$/;"	f
data	thinkphp\library\think\Response.php	/^        $data = $this->getContent();$/;"	v
data	thinkphp\library\think\Response.php	/^        $this->data = $data;$/;"	v
data	thinkphp\library\think\Response.php	/^    protected $data;$/;"	v
data	thinkphp\library\think\Response.php	/^    public function data($data)$/;"	f
eTag	thinkphp\library\think\Response.php	/^    public function eTag($eTag)$/;"	f
expires	thinkphp\library\think\Response.php	/^    public function expires($time)$/;"	f
getCode	thinkphp\library\think\Response.php	/^    public function getCode()$/;"	f
getContent	thinkphp\library\think\Response.php	/^    public function getContent()$/;"	f
getData	thinkphp\library\think\Response.php	/^    public function getData()$/;"	f
getHeader	thinkphp\library\think\Response.php	/^    public function getHeader($name = '')$/;"	f
header	thinkphp\library\think\Response.php	/^            $this->header = array_merge($this->header, $name);$/;"	v
header	thinkphp\library\think\Response.php	/^        $this->header = array_merge($this->header, $header);$/;"	v
header	thinkphp\library\think\Response.php	/^    protected $header = [];$/;"	v
header	thinkphp\library\think\Response.php	/^    public function header($name, $value = null)$/;"	f
lastModified	thinkphp\library\think\Response.php	/^    public function lastModified($time)$/;"	f
name	thinkphp\library\think\Response.php	/^            foreach ($this->header as $name => $val) {$/;"	v
options	thinkphp\library\think\Response.php	/^            $this->options = array_merge($this->options, $options);$/;"	v
options	thinkphp\library\think\Response.php	/^        $this->options = array_merge($this->options, $options);$/;"	v
options	thinkphp\library\think\Response.php	/^    protected $options = [];$/;"	v
options	thinkphp\library\think\Response.php	/^    public function options($options = [])$/;"	f
output	thinkphp\library\think\Response.php	/^    protected function output($data)$/;"	f
send	thinkphp\library\think\Response.php	/^    public function send()$/;"	f
type	thinkphp\library\think\Response.php	/^        $type = empty($type) ? 'null' : strtolower($type);$/;"	v
type	thinkphp\library\think\Response.php	/^    public static function create($data = '', $type = '', $code = 200, array $header = [], $options = [])$/;"	v
value	thinkphp\library\think\Response.php	/^    public function header($name, $value = null)$/;"	v
Route	thinkphp\library\think\Route.php	/^class Route$/;"	c
__call	thinkphp\library\think\Route.php	/^    public function __call($method, $args)$/;"	f
__construct	thinkphp\library\think\Route.php	/^    public function __construct(Request $request, Config $config)$/;"	f
alias	thinkphp\library\think\Route.php	/^            $this->alias = array_merge($this->alias, $rule);$/;"	v
alias	thinkphp\library\think\Route.php	/^    protected $alias = [];$/;"	v
alias	thinkphp\library\think\Route.php	/^    public function alias($rule = null, $route = '', $option = [])$/;"	f
any	thinkphp\library\think\Route.php	/^    public function any($rule, $route = '', $option = [], $pattern = [])$/;"	f
auto	thinkphp\library\think\Route.php	/^    public function auto($route)$/;"	f
bind	thinkphp\library\think\Route.php	/^    protected $bind = [];$/;"	v
bind	thinkphp\library\think\Route.php	/^    public function bind($bind)$/;"	f
check	thinkphp\library\think\Route.php	/^    public function check($url, $depr = '\/', $must = false, $completeMatch = false)$/;"	f
checkDomain	thinkphp\library\think\Route.php	/^    protected function checkDomain()$/;"	f
config	thinkphp\library\think\Route.php	/^        $this->config  = $config;$/;"	v
config	thinkphp\library\think\Route.php	/^    protected $config;$/;"	v
controller	thinkphp\library\think\Route.php	/^    public function controller($rule, $route = '', $option = [], $pattern = [])$/;"	f
count	thinkphp\library\think\Route.php	/^                $count = count($item);$/;"	v
createTopGroup	thinkphp\library\think\Route.php	/^    protected function createTopGroup(Domain $domain)$/;"	f
cross	thinkphp\library\think\Route.php	/^            $this->cross = new RuleGroup($this);$/;"	v
cross	thinkphp\library\think\Route.php	/^    protected $cross;$/;"	v
delete	thinkphp\library\think\Route.php	/^    public function delete($rule, $route = '', $option = [], $pattern = [])$/;"	f
depr	thinkphp\library\think\Route.php	/^    public function check($url, $depr = '\/', $must = false, $completeMatch = false)$/;"	v
domain	thinkphp\library\think\Route.php	/^            $domain = $this->domain;$/;"	v
domain	thinkphp\library\think\Route.php	/^            $domain = explode('.', $this->host, -2);$/;"	v
domain	thinkphp\library\think\Route.php	/^            $domain = explode('.', rtrim(stristr($this->host, $rootDomain, true), '.'));$/;"	v
domain	thinkphp\library\think\Route.php	/^            $this->domain = $domain;$/;"	v
domain	thinkphp\library\think\Route.php	/^            $this->domain = $this->host;$/;"	v
domain	thinkphp\library\think\Route.php	/^        $domain = $this->checkDomain();$/;"	v
domain	thinkphp\library\think\Route.php	/^        $domain = is_array($name) ? array_shift($name) : $name;$/;"	v
domain	thinkphp\library\think\Route.php	/^        $domain = new Domain($this, $this->host);$/;"	v
domain	thinkphp\library\think\Route.php	/^        $this->domain = $this->host;$/;"	v
domain	thinkphp\library\think\Route.php	/^    protected $domain;$/;"	v
domain	thinkphp\library\think\Route.php	/^    public function domain($name, $rule = '', $option = [], $pattern = [])$/;"	f
domain2	thinkphp\library\think\Route.php	/^            $domain2   = array_pop($domain);$/;"	v
domain3	thinkphp\library\think\Route.php	/^                $domain3 = array_pop($domain);$/;"	v
domains	thinkphp\library\think\Route.php	/^    protected $domains = [];$/;"	v
get	thinkphp\library\think\Route.php	/^    public function get($rule, $route = '', $option = [], $pattern = [])$/;"	f
getAlias	thinkphp\library\think\Route.php	/^    public function getAlias($name = null)$/;"	f
getBind	thinkphp\library\think\Route.php	/^    public function getBind($domain = null)$/;"	f
getDomains	thinkphp\library\think\Route.php	/^    public function getDomains()$/;"	f
getGroup	thinkphp\library\think\Route.php	/^    public function getGroup()$/;"	f
getMethodPrefix	thinkphp\library\think\Route.php	/^    public function getMethodPrefix($method)$/;"	f
getName	thinkphp\library\think\Route.php	/^    public function getName($name = null)$/;"	f
getRest	thinkphp\library\think\Route.php	/^    public function getRest($name = null)$/;"	f
group	thinkphp\library\think\Route.php	/^            $this->group  = $this->createTopGroup($this->domains[$domain]);$/;"	v
group	thinkphp\library\think\Route.php	/^            $this->group = $group;$/;"	v
group	thinkphp\library\think\Route.php	/^            $this->group = $originGroup;$/;"	v
group	thinkphp\library\think\Route.php	/^            $this->group = $parent;$/;"	v
group	thinkphp\library\think\Route.php	/^        $group = $this->group->getName();$/;"	v
group	thinkphp\library\think\Route.php	/^        $group = new RuleGroup($this);$/;"	v
group	thinkphp\library\think\Route.php	/^        $group = new RuleGroup($this, $this->group, $name, $rule, $option, $pattern);$/;"	v
group	thinkphp\library\think\Route.php	/^        $this->group = $group;$/;"	v
group	thinkphp\library\think\Route.php	/^        $this->group = $this->createTopGroup($domain);$/;"	v
group	thinkphp\library\think\Route.php	/^    protected $group;$/;"	v
group	thinkphp\library\think\Route.php	/^    public function group($name, $route, $option = [], $pattern = [])$/;"	f
host	thinkphp\library\think\Route.php	/^        $this->host    = $this->request->host();$/;"	v
import	thinkphp\library\think\Route.php	/^    public function import(array $rules, $type = '*')$/;"	f
item	thinkphp\library\think\Route.php	/^                    $item      = $this->domains['*'];$/;"	v
item	thinkphp\library\think\Route.php	/^                $item      = $this->domains['*.' . $domain2];$/;"	v
item	thinkphp\library\think\Route.php	/^                $item  = explode('.', $this->host);$/;"	v
item	thinkphp\library\think\Route.php	/^                $item = $this->domains[$subDomain];$/;"	v
item	thinkphp\library\think\Route.php	/^            $item = $this->domains[$item];$/;"	v
item	thinkphp\library\think\Route.php	/^            $item = $this->domains[$this->host];$/;"	v
item	thinkphp\library\think\Route.php	/^        $item = false;$/;"	v
key	thinkphp\library\think\Route.php	/^                $key = array_shift($val);$/;"	v
key	thinkphp\library\think\Route.php	/^                $key = substr($key, 1, -1);$/;"	v
key	thinkphp\library\think\Route.php	/^            foreach ($rules['__domain__'] as $key => $rule) {$/;"	v
key	thinkphp\library\think\Route.php	/^            foreach ($rules['__rest__'] as $key => $rule) {$/;"	v
key	thinkphp\library\think\Route.php	/^        foreach ($rules as $key => $val) {$/;"	v
method	thinkphp\library\think\Route.php	/^        $method = strtolower($method);$/;"	v
method	thinkphp\library\think\Route.php	/^    public function miss($route, $method = '*', $option = [])$/;"	v
method	thinkphp\library\think\Route.php	/^    public function rule($rule, $route, $method = '*', $option = [], $pattern = [])$/;"	v
method	thinkphp\library\think\Route.php	/^    public function rules($rules, $method = '*', $option = [], $pattern = [])$/;"	v
method	thinkphp\library\think\Route.php	/^    public function setCrossDomainRule($rule, $method = '*')$/;"	v
methodPrefix	thinkphp\library\think\Route.php	/^            $this->methodPrefix = array_merge($this->methodPrefix, array_change_key_case($method));$/;"	v
methodPrefix	thinkphp\library\think\Route.php	/^    protected $methodPrefix = [$/;"	v
miss	thinkphp\library\think\Route.php	/^    public function miss($route, $method = '*', $option = [])$/;"	f
name	thinkphp\library\think\Route.php	/^                        $name     = substr($name, 0, -1);$/;"	v
name	thinkphp\library\think\Route.php	/^                    $name = substr($name, 0, -1);$/;"	v
name	thinkphp\library\think\Route.php	/^                $name = substr($val, 1);$/;"	v
name	thinkphp\library\think\Route.php	/^            $name   = isset($option['name']) ? $option['name'] : '';$/;"	v
name	thinkphp\library\think\Route.php	/^            $name = $route;$/;"	v
name	thinkphp\library\think\Route.php	/^            $name = $this->ruleName;$/;"	v
name	thinkphp\library\think\Route.php	/^        $name = strtolower($name);$/;"	v
name	thinkphp\library\think\Route.php	/^        $this->name = $name;$/;"	v
name	thinkphp\library\think\Route.php	/^    protected $name = [];$/;"	v
name	thinkphp\library\think\Route.php	/^    public function name($name)$/;"	f
option	thinkphp\library\think\Route.php	/^                $option  = $val ? array_shift($val) : [];$/;"	v
option	thinkphp\library\think\Route.php	/^            $option = $name;$/;"	v
option	thinkphp\library\think\Route.php	/^    protected function setRuleName($rule, $name, $option = [])$/;"	v
option	thinkphp\library\think\Route.php	/^    public function group($name, $route, $option = [], $pattern = [])$/;"	v
option	thinkphp\library\think\Route.php	/^    public function option($name, $value = '')$/;"	f
optional	thinkphp\library\think\Route.php	/^                        $optional = false;$/;"	v
optional	thinkphp\library\think\Route.php	/^                        $optional = true;$/;"	v
optional	thinkphp\library\think\Route.php	/^                $optional = true;$/;"	v
optional	thinkphp\library\think\Route.php	/^            $optional = false;$/;"	v
originGroup	thinkphp\library\think\Route.php	/^            $originGroup = $this->group;$/;"	v
panDomain	thinkphp\library\think\Route.php	/^                    $panDomain = $domain2;$/;"	v
panDomain	thinkphp\library\think\Route.php	/^                $panDomain = $domain3;$/;"	v
parent	thinkphp\library\think\Route.php	/^            $parent = $this->getGroup();$/;"	v
parseVar	thinkphp\library\think\Route.php	/^    public function parseVar($rule)$/;"	f
patch	thinkphp\library\think\Route.php	/^    public function patch($rule, $route = '', $option = [], $pattern = [])$/;"	f
pattern	thinkphp\library\think\Route.php	/^                $pattern = $val ? array_shift($val) : [];$/;"	v
pattern	thinkphp\library\think\Route.php	/^    public function pattern($name, $rule = '')$/;"	f
post	thinkphp\library\think\Route.php	/^    public function post($rule, $route = '', $option = [], $pattern = [])$/;"	f
prefix	thinkphp\library\think\Route.php	/^    public function setMethodPrefix($method, $prefix = '')$/;"	v
put	thinkphp\library\think\Route.php	/^    public function put($rule, $route = '', $option = [], $pattern = [])$/;"	f
request	thinkphp\library\think\Route.php	/^        $this->request = $request;$/;"	v
request	thinkphp\library\think\Route.php	/^    protected $request;$/;"	v
resource	thinkphp\library\think\Route.php	/^        $resource = new Resource($this, $this->group, $rule, $route, $option, $pattern, $this->rest);$/;"	v
resource	thinkphp\library\think\Route.php	/^    public function resource($rule, $route = '', $option = [], $pattern = [])$/;"	f
resource	thinkphp\library\think\Route.php	/^    public function rest($name, $resource = [])$/;"	v
rest	thinkphp\library\think\Route.php	/^            $this->rest = $resource ? $name : array_merge($this->rest, $name);$/;"	v
rest	thinkphp\library\think\Route.php	/^    protected $rest = [$/;"	v
rest	thinkphp\library\think\Route.php	/^    public function rest($name, $resource = [])$/;"	f
result	thinkphp\library\think\Route.php	/^            $result = $this->cross->check($this->request, $url, $depr, $completeMatch);$/;"	v
result	thinkphp\library\think\Route.php	/^        $result = $domain->check($this->request, $url, $depr, $completeMatch);$/;"	v
root	thinkphp\library\think\Route.php	/^                $root  = $count > 1 ? $item[$count - 2] . '.' . $item[$count - 1] : $item[0];$/;"	v
root	thinkphp\library\think\Route.php	/^            $root = $this->config->get('app.url_domain_root');$/;"	v
rootDomain	thinkphp\library\think\Route.php	/^        $rootDomain = $this->config->get('app.url_domain_root');$/;"	v
route	thinkphp\library\think\Route.php	/^                $route   = array_shift($val);$/;"	v
route	thinkphp\library\think\Route.php	/^                $route = $val;$/;"	v
route	thinkphp\library\think\Route.php	/^        $route = $this->config->get('url_lazy_route') ? $rule : null;$/;"	v
route	thinkphp\library\think\Route.php	/^    public function alias($rule = null, $route = '', $option = [])$/;"	v
route	thinkphp\library\think\Route.php	/^    public function any($rule, $route = '', $option = [], $pattern = [])$/;"	v
route	thinkphp\library\think\Route.php	/^    public function controller($rule, $route = '', $option = [], $pattern = [])$/;"	v
route	thinkphp\library\think\Route.php	/^    public function delete($rule, $route = '', $option = [], $pattern = [])$/;"	v
route	thinkphp\library\think\Route.php	/^    public function get($rule, $route = '', $option = [], $pattern = [])$/;"	v
route	thinkphp\library\think\Route.php	/^    public function patch($rule, $route = '', $option = [], $pattern = [])$/;"	v
route	thinkphp\library\think\Route.php	/^    public function post($rule, $route = '', $option = [], $pattern = [])$/;"	v
route	thinkphp\library\think\Route.php	/^    public function put($rule, $route = '', $option = [], $pattern = [])$/;"	v
route	thinkphp\library\think\Route.php	/^    public function resource($rule, $route = '', $option = [], $pattern = [])$/;"	v
rule	thinkphp\library\think\Route.php	/^            $rule = $group . '\/' . $rule;$/;"	v
rule	thinkphp\library\think\Route.php	/^        $rule  = $this->config->get('url_lazy_route') ? $route : null;$/;"	v
rule	thinkphp\library\think\Route.php	/^        $rule = new RuleItem($this, $this->group, $rule, $route, $method, $option, $pattern);$/;"	v
rule	thinkphp\library\think\Route.php	/^    public function domain($name, $rule = '', $option = [], $pattern = [])$/;"	v
rule	thinkphp\library\think\Route.php	/^    public function pattern($name, $rule = '')$/;"	v
rule	thinkphp\library\think\Route.php	/^    public function rule($rule, $route, $method = '*', $option = [], $pattern = [])$/;"	f
ruleName	thinkphp\library\think\Route.php	/^            $this->ruleName = null;$/;"	v
ruleName	thinkphp\library\think\Route.php	/^        $this->ruleName = $name;$/;"	v
ruleName	thinkphp\library\think\Route.php	/^    protected $ruleName;$/;"	v
rules	thinkphp\library\think\Route.php	/^    public function rules($rules, $method = '*', $option = [], $pattern = [])$/;"	f
setCrossDomainRule	thinkphp\library\think\Route.php	/^    public function setCrossDomainRule($rule, $method = '*')$/;"	f
setDefaultDomain	thinkphp\library\think\Route.php	/^    protected function setDefaultDomain()$/;"	f
setGroup	thinkphp\library\think\Route.php	/^    public function setGroup(RuleGroup $group)$/;"	f
setMethodPrefix	thinkphp\library\think\Route.php	/^    public function setMethodPrefix($method, $prefix = '')$/;"	f
setName	thinkphp\library\think\Route.php	/^    public function setName($name)$/;"	f
setRuleName	thinkphp\library\think\Route.php	/^    protected function setRuleName($rule, $name, $option = [])$/;"	f
subDomain	thinkphp\library\think\Route.php	/^            $subDomain = implode('.', $domain);$/;"	v
suffix	thinkphp\library\think\Route.php	/^            $suffix = $option['ext'];$/;"	v
suffix	thinkphp\library\think\Route.php	/^            $suffix = $this->group->getOption('ext');$/;"	v
suffix	thinkphp\library\think\Route.php	/^            $suffix = null;$/;"	v
type	thinkphp\library\think\Route.php	/^        foreach ($this->methodPrefix as $type => $val) {$/;"	v
type	thinkphp\library\think\Route.php	/^    public function import(array $rules, $type = '*')$/;"	v
url	thinkphp\library\think\Route.php	/^        $url    = str_replace($depr, '|', $url);$/;"	v
val	thinkphp\library\think\Route.php	/^                $val      = substr($val, 1, -1);$/;"	v
value	thinkphp\library\think\Route.php	/^    public function option($name, $value = '')$/;"	v
var	thinkphp\library\think\Route.php	/^        $var = [];$/;"	v
vars	thinkphp\library\think\Route.php	/^        $vars = $this->parseVar($rule);$/;"	v
Session	thinkphp\library\think\Session.php	/^class Session$/;"	c
_SESSION	thinkphp\library\think\Session.php	/^            $_SESSION = [];$/;"	v
array	thinkphp\library\think\Session.php	/^            $array = [];$/;"	v
array	thinkphp\library\think\Session.php	/^        $array = $this->get($key);$/;"	v
boot	thinkphp\library\think\Session.php	/^    public function boot()$/;"	f
class	thinkphp\library\think\Session.php	/^            $class = false !== strpos($config['type'], '\\\\') ? $config['type'] : '\\\\think\\\\session\\\\driver\\\\' . ucwords($config['type']);$/;"	v
clear	thinkphp\library\think\Session.php	/^    public function clear($prefix = null)$/;"	f
config	thinkphp\library\think\Session.php	/^            $config = Container::get('config')->pull('session');$/;"	v
config	thinkphp\library\think\Session.php	/^    public function init(array $config = [])$/;"	v
delete	thinkphp\library\think\Session.php	/^    public function delete($name, $prefix = null)$/;"	f
destroy	thinkphp\library\think\Session.php	/^    public function destroy()$/;"	f
flash	thinkphp\library\think\Session.php	/^    public function flash($name, $value)$/;"	f
flush	thinkphp\library\think\Session.php	/^    public function flush()$/;"	f
get	thinkphp\library\think\Session.php	/^    public function get($name = '', $prefix = null)$/;"	f
has	thinkphp\library\think\Session.php	/^    public function has($name, $prefix = null)$/;"	f
init	thinkphp\library\think\Session.php	/^            $this->init = false;$/;"	v
init	thinkphp\library\think\Session.php	/^            $this->init = true;$/;"	v
init	thinkphp\library\think\Session.php	/^        $this->init = false;$/;"	v
init	thinkphp\library\think\Session.php	/^        $this->init = null;$/;"	v
init	thinkphp\library\think\Session.php	/^        $this->init = true;$/;"	v
init	thinkphp\library\think\Session.php	/^    protected $init   = null;$/;"	v
init	thinkphp\library\think\Session.php	/^    public function init(array $config = [])$/;"	f
isDoStart	thinkphp\library\think\Session.php	/^            $isDoStart = true;$/;"	v
isDoStart	thinkphp\library\think\Session.php	/^        $isDoStart = false;$/;"	v
item	thinkphp\library\think\Session.php	/^            $item = $this->get('__flash__');$/;"	v
pause	thinkphp\library\think\Session.php	/^    public function pause()$/;"	f
prefix	thinkphp\library\think\Session.php	/^            $this->prefix = $config['prefix'];$/;"	v
prefix	thinkphp\library\think\Session.php	/^            $this->prefix = $prefix;$/;"	v
prefix	thinkphp\library\think\Session.php	/^        $prefix = !is_null($prefix) ? $prefix : $this->prefix;$/;"	v
prefix	thinkphp\library\think\Session.php	/^    protected $prefix = '';$/;"	v
prefix	thinkphp\library\think\Session.php	/^    public function delete($name, $prefix = null)$/;"	v
prefix	thinkphp\library\think\Session.php	/^    public function get($name = '', $prefix = null)$/;"	v
prefix	thinkphp\library\think\Session.php	/^    public function has($name, $prefix = null)$/;"	v
prefix	thinkphp\library\think\Session.php	/^    public function prefix($prefix = '')$/;"	f
prefix	thinkphp\library\think\Session.php	/^    public function pull($name, $prefix = null)$/;"	v
pull	thinkphp\library\think\Session.php	/^    public function pull($name, $prefix = null)$/;"	f
push	thinkphp\library\think\Session.php	/^    public function push($key, $value)$/;"	f
regenerate	thinkphp\library\think\Session.php	/^    public function regenerate($delete = false)$/;"	f
result	thinkphp\library\think\Session.php	/^        $result = $this->get($name, $prefix);$/;"	v
set	thinkphp\library\think\Session.php	/^    public function set($name, $value = '', $prefix = null)$/;"	f
start	thinkphp\library\think\Session.php	/^    public function start()$/;"	f
time	thinkphp\library\think\Session.php	/^                $time = $item['__time__'];$/;"	v
value	thinkphp\library\think\Session.php	/^                $value               = isset($_SESSION[$name1][$name2]) ? $_SESSION[$name1][$name2] : null;$/;"	v
value	thinkphp\library\think\Session.php	/^                $value               = isset($_SESSION[$prefix][$name1][$name2]) ? $_SESSION[$prefix][$name1][$name2] : null;$/;"	v
value	thinkphp\library\think\Session.php	/^                $value = isset($_SESSION[$name]) ? $_SESSION[$name] : null;$/;"	v
value	thinkphp\library\think\Session.php	/^                $value = isset($_SESSION[$prefix][$name]) ? $_SESSION[$prefix][$name] : null;$/;"	v
value	thinkphp\library\think\Session.php	/^            $value = $prefix ? (!empty($_SESSION[$prefix]) ? $_SESSION[$prefix] : []) : $_SESSION;$/;"	v
value	thinkphp\library\think\Session.php	/^    public function set($name, $value = '', $prefix = null)$/;"	v
Template	thinkphp\library\think\Template.php	/^class Template$/;"	c
__construct	thinkphp\library\think\Template.php	/^    public function __construct(array $config = [])$/;"	f
__set	thinkphp\library\think\Template.php	/^    public function __set($name, $value)$/;"	f
_key	thinkphp\library\think\Template.php	/^        $_key = md5($varStr);$/;"	v
_varFunctionList	thinkphp\library\think\Template.php	/^        static $_varFunctionList = [];$/;"	v
_varParseList	thinkphp\library\think\Template.php	/^            static $_varParseList = [];$/;"	v
args	thinkphp\library\think\Template.php	/^                $args = explode('=', $varArray[$i], 2);$/;"	v
array	thinkphp\library\think\Template.php	/^                                            $array = explode(':', $str, 2);$/;"	v
array	thinkphp\library\think\Template.php	/^                            $array = preg_split('\/([!=]={1,2}|(?<!-)[><]={0,1})\/', substr($str, 0, $pos), 2, PREG_SPLIT_DELIM_CAPTURE);$/;"	v
array	thinkphp\library\think\Template.php	/^                    $array = $this->parseAttr($match[0]);$/;"	v
array	thinkphp\library\think\Template.php	/^            $array = $this->parseAttr($matches[0]);$/;"	v
array	thinkphp\library\think\Template.php	/^        $array    = explode(',', $templateName);$/;"	v
array	thinkphp\library\think\Template.php	/^        $array  = $blocks  = $baseBlocks  = [];$/;"	v
array	thinkphp\library\think\Template.php	/^        $array = [];$/;"	v
assign	thinkphp\library\think\Template.php	/^    public function assign($name, $value = '')$/;"	f
autoescape	thinkphp\library\think\Template.php	/^    public function parseVarFunction(&$varStr, $autoescape = true)$/;"	v
baseBlocks	thinkphp\library\think\Template.php	/^                $baseBlocks = $this->parseBlock($template, true);$/;"	v
begin	thinkphp\library\think\Template.php	/^            $begin  = $this->config['taglib_begin'];$/;"	v
begin	thinkphp\library\think\Template.php	/^            $begin = $this->config['tpl_begin'];$/;"	v
blocks	thinkphp\library\think\Template.php	/^                    $blocks = array_merge($blocks, $this->parseBlock($template));$/;"	v
cache	thinkphp\library\think\Template.php	/^        $cache = Container::get('cache');$/;"	v
cacheContent	thinkphp\library\think\Template.php	/^            $cacheContent = $cache->get($this->config['cache_id']);$/;"	v
cacheFile	thinkphp\library\think\Template.php	/^            $cacheFile = $this->config['cache_path'] . $this->config['cache_prefix'] . md5($template) . '.' . ltrim($this->config['cache_suffix'], '.');$/;"	v
cacheFile	thinkphp\library\think\Template.php	/^        $cacheFile = $this->config['cache_path'] . $this->config['cache_prefix'] . md5($content) . '.' . ltrim($this->config['cache_suffix'], '.');$/;"	v
checkCache	thinkphp\library\think\Template.php	/^    private function checkCache($cacheFile)$/;"	f
children	thinkphp\library\think\Template.php	/^                $children = [];$/;"	v
class	thinkphp\library\think\Template.php	/^        $class         = false !== strpos($type, '\\\\') ? $type : '\\\\think\\\\template\\\\driver\\\\' . ucwords($type);$/;"	v
className	thinkphp\library\think\Template.php	/^            $className = $tagLib;$/;"	v
className	thinkphp\library\think\Template.php	/^            $className = '\\\\think\\\\template\\\\taglib\\\\' . ucwords($tagLib);$/;"	v
compiler	thinkphp\library\think\Template.php	/^    private function compiler(&$content, $cacheFile)$/;"	f
config	thinkphp\library\think\Template.php	/^            $this->config = array_merge($this->config, $config);$/;"	v
config	thinkphp\library\think\Template.php	/^        $this->config                 = array_merge($this->config, $config);$/;"	v
config	thinkphp\library\think\Template.php	/^    protected $config = [$/;"	v
config	thinkphp\library\think\Template.php	/^    public function __construct(array $config = [])$/;"	v
config	thinkphp\library\think\Template.php	/^    public function config($config)$/;"	f
content	thinkphp\library\think\Template.php	/^                    $content         = str_replace($match[0], "<!--###literal{$count}###-->", $content);$/;"	v
content	thinkphp\library\think\Template.php	/^                    $content = str_replace($match[0], $parseStr, $content);$/;"	v
content	thinkphp\library\think\Template.php	/^                    $content = str_replace($match[0], $this->literal[$match[1]], $content);$/;"	v
content	thinkphp\library\think\Template.php	/^                    $content = str_replace($replace, $content, file_get_contents($layoutFile));$/;"	v
content	thinkphp\library\think\Template.php	/^                    $content = str_replace($this->config['layout_item'], $content, file_get_contents($layoutFile));$/;"	v
content	thinkphp\library\think\Template.php	/^                $content = file_get_contents($template);$/;"	v
content	thinkphp\library\think\Template.php	/^                $content = str_replace($match[0], $str, $content);$/;"	v
content	thinkphp\library\think\Template.php	/^                $content = str_replace('{__NOLAYOUT__}', '', $content);$/;"	v
content	thinkphp\library\think\Template.php	/^            $content = $extend;$/;"	v
content	thinkphp\library\think\Template.php	/^            $content = ob_get_clean();$/;"	v
content	thinkphp\library\think\Template.php	/^            $content = preg_replace($find, $replace, $content);$/;"	v
content	thinkphp\library\think\Template.php	/^            $content = str_replace($matches[0], '', $content);$/;"	v
content	thinkphp\library\think\Template.php	/^            $content = str_replace('{__NOLAYOUT__}', '', $content);$/;"	v
content	thinkphp\library\think\Template.php	/^        $content = '<?php \/*' . serialize($this->includeFile) . '*\/ ?>' . "\\n" . $content;$/;"	v
content	thinkphp\library\think\Template.php	/^        $content = preg_replace('\/(<\\?(?!php|=|$))\/i', '<?php echo \\'\\\\1\\'; ?>' . "\\n", $content);$/;"	v
content	thinkphp\library\think\Template.php	/^        $content = preg_replace('\/\\?>\\s*<\\?php\\s(?!echo\\b)\/s', '', $content);$/;"	v
content	thinkphp\library\think\Template.php	/^        $content = str_replace(array_keys($replace), array_values($replace), $content);$/;"	v
count	thinkphp\library\think\Template.php	/^                $count = count($this->literal);$/;"	v
data	thinkphp\library\think\Template.php	/^                    $data = $data[$val];$/;"	v
data	thinkphp\library\think\Template.php	/^                    $data = null;$/;"	v
data	thinkphp\library\think\Template.php	/^            $data = $this->data;$/;"	v
data	thinkphp\library\think\Template.php	/^            $this->data = $vars;$/;"	v
data	thinkphp\library\think\Template.php	/^            $this->data = array_merge($this->data, $name);$/;"	v
data	thinkphp\library\think\Template.php	/^    protected $data = [];$/;"	v
display	thinkphp\library\think\Template.php	/^    public function display($content, $vars = [], $config = [])$/;"	f
end	thinkphp\library\think\Template.php	/^            $end    = $this->config['taglib_end'];$/;"	v
end	thinkphp\library\think\Template.php	/^            $end   = $this->config['tpl_end'];$/;"	v
express	thinkphp\library\think\Template.php	/^                                    $express = $name . $array[1] . $array[2];$/;"	v
express	thinkphp\library\think\Template.php	/^                                    $express = false;$/;"	v
express	thinkphp\library\think\Template.php	/^                                    $express = true;$/;"	v
extend	thinkphp\library\think\Template.php	/^                        $extend = str_replace($val['begin'] . $val['content'] . $val['end'], $replace, $extend);$/;"	v
extend	thinkphp\library\think\Template.php	/^                    $extend = $template;$/;"	v
extend	thinkphp\library\think\Template.php	/^                    $extend = $this->parseTemplateName($matches['name']);$/;"	v
extend	thinkphp\library\think\Template.php	/^        $extend = '';$/;"	v
fetch	thinkphp\library\think\Template.php	/^    public function fetch($template, $vars = [], $config = [])$/;"	f
file	thinkphp\library\think\Template.php	/^                    $file  = $array['file'];$/;"	v
find	thinkphp\library\think\Template.php	/^            $find    = ['~>\\s+<~', '~>(\\s+\\n|\\r)~'];$/;"	v
first	thinkphp\library\think\Template.php	/^                            $first = substr($str, 0, 1);$/;"	v
first	thinkphp\library\think\Template.php	/^                        $first = array_shift($vars);$/;"	v
flag	thinkphp\library\think\Template.php	/^                $flag = substr($str, 0, 1);$/;"	v
flag2	thinkphp\library\think\Template.php	/^                        $flag2 = substr($str, 1, 1);$/;"	v
fun	thinkphp\library\think\Template.php	/^                $fun = trim($args[0]);$/;"	v
func	thinkphp\library\think\Template.php	/^        $func  = function ($template) use (&$func, &$regex, &$content) {$/;"	v
func	thinkphp\library\think\Template.php	/^        $func = function ($template) use (&$func, &$regex, &$array, &$extend, &$blocks, &$baseBlocks) {$/;"	v
get	thinkphp\library\think\Template.php	/^    public function get($name = '')$/;"	f
getIncludeTagLib	thinkphp\library\think\Template.php	/^    private function getIncludeTagLib(&$content)$/;"	f
getRegex	thinkphp\library\think\Template.php	/^    private function getRegex($tagName)$/;"	f
hide	thinkphp\library\think\Template.php	/^    public function parseTagLib($tagLib, &$content, $hide = false)$/;"	v
includeFile	thinkphp\library\think\Template.php	/^        $includeFile = unserialize($matches[1]);$/;"	v
includeFile	thinkphp\library\think\Template.php	/^        $this->includeFile = [];$/;"	v
includeFile	thinkphp\library\think\Template.php	/^    private $includeFile = []; \/\/ 记录所有模板包含的文件路径及更新时间$/;"	v
isCache	thinkphp\library\think\Template.php	/^    public function isCache($cacheId)$/;"	f
k	thinkphp\library\think\Template.php	/^                    foreach ($array as $k => $v) {$/;"	v
key	thinkphp\library\think\Template.php	/^            foreach (explode('.', $name) as $key => $val) {$/;"	v
layout	thinkphp\library\think\Template.php	/^    public function layout($name, $replace = '')$/;"	f
layoutFile	thinkphp\library\think\Template.php	/^                $layoutFile = $this->parseTemplateFile($array['name']);$/;"	v
layoutFile	thinkphp\library\think\Template.php	/^                $layoutFile = $this->parseTemplateFile($this->config['layout_name']);$/;"	v
length	thinkphp\library\think\Template.php	/^                        $length = $match[0][1] - $start;$/;"	v
length	thinkphp\library\think\Template.php	/^            $length = count($varArray);$/;"	v
literal	thinkphp\library\think\Template.php	/^                $this->literal = [];$/;"	v
literal	thinkphp\library\think\Template.php	/^    private $literal     = [];$/;"	v
match	thinkphp\library\think\Template.php	/^                $match = array_pop($matches[0]);$/;"	v
method	thinkphp\library\think\Template.php	/^                            $method = array_shift($vars);$/;"	v
module	thinkphp\library\think\Template.php	/^                $module = isset($module) ? $module : Container::get('request')->module();$/;"	v
name	thinkphp\library\think\Template.php	/^                                $name    = "$fun($args[1])";$/;"	v
name	thinkphp\library\think\Template.php	/^                                $name = "$fun($name)";$/;"	v
name	thinkphp\library\think\Template.php	/^                                $name = "$fun($name,$args[1])";$/;"	v
name	thinkphp\library\think\Template.php	/^                            $name  = $array[0];$/;"	v
name	thinkphp\library\think\Template.php	/^                            $name = '(' . $name . ' ?: ' . $args[1] . ')';$/;"	v
name	thinkphp\library\think\Template.php	/^                            $name = '(isset(' . $name . ') && (' . $name . ' !== \\'\\')?' . $name . ':' . $args[1] . ')';$/;"	v
name	thinkphp\library\think\Template.php	/^                        $name = 'current(' . $name . ')';$/;"	v
name	thinkphp\library\think\Template.php	/^                        $name = 'date(' . $args[1] . ',strtotime(' . $name . ') ?: ' . $name . ')';$/;"	v
name	thinkphp\library\think\Template.php	/^                        $name = 'end(' . $name . ')';$/;"	v
name	thinkphp\library\think\Template.php	/^                        $name = 'name';$/;"	v
name	thinkphp\library\think\Template.php	/^                        $name = 'sprintf(' . $args[1] . ',' . $name . ')';$/;"	v
name	thinkphp\library\think\Template.php	/^                        $name = 'strtolower(' . $name . ')';$/;"	v
name	thinkphp\library\think\Template.php	/^                        $name = 'strtoupper(' . $name . ')';$/;"	v
name	thinkphp\library\think\Template.php	/^                    $name = 'file';$/;"	v
name	thinkphp\library\think\Template.php	/^                foreach ($baseBlocks as $name => $val) {$/;"	v
name	thinkphp\library\think\Template.php	/^            $name = trim(array_shift($varArray));$/;"	v
name	thinkphp\library\think\Template.php	/^    public function parseAttr($str, $name = null)$/;"	v
param	thinkphp\library\think\Template.php	/^        $param = implode('.', $vars);$/;"	v
params	thinkphp\library\think\Template.php	/^                                    $params = '\\'' . $params . '\\'';$/;"	v
params	thinkphp\library\think\Template.php	/^                                $params = '';$/;"	v
params	thinkphp\library\think\Template.php	/^                                $params = implode('.', $vars);$/;"	v
parent	thinkphp\library\think\Template.php	/^                            $parent = $val['parent'];$/;"	v
parse	thinkphp\library\think\Template.php	/^    public function parse(&$content)$/;"	f
parseAttr	thinkphp\library\think\Template.php	/^    public function parseAttr($str, $name = null)$/;"	f
parseBlock	thinkphp\library\think\Template.php	/^    private function parseBlock(&$content, $sort = false)$/;"	f
parseExtend	thinkphp\library\think\Template.php	/^    private function parseExtend(&$content)$/;"	f
parseInclude	thinkphp\library\think\Template.php	/^    private function parseInclude(&$content)$/;"	f
parseLayout	thinkphp\library\think\Template.php	/^    private function parseLayout(&$content)$/;"	f
parseLiteral	thinkphp\library\think\Template.php	/^    private function parseLiteral(&$content, $restore = false)$/;"	f
parsePhp	thinkphp\library\think\Template.php	/^    private function parsePhp(&$content)$/;"	f
parseStr	thinkphp\library\think\Template.php	/^                                    $parseStr = $first . '->' . implode('->', $vars);$/;"	v
parseStr	thinkphp\library\think\Template.php	/^                                    $parseStr = $first . '[\\'' . implode('\\'][\\'', $vars) . '\\']';$/;"	v
parseStr	thinkphp\library\think\Template.php	/^                                    $parseStr = '(is_array(' . $first . ')?' . $first . '[\\'' . implode('\\'][\\'', $vars) . '\\']:' . $first . '->' . implode('->', $vars) . ')';$/;"	v
parseStr	thinkphp\library\think\Template.php	/^                            $parseStr = $this->parseThinkVar($vars);$/;"	v
parseStr	thinkphp\library\think\Template.php	/^                            $parseStr = 'app(\\'request\\')->' . $method . '(' . $params . ')';$/;"	v
parseStr	thinkphp\library\think\Template.php	/^                        $parseStr = $type;$/;"	v
parseStr	thinkphp\library\think\Template.php	/^                        $parseStr = '';$/;"	v
parseStr	thinkphp\library\think\Template.php	/^                        $parseStr = str_replace(':', '->', $match[0]);$/;"	v
parseStr	thinkphp\library\think\Template.php	/^                        $parseStr = str_replace('[' . $k . ']', $v, $parseStr);$/;"	v
parseStr	thinkphp\library\think\Template.php	/^                    $parseStr = "date('Y-m-d g:i a',time())";$/;"	v
parseStr	thinkphp\library\think\Template.php	/^                    $parseStr = $_varParseList[$match[0]];$/;"	v
parseStr	thinkphp\library\think\Template.php	/^                    $parseStr = $this->parseTemplateName($file);$/;"	v
parseStr	thinkphp\library\think\Template.php	/^                    $parseStr = 'THINK_VERSION';$/;"	v
parseStr	thinkphp\library\think\Template.php	/^                    $parseStr = '\\'' . ltrim($this->config['tpl_begin'], '\\\\') . '\\'';$/;"	v
parseStr	thinkphp\library\think\Template.php	/^                    $parseStr = '\\'' . ltrim($this->config['tpl_end'], '\\\\') . '\\'';$/;"	v
parseStr	thinkphp\library\think\Template.php	/^                    $parseStr = '\\'\\'';$/;"	v
parseStr	thinkphp\library\think\Template.php	/^                    $parseStr = 'app(\\'config\\')->get(\\'' . $param . '\\')';$/;"	v
parseStr	thinkphp\library\think\Template.php	/^                    $parseStr = 'app(\\'cookie\\')->get(\\'' . $param . '\\')';$/;"	v
parseStr	thinkphp\library\think\Template.php	/^                    $parseStr = 'app(\\'lang\\')->get(\\'' . $param . '\\')';$/;"	v
parseStr	thinkphp\library\think\Template.php	/^                    $parseStr = 'app(\\'request\\')->env(\\'' . $param . '\\')';$/;"	v
parseStr	thinkphp\library\think\Template.php	/^                    $parseStr = 'app(\\'request\\')->get(\\'' . $param . '\\')';$/;"	v
parseStr	thinkphp\library\think\Template.php	/^                    $parseStr = 'app(\\'request\\')->post(\\'' . $param . '\\')';$/;"	v
parseStr	thinkphp\library\think\Template.php	/^                    $parseStr = 'app(\\'request\\')->request(\\'' . $param . '\\')';$/;"	v
parseStr	thinkphp\library\think\Template.php	/^                    $parseStr = 'app(\\'request\\')->server(\\'' . $param . '\\')';$/;"	v
parseStr	thinkphp\library\think\Template.php	/^                    $parseStr = 'app(\\'session\\')->get(\\'' . $param . '\\')';$/;"	v
parseStr	thinkphp\library\think\Template.php	/^                    $parseStr = strtoupper($param);$/;"	v
parseStr	thinkphp\library\think\Template.php	/^        $parseStr = '';$/;"	v
parseTag	thinkphp\library\think\Template.php	/^    private function parseTag(&$content)$/;"	f
parseTagLib	thinkphp\library\think\Template.php	/^    public function parseTagLib($tagLib, &$content, $hide = false)$/;"	f
parseTemplateFile	thinkphp\library\think\Template.php	/^    private function parseTemplateFile($template)$/;"	f
parseTemplateName	thinkphp\library\think\Template.php	/^    private function parseTemplateName($templateName)$/;"	f
parseThinkVar	thinkphp\library\think\Template.php	/^    public function parseThinkVar($vars)$/;"	f
parseVar	thinkphp\library\think\Template.php	/^    public function parseVar(&$varStr)$/;"	f
parseVarFunction	thinkphp\library\think\Template.php	/^    public function parseVarFunction(&$varStr, $autoescape = true)$/;"	f
path	thinkphp\library\think\Template.php	/^                $path   = $this->config['view_base'] . ($module ? $module . DIRECTORY_SEPARATOR : '');$/;"	v
path	thinkphp\library\think\Template.php	/^                $path = isset($module) ? Container::get('app')->getAppPath() . $module . DIRECTORY_SEPARATOR . basename($this->config['view_path']) . DIRECTORY_SEPARATOR : $this->config['view_path'];$/;"	v
path	thinkphp\library\think\Template.php	/^        foreach ($includeFile as $path => $time) {$/;"	v
pos	thinkphp\library\think\Template.php	/^                        if (false !== $pos = strpos($str, '?')) {$/;"	v
regex	thinkphp\library\think\Template.php	/^                        $regex = $begin . $tagName . '\\b(?>(?:(?!' . $name . '=).)*)\\b' . $name . '=([\\'\\"])(?P<name>[\\$\\w\\-\\\/\\.\\:@,\\\\\\\\]+)\\\\1(?>(?:(?!' . $end . ').)*)' . $end;$/;"	v
regex	thinkphp\library\think\Template.php	/^                        $regex = $begin . $tagName . '\\b(?>(?:(?!' . $name . '=).)*)\\b' . $name . '=([\\'\\"])(?P<name>[\\$\\w\\-\\\/\\.\\:@,\\\\\\\\]+)\\\\1(?>[^' . $end . ']*)' . $end;$/;"	v
regex	thinkphp\library\think\Template.php	/^                        $regex = $begin . '(?:' . $tagName . '\\b(?>(?:(?!name=).)*)\\bname=([\\'\\"])(?P<name>[\\$\\w\\-\\\/\\.]+)\\\\1(?>(?:(?!' . $end . ').)*)|\\\/' . $tagName . ')' . $end;$/;"	v
regex	thinkphp\library\think\Template.php	/^                        $regex = $begin . '(?:' . $tagName . '\\b(?>(?:(?!name=).)*)\\bname=([\\'\\"])(?P<name>[\\$\\w\\-\\\/\\.]+)\\\\1(?>[^' . $end . ']*)|\\\/' . $tagName . ')' . $end;$/;"	v
regex	thinkphp\library\think\Template.php	/^                        $regex = '(' . $begin . $tagName . '\\b(?>(?:(?!' . $end . ').)*)' . $end . ')';$/;"	v
regex	thinkphp\library\think\Template.php	/^                        $regex = '(' . $begin . $tagName . '\\b(?>[^' . $end . ']*)' . $end . ')';$/;"	v
regex	thinkphp\library\think\Template.php	/^                    $regex = '<!--###literal(\\d+)###-->';$/;"	v
regex	thinkphp\library\think\Template.php	/^                $regex = $begin . '((?:[\\$]{1,2}[a-wA-w_]|[\\:\\~][\\$a-wA-w_]|[+]{2}[\\$][a-wA-w_]|[-]{2}[\\$][a-wA-w_]|\\\/[\\*\\\/])(?>(?:(?!' . $end . ').)*))' . $end;$/;"	v
regex	thinkphp\library\think\Template.php	/^                $regex = $begin . '((?:[\\$]{1,2}[a-wA-w_]|[\\:\\~][\\$a-wA-w_]|[+]{2}[\\$][a-wA-w_]|[-]{2}[\\$][a-wA-w_]|\\\/[\\*\\\/])(?>[^' . $end . ']*))' . $end;$/;"	v
regex	thinkphp\library\think\Template.php	/^        $regex  = $this->getRegex('block');$/;"	v
regex	thinkphp\library\think\Template.php	/^        $regex  = $this->getRegex('extend');$/;"	v
regex	thinkphp\library\think\Template.php	/^        $regex = $this->getRegex($restore ? 'restoreliteral' : 'literal');$/;"	v
regex	thinkphp\library\think\Template.php	/^        $regex = $this->getRegex('include');$/;"	v
regex	thinkphp\library\think\Template.php	/^        $regex = $this->getRegex('tag');$/;"	v
regex	thinkphp\library\think\Template.php	/^        $regex = '';$/;"	v
regex	thinkphp\library\think\Template.php	/^        $regex = '\/\\s+(?>(?P<name>[\\w-]+)\\s*)=(?>\\s*)([\\"\\'])(?P<value>(?:(?!\\\\2).)*)\\\\2\/is';$/;"	v
replace	thinkphp\library\think\Template.php	/^                            $replace = str_replace($baseBlocks[$key]['begin'] . $baseBlocks[$key]['content'] . $baseBlocks[$key]['end'], $blocks[$key]['content'], $replace);$/;"	v
replace	thinkphp\library\think\Template.php	/^                        $replace = str_replace(['{__BLOCK__}', '{__block__}'], $replace, $blocks[$name]['content']);$/;"	v
replace	thinkphp\library\think\Template.php	/^                    $replace = $val['content'];$/;"	v
replace	thinkphp\library\think\Template.php	/^                    $replace = isset($array['replace']) ? $array['replace'] : $this->config['layout_item'];$/;"	v
replace	thinkphp\library\think\Template.php	/^            $replace = ['><', '>'];$/;"	v
replace	thinkphp\library\think\Template.php	/^        $replace = $this->config['tpl_replace_string'];$/;"	v
replace	thinkphp\library\think\Template.php	/^    public function layout($name, $replace = '')$/;"	v
restore	thinkphp\library\think\Template.php	/^    private function parseLiteral(&$content, $restore = false)$/;"	v
result	thinkphp\library\think\Template.php	/^        $result = [];$/;"	v
right	thinkphp\library\think\Template.php	/^            $right = $keys = [];$/;"	v
single	thinkphp\library\think\Template.php	/^            $single = strlen(ltrim($begin, '\\\\')) == 1 && strlen(ltrim($end, '\\\\')) == 1 ? true : false;$/;"	v
sort	thinkphp\library\think\Template.php	/^    private function parseBlock(&$content, $sort = false)$/;"	v
start	thinkphp\library\think\Template.php	/^                        $start  = $tag['offset'] + strlen($tag['tag']);$/;"	v
storage	thinkphp\library\think\Template.php	/^        $this->storage = new $class();$/;"	v
storage	thinkphp\library\think\Template.php	/^    protected $storage;$/;"	v
str	thinkphp\library\think\Template.php	/^                                            $str = implode(' : ', $array);$/;"	v
str	thinkphp\library\think\Template.php	/^                                        $str = $this->parseVarFunction($str);$/;"	v
str	thinkphp\library\think\Template.php	/^                                        $str = '<?php echo ' . $name . '?' . $str . '; ?>';$/;"	v
str	thinkphp\library\think\Template.php	/^                                        $str = '<?php echo ' . ($express ?: '!empty(' . $name . ')') . ' ? ' . $str . '; ?>';$/;"	v
str	thinkphp\library\think\Template.php	/^                                        $str = '<?php echo ' . ($express ?: '!empty(' . $name . ')') . ' ? ' . $this->parseVarFunction($name) . ' : ' . $str . '; ?>';$/;"	v
str	thinkphp\library\think\Template.php	/^                                        $str = '<?php echo ' . ($express ?: 'isset(' . $name . ')') . ' ? ' . $this->parseVarFunction($name) . ' : ' . $str . '; ?>';$/;"	v
str	thinkphp\library\think\Template.php	/^                                        $str = '<?php echo (' . $name . ') ? ' . $name . ' : ' . substr($str, 1) . '; ?>';$/;"	v
str	thinkphp\library\think\Template.php	/^                                        $str = '<?php if(' . $name . ') echo ' . substr($str, 1) . '; ?>';$/;"	v
str	thinkphp\library\think\Template.php	/^                                        $str = '<?php if(' . ($express ?: '!empty(' . $name . ')') . ') echo ' . $str . '; ?>';$/;"	v
str	thinkphp\library\think\Template.php	/^                                    $str = trim(substr($str, 1));$/;"	v
str	thinkphp\library\think\Template.php	/^                            $str = '';$/;"	v
str	thinkphp\library\think\Template.php	/^                            $str = '<?php echo ' . $str . '; ?>';$/;"	v
str	thinkphp\library\think\Template.php	/^                            $str = trim(substr($str, $pos + 1));$/;"	v
str	thinkphp\library\think\Template.php	/^                        $str = $this->config['tpl_begin'] . $str . $this->config['tpl_end'];$/;"	v
str	thinkphp\library\think\Template.php	/^                        $str = '<?php ' . $str . '; ?>';$/;"	v
str	thinkphp\library\think\Template.php	/^                        $str = '<?php echo ' . $str . '; ?>';$/;"	v
str	thinkphp\library\think\Template.php	/^                        $str = substr($str, 1);$/;"	v
str	thinkphp\library\think\Template.php	/^                $str  = stripslashes($match[1]);$/;"	v
stripPreg	thinkphp\library\think\Template.php	/^    private function stripPreg($str)$/;"	f
tLib	thinkphp\library\think\Template.php	/^        $tLib = new $className($this);$/;"	v
tag	thinkphp\library\think\Template.php	/^                        $tag    = array_pop($right);$/;"	v
tagLib	thinkphp\library\think\Template.php	/^            $tagLib    = substr($tagLib, strrpos($tagLib, '\\\\') + 1);$/;"	v
tagLibs	thinkphp\library\think\Template.php	/^            $tagLibs = $this->getIncludeTagLib($content);$/;"	v
tagLibs	thinkphp\library\think\Template.php	/^            $tagLibs = explode(',', $this->config['taglib_pre_load']);$/;"	v
tagLibs	thinkphp\library\think\Template.php	/^        $tagLibs = explode(',', $this->config['taglib_build_in']);$/;"	v
template	thinkphp\library\think\Template.php	/^                $template = str_replace(['\/', ':'], $this->config['view_depr'], $template);$/;"	v
template	thinkphp\library\think\Template.php	/^                $template = str_replace(['\/', ':'], $this->config['view_depr'], substr($template, 1));$/;"	v
template	thinkphp\library\think\Template.php	/^            $template = $path . $template . '.' . ltrim($this->config['view_suffix'], '.');$/;"	v
template	thinkphp\library\think\Template.php	/^            $template = $this->parseTemplateFile($templateName);$/;"	v
template	thinkphp\library\think\Template.php	/^        $template = $this->parseTemplateFile($template);$/;"	v
templateName	thinkphp\library\think\Template.php	/^                $templateName = $this->get(substr($templateName, 1));$/;"	v
template_deny_funs	thinkphp\library\think\Template.php	/^            $template_deny_funs = explode(',', $this->config['tpl_deny_func_list']);$/;"	v
type	thinkphp\library\think\Template.php	/^        $type          = $this->config['compile_type'] ? $this->config['compile_type'] : 'File';$/;"	v
type	thinkphp\library\think\Template.php	/^        $type  = strtoupper(trim(array_shift($vars)));$/;"	v
v	thinkphp\library\think\Template.php	/^                            $v = $this->get(substr($v, 1));$/;"	v
value	thinkphp\library\think\Template.php	/^    public function assign($name, $value = '')$/;"	v
varArray	thinkphp\library\think\Template.php	/^            $varArray = explode('|', $varStr);$/;"	v
varStr	thinkphp\library\think\Template.php	/^                $varStr = substr_replace($varStr, $parseStr, $match[1], strlen($match[0]));$/;"	v
varStr	thinkphp\library\think\Template.php	/^            $varStr                  = $name;$/;"	v
varStr	thinkphp\library\think\Template.php	/^            $varStr = $_varFunctionList[$_key];$/;"	v
varStr	thinkphp\library\think\Template.php	/^        $varStr = trim($varStr);$/;"	v
vars	thinkphp\library\think\Template.php	/^                        $vars  = explode('.', $match[0]);$/;"	v
vars	thinkphp\library\think\Template.php	/^    public function display($content, $vars = [], $config = [])$/;"	v
vars	thinkphp\library\think\Template.php	/^    public function fetch($template, $vars = [], $config = [])$/;"	v
Url	thinkphp\library\think\Url.php	/^class Url$/;"	c
__construct	thinkphp\library\think\Url.php	/^    public function __construct(App $app)$/;"	f
action	thinkphp\library\think\Url.php	/^                $action     = $this->app['config']->get('url_convert') ? strtolower(array_pop($path)) : array_pop($path);$/;"	v
alias	thinkphp\library\think\Url.php	/^            $alias      = $this->app['route']->getAlias();$/;"	v
anchor	thinkphp\library\think\Url.php	/^                $anchor = $info['fragment'];$/;"	v
anchor	thinkphp\library\think\Url.php	/^        $anchor = !empty($anchor) ? '#' . $anchor : '';$/;"	v
app	thinkphp\library\think\Url.php	/^        $this->app = $app;$/;"	v
app	thinkphp\library\think\Url.php	/^    protected $app;$/;"	v
bind	thinkphp\library\think\Url.php	/^            $bind = $this->app['route']->getBind();$/;"	v
bindCheck	thinkphp\library\think\Url.php	/^        $this->bindCheck = false;$/;"	v
bindCheck	thinkphp\library\think\Url.php	/^    protected $bindCheck;$/;"	v
build	thinkphp\library\think\Url.php	/^    public function build($url = '', $vars = '', $suffix = true, $domain = false)$/;"	f
controller	thinkphp\library\think\Url.php	/^                $controller = empty($path) ? $controller : ($this->app['config']->get('url_convert') ? Loader::parseName(array_pop($path)) : array_pop($path));$/;"	v
controller	thinkphp\library\think\Url.php	/^            $controller = Loader::parseName($request->controller());$/;"	v
depr	thinkphp\library\think\Url.php	/^        $depr = $this->app['config']->get('pathinfo_depr');$/;"	v
domain	thinkphp\library\think\Url.php	/^                                $domain = $key;$/;"	v
domain	thinkphp\library\think\Url.php	/^                    $domain = $match[1];$/;"	v
domain	thinkphp\library\think\Url.php	/^            $domain     = $this->app['config']->get('app_host') ?: $this->app['request']->host();$/;"	v
domain	thinkphp\library\think\Url.php	/^        $domain = $this->parseDomain($url, $domain);$/;"	v
domains	thinkphp\library\think\Url.php	/^            $domains = $this->app['route']->getDomains();$/;"	v
getRuleUrl	thinkphp\library\think\Url.php	/^    public function getRuleUrl($rule, &$vars = [])$/;"	f
host	thinkphp\library\think\Url.php	/^                $host = $this->app['config']->get('app_host') ?: $this->app['request']->host();$/;"	v
info	thinkphp\library\think\Url.php	/^            $info = parse_url($url);$/;"	v
key	thinkphp\library\think\Url.php	/^                        foreach ($domains as $key => $rule) {$/;"	v
key	thinkphp\library\think\Url.php	/^                foreach ($alias as $key => $val) {$/;"	v
key	thinkphp\library\think\Url.php	/^            foreach ($pattern as $key => $val) {$/;"	v
match	thinkphp\library\think\Url.php	/^        if (!empty($rule) && $match = $this->getRuleUrl($rule, $vars)) {$/;"	v
matchAlias	thinkphp\library\think\Url.php	/^                        $matchAlias = true;$/;"	v
matchAlias	thinkphp\library\think\Url.php	/^            $matchAlias = false;$/;"	v
module	thinkphp\library\think\Url.php	/^                $module     = empty($path) ? $module : array_pop($path) . '\/';$/;"	v
module	thinkphp\library\think\Url.php	/^            $module = $module ? $module . '\/' : '';$/;"	v
module	thinkphp\library\think\Url.php	/^            $module = $request->module();$/;"	v
name	thinkphp\library\think\Url.php	/^            $name = substr($url, 1, $pos - 1);$/;"	v
paramType	thinkphp\library\think\Url.php	/^                $paramType = $this->app['config']->get('url_param_type');$/;"	v
parseDomain	thinkphp\library\think\Url.php	/^    protected function parseDomain(&$url, $domain)$/;"	f
parseSuffix	thinkphp\library\think\Url.php	/^    protected function parseSuffix($suffix)$/;"	f
parseUrl	thinkphp\library\think\Url.php	/^    protected function parseUrl($url, &$domain)$/;"	f
path	thinkphp\library\think\Url.php	/^                $path       = explode('\/', $url);$/;"	v
pos	thinkphp\library\think\Url.php	/^        if (0 === strpos($url, '[') && $pos = strpos($url, ']')) {$/;"	v
request	thinkphp\library\think\Url.php	/^        $request = $this->app['request'];$/;"	v
result	thinkphp\library\think\Url.php	/^                    $result = [$url, $domain, $suffix];$/;"	v
root	thinkphp\library\think\Url.php	/^        $this->root = $root;$/;"	v
root	thinkphp\library\think\Url.php	/^    protected $root;$/;"	v
root	thinkphp\library\think\Url.php	/^    public function root($root)$/;"	f
rootDomain	thinkphp\library\think\Url.php	/^            $rootDomain = $this->app['config']->get('url_domain_root');$/;"	v
route_domain	thinkphp\library\think\Url.php	/^                $route_domain = array_keys($domains);$/;"	v
rule	thinkphp\library\think\Url.php	/^                            $rule = is_array($rule) ? $rule[0] : $rule;$/;"	v
rule	thinkphp\library\think\Url.php	/^                $rule = $this->app['route']->getName($url);$/;"	v
rule	thinkphp\library\think\Url.php	/^            $rule = $this->app['route']->getName(isset($name) ? $name : $url . (isset($info['query']) ? '?' . $info['query'] : ''));$/;"	v
scheme	thinkphp\library\think\Url.php	/^            $scheme = $this->app['request']->isSsl() || $this->app['config']->get('is_https') ? 'https:\/\/' : 'http:\/\/';$/;"	v
scheme	thinkphp\library\think\Url.php	/^            $scheme = '';$/;"	v
suffix	thinkphp\library\think\Url.php	/^                $suffix = $match[2];$/;"	v
suffix	thinkphp\library\think\Url.php	/^                $suffix = substr($suffix, 0, $pos);$/;"	v
suffix	thinkphp\library\think\Url.php	/^            $suffix = true === $suffix ? $this->app['config']->get('url_html_suffix') : $suffix;$/;"	v
suffix	thinkphp\library\think\Url.php	/^        $suffix = in_array($url, ['\/', '']) ? '' : $this->parseSuffix($suffix);$/;"	v
url	thinkphp\library\think\Url.php	/^                                $url    = ltrim($url, $rule);$/;"	v
url	thinkphp\library\think\Url.php	/^                        $url        = $key . substr($url, strlen($val));$/;"	v
url	thinkphp\library\think\Url.php	/^                    $url    = str_replace(['\/[:' . $key . ']', '\/[:' . $key . '$]', '[:' . $key . ']', '[:' . $key . '$]', '<' . $key . '?>'], '', $url);$/;"	v
url	thinkphp\library\think\Url.php	/^                    $url = str_replace(['[:' . $key . ']', '[:' . $key . '$]', '<' . $key . '?>', ':' . $key . '', ':' . $key . '$', '<' . $key . '>'], urlencode($vars[$key]), $url);$/;"	v
url	thinkphp\library\think\Url.php	/^                $url        = $module . $controller . '\/' . $action;$/;"	v
url	thinkphp\library\think\Url.php	/^                $url = $module . $controller . '\/' . $request->action();$/;"	v
url	thinkphp\library\think\Url.php	/^                $url = $this->parseUrl($url, $domain);$/;"	v
url	thinkphp\library\think\Url.php	/^                $url = substr($url, strlen($bind) + 1);$/;"	v
url	thinkphp\library\think\Url.php	/^            $url  = !empty($info['path']) ? $info['path'] : '';$/;"	v
url	thinkphp\library\think\Url.php	/^            $url  = 'name' . substr($url, $pos + 1);$/;"	v
url	thinkphp\library\think\Url.php	/^            $url = $match[0];$/;"	v
url	thinkphp\library\think\Url.php	/^            $url = ltrim(str_replace('\\\\', '\/', $url), '\/');$/;"	v
url	thinkphp\library\think\Url.php	/^            $url = preg_replace(['\/(\\W)\\?$\/', '\/(\\W)\\?\/'], ['', '\\1'], $url);$/;"	v
url	thinkphp\library\think\Url.php	/^            $url = substr($url, 1);$/;"	v
url	thinkphp\library\think\Url.php	/^        $url  = str_replace('\/', $depr, $url);$/;"	v
url	thinkphp\library\think\Url.php	/^        $url = $domain . rtrim($this->root ?: $this->app['request']->root(), '\/') . '\/' . ltrim($url, '\/');$/;"	v
val	thinkphp\library\think\Url.php	/^                        $val = $val[0];$/;"	v
var	thinkphp\library\think\Url.php	/^                foreach ($vars as $var => $val) {$/;"	v
vars	thinkphp\library\think\Url.php	/^                $vars = array_merge($params, $vars);$/;"	v
vars	thinkphp\library\think\Url.php	/^                $vars = urldecode(http_build_query($vars));$/;"	v
vars	thinkphp\library\think\Url.php	/^    public function build($url = '', $vars = '', $suffix = true, $domain = false)$/;"	v
Validate	thinkphp\library\think\Validate.php	/^class Validate$/;"	c
__call	thinkphp\library\think\Validate.php	/^    public function __call($method, $args)$/;"	f
__construct	thinkphp\library\think\Validate.php	/^    public function __construct(array $rules = [], $message = [], $field = [])$/;"	f
activeUrl	thinkphp\library\think\Validate.php	/^    public function activeUrl($value, $rule = 'MX')$/;"	f
after	thinkphp\library\think\Validate.php	/^    public function after($value, $rule)$/;"	f
alias	thinkphp\library\think\Validate.php	/^    protected $alias = [$/;"	v
allowIp	thinkphp\library\think\Validate.php	/^    public function allowIp($value, $rule)$/;"	f
append	thinkphp\library\think\Validate.php	/^    protected $append = [];$/;"	v
append	thinkphp\library\think\Validate.php	/^    public function append($field, $rule = null)$/;"	f
array	thinkphp\library\think\Validate.php	/^                $array = array_pad([], 3, '');$/;"	v
array	thinkphp\library\think\Validate.php	/^                $array = array_pad(explode(',', $rule), 3, '');$/;"	v
batch	thinkphp\library\think\Validate.php	/^        $this->batch = $batch;$/;"	v
batch	thinkphp\library\think\Validate.php	/^    protected $batch = false;$/;"	v
batch	thinkphp\library\think\Validate.php	/^    public function batch($batch = true)$/;"	f
before	thinkphp\library\think\Validate.php	/^    public function before($value, $rule)$/;"	f
behavior	thinkphp\library\think\Validate.php	/^    public function behavior($value, $rule, $data)$/;"	f
between	thinkphp\library\think\Validate.php	/^    public function between($value, $rule)$/;"	f
callback	thinkphp\library\think\Validate.php	/^                    $callback = isset(self::$type[$type]) ? self::$type[$type] : [$this, $type];$/;"	v
callback	thinkphp\library\think\Validate.php	/^    public static function extend($type, $callback = null)$/;"	v
check	thinkphp\library\think\Validate.php	/^    public function check($data, $rules = [], $scene = '')$/;"	f
checkItem	thinkphp\library\think\Validate.php	/^    protected function checkItem($field, $value, $rules, $data, $title = '', $msg = [])$/;"	f
confirm	thinkphp\library\think\Validate.php	/^    public function confirm($value, $rule, $data = [], $field = '')$/;"	f
currentScene	thinkphp\library\think\Validate.php	/^        $this->currentScene = $name;$/;"	v
currentScene	thinkphp\library\think\Validate.php	/^    protected $currentScene = null;$/;"	v
data	thinkphp\library\think\Validate.php	/^    public function confirm($value, $rule, $data = [], $field = '')$/;"	v
data	thinkphp\library\think\Validate.php	/^    public function different($value, $rule, $data = [])$/;"	v
data	thinkphp\library\think\Validate.php	/^    public function egt($value, $rule, $data = [])$/;"	v
data	thinkphp\library\think\Validate.php	/^    public function elt($value, $rule, $data = [])$/;"	v
data	thinkphp\library\think\Validate.php	/^    public function is($value, $rule, $data = [])$/;"	v
data	thinkphp\library\think\Validate.php	/^    public function lt($value, $rule, $data = [])$/;"	v
dateFormat	thinkphp\library\think\Validate.php	/^    public function dateFormat($value, $rule)$/;"	f
db	thinkphp\library\think\Validate.php	/^                $db = Container::get('app')->model($rule[0]);$/;"	v
db	thinkphp\library\think\Validate.php	/^                $db = Db::name($rule[0]);$/;"	v
db	thinkphp\library\think\Validate.php	/^            $db = new $rule[0];$/;"	v
denyIp	thinkphp\library\think\Validate.php	/^    public function denyIp($value, $rule)$/;"	f
different	thinkphp\library\think\Validate.php	/^    public function different($value, $rule, $data = [])$/;"	f
egt	thinkphp\library\think\Validate.php	/^    public function egt($value, $rule, $data = [])$/;"	f
elt	thinkphp\library\think\Validate.php	/^    public function elt($value, $rule, $data = [])$/;"	f
end	thinkphp\library\think\Validate.php	/^            $end = strtotime($end);$/;"	v
eq	thinkphp\library\think\Validate.php	/^    public function eq($value, $rule)$/;"	f
error	thinkphp\library\think\Validate.php	/^                        $this->error = array_merge($this->error, $result);$/;"	v
error	thinkphp\library\think\Validate.php	/^                    $this->error = $result;$/;"	v
error	thinkphp\library\think\Validate.php	/^        $this->error = [];$/;"	v
error	thinkphp\library\think\Validate.php	/^    protected $error = [];$/;"	v
expire	thinkphp\library\think\Validate.php	/^    public function expire($value, $rule)$/;"	f
extend	thinkphp\library\think\Validate.php	/^    public static function extend($type, $callback = null)$/;"	f
field	thinkphp\library\think\Validate.php	/^                $this->field = array_merge($this->field, $rule);$/;"	v
field	thinkphp\library\think\Validate.php	/^        $this->field   = array_merge($this->field, $field);$/;"	v
field	thinkphp\library\think\Validate.php	/^    protected $field = [];$/;"	v
fields	thinkphp\library\think\Validate.php	/^            $fields = explode('^', $key);$/;"	v
fileExt	thinkphp\library\think\Validate.php	/^    public function fileExt($file, $rule)$/;"	f
fileMime	thinkphp\library\think\Validate.php	/^    public function fileMime($file, $rule)$/;"	f
fileSize	thinkphp\library\think\Validate.php	/^    public function fileSize($file, $rule)$/;"	f
filter	thinkphp\library\think\Validate.php	/^    protected $filter = [$/;"	v
filter	thinkphp\library\think\Validate.php	/^    public function filter($value, $rule)$/;"	f
getDataValue	thinkphp\library\think\Validate.php	/^    protected function getDataValue($data, $key)$/;"	f
getError	thinkphp\library\think\Validate.php	/^    public function getError()$/;"	f
getImageType	thinkphp\library\think\Validate.php	/^    protected function getImageType($image)$/;"	f
getRuleMsg	thinkphp\library\think\Validate.php	/^    protected function getRuleMsg($attribute, $title, $type, $rule)$/;"	f
getScene	thinkphp\library\think\Validate.php	/^    protected function getScene($scene = '')$/;"	f
gt	thinkphp\library\think\Validate.php	/^    public function gt($value, $rule, $data)$/;"	f
hasScene	thinkphp\library\think\Validate.php	/^    public function hasScene($name)$/;"	f
i	thinkphp\library\think\Validate.php	/^        $i = 0;$/;"	v
image	thinkphp\library\think\Validate.php	/^    public function image($file, $rule)$/;"	f
imageType	thinkphp\library\think\Validate.php	/^                    $imageType = 'jpg';$/;"	v
imageType	thinkphp\library\think\Validate.php	/^                $imageType = strtolower($rule[2]);$/;"	v
in	thinkphp\library\think\Validate.php	/^    public function in($value, $rule)$/;"	f
info	thinkphp\library\think\Validate.php	/^                        $info = $rule;$/;"	v
info	thinkphp\library\think\Validate.php	/^                        $info = $type;$/;"	v
info	thinkphp\library\think\Validate.php	/^                    $info = $type = $key;$/;"	v
info	thinkphp\library\think\Validate.php	/^                $info   = is_numeric($key) ? '' : $key;$/;"	v
info	thinkphp\library\think\Validate.php	/^            $info = getimagesize($image);$/;"	v
info	thinkphp\library\think\Validate.php	/^        $info = date_parse_from_format($rule, $value);$/;"	v
ip	thinkphp\library\think\Validate.php	/^    public function ip($value, $rule = 'ipv4')$/;"	f
is	thinkphp\library\think\Validate.php	/^    public function is($value, $rule, $data = [])$/;"	f
key	thinkphp\library\think\Validate.php	/^            foreach ($field as $key => $rule) {$/;"	v
key	thinkphp\library\think\Validate.php	/^        $key = isset($rule[1]) ? $rule[1] : $field;$/;"	v
key	thinkphp\library\think\Validate.php	/^        foreach ($rules as $key => $rule) {$/;"	v
key	thinkphp\library\think\Validate.php	/^        foreach ($this->append as $key => $rule) {$/;"	v
length	thinkphp\library\think\Validate.php	/^            $length = $value->getSize();$/;"	v
length	thinkphp\library\think\Validate.php	/^            $length = count($value);$/;"	v
length	thinkphp\library\think\Validate.php	/^            $length = mb_strlen((string) $value);$/;"	v
length	thinkphp\library\think\Validate.php	/^            return $length == $rule;$/;"	v
length	thinkphp\library\think\Validate.php	/^    public function length($value, $rule)$/;"	f
lt	thinkphp\library\think\Validate.php	/^    public function lt($value, $rule, $data = [])$/;"	f
make	thinkphp\library\think\Validate.php	/^    public static function make($rules = [], $message = [], $field = [])$/;"	f
max	thinkphp\library\think\Validate.php	/^    public function max($value, $rule)$/;"	f
message	thinkphp\library\think\Validate.php	/^                        $message = Lang::get(substr($message, 2, -1));$/;"	v
message	thinkphp\library\think\Validate.php	/^                    $message = $msg[$i];$/;"	v
message	thinkphp\library\think\Validate.php	/^                    $message = $this->getRuleMsg($field, $title, $info, $rule);$/;"	v
message	thinkphp\library\think\Validate.php	/^            $this->message = array_merge($this->message, $name);$/;"	v
message	thinkphp\library\think\Validate.php	/^        $this->message = array_merge($this->message, $message);$/;"	v
message	thinkphp\library\think\Validate.php	/^    protected $message = [];$/;"	v
message	thinkphp\library\think\Validate.php	/^    public function message($name, $message = '')$/;"	f
message	thinkphp\library\think\Validate.php	/^    public function message($name, $message = '')$/;"	v
message	thinkphp\library\think\Validate.php	/^    public static function make($rules = [], $message = [], $field = [])$/;"	v
method	thinkphp\library\think\Validate.php	/^            $method = substr($method, 2);$/;"	v
method	thinkphp\library\think\Validate.php	/^        $method = Container::get('request')->method();$/;"	v
method	thinkphp\library\think\Validate.php	/^    public function method($value, $rule)$/;"	f
min	thinkphp\library\think\Validate.php	/^    public function min($value, $rule)$/;"	f
msg	thinkphp\library\think\Validate.php	/^            $msg = $this->message[$attribute . '.' . $type];$/;"	v
msg	thinkphp\library\think\Validate.php	/^            $msg = $this->message[$attribute];$/;"	v
msg	thinkphp\library\think\Validate.php	/^            $msg = $this->message[$attribute][$type];$/;"	v
msg	thinkphp\library\think\Validate.php	/^            $msg = $title . '规则错误';$/;"	v
msg	thinkphp\library\think\Validate.php	/^            $msg = Container::get('lang')->get(substr($msg, 2, -1));$/;"	v
msg	thinkphp\library\think\Validate.php	/^            $msg = self::$typeMsg[$type];$/;"	v
msg	thinkphp\library\think\Validate.php	/^            $msg = self::$typeMsg['require'];$/;"	v
msg	thinkphp\library\think\Validate.php	/^            $msg = str_replace($/;"	v
msg	thinkphp\library\think\Validate.php	/^    public static function setTypeMsg($type, $msg = null)$/;"	v
must	thinkphp\library\think\Validate.php	/^    public function must($value, $rule = null)$/;"	f
notBetween	thinkphp\library\think\Validate.php	/^    public function notBetween($value, $rule)$/;"	f
notIn	thinkphp\library\think\Validate.php	/^    public function notIn($value, $rule)$/;"	f
only	thinkphp\library\think\Validate.php	/^            $this->only = $scene;$/;"	v
only	thinkphp\library\think\Validate.php	/^        $this->only = $fields;$/;"	v
only	thinkphp\library\think\Validate.php	/^        $this->only = $this->append = $this->remove = [];$/;"	v
only	thinkphp\library\think\Validate.php	/^    protected $only   = [];$/;"	v
only	thinkphp\library\think\Validate.php	/^    public function only($fields)$/;"	f
param	thinkphp\library\think\Validate.php	/^            $param = isset($rule[1]) ? $rule[1] : null;$/;"	v
param	thinkphp\library\think\Validate.php	/^            $param = null;$/;"	v
pk	thinkphp\library\think\Validate.php	/^        $pk = strval(isset($rule[3]) ? $rule[3] : $db->getPk());$/;"	v
regex	thinkphp\library\think\Validate.php	/^    protected $regex = [$/;"	v
regex	thinkphp\library\think\Validate.php	/^    public function regex($value, $rule)$/;"	f
remove	thinkphp\library\think\Validate.php	/^    protected $remove = [];$/;"	v
remove	thinkphp\library\think\Validate.php	/^    public function remove($field, $rule = true)$/;"	f
requireCallback	thinkphp\library\think\Validate.php	/^    public function requireCallback($value, $rule, $data)$/;"	f
requireIf	thinkphp\library\think\Validate.php	/^    public function requireIf($value, $rule, $data)$/;"	f
requireWith	thinkphp\library\think\Validate.php	/^    public function requireWith($value, $rule, $data)$/;"	f
result	thinkphp\library\think\Validate.php	/^                    $result = $this->filter($value, $this->filter[$rule]);$/;"	v
result	thinkphp\library\think\Validate.php	/^                    $result = $this->regex($value, $rule);$/;"	v
result	thinkphp\library\think\Validate.php	/^                    $result = call_user_func_array($callback, [$value, $rule, $data, $field, $title]);$/;"	v
result	thinkphp\library\think\Validate.php	/^                    $result = call_user_func_array(self::$type[$rule], [$value]);$/;"	v
result	thinkphp\library\think\Validate.php	/^                    $result = str_replace($/;"	v
result	thinkphp\library\think\Validate.php	/^                    $result = true;$/;"	v
result	thinkphp\library\think\Validate.php	/^                $result = !empty($value) || '0' == $value;$/;"	v
result	thinkphp\library\think\Validate.php	/^                $result = $this->checkItem($key, $value, $rule, $data, $title);$/;"	v
result	thinkphp\library\think\Validate.php	/^                $result = $this->checkItem($key, $value, $rule->getRule(), $data, $rule->getTitle() ?: $title, $rule->getMsg());$/;"	v
result	thinkphp\library\think\Validate.php	/^                $result = $this->token($value, '__token__', $data);$/;"	v
result	thinkphp\library\think\Validate.php	/^                $result = $value instanceof File && in_array($this->getImageType($value->getRealPath()), [1, 2, 3, 6]);$/;"	v
result	thinkphp\library\think\Validate.php	/^                $result = $value instanceof File;$/;"	v
result	thinkphp\library\think\Validate.php	/^                $result = call_user_func_array($rule, [$value, $data]);$/;"	v
result	thinkphp\library\think\Validate.php	/^                $result = checkdnsrr($value);$/;"	v
result	thinkphp\library\think\Validate.php	/^                $result = false !== strtotime($value);$/;"	v
result	thinkphp\library\think\Validate.php	/^                $result = in_array($value, ['1', 'on', 'yes']);$/;"	v
result	thinkphp\library\think\Validate.php	/^                $result = in_array($value, [true, false, 0, 1, '0', '1'], true);$/;"	v
result	thinkphp\library\think\Validate.php	/^                $result = is_array($value);$/;"	v
result	thinkphp\library\think\Validate.php	/^                $result = is_numeric($value);$/;"	v
result	thinkphp\library\think\Validate.php	/^        $result = call_user_func_array($rule, [$value, $data]);$/;"	v
rule	thinkphp\library\think\Validate.php	/^                        $rule = '';$/;"	v
rule	thinkphp\library\think\Validate.php	/^                $rule = $field . '_confirm';$/;"	v
rule	thinkphp\library\think\Validate.php	/^                $rule = explode('|', $rule);$/;"	v
rule	thinkphp\library\think\Validate.php	/^                $rule = strstr($field, '_confirm', true);$/;"	v
rule	thinkphp\library\think\Validate.php	/^            $rule  = $rule[0];$/;"	v
rule	thinkphp\library\think\Validate.php	/^            $rule = $this->regex[$rule];$/;"	v
rule	thinkphp\library\think\Validate.php	/^            $rule = 'MX';$/;"	v
rule	thinkphp\library\think\Validate.php	/^            $rule = '\/^' . $rule . '$\/';$/;"	v
rule	thinkphp\library\think\Validate.php	/^            $rule = 'ipv4';$/;"	v
rule	thinkphp\library\think\Validate.php	/^            $rule = explode(',', $rule);$/;"	v
rule	thinkphp\library\think\Validate.php	/^            $this->rule = array_merge($this->rule, $name);$/;"	v
rule	thinkphp\library\think\Validate.php	/^        $rule    = !empty($rule) ? $rule : '__token__';$/;"	v
rule	thinkphp\library\think\Validate.php	/^        $this->rule    = array_merge($this->rule, $rules);$/;"	v
rule	thinkphp\library\think\Validate.php	/^    protected $rule = [];$/;"	v
rule	thinkphp\library\think\Validate.php	/^    public function activeUrl($value, $rule = 'MX')$/;"	v
rule	thinkphp\library\think\Validate.php	/^    public function append($field, $rule = null)$/;"	v
rule	thinkphp\library\think\Validate.php	/^    public function ip($value, $rule = 'ipv4')$/;"	v
rule	thinkphp\library\think\Validate.php	/^    public function must($value, $rule = null)$/;"	v
rule	thinkphp\library\think\Validate.php	/^    public function remove($field, $rule = true)$/;"	v
rule	thinkphp\library\think\Validate.php	/^    public function rule($name, $rule = '')$/;"	f
rule	thinkphp\library\think\Validate.php	/^    public function rule($name, $rule = '')$/;"	v
rules	thinkphp\library\think\Validate.php	/^            $rules = $this->rule;$/;"	v
rules	thinkphp\library\think\Validate.php	/^            $rules = array_merge($rules, $this->append[$field]);$/;"	v
rules	thinkphp\library\think\Validate.php	/^            $rules = explode('|', $rules);$/;"	v
rules	thinkphp\library\think\Validate.php	/^    public function __construct(array $rules = [], $message = [], $field = [])$/;"	v
rules	thinkphp\library\think\Validate.php	/^    public function check($data, $rules = [], $scene = '')$/;"	v
scene	thinkphp\library\think\Validate.php	/^                $scene = explode(',', $scene);$/;"	v
scene	thinkphp\library\think\Validate.php	/^            $scene = $this->currentScene;$/;"	v
scene	thinkphp\library\think\Validate.php	/^            $scene = $this->scene[$scene];$/;"	v
scene	thinkphp\library\think\Validate.php	/^    protected $scene = [];$/;"	v
scene	thinkphp\library\think\Validate.php	/^    public function scene($name)$/;"	f
session	thinkphp\library\think\Validate.php	/^        $session = Container::get('session');$/;"	v
setTypeMsg	thinkphp\library\think\Validate.php	/^    public static function setTypeMsg($type, $msg = null)$/;"	f
start	thinkphp\library\think\Validate.php	/^            $start = strtotime($start);$/;"	v
title	thinkphp\library\think\Validate.php	/^                $title = isset($this->field[$key]) ? $this->field[$key] : $key;$/;"	v
title	thinkphp\library\think\Validate.php	/^    protected function checkItem($field, $value, $rules, $data, $title = '', $msg = [])$/;"	v
token	thinkphp\library\think\Validate.php	/^    public function token($value, $rule, $data)$/;"	f
type	thinkphp\library\think\Validate.php	/^                            $type = $this->alias[$type];$/;"	v
type	thinkphp\library\think\Validate.php	/^                        $type = $rule;$/;"	v
type	thinkphp\library\think\Validate.php	/^                        $type = 'is';$/;"	v
type	thinkphp\library\think\Validate.php	/^    protected static $type = [];$/;"	v
typeMsg	thinkphp\library\think\Validate.php	/^    protected static $typeMsg = [$/;"	v
unique	thinkphp\library\think\Validate.php	/^    public function unique($value, $rule, $data, $field)$/;"	f
val	thinkphp\library\think\Validate.php	/^        $val = $this->getDataValue($data, $rule);$/;"	v
value	thinkphp\library\think\Validate.php	/^            $value               = isset($data[$name1][$name2]) ? $data[$name1][$name2] : null;$/;"	v
value	thinkphp\library\think\Validate.php	/^            $value = $key;$/;"	v
value	thinkphp\library\think\Validate.php	/^            $value = $this->getDataValue($data, $key);$/;"	v
value	thinkphp\library\think\Validate.php	/^            $value = isset($data[$key]) ? $data[$key] : null;$/;"	v
value	thinkphp\library\think\Validate.php	/^        return $value == $rule;$/;"	v
w	thinkphp\library\think\Validate.php	/^            return $w == $width && $h == $height;$/;"	v
View	thinkphp\library\think\View.php	/^class View$/;"	c
__get	thinkphp\library\think\View.php	/^    public function __get($name)$/;"	f
__isset	thinkphp\library\think\View.php	/^    public function __isset($name)$/;"	f
__set	thinkphp\library\think\View.php	/^    public function __set($name, $value)$/;"	f
assign	thinkphp\library\think\View.php	/^    public function assign($name, $value = '')$/;"	f
baseReplace	thinkphp\library\think\View.php	/^        $baseReplace = [$/;"	v
class	thinkphp\library\think\View.php	/^        $class = false !== strpos($type, '\\\\') ? $type : '\\\\think\\\\view\\\\driver\\\\' . ucfirst($type);$/;"	v
config	thinkphp\library\think\View.php	/^    public function config($name, $value = null)$/;"	f
content	thinkphp\library\think\View.php	/^            $content = strtr($content, $replace);$/;"	v
content	thinkphp\library\think\View.php	/^        $content = ob_get_clean();$/;"	v
data	thinkphp\library\think\View.php	/^            $this->data = array_merge($this->data, $name);$/;"	v
data	thinkphp\library\think\View.php	/^    protected $data = [];$/;"	v
display	thinkphp\library\think\View.php	/^    public function display($content, $vars = [], $replace = [], $config = [])$/;"	f
engine	thinkphp\library\think\View.php	/^        $this->engine = new $class($options);$/;"	v
engine	thinkphp\library\think\View.php	/^    public $engine;$/;"	v
engine	thinkphp\library\think\View.php	/^    public function engine($options = [])$/;"	f
exists	thinkphp\library\think\View.php	/^    public function exists($name)$/;"	f
fetch	thinkphp\library\think\View.php	/^    public function fetch($template = '', $vars = [], $replace = [], $config = [], $renderContent = false)$/;"	f
init	thinkphp\library\think\View.php	/^    public function init($engine = [], $replace = [])$/;"	f
method	thinkphp\library\think\View.php	/^        $method = $renderContent ? 'display' : 'fetch';$/;"	v
options	thinkphp\library\think\View.php	/^            $options = [];$/;"	v
replace	thinkphp\library\think\View.php	/^            $this->replace = array_merge($this->replace, $content);$/;"	v
replace	thinkphp\library\think\View.php	/^        $replace = array_merge($this->replace, $replace);$/;"	v
replace	thinkphp\library\think\View.php	/^        $this->replace = array_merge($baseReplace, (array) $replace);$/;"	v
replace	thinkphp\library\think\View.php	/^    protected $replace = [];$/;"	v
replace	thinkphp\library\think\View.php	/^    public function init($engine = [], $replace = [])$/;"	v
replace	thinkphp\library\think\View.php	/^    public function replace($content, $replace = '')$/;"	f
replace	thinkphp\library\think\View.php	/^    public function replace($content, $replace = '')$/;"	v
request	thinkphp\library\think\View.php	/^        $request = Container::get('request');$/;"	v
root	thinkphp\library\think\View.php	/^        $root    = $request->rootUrl();$/;"	v
share	thinkphp\library\think\View.php	/^    public function share($name, $value = '')$/;"	f
type	thinkphp\library\think\View.php	/^            $type    = $options;$/;"	v
type	thinkphp\library\think\View.php	/^            $type = !empty($options['type']) ? $options['type'] : 'Think';$/;"	v
value	thinkphp\library\think\View.php	/^    public function assign($name, $value = '')$/;"	v
value	thinkphp\library\think\View.php	/^    public function config($name, $value = null)$/;"	v
value	thinkphp\library\think\View.php	/^    public function share($name, $value = '')$/;"	v
var	thinkphp\library\think\View.php	/^    protected static $var = [];$/;"	v
vars	thinkphp\library\think\View.php	/^        $vars = array_merge(self::$var, $this->data, $vars);$/;"	v
vars	thinkphp\library\think\View.php	/^    public function display($content, $vars = [], $replace = [], $config = [])$/;"	v
vars	thinkphp\library\think\View.php	/^    public function fetch($template = '', $vars = [], $replace = [], $config = [], $renderContent = false)$/;"	v
Driver	thinkphp\library\think\cache\Driver.php	/^abstract class Driver$/;"	c
clear	thinkphp\library\think\cache\Driver.php	/^    abstract public function clear($tag = null);$/;"	f
dec	thinkphp\library\think\cache\Driver.php	/^    abstract public function dec($name, $step = 1);$/;"	f
default	thinkphp\library\think\cache\Driver.php	/^    abstract public function get($name, $default = false);$/;"	v
expire	thinkphp\library\think\cache\Driver.php	/^    abstract public function set($name, $value, $expire = null);$/;"	v
expire	thinkphp\library\think\cache\Driver.php	/^    public function remember($name, $value, $expire = null)$/;"	v
get	thinkphp\library\think\cache\Driver.php	/^    abstract public function get($name, $default = false);$/;"	f
getCacheKey	thinkphp\library\think\cache\Driver.php	/^    protected function getCacheKey($name)$/;"	f
getReadTimes	thinkphp\library\think\cache\Driver.php	/^    public function getReadTimes()$/;"	f
getTagItem	thinkphp\library\think\cache\Driver.php	/^    protected function getTagItem($tag)$/;"	f
getWriteTimes	thinkphp\library\think\cache\Driver.php	/^    public function getWriteTimes()$/;"	f
handler	thinkphp\library\think\cache\Driver.php	/^    protected $handler    = null;$/;"	v
handler	thinkphp\library\think\cache\Driver.php	/^    public function handler()$/;"	f
has	thinkphp\library\think\cache\Driver.php	/^    abstract public function has($name);$/;"	f
inc	thinkphp\library\think\cache\Driver.php	/^    abstract public function inc($name, $step = 1);$/;"	f
key	thinkphp\library\think\cache\Driver.php	/^            $key       = 'tag_' . md5($this->tag);$/;"	v
key	thinkphp\library\think\cache\Driver.php	/^            $key = 'tag_' . md5($name);$/;"	v
key	thinkphp\library\think\cache\Driver.php	/^        $key   = 'tag_' . md5($tag);$/;"	v
keys	thinkphp\library\think\cache\Driver.php	/^                $keys = explode(',', $keys);$/;"	v
keys	thinkphp\library\think\cache\Driver.php	/^            $keys = array_map([$this, 'getCacheKey'], $keys);$/;"	v
keys	thinkphp\library\think\cache\Driver.php	/^    public function tag($name, $keys = null, $overlay = false)$/;"	v
options	thinkphp\library\think\cache\Driver.php	/^    protected $options    = [];$/;"	v
pull	thinkphp\library\think\cache\Driver.php	/^    public function pull($name)$/;"	f
readTimes	thinkphp\library\think\cache\Driver.php	/^    protected $readTimes  = 0;$/;"	v
remember	thinkphp\library\think\cache\Driver.php	/^    public function remember($name, $value, $expire = null)$/;"	f
result	thinkphp\library\think\cache\Driver.php	/^        $result = $this->get($name, false);$/;"	v
rm	thinkphp\library\think\cache\Driver.php	/^    abstract public function rm($name);$/;"	f
set	thinkphp\library\think\cache\Driver.php	/^    abstract public function set($name, $value, $expire = null);$/;"	f
setTagItem	thinkphp\library\think\cache\Driver.php	/^    protected function setTagItem($name)$/;"	f
step	thinkphp\library\think\cache\Driver.php	/^    abstract public function dec($name, $step = 1);$/;"	v
step	thinkphp\library\think\cache\Driver.php	/^    abstract public function inc($name, $step = 1);$/;"	v
tag	thinkphp\library\think\cache\Driver.php	/^            $this->tag = $name;$/;"	v
tag	thinkphp\library\think\cache\Driver.php	/^            $this->tag = null;$/;"	v
tag	thinkphp\library\think\cache\Driver.php	/^    protected $tag;$/;"	v
tag	thinkphp\library\think\cache\Driver.php	/^    public function tag($name, $keys = null, $overlay = false)$/;"	f
value	thinkphp\library\think\cache\Driver.php	/^                    $value = Container::getInstance()->invokeFunction($value);$/;"	v
value	thinkphp\library\think\cache\Driver.php	/^                $value   = explode(',', $this->get($key));$/;"	v
value	thinkphp\library\think\cache\Driver.php	/^                $value   = implode(',', array_unique($value));$/;"	v
value	thinkphp\library\think\cache\Driver.php	/^                $value = $keys;$/;"	v
value	thinkphp\library\think\cache\Driver.php	/^                $value = $name;$/;"	v
value	thinkphp\library\think\cache\Driver.php	/^                $value = array_unique(array_merge($this->getTagItem($name), $keys));$/;"	v
value	thinkphp\library\think\cache\Driver.php	/^            $value = $this->get($name);$/;"	v
value	thinkphp\library\think\cache\Driver.php	/^        $value = $this->get($key);$/;"	v
writeTimes	thinkphp\library\think\cache\Driver.php	/^    protected $writeTimes = 0;$/;"	v
File	thinkphp\library\think\cache\driver\File.php	/^class File extends Driver$/;"	c
__construct	thinkphp\library\think\cache\driver\File.php	/^    public function __construct($options = [])$/;"	f
clear	thinkphp\library\think\cache\driver\File.php	/^    public function clear($tag = null)$/;"	f
content	thinkphp\library\think\cache\driver\File.php	/^                $content = gzuncompress($content);$/;"	v
content	thinkphp\library\think\cache\driver\File.php	/^            $content = substr($content, 32);$/;"	v
content	thinkphp\library\think\cache\driver\File.php	/^            $content = unserialize($content);$/;"	v
content	thinkphp\library\think\cache\driver\File.php	/^        $content = file_get_contents($filename);$/;"	v
data	thinkphp\library\think\cache\driver\File.php	/^            $data = gzcompress($data, 3);$/;"	v
data	thinkphp\library\think\cache\driver\File.php	/^        $data   = "<?php\\n\/\/" . sprintf('%012d', $expire) . "\\n exit();?>\\n" . $data;$/;"	v
data	thinkphp\library\think\cache\driver\File.php	/^        $data = serialize($value);$/;"	v
dec	thinkphp\library\think\cache\driver\File.php	/^    public function dec($name, $step = 1)$/;"	f
default	thinkphp\library\think\cache\driver\File.php	/^    public function get($name, $default = false)$/;"	v
dir	thinkphp\library\think\cache\driver\File.php	/^        $dir      = dirname($filename);$/;"	v
expire	thinkphp\library\think\cache\driver\File.php	/^            $expire = $expire->getTimestamp() - time();$/;"	v
expire	thinkphp\library\think\cache\driver\File.php	/^            $expire = $this->options['expire'];$/;"	v
expire	thinkphp\library\think\cache\driver\File.php	/^            $expire = (int) substr($content, 8, 12);$/;"	v
expire	thinkphp\library\think\cache\driver\File.php	/^    public function set($name, $value, $expire = null)$/;"	v
filename	thinkphp\library\think\cache\driver\File.php	/^        $filename = $this->getCacheKey($name);$/;"	v
filename	thinkphp\library\think\cache\driver\File.php	/^        $filename = $this->options['path'] . $name . '.php';$/;"	v
files	thinkphp\library\think\cache\driver\File.php	/^        $files = (array) glob($this->options['path'] . ($this->options['prefix'] ? $this->options['prefix'] . DIRECTORY_SEPARATOR : '') . '*');$/;"	v
first	thinkphp\library\think\cache\driver\File.php	/^            $first = true;$/;"	v
get	thinkphp\library\think\cache\driver\File.php	/^    public function get($name, $default = false)$/;"	f
getCacheKey	thinkphp\library\think\cache\driver\File.php	/^    protected function getCacheKey($name)$/;"	f
has	thinkphp\library\think\cache\driver\File.php	/^    public function has($name)$/;"	f
inc	thinkphp\library\think\cache\driver\File.php	/^    public function inc($name, $step = 1)$/;"	f
init	thinkphp\library\think\cache\driver\File.php	/^    private function init()$/;"	f
keys	thinkphp\library\think\cache\driver\File.php	/^            $keys = $this->getTagItem($tag);$/;"	v
name	thinkphp\library\think\cache\driver\File.php	/^            $name = $this->options['prefix'] . DIRECTORY_SEPARATOR . $name;$/;"	v
name	thinkphp\library\think\cache\driver\File.php	/^            $name = substr($name, 0, 2) . DIRECTORY_SEPARATOR . substr($name, 2);$/;"	v
name	thinkphp\library\think\cache\driver\File.php	/^        $name = hash($this->options['hash_type'], $name);$/;"	v
options	thinkphp\library\think\cache\driver\File.php	/^            $this->options = array_merge($this->options, $options);$/;"	v
options	thinkphp\library\think\cache\driver\File.php	/^    protected $options = [$/;"	v
result	thinkphp\library\think\cache\driver\File.php	/^        $result = file_put_contents($filename, $data);$/;"	v
rm	thinkphp\library\think\cache\driver\File.php	/^    public function rm($name)$/;"	f
set	thinkphp\library\think\cache\driver\File.php	/^    public function set($name, $value, $expire = null)$/;"	f
step	thinkphp\library\think\cache\driver\File.php	/^    public function dec($name, $step = 1)$/;"	v
step	thinkphp\library\think\cache\driver\File.php	/^    public function inc($name, $step = 1)$/;"	v
unlink	thinkphp\library\think\cache\driver\File.php	/^    private function unlink($path)$/;"	f
value	thinkphp\library\think\cache\driver\File.php	/^            $value = $step;$/;"	v
value	thinkphp\library\think\cache\driver\File.php	/^            $value = $this->get($name) + $step;$/;"	v
value	thinkphp\library\think\cache\driver\File.php	/^            $value = $this->get($name) - $step;$/;"	v
Lite	thinkphp\library\think\cache\driver\Lite.php	/^class Lite extends Driver$/;"	c
__construct	thinkphp\library\think\cache\driver\Lite.php	/^    public function __construct($options = [])$/;"	f
clear	thinkphp\library\think\cache\driver\Lite.php	/^    public function clear($tag = null)$/;"	f
dec	thinkphp\library\think\cache\driver\Lite.php	/^    public function dec($name, $step = 1)$/;"	f
default	thinkphp\library\think\cache\driver\Lite.php	/^    public function get($name, $default = false)$/;"	v
expire	thinkphp\library\think\cache\driver\Lite.php	/^            $expire = $expire->getTimestamp();$/;"	v
expire	thinkphp\library\think\cache\driver\Lite.php	/^            $expire = $this->options['expire'];$/;"	v
expire	thinkphp\library\think\cache\driver\Lite.php	/^            $expire = 0 === $expire ? 10 * 365 * 24 * 3600 : $expire;$/;"	v
expire	thinkphp\library\think\cache\driver\Lite.php	/^            $expire = time() + $expire;$/;"	v
expire	thinkphp\library\think\cache\driver\Lite.php	/^    public function set($name, $value, $expire = null)$/;"	v
filename	thinkphp\library\think\cache\driver\Lite.php	/^        $filename = $this->getCacheKey($name);$/;"	v
first	thinkphp\library\think\cache\driver\Lite.php	/^            $first = true;$/;"	v
get	thinkphp\library\think\cache\driver\Lite.php	/^    public function get($name, $default = false)$/;"	f
getCacheKey	thinkphp\library\think\cache\driver\Lite.php	/^    protected function getCacheKey($name)$/;"	f
has	thinkphp\library\think\cache\driver\Lite.php	/^    public function has($name)$/;"	f
inc	thinkphp\library\think\cache\driver\Lite.php	/^    public function inc($name, $step = 1)$/;"	f
keys	thinkphp\library\think\cache\driver\Lite.php	/^            $keys = $this->getTagItem($tag);$/;"	v
mtime	thinkphp\library\think\cache\driver\Lite.php	/^            $mtime = filemtime($filename);$/;"	v
options	thinkphp\library\think\cache\driver\Lite.php	/^            $this->options = array_merge($this->options, $options);$/;"	v
options	thinkphp\library\think\cache\driver\Lite.php	/^    protected $options = [$/;"	v
ret	thinkphp\library\think\cache\driver\Lite.php	/^        $ret = file_put_contents($filename, ("<?php return " . var_export($value, true) . ";"));$/;"	v
rm	thinkphp\library\think\cache\driver\Lite.php	/^    public function rm($name)$/;"	f
set	thinkphp\library\think\cache\driver\Lite.php	/^    public function set($name, $value, $expire = null)$/;"	f
step	thinkphp\library\think\cache\driver\Lite.php	/^    public function dec($name, $step = 1)$/;"	v
step	thinkphp\library\think\cache\driver\Lite.php	/^    public function inc($name, $step = 1)$/;"	v
value	thinkphp\library\think\cache\driver\Lite.php	/^            $value = $step;$/;"	v
value	thinkphp\library\think\cache\driver\Lite.php	/^            $value = $this->get($name) + $step;$/;"	v
value	thinkphp\library\think\cache\driver\Lite.php	/^            $value = $this->get($name) - $step;$/;"	v
Memcache	thinkphp\library\think\cache\driver\Memcache.php	/^class Memcache extends Driver$/;"	c
__construct	thinkphp\library\think\cache\driver\Memcache.php	/^    public function __construct($options = [])$/;"	f
clear	thinkphp\library\think\cache\driver\Memcache.php	/^    public function clear($tag = null)$/;"	f
dec	thinkphp\library\think\cache\driver\Memcache.php	/^    public function dec($name, $step = 1)$/;"	f
default	thinkphp\library\think\cache\driver\Memcache.php	/^    public function get($name, $default = false)$/;"	v
expire	thinkphp\library\think\cache\driver\Memcache.php	/^            $expire = $expire->getTimestamp() - time();$/;"	v
expire	thinkphp\library\think\cache\driver\Memcache.php	/^            $expire = $this->options['expire'];$/;"	v
expire	thinkphp\library\think\cache\driver\Memcache.php	/^    public function set($name, $value, $expire = null)$/;"	v
first	thinkphp\library\think\cache\driver\Memcache.php	/^            $first = true;$/;"	v
get	thinkphp\library\think\cache\driver\Memcache.php	/^    public function get($name, $default = false)$/;"	f
handler	thinkphp\library\think\cache\driver\Memcache.php	/^        $this->handler = new \\Memcache;$/;"	v
has	thinkphp\library\think\cache\driver\Memcache.php	/^    public function has($name)$/;"	f
hosts	thinkphp\library\think\cache\driver\Memcache.php	/^        $hosts = explode(',', $this->options['host']);$/;"	v
i	thinkphp\library\think\cache\driver\Memcache.php	/^        foreach ((array) $hosts as $i => $host) {$/;"	v
inc	thinkphp\library\think\cache\driver\Memcache.php	/^    public function inc($name, $step = 1)$/;"	f
key	thinkphp\library\think\cache\driver\Memcache.php	/^        $key   = $this->getCacheKey($name);$/;"	v
key	thinkphp\library\think\cache\driver\Memcache.php	/^        $key = $this->getCacheKey($name);$/;"	v
keys	thinkphp\library\think\cache\driver\Memcache.php	/^            $keys = $this->getTagItem($tag);$/;"	v
options	thinkphp\library\think\cache\driver\Memcache.php	/^            $this->options = array_merge($this->options, $options);$/;"	v
options	thinkphp\library\think\cache\driver\Memcache.php	/^    protected $options = [$/;"	v
port	thinkphp\library\think\cache\driver\Memcache.php	/^            $port = isset($ports[$i]) ? $ports[$i] : $ports[0];$/;"	v
ports	thinkphp\library\think\cache\driver\Memcache.php	/^        $ports = explode(',', $this->options['port']);$/;"	v
res	thinkphp\library\think\cache\driver\Memcache.php	/^        $res   = $this->handler->set($key, $value);$/;"	v
result	thinkphp\library\think\cache\driver\Memcache.php	/^        $result = $this->handler->get($this->getCacheKey($name));$/;"	v
rm	thinkphp\library\think\cache\driver\Memcache.php	/^    public function rm($name, $ttl = false)$/;"	f
set	thinkphp\library\think\cache\driver\Memcache.php	/^    public function set($name, $value, $expire = null)$/;"	f
step	thinkphp\library\think\cache\driver\Memcache.php	/^    public function dec($name, $step = 1)$/;"	v
step	thinkphp\library\think\cache\driver\Memcache.php	/^    public function inc($name, $step = 1)$/;"	v
ttl	thinkphp\library\think\cache\driver\Memcache.php	/^    public function rm($name, $ttl = false)$/;"	v
value	thinkphp\library\think\cache\driver\Memcache.php	/^        $value = $this->handler->get($key) - $step;$/;"	v
Memcached	thinkphp\library\think\cache\driver\Memcached.php	/^class Memcached extends Driver$/;"	c
__construct	thinkphp\library\think\cache\driver\Memcached.php	/^    public function __construct($options = [])$/;"	f
clear	thinkphp\library\think\cache\driver\Memcached.php	/^    public function clear($tag = null)$/;"	f
dec	thinkphp\library\think\cache\driver\Memcached.php	/^    public function dec($name, $step = 1)$/;"	f
default	thinkphp\library\think\cache\driver\Memcached.php	/^    public function get($name, $default = false)$/;"	v
expire	thinkphp\library\think\cache\driver\Memcached.php	/^            $expire = $expire->getTimestamp() - time();$/;"	v
expire	thinkphp\library\think\cache\driver\Memcached.php	/^            $expire = $this->options['expire'];$/;"	v
expire	thinkphp\library\think\cache\driver\Memcached.php	/^    public function set($name, $value, $expire = null)$/;"	v
first	thinkphp\library\think\cache\driver\Memcached.php	/^            $first = true;$/;"	v
get	thinkphp\library\think\cache\driver\Memcached.php	/^    public function get($name, $default = false)$/;"	f
handler	thinkphp\library\think\cache\driver\Memcached.php	/^        $this->handler = new \\Memcached;$/;"	v
has	thinkphp\library\think\cache\driver\Memcached.php	/^    public function has($name)$/;"	f
hosts	thinkphp\library\think\cache\driver\Memcached.php	/^        $hosts = explode(',', $this->options['host']);$/;"	v
i	thinkphp\library\think\cache\driver\Memcached.php	/^        foreach ((array) $hosts as $i => $host) {$/;"	v
inc	thinkphp\library\think\cache\driver\Memcached.php	/^    public function inc($name, $step = 1)$/;"	f
key	thinkphp\library\think\cache\driver\Memcached.php	/^        $key   = $this->getCacheKey($name);$/;"	v
key	thinkphp\library\think\cache\driver\Memcached.php	/^        $key = $this->getCacheKey($name);$/;"	v
keys	thinkphp\library\think\cache\driver\Memcached.php	/^            $keys = $this->getTagItem($tag);$/;"	v
options	thinkphp\library\think\cache\driver\Memcached.php	/^            $this->options = array_merge($this->options, $options);$/;"	v
options	thinkphp\library\think\cache\driver\Memcached.php	/^    protected $options = [$/;"	v
ports	thinkphp\library\think\cache\driver\Memcached.php	/^        $ports = explode(',', $this->options['port']);$/;"	v
res	thinkphp\library\think\cache\driver\Memcached.php	/^        $res   = $this->handler->set($key, $value);$/;"	v
result	thinkphp\library\think\cache\driver\Memcached.php	/^        $result = $this->handler->get($this->getCacheKey($name));$/;"	v
rm	thinkphp\library\think\cache\driver\Memcached.php	/^    public function rm($name, $ttl = false)$/;"	f
servers	thinkphp\library\think\cache\driver\Memcached.php	/^        $servers = [];$/;"	v
set	thinkphp\library\think\cache\driver\Memcached.php	/^    public function set($name, $value, $expire = null)$/;"	f
step	thinkphp\library\think\cache\driver\Memcached.php	/^    public function dec($name, $step = 1)$/;"	v
step	thinkphp\library\think\cache\driver\Memcached.php	/^    public function inc($name, $step = 1)$/;"	v
ttl	thinkphp\library\think\cache\driver\Memcached.php	/^    public function rm($name, $ttl = false)$/;"	v
value	thinkphp\library\think\cache\driver\Memcached.php	/^        $value = $this->handler->get($key) - $step;$/;"	v
Redis	thinkphp\library\think\cache\driver\Redis.php	/^class Redis extends Driver$/;"	c
__construct	thinkphp\library\think\cache\driver\Redis.php	/^    public function __construct($options = [])$/;"	f
clear	thinkphp\library\think\cache\driver\Redis.php	/^    public function clear($tag = null)$/;"	f
dec	thinkphp\library\think\cache\driver\Redis.php	/^    public function dec($name, $step = 1)$/;"	f
default	thinkphp\library\think\cache\driver\Redis.php	/^    public function get($name, $default = false)$/;"	v
expire	thinkphp\library\think\cache\driver\Redis.php	/^            $expire = $expire->getTimestamp() - time();$/;"	v
expire	thinkphp\library\think\cache\driver\Redis.php	/^            $expire = $this->options['expire'];$/;"	v
expire	thinkphp\library\think\cache\driver\Redis.php	/^    public function set($name, $value, $expire = null)$/;"	v
first	thinkphp\library\think\cache\driver\Redis.php	/^            $first = true;$/;"	v
func	thinkphp\library\think\cache\driver\Redis.php	/^        $func = $this->options['persistent'] ? 'pconnect' : 'connect';$/;"	v
get	thinkphp\library\think\cache\driver\Redis.php	/^    public function get($name, $default = false)$/;"	f
handler	thinkphp\library\think\cache\driver\Redis.php	/^        $this->handler = new \\Redis;$/;"	v
has	thinkphp\library\think\cache\driver\Redis.php	/^    public function has($name)$/;"	f
inc	thinkphp\library\think\cache\driver\Redis.php	/^    public function inc($name, $step = 1)$/;"	f
jsonData	thinkphp\library\think\cache\driver\Redis.php	/^        $jsonData = json_decode($value, true);$/;"	v
key	thinkphp\library\think\cache\driver\Redis.php	/^        $key = $this->getCacheKey($name);$/;"	v
keys	thinkphp\library\think\cache\driver\Redis.php	/^            $keys = $this->getTagItem($tag);$/;"	v
options	thinkphp\library\think\cache\driver\Redis.php	/^            $this->options = array_merge($this->options, $options);$/;"	v
options	thinkphp\library\think\cache\driver\Redis.php	/^    protected $options = [$/;"	v
result	thinkphp\library\think\cache\driver\Redis.php	/^            $result = $this->handler->set($key, $value);$/;"	v
result	thinkphp\library\think\cache\driver\Redis.php	/^            $result = $this->handler->setex($key, $expire, $value);$/;"	v
rm	thinkphp\library\think\cache\driver\Redis.php	/^    public function rm($name)$/;"	f
set	thinkphp\library\think\cache\driver\Redis.php	/^    public function set($name, $value, $expire = null)$/;"	f
step	thinkphp\library\think\cache\driver\Redis.php	/^    public function dec($name, $step = 1)$/;"	v
step	thinkphp\library\think\cache\driver\Redis.php	/^    public function inc($name, $step = 1)$/;"	v
value	thinkphp\library\think\cache\driver\Redis.php	/^        $value = $this->handler->get($this->getCacheKey($name));$/;"	v
value	thinkphp\library\think\cache\driver\Redis.php	/^        $value = (is_object($value) || is_array($value)) ? json_encode($value) : $value;$/;"	v
Sqlite	thinkphp\library\think\cache\driver\Sqlite.php	/^class Sqlite extends Driver$/;"	c
__construct	thinkphp\library\think\cache\driver\Sqlite.php	/^    public function __construct($options = [])$/;"	f
clear	thinkphp\library\think\cache\driver\Sqlite.php	/^    public function clear($tag = null)$/;"	f
content	thinkphp\library\think\cache\driver\Sqlite.php	/^                $content = gzuncompress($content);$/;"	v
content	thinkphp\library\think\cache\driver\Sqlite.php	/^            $content = sqlite_fetch_single($result);$/;"	v
dec	thinkphp\library\think\cache\driver\Sqlite.php	/^    public function dec($name, $step = 1)$/;"	f
default	thinkphp\library\think\cache\driver\Sqlite.php	/^    public function get($name, $default = false)$/;"	v
expire	thinkphp\library\think\cache\driver\Sqlite.php	/^            $expire = $expire->getTimestamp();$/;"	v
expire	thinkphp\library\think\cache\driver\Sqlite.php	/^            $expire = $this->options['expire'];$/;"	v
expire	thinkphp\library\think\cache\driver\Sqlite.php	/^            $expire = (0 == $expire) ? 0 : (time() + $expire); \/\/缓存有效期为0表示永久缓存$/;"	v
expire	thinkphp\library\think\cache\driver\Sqlite.php	/^    public function set($name, $value, $expire = null)$/;"	v
func	thinkphp\library\think\cache\driver\Sqlite.php	/^        $func = $this->options['persistent'] ? 'sqlite_popen' : 'sqlite_open';$/;"	v
get	thinkphp\library\think\cache\driver\Sqlite.php	/^    public function get($name, $default = false)$/;"	f
getCacheKey	thinkphp\library\think\cache\driver\Sqlite.php	/^    protected function getCacheKey($name)$/;"	f
handler	thinkphp\library\think\cache\driver\Sqlite.php	/^        $this->handler = $func($this->options['db']);$/;"	v
has	thinkphp\library\think\cache\driver\Sqlite.php	/^    public function has($name)$/;"	f
inc	thinkphp\library\think\cache\driver\Sqlite.php	/^    public function inc($name, $step = 1)$/;"	f
name	thinkphp\library\think\cache\driver\Sqlite.php	/^            $name = sqlite_escape_string($tag);$/;"	v
name	thinkphp\library\think\cache\driver\Sqlite.php	/^        $name = $this->getCacheKey($name);$/;"	v
options	thinkphp\library\think\cache\driver\Sqlite.php	/^            $this->options = array_merge($this->options, $options);$/;"	v
options	thinkphp\library\think\cache\driver\Sqlite.php	/^    protected $options = [$/;"	v
result	thinkphp\library\think\cache\driver\Sqlite.php	/^        $result = sqlite_query($this->handler, $sql);$/;"	v
rm	thinkphp\library\think\cache\driver\Sqlite.php	/^    public function rm($name)$/;"	f
set	thinkphp\library\think\cache\driver\Sqlite.php	/^    public function set($name, $value, $expire = null)$/;"	f
sql	thinkphp\library\think\cache\driver\Sqlite.php	/^            $sql  = 'DELETE FROM ' . $this->options['table'] . ' WHERE tag=\\'' . $name . '\\'';$/;"	v
sql	thinkphp\library\think\cache\driver\Sqlite.php	/^        $sql    = 'SELECT value FROM ' . $this->options['table'] . ' WHERE var=\\'' . $name . '\\' AND (expire=0 OR expire >' . $_SERVER['REQUEST_TIME'] . ') LIMIT 1';$/;"	v
sql	thinkphp\library\think\cache\driver\Sqlite.php	/^        $sql = 'DELETE FROM ' . $this->options['table'] . ' WHERE var=\\'' . $name . '\\'';$/;"	v
sql	thinkphp\library\think\cache\driver\Sqlite.php	/^        $sql = 'DELETE FROM ' . $this->options['table'];$/;"	v
sql	thinkphp\library\think\cache\driver\Sqlite.php	/^        $sql = 'REPLACE INTO ' . $this->options['table'] . ' (var, value, expire, tag) VALUES (\\'' . $name . '\\', \\'' . $value . '\\', \\'' . $expire . '\\', \\'' . $tag . '\\')';$/;"	v
sql	thinkphp\library\think\cache\driver\Sqlite.php	/^        $sql = 'SELECT value FROM ' . $this->options['table'] . ' WHERE var=\\'' . $name . '\\' AND (expire=0 OR expire >' . $_SERVER['REQUEST_TIME'] . ') LIMIT 1';$/;"	v
step	thinkphp\library\think\cache\driver\Sqlite.php	/^    public function dec($name, $step = 1)$/;"	v
step	thinkphp\library\think\cache\driver\Sqlite.php	/^    public function inc($name, $step = 1)$/;"	v
tag	thinkphp\library\think\cache\driver\Sqlite.php	/^            $tag       = $this->tag;$/;"	v
tag	thinkphp\library\think\cache\driver\Sqlite.php	/^            $tag = '';$/;"	v
tag	thinkphp\library\think\cache\driver\Sqlite.php	/^            $this->tag = null;$/;"	v
value	thinkphp\library\think\cache\driver\Sqlite.php	/^            $value = $step;$/;"	v
value	thinkphp\library\think\cache\driver\Sqlite.php	/^            $value = $this->get($name) + $step;$/;"	v
value	thinkphp\library\think\cache\driver\Sqlite.php	/^            $value = $this->get($name) - $step;$/;"	v
value	thinkphp\library\think\cache\driver\Sqlite.php	/^            $value = gzcompress($value, 3);$/;"	v
value	thinkphp\library\think\cache\driver\Sqlite.php	/^        $value = sqlite_escape_string(serialize($value));$/;"	v
Wincache	thinkphp\library\think\cache\driver\Wincache.php	/^class Wincache extends Driver$/;"	c
__construct	thinkphp\library\think\cache\driver\Wincache.php	/^    public function __construct($options = [])$/;"	f
clear	thinkphp\library\think\cache\driver\Wincache.php	/^    public function clear($tag = null)$/;"	f
dec	thinkphp\library\think\cache\driver\Wincache.php	/^    public function dec($name, $step = 1)$/;"	f
default	thinkphp\library\think\cache\driver\Wincache.php	/^    public function get($name, $default = false)$/;"	v
expire	thinkphp\library\think\cache\driver\Wincache.php	/^            $expire = $expire->getTimestamp() - time();$/;"	v
expire	thinkphp\library\think\cache\driver\Wincache.php	/^            $expire = $this->options['expire'];$/;"	v
expire	thinkphp\library\think\cache\driver\Wincache.php	/^    public function set($name, $value, $expire = null)$/;"	v
first	thinkphp\library\think\cache\driver\Wincache.php	/^            $first = true;$/;"	v
get	thinkphp\library\think\cache\driver\Wincache.php	/^    public function get($name, $default = false)$/;"	f
has	thinkphp\library\think\cache\driver\Wincache.php	/^    public function has($name)$/;"	f
inc	thinkphp\library\think\cache\driver\Wincache.php	/^    public function inc($name, $step = 1)$/;"	f
key	thinkphp\library\think\cache\driver\Wincache.php	/^        $key = $this->getCacheKey($name);$/;"	v
keys	thinkphp\library\think\cache\driver\Wincache.php	/^            $keys = $this->getTagItem($tag);$/;"	v
options	thinkphp\library\think\cache\driver\Wincache.php	/^            $this->options = array_merge($this->options, $options);$/;"	v
options	thinkphp\library\think\cache\driver\Wincache.php	/^    protected $options = [$/;"	v
rm	thinkphp\library\think\cache\driver\Wincache.php	/^    public function rm($name)$/;"	f
set	thinkphp\library\think\cache\driver\Wincache.php	/^    public function set($name, $value, $expire = null)$/;"	f
step	thinkphp\library\think\cache\driver\Wincache.php	/^    public function dec($name, $step = 1)$/;"	v
step	thinkphp\library\think\cache\driver\Wincache.php	/^    public function inc($name, $step = 1)$/;"	v
Xcache	thinkphp\library\think\cache\driver\Xcache.php	/^class Xcache extends Driver$/;"	c
__construct	thinkphp\library\think\cache\driver\Xcache.php	/^    public function __construct($options = [])$/;"	f
clear	thinkphp\library\think\cache\driver\Xcache.php	/^    public function clear($tag = null)$/;"	f
dec	thinkphp\library\think\cache\driver\Xcache.php	/^    public function dec($name, $step = 1)$/;"	f
default	thinkphp\library\think\cache\driver\Xcache.php	/^    public function get($name, $default = false)$/;"	v
expire	thinkphp\library\think\cache\driver\Xcache.php	/^            $expire = $expire->getTimestamp() - time();$/;"	v
expire	thinkphp\library\think\cache\driver\Xcache.php	/^            $expire = $this->options['expire'];$/;"	v
expire	thinkphp\library\think\cache\driver\Xcache.php	/^    public function set($name, $value, $expire = null)$/;"	v
first	thinkphp\library\think\cache\driver\Xcache.php	/^            $first = true;$/;"	v
get	thinkphp\library\think\cache\driver\Xcache.php	/^    public function get($name, $default = false)$/;"	f
has	thinkphp\library\think\cache\driver\Xcache.php	/^    public function has($name)$/;"	f
inc	thinkphp\library\think\cache\driver\Xcache.php	/^    public function inc($name, $step = 1)$/;"	f
key	thinkphp\library\think\cache\driver\Xcache.php	/^        $key = $this->getCacheKey($name);$/;"	v
keys	thinkphp\library\think\cache\driver\Xcache.php	/^            $keys = $this->getTagItem($tag);$/;"	v
options	thinkphp\library\think\cache\driver\Xcache.php	/^            $this->options = array_merge($this->options, $options);$/;"	v
options	thinkphp\library\think\cache\driver\Xcache.php	/^    protected $options = [$/;"	v
rm	thinkphp\library\think\cache\driver\Xcache.php	/^    public function rm($name)$/;"	f
set	thinkphp\library\think\cache\driver\Xcache.php	/^    public function set($name, $value, $expire = null)$/;"	f
step	thinkphp\library\think\cache\driver\Xcache.php	/^    public function dec($name, $step = 1)$/;"	v
step	thinkphp\library\think\cache\driver\Xcache.php	/^    public function inc($name, $step = 1)$/;"	v
Ini	thinkphp\library\think\config\driver\Ini.php	/^class Ini$/;"	c
parse	thinkphp\library\think\config\driver\Ini.php	/^    public function parse($config)$/;"	f
Json	thinkphp\library\think\config\driver\Json.php	/^class Json$/;"	c
config	thinkphp\library\think\config\driver\Json.php	/^            $config = file_get_contents($config);$/;"	v
parse	thinkphp\library\think\config\driver\Json.php	/^    public function parse($config)$/;"	f
result	thinkphp\library\think\config\driver\Json.php	/^        $result = json_decode($config, true);$/;"	v
Xml	thinkphp\library\think\config\driver\Xml.php	/^class Xml$/;"	c
content	thinkphp\library\think\config\driver\Xml.php	/^            $content = simplexml_load_file($config);$/;"	v
content	thinkphp\library\think\config\driver\Xml.php	/^            $content = simplexml_load_string($config);$/;"	v
key	thinkphp\library\think\config\driver\Xml.php	/^        foreach ($result as $key => $val) {$/;"	v
parse	thinkphp\library\think\config\driver\Xml.php	/^    public function parse($config)$/;"	f
result	thinkphp\library\think\config\driver\Xml.php	/^        $result = (array) $content;$/;"	v
Command	thinkphp\library\think\console\Command.php	/^class Command$/;"	c
__construct	thinkphp\library\think\console\Command.php	/^    public function __construct($name = null)$/;"	f
addArgument	thinkphp\library\think\console\Command.php	/^    public function addArgument($name, $mode = null, $description = '', $default = null)$/;"	f
addOption	thinkphp\library\think\console\Command.php	/^    public function addOption($name, $shortcut = null, $mode = null, $description = '', $default = null)$/;"	f
addUsage	thinkphp\library\think\console\Command.php	/^    public function addUsage($usage)$/;"	f
aliases	thinkphp\library\think\console\Command.php	/^        $this->aliases = $aliases;$/;"	v
aliases	thinkphp\library\think\console\Command.php	/^    private $aliases = [];$/;"	v
code	thinkphp\library\think\console\Command.php	/^                $code = \\Closure::bind($code, $this);$/;"	v
code	thinkphp\library\think\console\Command.php	/^        $this->code = $code;$/;"	v
code	thinkphp\library\think\console\Command.php	/^    private $code;$/;"	v
configure	thinkphp\library\think\console\Command.php	/^    protected function configure()$/;"	f
console	thinkphp\library\think\console\Command.php	/^        $this->console = $console;$/;"	v
console	thinkphp\library\think\console\Command.php	/^    private $console;$/;"	v
console	thinkphp\library\think\console\Command.php	/^    public function setConsole(Console $console = null)$/;"	v
consoleDefinitionMerged	thinkphp\library\think\console\Command.php	/^        $this->consoleDefinitionMerged = false;$/;"	v
consoleDefinitionMerged	thinkphp\library\think\console\Command.php	/^        $this->consoleDefinitionMerged = true;$/;"	v
consoleDefinitionMerged	thinkphp\library\think\console\Command.php	/^    private $consoleDefinitionMerged         = false;$/;"	v
consoleDefinitionMergedWithArgs	thinkphp\library\think\console\Command.php	/^            $this->consoleDefinitionMergedWithArgs = true;$/;"	v
consoleDefinitionMergedWithArgs	thinkphp\library\think\console\Command.php	/^    private $consoleDefinitionMergedWithArgs = false;$/;"	v
currentArguments	thinkphp\library\think\console\Command.php	/^            $currentArguments = $this->definition->getArguments();$/;"	v
definition	thinkphp\library\think\console\Command.php	/^            $this->definition = $definition;$/;"	v
definition	thinkphp\library\think\console\Command.php	/^        $this->definition = new Definition();$/;"	v
definition	thinkphp\library\think\console\Command.php	/^    private $definition;$/;"	v
description	thinkphp\library\think\console\Command.php	/^        $this->description = $description;$/;"	v
description	thinkphp\library\think\console\Command.php	/^    private $description;$/;"	v
execute	thinkphp\library\think\console\Command.php	/^    protected function execute(Input $input, Output $output)$/;"	f
getAliases	thinkphp\library\think\console\Command.php	/^    public function getAliases()$/;"	f
getConsole	thinkphp\library\think\console\Command.php	/^    public function getConsole()$/;"	f
getDefinition	thinkphp\library\think\console\Command.php	/^    public function getDefinition()$/;"	f
getDescription	thinkphp\library\think\console\Command.php	/^    public function getDescription()$/;"	f
getHelp	thinkphp\library\think\console\Command.php	/^    public function getHelp()$/;"	f
getName	thinkphp\library\think\console\Command.php	/^    public function getName()$/;"	f
getNativeDefinition	thinkphp\library\think\console\Command.php	/^    public function getNativeDefinition()$/;"	f
getProcessedHelp	thinkphp\library\think\console\Command.php	/^    public function getProcessedHelp()$/;"	f
getSynopsis	thinkphp\library\think\console\Command.php	/^    public function getSynopsis($short = false)$/;"	f
getUsages	thinkphp\library\think\console\Command.php	/^    public function getUsages()$/;"	f
help	thinkphp\library\think\console\Command.php	/^        $this->help = $help;$/;"	v
help	thinkphp\library\think\console\Command.php	/^    private $help;$/;"	v
ignoreValidationErrors	thinkphp\library\think\console\Command.php	/^        $this->ignoreValidationErrors = true;$/;"	v
ignoreValidationErrors	thinkphp\library\think\console\Command.php	/^    private $ignoreValidationErrors          = false;$/;"	v
ignoreValidationErrors	thinkphp\library\think\console\Command.php	/^    public function ignoreValidationErrors()$/;"	f
initialize	thinkphp\library\think\console\Command.php	/^    protected function initialize(Input $input, Output $output)$/;"	f
input	thinkphp\library\think\console\Command.php	/^        $this->input  = $input;$/;"	v
input	thinkphp\library\think\console\Command.php	/^    protected $input;$/;"	v
interact	thinkphp\library\think\console\Command.php	/^    protected function interact(Input $input, Output $output)$/;"	f
isEnabled	thinkphp\library\think\console\Command.php	/^    public function isEnabled()$/;"	f
key	thinkphp\library\think\console\Command.php	/^        $key = $short ? 'short' : 'long';$/;"	v
mergeConsoleDefinition	thinkphp\library\think\console\Command.php	/^    public function mergeConsoleDefinition($mergeArgs = true)$/;"	f
mode	thinkphp\library\think\console\Command.php	/^    public function addArgument($name, $mode = null, $description = '', $default = null)$/;"	v
name	thinkphp\library\think\console\Command.php	/^        $name = $this->name;$/;"	v
name	thinkphp\library\think\console\Command.php	/^        $this->name = $name;$/;"	v
name	thinkphp\library\think\console\Command.php	/^    private $name;$/;"	v
output	thinkphp\library\think\console\Command.php	/^        $this->output = $output;$/;"	v
output	thinkphp\library\think\console\Command.php	/^    protected $output;$/;"	v
placeholders	thinkphp\library\think\console\Command.php	/^        $placeholders = [$/;"	v
r	thinkphp\library\think\console\Command.php	/^            $r = new \\ReflectionFunction($code);$/;"	v
replacements	thinkphp\library\think\console\Command.php	/^        $replacements = [$/;"	v
run	thinkphp\library\think\console\Command.php	/^    public function run(Input $input, Output $output)$/;"	f
setAliases	thinkphp\library\think\console\Command.php	/^    public function setAliases($aliases)$/;"	f
setCode	thinkphp\library\think\console\Command.php	/^    public function setCode(callable $code)$/;"	f
setConsole	thinkphp\library\think\console\Command.php	/^    public function setConsole(Console $console = null)$/;"	f
setDefinition	thinkphp\library\think\console\Command.php	/^    public function setDefinition($definition)$/;"	f
setDescription	thinkphp\library\think\console\Command.php	/^    public function setDescription($description)$/;"	f
setHelp	thinkphp\library\think\console\Command.php	/^    public function setHelp($help)$/;"	f
setName	thinkphp\library\think\console\Command.php	/^    public function setName($name)$/;"	f
shortcut	thinkphp\library\think\console\Command.php	/^    public function addOption($name, $shortcut = null, $mode = null, $description = '', $default = null)$/;"	v
statusCode	thinkphp\library\think\console\Command.php	/^            $statusCode = $this->execute($input, $output);$/;"	v
statusCode	thinkphp\library\think\console\Command.php	/^            $statusCode = call_user_func($this->code, $input, $output);$/;"	v
synopsis	thinkphp\library\think\console\Command.php	/^    private $synopsis = [];$/;"	v
usage	thinkphp\library\think\console\Command.php	/^            $usage = sprintf('%s %s', $this->name, $usage);$/;"	v
usages	thinkphp\library\think\console\Command.php	/^    private $usages   = [];$/;"	v
validateName	thinkphp\library\think\console\Command.php	/^    private function validateName($name)$/;"	f
Input	thinkphp\library\think\console\Input.php	/^class Input$/;"	c
__construct	thinkphp\library\think\console\Input.php	/^    public function __construct($argv = null)$/;"	f
__toString	thinkphp\library\think\console\Input.php	/^    public function __toString()$/;"	f
addLongOption	thinkphp\library\think\console\Input.php	/^    private function addLongOption($name, $value)$/;"	f
addShortOption	thinkphp\library\think\console\Input.php	/^    private function addShortOption($shortcut, $value)$/;"	f
arg	thinkphp\library\think\console\Input.php	/^            $arg = $this->definition->getArgument($c - 1);$/;"	v
arg	thinkphp\library\think\console\Input.php	/^            $arg = $this->definition->getArgument($c);$/;"	v
arguments	thinkphp\library\think\console\Input.php	/^        $this->arguments  = [];$/;"	v
arguments	thinkphp\library\think\console\Input.php	/^    protected $arguments = [];$/;"	v
argv	thinkphp\library\think\console\Input.php	/^            $argv = $_SERVER['argv'];$/;"	v
bind	thinkphp\library\think\console\Input.php	/^    public function bind(Definition $definition)$/;"	f
c	thinkphp\library\think\console\Input.php	/^        $c = count($this->arguments);$/;"	v
default	thinkphp\library\think\console\Input.php	/^    public function getParameterOption($values, $default = false)$/;"	v
definition	thinkphp\library\think\console\Input.php	/^        $this->definition = $definition;$/;"	v
definition	thinkphp\library\think\console\Input.php	/^        $this->definition = new Definition();$/;"	v
definition	thinkphp\library\think\console\Input.php	/^    protected $definition;$/;"	v
escapeToken	thinkphp\library\think\console\Input.php	/^    public function escapeToken($token)$/;"	f
getArgument	thinkphp\library\think\console\Input.php	/^    public function getArgument($name)$/;"	f
getArguments	thinkphp\library\think\console\Input.php	/^    public function getArguments()$/;"	f
getFirstArgument	thinkphp\library\think\console\Input.php	/^    public function getFirstArgument()$/;"	f
getOption	thinkphp\library\think\console\Input.php	/^    public function getOption($name)$/;"	f
getOptions	thinkphp\library\think\console\Input.php	/^    public function getOptions()$/;"	f
getParameterOption	thinkphp\library\think\console\Input.php	/^    public function getParameterOption($values, $default = false)$/;"	f
hasArgument	thinkphp\library\think\console\Input.php	/^    public function hasArgument($name)$/;"	f
hasOption	thinkphp\library\think\console\Input.php	/^    public function hasOption($name)$/;"	f
hasParameterOption	thinkphp\library\think\console\Input.php	/^    public function hasParameterOption($values)$/;"	f
i	thinkphp\library\think\console\Input.php	/^                $this->addLongOption($option->getName(), $i === $len - 1 ? null : substr($name, $i + 1));$/;"	v
interactive	thinkphp\library\think\console\Input.php	/^        $this->interactive = (bool) $interactive;$/;"	v
interactive	thinkphp\library\think\console\Input.php	/^    protected $interactive = true;$/;"	v
isInteractive	thinkphp\library\think\console\Input.php	/^    public function isInteractive()$/;"	f
len	thinkphp\library\think\console\Input.php	/^        $len = strlen($name);$/;"	v
name	thinkphp\library\think\console\Input.php	/^        $name = substr($token, 1);$/;"	v
name	thinkphp\library\think\console\Input.php	/^        $name = substr($token, 2);$/;"	v
next	thinkphp\library\think\console\Input.php	/^            $next = array_shift($this->parsed);$/;"	v
option	thinkphp\library\think\console\Input.php	/^            $option = $this->definition->getOptionForShortcut($name[$i]);$/;"	v
option	thinkphp\library\think\console\Input.php	/^        $option = $this->definition->getOption($name);$/;"	v
options	thinkphp\library\think\console\Input.php	/^        $this->options    = [];$/;"	v
options	thinkphp\library\think\console\Input.php	/^    protected $options = [];$/;"	v
parse	thinkphp\library\think\console\Input.php	/^    protected function parse()$/;"	f
parseArgument	thinkphp\library\think\console\Input.php	/^    private function parseArgument($token)$/;"	f
parseLongOption	thinkphp\library\think\console\Input.php	/^    private function parseLongOption($token)$/;"	f
parseOptions	thinkphp\library\think\console\Input.php	/^                $parseOptions = false;$/;"	v
parseOptions	thinkphp\library\think\console\Input.php	/^        $parseOptions = true;$/;"	v
parseShortOption	thinkphp\library\think\console\Input.php	/^    private function parseShortOption($token)$/;"	f
parseShortOptionSet	thinkphp\library\think\console\Input.php	/^    private function parseShortOptionSet($name)$/;"	f
parsed	thinkphp\library\think\console\Input.php	/^        $this->parsed = $this->tokens;$/;"	v
parsed	thinkphp\library\think\console\Input.php	/^    private $parsed;$/;"	v
pos	thinkphp\library\think\console\Input.php	/^                    if (false !== $pos = strpos($token, '=')) {$/;"	v
pos	thinkphp\library\think\console\Input.php	/^        if (false !== $pos = strpos($name, '=')) {$/;"	v
setArgument	thinkphp\library\think\console\Input.php	/^    public function setArgument($name, $value)$/;"	f
setInteractive	thinkphp\library\think\console\Input.php	/^    public function setInteractive($interactive)$/;"	f
setOption	thinkphp\library\think\console\Input.php	/^    public function setOption($name, $value)$/;"	f
setTokens	thinkphp\library\think\console\Input.php	/^    protected function setTokens(array $tokens)$/;"	f
token	thinkphp\library\think\console\Input.php	/^            $token = array_shift($tokens);$/;"	v
token	thinkphp\library\think\console\Input.php	/^        while (null !== $token = array_shift($this->parsed)) {$/;"	v
tokens	thinkphp\library\think\console\Input.php	/^        $this->tokens = $argv;$/;"	v
tokens	thinkphp\library\think\console\Input.php	/^        $this->tokens = $tokens;$/;"	v
tokens	thinkphp\library\think\console\Input.php	/^        $tokens = $this->tokens;$/;"	v
tokens	thinkphp\library\think\console\Input.php	/^        $tokens = array_map(function ($token) {$/;"	v
tokens	thinkphp\library\think\console\Input.php	/^    private $tokens;$/;"	v
validate	thinkphp\library\think\console\Input.php	/^    public function validate()$/;"	f
value	thinkphp\library\think\console\Input.php	/^                $value = $next;$/;"	v
value	thinkphp\library\think\console\Input.php	/^                $value = $option->isValueOptional() ? $option->getDefault() : true;$/;"	v
value	thinkphp\library\think\console\Input.php	/^                $value = '';$/;"	v
value	thinkphp\library\think\console\Input.php	/^            $value = null;$/;"	v
values	thinkphp\library\think\console\Input.php	/^        $values = (array) $values;$/;"	v
Output	thinkphp\library\think\console\Output.php	/^class Output$/;"	c
__call	thinkphp\library\think\console\Output.php	/^    public function __call($method, $args)$/;"	f
__construct	thinkphp\library\think\console\Output.php	/^    public function __construct($driver = 'console')$/;"	f
answer	thinkphp\library\think\console\Output.php	/^        $answer = $ask->run();$/;"	v
ask	thinkphp\library\think\console\Output.php	/^        $ask    = new Ask($input, $this, $question);$/;"	v
ask	thinkphp\library\think\console\Output.php	/^    public function ask(Input $input, $question, $default = null, $validator = null)$/;"	f
askHidden	thinkphp\library\think\console\Output.php	/^    public function askHidden(Input $input, $question, $validator = null)$/;"	f
askQuestion	thinkphp\library\think\console\Output.php	/^    protected function askQuestion(Input $input, Question $question)$/;"	f
block	thinkphp\library\think\console\Output.php	/^    protected function block($style, $message)$/;"	f
choice	thinkphp\library\think\console\Output.php	/^    public function choice(Input $input, $question, array $choices, $default = null)$/;"	f
class	thinkphp\library\think\console\Output.php	/^        $class = '\\\\think\\\\console\\\\output\\\\driver\\\\' . ucwords($driver);$/;"	v
confirm	thinkphp\library\think\console\Output.php	/^    public function confirm(Input $input, $question, $default = true)$/;"	f
default	thinkphp\library\think\console\Output.php	/^            $default = $values[$default];$/;"	v
default	thinkphp\library\think\console\Output.php	/^    public function ask(Input $input, $question, $default = null, $validator = null)$/;"	v
default	thinkphp\library\think\console\Output.php	/^    public function choice(Input $input, $question, array $choices, $default = null)$/;"	v
default	thinkphp\library\think\console\Output.php	/^    public function confirm(Input $input, $question, $default = true)$/;"	v
describe	thinkphp\library\think\console\Output.php	/^    public function describe($object, array $options = [])$/;"	f
descriptor	thinkphp\library\think\console\Output.php	/^        $descriptor = new Descriptor();$/;"	v
getVerbosity	thinkphp\library\think\console\Output.php	/^    public function getVerbosity()$/;"	f
handle	thinkphp\library\think\console\Output.php	/^        $this->handle = new $class($this);$/;"	v
handle	thinkphp\library\think\console\Output.php	/^    private $handle = null;$/;"	v
isDebug	thinkphp\library\think\console\Output.php	/^    public function isDebug()$/;"	f
isQuiet	thinkphp\library\think\console\Output.php	/^    public function isQuiet()$/;"	f
isVerbose	thinkphp\library\think\console\Output.php	/^    public function isVerbose()$/;"	f
isVeryVerbose	thinkphp\library\think\console\Output.php	/^    public function isVeryVerbose()$/;"	f
newLine	thinkphp\library\think\console\Output.php	/^    public function newLine($count = 1)$/;"	f
newline	thinkphp\library\think\console\Output.php	/^    public function write($messages, $newline = false, $type = self::OUTPUT_NORMAL)$/;"	v
options	thinkphp\library\think\console\Output.php	/^        $options    = array_merge([$/;"	v
options	thinkphp\library\think\console\Output.php	/^    public function describe($object, array $options = [])$/;"	v
question	thinkphp\library\think\console\Output.php	/^        $question = new Question($question);$/;"	v
question	thinkphp\library\think\console\Output.php	/^        $question = new Question($question, $default);$/;"	v
renderException	thinkphp\library\think\console\Output.php	/^    public function renderException(\\Exception $e)$/;"	f
setVerbosity	thinkphp\library\think\console\Output.php	/^    public function setVerbosity($level)$/;"	f
styles	thinkphp\library\think\console\Output.php	/^    protected $styles = [$/;"	v
type	thinkphp\library\think\console\Output.php	/^    public function writeln($messages, $type = self::OUTPUT_NORMAL)$/;"	v
validator	thinkphp\library\think\console\Output.php	/^    public function askHidden(Input $input, $question, $validator = null)$/;"	v
values	thinkphp\library\think\console\Output.php	/^            $values  = array_flip($choices);$/;"	v
verbosity	thinkphp\library\think\console\Output.php	/^        $this->verbosity = (int) $level;$/;"	v
verbosity	thinkphp\library\think\console\Output.php	/^    private $verbosity = self::VERBOSITY_NORMAL;$/;"	v
write	thinkphp\library\think\console\Output.php	/^    public function write($messages, $newline = false, $type = self::OUTPUT_NORMAL)$/;"	f
writeln	thinkphp\library\think\console\Output.php	/^    public function writeln($messages, $type = self::OUTPUT_NORMAL)$/;"	f
Build	thinkphp\library\think\console\command\Build.php	/^class Build extends Command$/;"	c
build	thinkphp\library\think\console\command\Build.php	/^            $build = include $input->getOption('config');$/;"	v
build	thinkphp\library\think\console\command\Build.php	/^            $build = include App::getAppPath() . 'build.php';$/;"	v
configure	thinkphp\library\think\console\command\Build.php	/^    protected function configure()$/;"	f
execute	thinkphp\library\think\console\command\Build.php	/^    protected function execute(Input $input, Output $output)$/;"	f
Clear	thinkphp\library\think\console\command\Clear.php	/^class Clear extends Command$/;"	c
configure	thinkphp\library\think\console\command\Clear.php	/^    protected function configure()$/;"	f
execute	thinkphp\library\think\console\command\Clear.php	/^    protected function execute(Input $input, Output $output)$/;"	f
files	thinkphp\library\think\console\command\Clear.php	/^        $files = scandir($path);$/;"	v
path	thinkphp\library\think\console\command\Clear.php	/^        $path  = $input->getOption('path') ?: App::getRuntimePath();$/;"	v
Help	thinkphp\library\think\console\command\Help.php	/^class Help extends Command$/;"	c
command	thinkphp\library\think\console\command\Help.php	/^            $this->command = $this->getConsole()->find($input->getArgument('command_name'));$/;"	v
command	thinkphp\library\think\console\command\Help.php	/^        $this->command = $command;$/;"	v
command	thinkphp\library\think\console\command\Help.php	/^        $this->command = null;$/;"	v
command	thinkphp\library\think\console\command\Help.php	/^    private $command;$/;"	v
configure	thinkphp\library\think\console\command\Help.php	/^    protected function configure()$/;"	f
execute	thinkphp\library\think\console\command\Help.php	/^    protected function execute(Input $input, Output $output)$/;"	f
setCommand	thinkphp\library\think\console\command\Help.php	/^    public function setCommand(Command $command)$/;"	f
Lists	thinkphp\library\think\console\command\Lists.php	/^class Lists extends Command$/;"	c
configure	thinkphp\library\think\console\command\Lists.php	/^    protected function configure()$/;"	f
createDefinition	thinkphp\library\think\console\command\Lists.php	/^    private function createDefinition()$/;"	f
execute	thinkphp\library\think\console\command\Lists.php	/^    protected function execute(Input $input, Output $output)$/;"	f
getNativeDefinition	thinkphp\library\think\console\command\Lists.php	/^    public function getNativeDefinition()$/;"	f
Make	thinkphp\library\think\console\command\Make.php	/^abstract class Make extends Command$/;"	c
appNamespace	thinkphp\library\think\console\command\Make.php	/^        $appNamespace = Container::get('app')->getNamespace();$/;"	v
buildClass	thinkphp\library\think\console\command\Make.php	/^    protected function buildClass($name)$/;"	f
class	thinkphp\library\think\console\command\Make.php	/^        $class = str_replace($namespace . '\\\\', '', $name);$/;"	v
classname	thinkphp\library\think\console\command\Make.php	/^        $classname = $this->getClassName($name);$/;"	v
configure	thinkphp\library\think\console\command\Make.php	/^    protected function configure()$/;"	f
execute	thinkphp\library\think\console\command\Make.php	/^    protected function execute(Input $input, Output $output)$/;"	f
getClassName	thinkphp\library\think\console\command\Make.php	/^    protected function getClassName($name)$/;"	f
getNamespace	thinkphp\library\think\console\command\Make.php	/^    protected function getNamespace($appNamespace, $module)$/;"	f
getPathName	thinkphp\library\think\console\command\Make.php	/^    protected function getPathName($name)$/;"	f
getStub	thinkphp\library\think\console\command\Make.php	/^    abstract protected function getStub();$/;"	f
module	thinkphp\library\think\console\command\Make.php	/^                $module = 'common';$/;"	v
module	thinkphp\library\think\console\command\Make.php	/^            $module = null;$/;"	v
name	thinkphp\library\think\console\command\Make.php	/^            $name = str_replace('\/', '\\\\', $name);$/;"	v
name	thinkphp\library\think\console\command\Make.php	/^        $name = str_replace(Container::get('app')->getNamespace() . '\\\\', '', $name);$/;"	v
name	thinkphp\library\think\console\command\Make.php	/^        $name = trim($input->getArgument('name'));$/;"	v
namespace	thinkphp\library\think\console\command\Make.php	/^        $namespace = trim(implode('\\\\', array_slice(explode('\\\\', $name), 0, -1)), '\\\\');$/;"	v
pathname	thinkphp\library\think\console\command\Make.php	/^        $pathname = $this->getPathName($classname);$/;"	v
stub	thinkphp\library\think\console\command\Make.php	/^        $stub = file_get_contents($this->getStub());$/;"	v
type	thinkphp\library\think\console\command\Make.php	/^    protected $type;$/;"	v
Controller	thinkphp\library\think\console\command\make\Controller.php	/^class Controller extends Make$/;"	c
configure	thinkphp\library\think\console\command\make\Controller.php	/^    protected function configure()$/;"	f
getClassName	thinkphp\library\think\console\command\make\Controller.php	/^    protected function getClassName($name)$/;"	f
getNamespace	thinkphp\library\think\console\command\make\Controller.php	/^    protected function getNamespace($appNamespace, $module)$/;"	f
getStub	thinkphp\library\think\console\command\make\Controller.php	/^    protected function getStub()$/;"	f
type	thinkphp\library\think\console\command\make\Controller.php	/^    protected $type = "Controller";$/;"	v
Model	thinkphp\library\think\console\command\make\Model.php	/^class Model extends Make$/;"	c
configure	thinkphp\library\think\console\command\make\Model.php	/^    protected function configure()$/;"	f
getNamespace	thinkphp\library\think\console\command\make\Model.php	/^    protected function getNamespace($appNamespace, $module)$/;"	f
getStub	thinkphp\library\think\console\command\make\Model.php	/^    protected function getStub()$/;"	f
type	thinkphp\library\think\console\command\make\Model.php	/^    protected $type = "Model";$/;"	v
Autoload	thinkphp\library\think\console\command\optimize\Autoload.php	/^class Autoload extends Command$/;"	c
absolute	thinkphp\library\think\console\command\optimize\Autoload.php	/^            $absolute = true;$/;"	v
absolute	thinkphp\library\think\console\command\optimize\Autoload.php	/^        $absolute = false;$/;"	v
addClassMapCode	thinkphp\library\think\console\command\optimize\Autoload.php	/^    protected function addClassMapCode($dir, $namespace, $classMap)$/;"	f
app	thinkphp\library\think\console\command\optimize\Autoload.php	/^        $app              = Container::get('app');$/;"	v
app	thinkphp\library\think\console\command\optimize\Autoload.php	/^        $app        = Container::get('app');$/;"	v
appPath	thinkphp\library\think\console\command\optimize\Autoload.php	/^        $appPath    = $this->normalizePath(realpath($app->getAppPath()));$/;"	v
baseDir	thinkphp\library\think\console\command\optimize\Autoload.php	/^            $baseDir = "'" . $appPath . "\/'";$/;"	v
baseDir	thinkphp\library\think\console\command\optimize\Autoload.php	/^            $baseDir = "'" . $extendPath . "\/'";$/;"	v
baseDir	thinkphp\library\think\console\command\optimize\Autoload.php	/^            $baseDir = "'" . $libPath . "\/'";$/;"	v
baseDir	thinkphp\library\think\console\command\optimize\Autoload.php	/^        $baseDir    = '';$/;"	v
class	thinkphp\library\think\console\command\optimize\Autoload.php	/^        foreach ($classMap as $class => $code) {$/;"	v
class	thinkphp\library\think\console\command\optimize\Autoload.php	/^        foreach ($this->createMap($dir, $namespace) as $class => $path) {$/;"	v
classMap	thinkphp\library\think\console\command\optimize\Autoload.php	/^            $classMap        = $this->addClassMapCode($dir, $namespaceFilter, $classMap);$/;"	v
classMap	thinkphp\library\think\console\command\optimize\Autoload.php	/^        $classMap = [];$/;"	v
classes	thinkphp\library\think\console\command\optimize\Autoload.php	/^            $classes = $this->findClasses($filePath);$/;"	v
classes	thinkphp\library\think\console\command\optimize\Autoload.php	/^        $classes   = [];$/;"	v
classmapFile	thinkphp\library\think\console\command\optimize\Autoload.php	/^        $classmapFile = <<<EOF$/;"	v
configure	thinkphp\library\think\console\command\optimize\Autoload.php	/^    protected function configure()$/;"	f
contents	thinkphp\library\think\console\command\optimize\Autoload.php	/^            $contents = preg_replace('{^.+?<\\?}s', '<?', $contents, 1, $replacements);$/;"	v
contents	thinkphp\library\think\console\command\optimize\Autoload.php	/^            $contents = substr($contents, 0, $pos);$/;"	v
contents	thinkphp\library\think\console\command\optimize\Autoload.php	/^        $contents = @php_strip_whitespace($path);$/;"	v
contents	thinkphp\library\think\console\command\optimize\Autoload.php	/^        $contents = preg_replace('{"[^"\\\\\\\\]*+(\\\\\\\\.[^"\\\\\\\\]*+)*+"|\\'[^\\'\\\\\\\\]*+(\\\\\\\\.[^\\'\\\\\\\\]*+)*+\\'}s', 'null', $contents);$/;"	v
contents	thinkphp\library\think\console\command\optimize\Autoload.php	/^        $contents = preg_replace('{<<<\\s*(\\'?)(\\w+)\\\\1(?:\\r\\n|\\n|\\r)(?:.*?)(?:\\r\\n|\\n|\\r)\\\\2(?=\\r\\n|\\n|\\r|;)}s', 'null', $contents);$/;"	v
contents	thinkphp\library\think\console\command\optimize\Autoload.php	/^        $contents = preg_replace('{\\?>.+<\\?}s', '?><?', $contents);$/;"	v
createMap	thinkphp\library\think\console\command\optimize\Autoload.php	/^    protected function createMap($path, $namespace = null)$/;"	f
error	thinkphp\library\think\console\command\optimize\Autoload.php	/^            $error = error_get_last();$/;"	v
execute	thinkphp\library\think\console\command\optimize\Autoload.php	/^    protected function execute(Input $input, Output $output)$/;"	f
extendPath	thinkphp\library\think\console\command\optimize\Autoload.php	/^        $extendPath = $this->normalizePath(realpath($app->getRootPath() . 'extend'));$/;"	v
extraTypes	thinkphp\library\think\console\command\optimize\Autoload.php	/^        $extraTypes = '|trait';$/;"	v
filePath	thinkphp\library\think\console\command\optimize\Autoload.php	/^            $filePath = $file->getRealPath();$/;"	v
findClasses	thinkphp\library\think\console\command\optimize\Autoload.php	/^    protected function findClasses($path)$/;"	f
getPathCode	thinkphp\library\think\console\command\optimize\Autoload.php	/^    protected function getPathCode($path)$/;"	f
len	thinkphp\library\think\console\command\optimize\Autoload.php	/^        for ($i = 0, $len = count($matches['type']); $i < $len; $i++) {$/;"	v
libPath	thinkphp\library\think\console\command\optimize\Autoload.php	/^        $libPath    = $this->normalizePath(realpath($app->getThinkPath() . 'library'));$/;"	v
map	thinkphp\library\think\console\command\optimize\Autoload.php	/^        $map = [];$/;"	v
message	thinkphp\library\think\console\command\optimize\Autoload.php	/^                $message = 'File at "%s" could not be parsed as PHP, it may be binary or corrupted';$/;"	v
message	thinkphp\library\think\console\command\optimize\Autoload.php	/^                $message = 'File at "%s" does not exist, check your classmap definitions';$/;"	v
message	thinkphp\library\think\console\command\optimize\Autoload.php	/^                $message = 'File at "%s" is not readable, check its permissions';$/;"	v
name	thinkphp\library\think\console\command\optimize\Autoload.php	/^                    $name = 'xhp' . substr(str_replace(['-', ':'], ['_', '__'], $name), 1);$/;"	v
name	thinkphp\library\think\console\command\optimize\Autoload.php	/^                    $name = rtrim($name, ':');$/;"	v
name	thinkphp\library\think\console\command\optimize\Autoload.php	/^                $name = $matches['name'][$i];$/;"	v
namespace	thinkphp\library\think\console\command\optimize\Autoload.php	/^                $namespace = str_replace([' ', "\\t", "\\r", "\\n"], '', $matches['nsname'][$i]) . '\\\\';$/;"	v
namespace	thinkphp\library\think\console\command\optimize\Autoload.php	/^        $namespace = '';$/;"	v
namespace	thinkphp\library\think\console\command\optimize\Autoload.php	/^        foreach ($namespacesToScan as $namespace => $dir) {$/;"	v
namespace	thinkphp\library\think\console\command\optimize\Autoload.php	/^    protected function createMap($path, $namespace = null)$/;"	v
namespaceFilter	thinkphp\library\think\console\command\optimize\Autoload.php	/^            $namespaceFilter = '' === $namespace ? null : $namespace;$/;"	v
namespacesToScan	thinkphp\library\think\console\command\optimize\Autoload.php	/^        $namespacesToScan = [$/;"	v
normalizePath	thinkphp\library\think\console\command\optimize\Autoload.php	/^    protected function normalizePath($path)$/;"	f
objects	thinkphp\library\think\console\command\optimize\Autoload.php	/^                $objects = new \\RecursiveIteratorIterator(new \\RecursiveDirectoryIterator($path), \\RecursiveIteratorIterator::SELF_FIRST);$/;"	v
parts	thinkphp\library\think\console\command\optimize\Autoload.php	/^        $parts    = [];$/;"	v
path	thinkphp\library\think\console\command\optimize\Autoload.php	/^                $path = [];$/;"	v
path	thinkphp\library\think\console\command\optimize\Autoload.php	/^                $path = [new \\SplFileInfo($path)];$/;"	v
path	thinkphp\library\think\console\command\optimize\Autoload.php	/^            $path     = substr($path, 1);$/;"	v
path	thinkphp\library\think\console\command\optimize\Autoload.php	/^            $path    = substr($path, strlen($app->getThinkPath() . 'library'));$/;"	v
path	thinkphp\library\think\console\command\optimize\Autoload.php	/^            $path    = substr($path, strlen($appPath) + 1);$/;"	v
path	thinkphp\library\think\console\command\optimize\Autoload.php	/^            $path    = substr($path, strlen($extendPath) + 1);$/;"	v
path	thinkphp\library\think\console\command\optimize\Autoload.php	/^            $path   = substr($path, strlen($prefix));$/;"	v
path	thinkphp\library\think\console\command\optimize\Autoload.php	/^        $path       = $this->normalizePath($path);$/;"	v
path	thinkphp\library\think\console\command\optimize\Autoload.php	/^        $path     = strtr($path, '\\\\', '\/');$/;"	v
pathCode	thinkphp\library\think\console\command\optimize\Autoload.php	/^            $pathCode = $this->getPathCode($path) . ",\\n";$/;"	v
pos	thinkphp\library\think\console\command\optimize\Autoload.php	/^        $pos = strrpos($contents, '?>');$/;"	v
prefix	thinkphp\library\think\console\command\optimize\Autoload.php	/^            $prefix = $match[1];$/;"	v
prefix	thinkphp\library\think\console\command\optimize\Autoload.php	/^        $prefix   = '';$/;"	v
resolution	thinkphp\library\think\console\command\optimize\Autoload.php	/^                        '<warning>Warning: Ambiguous class resolution, "' . $class . '"' .$/;"	c
resolution	thinkphp\library\think\console\command\optimize\Autoload.php	/^                    '<warning>Warning: Ambiguous class resolution, "' . $class . '"' .$/;"	c
runtimePath	thinkphp\library\think\console\command\optimize\Autoload.php	/^        $runtimePath = $app->getRuntimePath();$/;"	v
up	thinkphp\library\think\console\command\optimize\Autoload.php	/^                $up      = '..' !== $chunk;$/;"	v
up	thinkphp\library\think\console\command\optimize\Autoload.php	/^                $up = !(empty($parts) || '..' === end($parts));$/;"	v
up	thinkphp\library\think\console\command\optimize\Autoload.php	/^        $up = false;$/;"	v
Config	thinkphp\library\think\console\command\optimize\Config.php	/^class Config extends Command$/;"	c
buildCacheContent	thinkphp\library\think\console\command\optimize\Config.php	/^    protected function buildCacheContent($module)$/;"	f
common	thinkphp\library\think\console\command\optimize\Config.php	/^            $common = substr(php_strip_whitespace($path . 'common.php'), 6);$/;"	v
config	thinkphp\library\think\console\command\optimize\Config.php	/^        $config = Container::get('config');$/;"	v
configPath	thinkphp\library\think\console\command\optimize\Config.php	/^            $configPath = App::getConfigPath();$/;"	v
configPath	thinkphp\library\think\console\command\optimize\Config.php	/^            $configPath = is_dir($path . 'config') ? $path . 'config' : App::getConfigPath() . $module;$/;"	v
configure	thinkphp\library\think\console\command\optimize\Config.php	/^    protected function configure()$/;"	f
content	thinkphp\library\think\console\command\optimize\Config.php	/^        $content     = '<?php ' . PHP_EOL . $this->buildCacheContent($module);$/;"	v
content	thinkphp\library\think\console\command\optimize\Config.php	/^        $content = '\/\/ This cache file is automatically generated at:' . date('Y-m-d H:i:s') . PHP_EOL;$/;"	v
execute	thinkphp\library\think\console\command\optimize\Config.php	/^    protected function execute(Input $input, Output $output)$/;"	f
ext	thinkphp\library\think\console\command\optimize\Config.php	/^        $ext    = App::getConfigExt();$/;"	v
filename	thinkphp\library\think\console\command\optimize\Config.php	/^                $filename = $configPath . DIRECTORY_SEPARATOR . $file;$/;"	v
files	thinkphp\library\think\console\command\optimize\Config.php	/^        $files = scandir($configPath);$/;"	v
module	thinkphp\library\think\console\command\optimize\Config.php	/^            $module = $input->getArgument('module') . DIRECTORY_SEPARATOR;$/;"	v
module	thinkphp\library\think\console\command\optimize\Config.php	/^            $module = '';$/;"	v
output	thinkphp\library\think\console\command\optimize\Config.php	/^    protected $output;$/;"	v
path	thinkphp\library\think\console\command\optimize\Config.php	/^        $path    = realpath(App::getAppPath() . $module) . DIRECTORY_SEPARATOR;$/;"	v
runtimePath	thinkphp\library\think\console\command\optimize\Config.php	/^        $runtimePath = App::getRuntimePath();$/;"	v
Route	thinkphp\library\think\console\command\optimize\Route.php	/^class Route extends Command$/;"	c
buildRouteCache	thinkphp\library\think\console\command\optimize\Route.php	/^    protected function buildRouteCache()$/;"	f
configure	thinkphp\library\think\console\command\optimize\Route.php	/^    protected function configure()$/;"	f
content	thinkphp\library\think\console\command\optimize\Route.php	/^        $content = '<?php ' . PHP_EOL . 'return ';$/;"	v
execute	thinkphp\library\think\console\command\optimize\Route.php	/^    protected function execute(Input $input, Output $output)$/;"	f
filename	thinkphp\library\think\console\command\optimize\Route.php	/^                $filename = $path . DIRECTORY_SEPARATOR . $file;$/;"	v
files	thinkphp\library\think\console\command\optimize\Route.php	/^        $files = scandir($path);$/;"	v
output	thinkphp\library\think\console\command\optimize\Route.php	/^    protected $output;$/;"	v
path	thinkphp\library\think\console\command\optimize\Route.php	/^        $path  = Container::get('app')->getRoutePath();$/;"	v
rules	thinkphp\library\think\console\command\optimize\Route.php	/^                $rules = include $filename;$/;"	v
Schema	thinkphp\library\think\console\command\optimize\Schema.php	/^class Schema extends Command$/;"	c
app	thinkphp\library\think\console\command\optimize\Schema.php	/^            $app  = Container::get('app')->getNamespace();$/;"	v
buildDataBaseSchema	thinkphp\library\think\console\command\optimize\Schema.php	/^    protected function buildDataBaseSchema($tables, $db)$/;"	f
buildModelSchema	thinkphp\library\think\console\command\optimize\Schema.php	/^    protected function buildModelSchema($class)$/;"	f
class	thinkphp\library\think\console\command\optimize\Schema.php	/^                $class = '\\\\' . $app . '\\\\' . $module . '\\\\model\\\\' . pathinfo($file, PATHINFO_FILENAME);$/;"	v
class	thinkphp\library\think\console\command\optimize\Schema.php	/^                $class = '\\\\' . $app . '\\\\model\\\\' . pathinfo($file, PATHINFO_FILENAME);$/;"	v
configure	thinkphp\library\think\console\command\optimize\Schema.php	/^    protected function configure()$/;"	f
content	thinkphp\library\think\console\command\optimize\Schema.php	/^            $content = '<?php ' . PHP_EOL . 'return ';$/;"	v
db	thinkphp\library\think\console\command\optimize\Schema.php	/^        $db = isset($dbName) ? $dbName . '.' : '';$/;"	v
dbName	thinkphp\library\think\console\command\optimize\Schema.php	/^                $dbName = Db::getConfig('database');$/;"	v
dbName	thinkphp\library\think\console\command\optimize\Schema.php	/^            $dbName  = $class::getConfig('database');$/;"	v
dbName	thinkphp\library\think\console\command\optimize\Schema.php	/^            $dbName = $db;$/;"	v
dbName	thinkphp\library\think\console\command\optimize\Schema.php	/^            $dbName = $input->getOption('db');$/;"	v
dbName	thinkphp\library\think\console\command\optimize\Schema.php	/^            $dbName = Db::getConfig('database') . '.';$/;"	v
execute	thinkphp\library\think\console\command\optimize\Schema.php	/^    protected function execute(Input $input, Output $output)$/;"	f
info	thinkphp\library\think\console\command\optimize\Schema.php	/^            $info    = $class::getConnection()->getFields($table);$/;"	v
info	thinkphp\library\think\console\command\optimize\Schema.php	/^            $info    = Db::getConnection()->getFields($db . $table);$/;"	v
list	thinkphp\library\think\console\command\optimize\Schema.php	/^            $list = scandir(Container::get('app')->getAppPath() . $module . DIRECTORY_SEPARATOR . 'model');$/;"	v
list	thinkphp\library\think\console\command\optimize\Schema.php	/^            $list = scandir(Container::get('app')->getAppPath() . 'model');$/;"	v
module	thinkphp\library\think\console\command\optimize\Schema.php	/^            $module = $input->getOption('module');$/;"	v
output	thinkphp\library\think\console\command\optimize\Schema.php	/^    protected $output;$/;"	v
reflect	thinkphp\library\think\console\command\optimize\Schema.php	/^        $reflect = new \\ReflectionClass($class);$/;"	v
table	thinkphp\library\think\console\command\optimize\Schema.php	/^            $table   = $class::getTable();$/;"	v
table	thinkphp\library\think\console\command\optimize\Schema.php	/^            $table = $input->getOption('table');$/;"	v
tables	thinkphp\library\think\console\command\optimize\Schema.php	/^            $tables = Db::getConnection()->getTables($dbName);$/;"	v
tables	thinkphp\library\think\console\command\optimize\Schema.php	/^            $tables = Db::getConnection()->getTables();$/;"	v
Argument	thinkphp\library\think\console\input\Argument.php	/^class Argument$/;"	c
__construct	thinkphp\library\think\console\input\Argument.php	/^    public function __construct($name, $mode = null, $description = '', $default = null)$/;"	f
default	thinkphp\library\think\console\input\Argument.php	/^                $default = [];$/;"	v
default	thinkphp\library\think\console\input\Argument.php	/^        $this->default = $default;$/;"	v
default	thinkphp\library\think\console\input\Argument.php	/^    private $default;$/;"	v
description	thinkphp\library\think\console\input\Argument.php	/^        $this->description = $description;$/;"	v
description	thinkphp\library\think\console\input\Argument.php	/^    private $description;$/;"	v
getDefault	thinkphp\library\think\console\input\Argument.php	/^    public function getDefault()$/;"	f
getDescription	thinkphp\library\think\console\input\Argument.php	/^    public function getDescription()$/;"	f
getName	thinkphp\library\think\console\input\Argument.php	/^    public function getName()$/;"	f
isArray	thinkphp\library\think\console\input\Argument.php	/^    public function isArray()$/;"	f
isRequired	thinkphp\library\think\console\input\Argument.php	/^    public function isRequired()$/;"	f
mode	thinkphp\library\think\console\input\Argument.php	/^            $mode = self::OPTIONAL;$/;"	v
mode	thinkphp\library\think\console\input\Argument.php	/^        $this->mode        = $mode;$/;"	v
mode	thinkphp\library\think\console\input\Argument.php	/^    private $mode;$/;"	v
mode	thinkphp\library\think\console\input\Argument.php	/^    public function __construct($name, $mode = null, $description = '', $default = null)$/;"	v
name	thinkphp\library\think\console\input\Argument.php	/^        $this->name        = $name;$/;"	v
name	thinkphp\library\think\console\input\Argument.php	/^    private $name;$/;"	v
setDefault	thinkphp\library\think\console\input\Argument.php	/^    public function setDefault($default = null)$/;"	f
Definition	thinkphp\library\think\console\input\Definition.php	/^class Definition$/;"	c
__construct	thinkphp\library\think\console\input\Definition.php	/^    public function __construct(array $definition = [])$/;"	f
addArgument	thinkphp\library\think\console\input\Definition.php	/^    public function addArgument(Argument $argument)$/;"	f
addArguments	thinkphp\library\think\console\input\Definition.php	/^    public function addArguments($arguments = [])$/;"	f
addOption	thinkphp\library\think\console\input\Definition.php	/^    public function addOption(Option $option)$/;"	f
addOptions	thinkphp\library\think\console\input\Definition.php	/^    public function addOptions($options = [])$/;"	f
arguments	thinkphp\library\think\console\input\Definition.php	/^        $arguments = [];$/;"	v
arguments	thinkphp\library\think\console\input\Definition.php	/^        $arguments = is_int($name) ? array_values($this->arguments) : $this->arguments;$/;"	v
arguments	thinkphp\library\think\console\input\Definition.php	/^        $this->arguments          = [];$/;"	v
arguments	thinkphp\library\think\console\input\Definition.php	/^    private $arguments;$/;"	v
definition	thinkphp\library\think\console\input\Definition.php	/^    public function __construct(array $definition = [])$/;"	v
element	thinkphp\library\think\console\input\Definition.php	/^                $element = '[' . $element . ']';$/;"	v
element	thinkphp\library\think\console\input\Definition.php	/^            $element = '<' . $argument->getName() . '>';$/;"	v
elements	thinkphp\library\think\console\input\Definition.php	/^        $elements = [];$/;"	v
getArgument	thinkphp\library\think\console\input\Definition.php	/^    public function getArgument($name)$/;"	f
getArgumentCount	thinkphp\library\think\console\input\Definition.php	/^    public function getArgumentCount()$/;"	f
getArgumentDefaults	thinkphp\library\think\console\input\Definition.php	/^    public function getArgumentDefaults()$/;"	f
getArgumentRequiredCount	thinkphp\library\think\console\input\Definition.php	/^    public function getArgumentRequiredCount()$/;"	f
getArguments	thinkphp\library\think\console\input\Definition.php	/^    public function getArguments()$/;"	f
getOption	thinkphp\library\think\console\input\Definition.php	/^    public function getOption($name)$/;"	f
getOptionDefaults	thinkphp\library\think\console\input\Definition.php	/^    public function getOptionDefaults()$/;"	f
getOptionForShortcut	thinkphp\library\think\console\input\Definition.php	/^    public function getOptionForShortcut($shortcut)$/;"	f
getOptions	thinkphp\library\think\console\input\Definition.php	/^    public function getOptions()$/;"	f
getSynopsis	thinkphp\library\think\console\input\Definition.php	/^    public function getSynopsis($short = false)$/;"	f
hasAnArrayArgument	thinkphp\library\think\console\input\Definition.php	/^            $this->hasAnArrayArgument = true;$/;"	v
hasAnArrayArgument	thinkphp\library\think\console\input\Definition.php	/^        $this->hasAnArrayArgument = false;$/;"	v
hasAnArrayArgument	thinkphp\library\think\console\input\Definition.php	/^    private $hasAnArrayArgument = false;$/;"	v
hasArgument	thinkphp\library\think\console\input\Definition.php	/^    public function hasArgument($name)$/;"	f
hasOption	thinkphp\library\think\console\input\Definition.php	/^    public function hasOption($name)$/;"	f
hasOptional	thinkphp\library\think\console\input\Definition.php	/^            $this->hasOptional = true;$/;"	v
hasOptional	thinkphp\library\think\console\input\Definition.php	/^        $this->hasOptional        = false;$/;"	v
hasOptional	thinkphp\library\think\console\input\Definition.php	/^    private $hasOptional;$/;"	v
hasShortcut	thinkphp\library\think\console\input\Definition.php	/^    public function hasShortcut($name)$/;"	f
options	thinkphp\library\think\console\input\Definition.php	/^        $options   = [];$/;"	v
options	thinkphp\library\think\console\input\Definition.php	/^        $this->options   = [];$/;"	v
options	thinkphp\library\think\console\input\Definition.php	/^    private $options;$/;"	v
requiredCount	thinkphp\library\think\console\input\Definition.php	/^        $this->requiredCount      = 0;$/;"	v
requiredCount	thinkphp\library\think\console\input\Definition.php	/^    private $requiredCount;$/;"	v
setArguments	thinkphp\library\think\console\input\Definition.php	/^    public function setArguments($arguments = [])$/;"	f
setDefinition	thinkphp\library\think\console\input\Definition.php	/^    public function setDefinition(array $definition)$/;"	f
setOptions	thinkphp\library\think\console\input\Definition.php	/^    public function setOptions($options = [])$/;"	f
shortcut	thinkphp\library\think\console\input\Definition.php	/^                $shortcut   = $option->getShortcut() ? sprintf('-%s|', $option->getShortcut()) : '';$/;"	v
shortcutToName	thinkphp\library\think\console\input\Definition.php	/^    private function shortcutToName($shortcut)$/;"	f
shortcuts	thinkphp\library\think\console\input\Definition.php	/^        $this->shortcuts = [];$/;"	v
shortcuts	thinkphp\library\think\console\input\Definition.php	/^    private $shortcuts;$/;"	v
value	thinkphp\library\think\console\input\Definition.php	/^                    $value = sprintf(' %s%s%s', $option->isValueOptional() ? '[' : '', strtoupper($option->getName()), $option->isValueOptional() ? ']' : '');$/;"	v
value	thinkphp\library\think\console\input\Definition.php	/^                $value = '';$/;"	v
values	thinkphp\library\think\console\input\Definition.php	/^        $values = [];$/;"	v
Option	thinkphp\library\think\console\input\Option.php	/^class Option$/;"	c
__construct	thinkphp\library\think\console\input\Option.php	/^    public function __construct($name, $shortcut = null, $mode = null, $description = '', $default = null)$/;"	f
acceptValue	thinkphp\library\think\console\input\Option.php	/^    public function acceptValue()$/;"	f
default	thinkphp\library\think\console\input\Option.php	/^                $default = [];$/;"	v
default	thinkphp\library\think\console\input\Option.php	/^        $this->default = $this->acceptValue() ? $default : false;$/;"	v
default	thinkphp\library\think\console\input\Option.php	/^    private $default;$/;"	v
description	thinkphp\library\think\console\input\Option.php	/^        $this->description = $description;$/;"	v
description	thinkphp\library\think\console\input\Option.php	/^    private $description;$/;"	v
equals	thinkphp\library\think\console\input\Option.php	/^    public function equals(Option $option)$/;"	f
getDefault	thinkphp\library\think\console\input\Option.php	/^    public function getDefault()$/;"	f
getDescription	thinkphp\library\think\console\input\Option.php	/^    public function getDescription()$/;"	f
getName	thinkphp\library\think\console\input\Option.php	/^    public function getName()$/;"	f
getShortcut	thinkphp\library\think\console\input\Option.php	/^    public function getShortcut()$/;"	f
isArray	thinkphp\library\think\console\input\Option.php	/^    public function isArray()$/;"	f
isValueOptional	thinkphp\library\think\console\input\Option.php	/^    public function isValueOptional()$/;"	f
isValueRequired	thinkphp\library\think\console\input\Option.php	/^    public function isValueRequired()$/;"	f
mode	thinkphp\library\think\console\input\Option.php	/^            $mode = self::VALUE_NONE;$/;"	v
mode	thinkphp\library\think\console\input\Option.php	/^        $this->mode        = $mode;$/;"	v
mode	thinkphp\library\think\console\input\Option.php	/^    private $mode;$/;"	v
name	thinkphp\library\think\console\input\Option.php	/^            $name = substr($name, 2);$/;"	v
name	thinkphp\library\think\console\input\Option.php	/^        $this->name        = $name;$/;"	v
name	thinkphp\library\think\console\input\Option.php	/^    private $name;$/;"	v
setDefault	thinkphp\library\think\console\input\Option.php	/^    public function setDefault($default = null)$/;"	f
shortcut	thinkphp\library\think\console\input\Option.php	/^                $shortcut = implode('|', $shortcut);$/;"	v
shortcut	thinkphp\library\think\console\input\Option.php	/^            $shortcut  = implode('|', $shortcuts);$/;"	v
shortcut	thinkphp\library\think\console\input\Option.php	/^            $shortcut = null;$/;"	v
shortcut	thinkphp\library\think\console\input\Option.php	/^        $this->shortcut    = $shortcut;$/;"	v
shortcut	thinkphp\library\think\console\input\Option.php	/^    private $shortcut;$/;"	v
shortcut	thinkphp\library\think\console\input\Option.php	/^    public function __construct($name, $shortcut = null, $mode = null, $description = '', $default = null)$/;"	v
shortcuts	thinkphp\library\think\console\input\Option.php	/^            $shortcuts = array_filter($shortcuts);$/;"	v
shortcuts	thinkphp\library\think\console\input\Option.php	/^            $shortcuts = preg_split('{(\\|)-?}', ltrim($shortcut, '-'));$/;"	v
Ask	thinkphp\library\think\console\output\Ask.php	/^class Ask$/;"	c
__construct	thinkphp\library\think\console\output\Ask.php	/^    public function __construct(Input $input, Output $output, Question $question)$/;"	f
attempts	thinkphp\library\think\console\output\Ask.php	/^        $attempts = $this->question->getMaxAttempts();$/;"	v
autocomplete	thinkphp\library\think\console\output\Ask.php	/^        $autocomplete = $this->question->getAutocompleterValues();$/;"	v
autocomplete	thinkphp\library\think\console\output\Ask.php	/^    private function autocomplete($inputStream)$/;"	f
c	thinkphp\library\think\console\output\Ask.php	/^            $c = fread($inputStream, 1);$/;"	v
choices	thinkphp\library\think\console\output\Ask.php	/^                $choices = $this->question->getChoices();$/;"	v
command	thinkphp\library\think\console\output\Ask.php	/^            $command = sprintf("\/usr\/bin\/env %s -c 'stty -echo; %s; stty echo; echo \\$mypassword'", $shell, $readCmd);$/;"	v
default	thinkphp\library\think\console\output\Ask.php	/^                $default = explode(',', $default);$/;"	v
default	thinkphp\library\think\console\output\Ask.php	/^        $default = $this->question->getDefault();$/;"	v
doAsk	thinkphp\library\think\console\output\Ask.php	/^    protected function doAsk()$/;"	f
error	thinkphp\library\think\console\output\Ask.php	/^        $error    = null;$/;"	v
exe	thinkphp\library\think\console\output\Ask.php	/^            $exe = __DIR__ . '\/..\/bin\/hiddeninput.exe';$/;"	v
exitcode	thinkphp\library\think\console\output\Ask.php	/^        return self::$stty = $exitcode === 0;$/;"	v
getHiddenResponse	thinkphp\library\think\console\output\Ask.php	/^    protected function getHiddenResponse($inputStream)$/;"	f
getShell	thinkphp\library\think\console\output\Ask.php	/^    private function getShell()$/;"	f
hasSttyAvailable	thinkphp\library\think\console\output\Ask.php	/^    private function hasSttyAvailable()$/;"	f
i	thinkphp\library\think\console\output\Ask.php	/^                        $i = strlen($ret);$/;"	v
i	thinkphp\library\think\console\output\Ask.php	/^        $i          = 0;$/;"	v
input	thinkphp\library\think\console\output\Ask.php	/^        $this->input    = $input;$/;"	v
input	thinkphp\library\think\console\output\Ask.php	/^    protected $input;$/;"	v
inputStream	thinkphp\library\think\console\output\Ask.php	/^        $inputStream  = STDIN;$/;"	v
interviewer	thinkphp\library\think\console\output\Ask.php	/^        $interviewer = function () use ($that) {$/;"	v
key	thinkphp\library\think\console\output\Ask.php	/^                foreach ($default as $key => $value) {$/;"	v
key	thinkphp\library\think\console\output\Ask.php	/^            foreach ($this->question->getChoices() as $key => $value) {$/;"	v
matches	thinkphp\library\think\console\output\Ask.php	/^                    $matches    = $autocomplete;$/;"	v
matches	thinkphp\library\think\console\output\Ask.php	/^        $matches    = $autocomplete;$/;"	v
numMatches	thinkphp\library\think\console\output\Ask.php	/^                    $numMatches = 0;$/;"	v
numMatches	thinkphp\library\think\console\output\Ask.php	/^                    $numMatches = count($matches);$/;"	v
numMatches	thinkphp\library\think\console\output\Ask.php	/^                $numMatches = 0;$/;"	v
numMatches	thinkphp\library\think\console\output\Ask.php	/^        $numMatches = count($matches);$/;"	v
ofs	thinkphp\library\think\console\output\Ask.php	/^                        $ofs = 0;$/;"	v
ofs	thinkphp\library\think\console\output\Ask.php	/^                    $ofs        = -1;$/;"	v
ofs	thinkphp\library\think\console\output\Ask.php	/^                    $ofs = ($numMatches + $ofs) % $numMatches;$/;"	v
ofs	thinkphp\library\think\console\output\Ask.php	/^                $ofs        = 0;$/;"	v
ofs	thinkphp\library\think\console\output\Ask.php	/^        $ofs        = -1;$/;"	v
output	thinkphp\library\think\console\output\Ask.php	/^        $this->output   = $output;$/;"	v
output	thinkphp\library\think\console\output\Ask.php	/^    protected $output;$/;"	v
question	thinkphp\library\think\console\output\Ask.php	/^        $this->question = $question;$/;"	v
question	thinkphp\library\think\console\output\Ask.php	/^    protected $question;$/;"	v
readCmd	thinkphp\library\think\console\output\Ask.php	/^            $readCmd = $shell === 'csh' ? 'set mypassword = $<' : 'read -r mypassword';$/;"	v
ret	thinkphp\library\think\console\output\Ask.php	/^                        $ret = $matches[$ofs];$/;"	v
ret	thinkphp\library\think\console\output\Ask.php	/^                    $ret = trim($this->getHiddenResponse($inputStream));$/;"	v
ret	thinkphp\library\think\console\output\Ask.php	/^                $ret = fgets($inputStream, 4096);$/;"	v
ret	thinkphp\library\think\console\output\Ask.php	/^                $ret = substr($ret, 0, $i);$/;"	v
ret	thinkphp\library\think\console\output\Ask.php	/^                $ret = trim($ret);$/;"	v
ret	thinkphp\library\think\console\output\Ask.php	/^            $ret = false;$/;"	v
ret	thinkphp\library\think\console\output\Ask.php	/^            $ret = trim($this->autocomplete($inputStream));$/;"	v
ret	thinkphp\library\think\console\output\Ask.php	/^        $ret          = '';$/;"	v
ret	thinkphp\library\think\console\output\Ask.php	/^        $ret = strlen($ret) > 0 ? $ret : $this->question->getDefault();$/;"	v
run	thinkphp\library\think\console\output\Ask.php	/^    public function run()$/;"	f
shell	thinkphp\library\think\console\output\Ask.php	/^        if (false !== $shell = $this->getShell()) {$/;"	v
shell	thinkphp\library\think\console\output\Ask.php	/^    private static $shell;$/;"	v
stty	thinkphp\library\think\console\output\Ask.php	/^    private static $stty;$/;"	v
sttyMode	thinkphp\library\think\console\output\Ask.php	/^            $sttyMode = shell_exec('stty -g');$/;"	v
sttyMode	thinkphp\library\think\console\output\Ask.php	/^        $sttyMode = shell_exec('stty -g');$/;"	v
test	thinkphp\library\think\console\output\Ask.php	/^            $test = "\/usr\/bin\/env %s -c 'echo OK' 2> \/dev\/null";$/;"	v
text	thinkphp\library\think\console\output\Ask.php	/^                $text    = sprintf(' <info>%s<\/info> [<comment>%s<\/comment>]:', $text, $choices[$default]);$/;"	v
text	thinkphp\library\think\console\output\Ask.php	/^                $text = sprintf(' <info>%s (yes\/no)<\/info> [<comment>%s<\/comment>]:', $text, $default ? 'yes' : 'no');$/;"	v
text	thinkphp\library\think\console\output\Ask.php	/^                $text = sprintf(' <info>%s<\/info> [<comment>%s<\/comment>]:', $text, $default);$/;"	v
text	thinkphp\library\think\console\output\Ask.php	/^                $text = sprintf(' <info>%s<\/info> [<comment>%s<\/comment>]:', $text, implode(', ', $default));$/;"	v
text	thinkphp\library\think\console\output\Ask.php	/^                $text = sprintf(' <info>%s<\/info>:', $text);$/;"	v
text	thinkphp\library\think\console\output\Ask.php	/^        $text    = $this->question->getQuestion();$/;"	v
that	thinkphp\library\think\console\output\Ask.php	/^        $that = $this;$/;"	v
validateAttempts	thinkphp\library\think\console\output\Ask.php	/^    protected function validateAttempts($interviewer)$/;"	f
value	thinkphp\library\think\console\output\Ask.php	/^            $value   = rtrim(shell_exec($command));$/;"	v
value	thinkphp\library\think\console\output\Ask.php	/^            $value = fgets($inputStream, 4096);$/;"	v
value	thinkphp\library\think\console\output\Ask.php	/^            $value = rtrim(shell_exec($exe));$/;"	v
value	thinkphp\library\think\console\output\Ask.php	/^            $value = trim($value);$/;"	v
width	thinkphp\library\think\console\output\Ask.php	/^            $width = max(array_map('strlen', array_keys($this->question->getChoices())));$/;"	v
writePrompt	thinkphp\library\think\console\output\Ask.php	/^    protected function writePrompt()$/;"	f
Descriptor	thinkphp\library\think\console\output\Descriptor.php	/^class Descriptor$/;"	c
calculateTotalWidthForOptions	thinkphp\library\think\console\output\Descriptor.php	/^    private function calculateTotalWidthForOptions($options)$/;"	f
decorated	thinkphp\library\think\console\output\Descriptor.php	/^    protected function write($content, $decorated = false)$/;"	v
default	thinkphp\library\think\console\output\Descriptor.php	/^            $default = '';$/;"	v
default	thinkphp\library\think\console\output\Descriptor.php	/^            $default = sprintf('<comment> [default: %s]<\/comment>', $this->formatDefaultValue($argument->getDefault()));$/;"	v
default	thinkphp\library\think\console\output\Descriptor.php	/^            $default = sprintf('<comment> [default: %s]<\/comment>', $this->formatDefaultValue($option->getDefault()));$/;"	v
definition	thinkphp\library\think\console\output\Descriptor.php	/^        $definition = $command->getNativeDefinition();$/;"	v
describe	thinkphp\library\think\console\output\Descriptor.php	/^    public function describe(Output $output, $object, array $options = [])$/;"	f
describeCommand	thinkphp\library\think\console\output\Descriptor.php	/^    protected function describeCommand(Command $command, array $options = [])$/;"	f
describeConsole	thinkphp\library\think\console\output\Descriptor.php	/^    protected function describeConsole(Console $console, array $options = [])$/;"	f
describeInputArgument	thinkphp\library\think\console\output\Descriptor.php	/^    protected function describeInputArgument(InputArgument $argument, array $options = [])$/;"	f
describeInputDefinition	thinkphp\library\think\console\output\Descriptor.php	/^    protected function describeInputDefinition(InputDefinition $definition, array $options = [])$/;"	f
describeInputOption	thinkphp\library\think\console\output\Descriptor.php	/^    protected function describeInputOption(InputOption $option, array $options = [])$/;"	f
describedNamespace	thinkphp\library\think\console\output\Descriptor.php	/^        $describedNamespace = isset($options['namespace']) ? $options['namespace'] : null;$/;"	v
description	thinkphp\library\think\console\output\Descriptor.php	/^        $description        = new ConsoleDescription($console, $describedNamespace);$/;"	v
formatDefaultValue	thinkphp\library\think\console\output\Descriptor.php	/^    private function formatDefaultValue($default)$/;"	f
getColumnWidth	thinkphp\library\think\console\output\Descriptor.php	/^    private function getColumnWidth(array $commands)$/;"	f
help	thinkphp\library\think\console\output\Descriptor.php	/^            if ('' != $help = $console->getHelp()) {$/;"	v
laterOptions	thinkphp\library\think\console\output\Descriptor.php	/^            $laterOptions = [];$/;"	v
nameLength	thinkphp\library\think\console\output\Descriptor.php	/^            $nameLength = 4 + strlen($option->getName()) + 2; \/\/ - + shortcut + , + whitespace + name + --$/;"	v
options	thinkphp\library\think\console\output\Descriptor.php	/^    private function writeText($content, array $options = [])$/;"	v
options	thinkphp\library\think\console\output\Descriptor.php	/^    protected function describeCommand(Command $command, array $options = [])$/;"	v
options	thinkphp\library\think\console\output\Descriptor.php	/^    protected function describeConsole(Console $console, array $options = [])$/;"	v
options	thinkphp\library\think\console\output\Descriptor.php	/^    protected function describeInputArgument(InputArgument $argument, array $options = [])$/;"	v
options	thinkphp\library\think\console\output\Descriptor.php	/^    protected function describeInputDefinition(InputDefinition $definition, array $options = [])$/;"	v
options	thinkphp\library\think\console\output\Descriptor.php	/^    protected function describeInputOption(InputOption $option, array $options = [])$/;"	v
options	thinkphp\library\think\console\output\Descriptor.php	/^    public function describe(Output $output, $object, array $options = [])$/;"	v
output	thinkphp\library\think\console\output\Descriptor.php	/^        $this->output = $output;$/;"	v
output	thinkphp\library\think\console\output\Descriptor.php	/^    protected $output;$/;"	v
spacingWidth	thinkphp\library\think\console\output\Descriptor.php	/^                    $spacingWidth = $width - strlen($name);$/;"	v
spacingWidth	thinkphp\library\think\console\output\Descriptor.php	/^        $spacingWidth = $totalWidth - strlen($argument->getName()) + 2;$/;"	v
spacingWidth	thinkphp\library\think\console\output\Descriptor.php	/^        $spacingWidth = $totalWidth - strlen($synopsis) + 2;$/;"	v
synopsis	thinkphp\library\think\console\output\Descriptor.php	/^        $synopsis   = sprintf('%s%s', $option->getShortcut() ? sprintf('-%s, ', $option->getShortcut()) : '    ', sprintf('--%s%s', $option->getName(), $value));$/;"	v
totalWidth	thinkphp\library\think\console\output\Descriptor.php	/^            $totalWidth = max($totalWidth, $nameLength);$/;"	v
totalWidth	thinkphp\library\think\console\output\Descriptor.php	/^            $totalWidth = max($totalWidth, strlen($argument->getName()));$/;"	v
totalWidth	thinkphp\library\think\console\output\Descriptor.php	/^        $totalWidth   = isset($options['total_width']) ? $options['total_width'] : strlen($argument->getName());$/;"	v
totalWidth	thinkphp\library\think\console\output\Descriptor.php	/^        $totalWidth = $this->calculateTotalWidthForOptions($definition->getOptions());$/;"	v
totalWidth	thinkphp\library\think\console\output\Descriptor.php	/^        $totalWidth = 0;$/;"	v
totalWidth	thinkphp\library\think\console\output\Descriptor.php	/^        $totalWidth = isset($options['total_width']) ? $options['total_width'] : $this->calculateTotalWidthForOptions([$option]);$/;"	v
value	thinkphp\library\think\console\output\Descriptor.php	/^                $value = '[' . $value . ']';$/;"	v
value	thinkphp\library\think\console\output\Descriptor.php	/^            $value = '=' . strtoupper($option->getName());$/;"	v
value	thinkphp\library\think\console\output\Descriptor.php	/^        $value = '';$/;"	v
valueLength	thinkphp\library\think\console\output\Descriptor.php	/^                $valueLength = 1 + strlen($option->getName()); \/\/ = + value$/;"	v
width	thinkphp\library\think\console\output\Descriptor.php	/^            $width = $this->getColumnWidth($description->getCommands());$/;"	v
width	thinkphp\library\think\console\output\Descriptor.php	/^            $width = strlen($command->getName()) > $width ? strlen($command->getName()) : $width;$/;"	v
width	thinkphp\library\think\console\output\Descriptor.php	/^        $width = 0;$/;"	v
write	thinkphp\library\think\console\output\Descriptor.php	/^    protected function write($content, $decorated = false)$/;"	f
writeText	thinkphp\library\think\console\output\Descriptor.php	/^    private function writeText($content, array $options = [])$/;"	f
Formatter	thinkphp\library\think\console\output\Formatter.php	/^class Formatter$/;"	c
__construct	thinkphp\library\think\console\output\Formatter.php	/^    public function __construct()$/;"	f
applyCurrentStyle	thinkphp\library\think\console\output\Formatter.php	/^    private function applyCurrentStyle($text)$/;"	f
createStyleFromString	thinkphp\library\think\console\output\Formatter.php	/^    private function createStyleFromString($string)$/;"	f
decorated	thinkphp\library\think\console\output\Formatter.php	/^        $this->decorated = (bool) $decorated;$/;"	v
decorated	thinkphp\library\think\console\output\Formatter.php	/^    private $decorated = false;$/;"	v
escape	thinkphp\library\think\console\output\Formatter.php	/^    public static function escape($text)$/;"	f
format	thinkphp\library\think\console\output\Formatter.php	/^    public function format($message)$/;"	f
getStyle	thinkphp\library\think\console\output\Formatter.php	/^    public function getStyle($name)$/;"	f
getStyleStack	thinkphp\library\think\console\output\Formatter.php	/^    public function getStyleStack()$/;"	f
hasStyle	thinkphp\library\think\console\output\Formatter.php	/^    public function hasStyle($name)$/;"	f
i	thinkphp\library\think\console\output\Formatter.php	/^        foreach ($matches[0] as $i => $match) {$/;"	v
isDecorated	thinkphp\library\think\console\output\Formatter.php	/^    public function isDecorated()$/;"	f
offset	thinkphp\library\think\console\output\Formatter.php	/^            $offset = $pos + strlen($text);$/;"	v
offset	thinkphp\library\think\console\output\Formatter.php	/^        $offset   = 0;$/;"	v
output	thinkphp\library\think\console\output\Formatter.php	/^        $output   = '';$/;"	v
pos	thinkphp\library\think\console\output\Formatter.php	/^            $pos  = $match[1];$/;"	v
setDecorated	thinkphp\library\think\console\output\Formatter.php	/^    public function setDecorated($decorated)$/;"	f
setStyle	thinkphp\library\think\console\output\Formatter.php	/^    public function setStyle($name, Style $style)$/;"	f
style	thinkphp\library\think\console\output\Formatter.php	/^            } elseif (false === $style = $this->createStyleFromString(strtolower($tag))) {$/;"	v
style	thinkphp\library\think\console\output\Formatter.php	/^        $style = new Style();$/;"	v
styleStack	thinkphp\library\think\console\output\Formatter.php	/^        $this->styleStack = new StyleStack();$/;"	v
styleStack	thinkphp\library\think\console\output\Formatter.php	/^    private $styleStack;$/;"	v
styles	thinkphp\library\think\console\output\Formatter.php	/^    private $styles    = [];$/;"	v
tag	thinkphp\library\think\console\output\Formatter.php	/^                $tag = $matches[1][$i][0];$/;"	v
tag	thinkphp\library\think\console\output\Formatter.php	/^                $tag = isset($matches[3][$i][0]) ? $matches[3][$i][0] : '';$/;"	v
tagRegex	thinkphp\library\think\console\output\Formatter.php	/^        $tagRegex = '[a-z][a-z0-9_=;-]*';$/;"	v
text	thinkphp\library\think\console\output\Formatter.php	/^            $text = $match[0];$/;"	v
Question	thinkphp\library\think\console\output\Question.php	/^class Question$/;"	c
__construct	thinkphp\library\think\console\output\Question.php	/^    public function __construct($question, $default = null)$/;"	f
attempts	thinkphp\library\think\console\output\Question.php	/^        $this->attempts = $attempts;$/;"	v
attempts	thinkphp\library\think\console\output\Question.php	/^    private $attempts;$/;"	v
autocompleterValues	thinkphp\library\think\console\output\Question.php	/^        $this->autocompleterValues = $values;$/;"	v
autocompleterValues	thinkphp\library\think\console\output\Question.php	/^    private $autocompleterValues;$/;"	v
default	thinkphp\library\think\console\output\Question.php	/^        $this->default  = $default;$/;"	v
default	thinkphp\library\think\console\output\Question.php	/^    private $default;$/;"	v
default	thinkphp\library\think\console\output\Question.php	/^    public function __construct($question, $default = null)$/;"	v
getAutocompleterValues	thinkphp\library\think\console\output\Question.php	/^    public function getAutocompleterValues()$/;"	f
getDefault	thinkphp\library\think\console\output\Question.php	/^    public function getDefault()$/;"	f
getMaxAttempts	thinkphp\library\think\console\output\Question.php	/^    public function getMaxAttempts()$/;"	f
getNormalizer	thinkphp\library\think\console\output\Question.php	/^    public function getNormalizer()$/;"	f
getQuestion	thinkphp\library\think\console\output\Question.php	/^    public function getQuestion()$/;"	f
getValidator	thinkphp\library\think\console\output\Question.php	/^    public function getValidator()$/;"	f
hidden	thinkphp\library\think\console\output\Question.php	/^        $this->hidden = (bool) $hidden;$/;"	v
hidden	thinkphp\library\think\console\output\Question.php	/^    private $hidden         = false;$/;"	v
hiddenFallback	thinkphp\library\think\console\output\Question.php	/^        $this->hiddenFallback = (bool) $fallback;$/;"	v
hiddenFallback	thinkphp\library\think\console\output\Question.php	/^    private $hiddenFallback = true;$/;"	v
implementing	thinkphp\library\think\console\output\Question.php	/^     * The normalizer can ba a callable (a string), a closure or a class implementing __invoke.$/;"	c
isAssoc	thinkphp\library\think\console\output\Question.php	/^    protected function isAssoc($array)$/;"	f
isHidden	thinkphp\library\think\console\output\Question.php	/^    public function isHidden()$/;"	f
isHiddenFallback	thinkphp\library\think\console\output\Question.php	/^    public function isHiddenFallback()$/;"	f
normalizer	thinkphp\library\think\console\output\Question.php	/^        $this->normalizer = $normalizer;$/;"	v
normalizer	thinkphp\library\think\console\output\Question.php	/^    private $normalizer;$/;"	v
question	thinkphp\library\think\console\output\Question.php	/^        $this->question = $question;$/;"	v
question	thinkphp\library\think\console\output\Question.php	/^    private $question;$/;"	v
setAutocompleterValues	thinkphp\library\think\console\output\Question.php	/^    public function setAutocompleterValues($values)$/;"	f
setHidden	thinkphp\library\think\console\output\Question.php	/^    public function setHidden($hidden)$/;"	f
setHiddenFallback	thinkphp\library\think\console\output\Question.php	/^    public function setHiddenFallback($fallback)$/;"	f
setMaxAttempts	thinkphp\library\think\console\output\Question.php	/^    public function setMaxAttempts($attempts)$/;"	f
setNormalizer	thinkphp\library\think\console\output\Question.php	/^    public function setNormalizer($normalizer)$/;"	f
setValidator	thinkphp\library\think\console\output\Question.php	/^    public function setValidator($validator)$/;"	f
validator	thinkphp\library\think\console\output\Question.php	/^        $this->validator = $validator;$/;"	v
validator	thinkphp\library\think\console\output\Question.php	/^    private $validator;$/;"	v
values	thinkphp\library\think\console\output\Question.php	/^            $values = array_merge(array_keys($values), array_values($values));$/;"	v
Console	thinkphp\library\think\console\output\descriptor\Console.php	/^class Console$/;"	c
__construct	thinkphp\library\think\console\output\descriptor\Console.php	/^    public function __construct(ThinkConsole $console, $namespace = null)$/;"	f
aliases	thinkphp\library\think\console\output\descriptor\Console.php	/^    private $aliases;$/;"	v
all	thinkphp\library\think\console\output\descriptor\Console.php	/^        $all = $this->console->all($this->namespace ? $this->console->findNamespace($this->namespace) : null);$/;"	v
commands	thinkphp\library\think\console\output\descriptor\Console.php	/^        $this->commands   = [];$/;"	v
commands	thinkphp\library\think\console\output\descriptor\Console.php	/^    private $commands;$/;"	v
console	thinkphp\library\think\console\output\descriptor\Console.php	/^        $this->console   = $console;$/;"	v
console	thinkphp\library\think\console\output\descriptor\Console.php	/^    private $console;$/;"	v
getCommand	thinkphp\library\think\console\output\descriptor\Console.php	/^    public function getCommand($name)$/;"	f
getCommands	thinkphp\library\think\console\output\descriptor\Console.php	/^    public function getCommands()$/;"	f
getNamespaces	thinkphp\library\think\console\output\descriptor\Console.php	/^    public function getNamespaces()$/;"	f
inspectConsole	thinkphp\library\think\console\output\descriptor\Console.php	/^    private function inspectConsole()$/;"	f
key	thinkphp\library\think\console\output\descriptor\Console.php	/^                $key = self::GLOBAL_NAMESPACE;$/;"	v
key	thinkphp\library\think\console\output\descriptor\Console.php	/^            $key = $this->console->extractNamespace($name, 1);$/;"	v
name	thinkphp\library\think\console\output\descriptor\Console.php	/^            foreach ($commands as $name => $command) {$/;"	v
name	thinkphp\library\think\console\output\descriptor\Console.php	/^        foreach ($commands as $name => $command) {$/;"	v
names	thinkphp\library\think\console\output\descriptor\Console.php	/^            $names = [];$/;"	v
namespace	thinkphp\library\think\console\output\descriptor\Console.php	/^        $this->namespace = $namespace;$/;"	v
namespace	thinkphp\library\think\console\output\descriptor\Console.php	/^        foreach ($this->sortCommands($all) as $namespace => $commands) {$/;"	v
namespace	thinkphp\library\think\console\output\descriptor\Console.php	/^    private $namespace;$/;"	v
namespace	thinkphp\library\think\console\output\descriptor\Console.php	/^    public function __construct(ThinkConsole $console, $namespace = null)$/;"	v
namespacedCommands	thinkphp\library\think\console\output\descriptor\Console.php	/^        $namespacedCommands = [];$/;"	v
namespaces	thinkphp\library\think\console\output\descriptor\Console.php	/^        $this->namespaces = [];$/;"	v
namespaces	thinkphp\library\think\console\output\descriptor\Console.php	/^    private $namespaces;$/;"	v
sortCommands	thinkphp\library\think\console\output\descriptor\Console.php	/^    private function sortCommands(array $commands)$/;"	f
Buffer	thinkphp\library\think\console\output\driver\Buffer.php	/^class Buffer$/;"	c
__construct	thinkphp\library\think\console\output\driver\Buffer.php	/^    public function __construct(Output $output)$/;"	f
buffer	thinkphp\library\think\console\output\driver\Buffer.php	/^        $this->buffer = '';$/;"	v
buffer	thinkphp\library\think\console\output\driver\Buffer.php	/^    private $buffer = '';$/;"	v
content	thinkphp\library\think\console\output\driver\Buffer.php	/^        $content      = $this->buffer;$/;"	v
fetch	thinkphp\library\think\console\output\driver\Buffer.php	/^    public function fetch()$/;"	f
messages	thinkphp\library\think\console\output\driver\Buffer.php	/^        $messages = (array) $messages;$/;"	v
newline	thinkphp\library\think\console\output\driver\Buffer.php	/^    public function write($messages, $newline = false, $options = Output::OUTPUT_NORMAL)$/;"	v
renderException	thinkphp\library\think\console\output\driver\Buffer.php	/^    public function renderException(\\Exception $e)$/;"	f
write	thinkphp\library\think\console\output\driver\Buffer.php	/^    public function write($messages, $newline = false, $options = Output::OUTPUT_NORMAL)$/;"	f
Console	thinkphp\library\think\console\output\driver\Console.php	/^class Console$/;"	c
__construct	thinkphp\library\think\console\output\driver\Console.php	/^    public function __construct(Output $output)$/;"	f
checks	thinkphp\library\think\console\output\driver\Console.php	/^        $checks = [$/;"	v
class	thinkphp\library\think\console\output\driver\Console.php	/^                    $class    = isset($trace[$i]['class']) ? $trace[$i]['class'] : '';$/;"	v
count	thinkphp\library\think\console\output\driver\Console.php	/^                for ($i = 0, $count = count($trace); $i < $count; ++$i) {$/;"	v
decorated	thinkphp\library\think\console\output\driver\Console.php	/^        $decorated       = $this->hasColorSupport($this->stdout);$/;"	v
decorated	thinkphp\library\think\console\output\driver\Console.php	/^        $decorated = $this->hasColorSupport($stderr);$/;"	v
descriptorspec	thinkphp\library\think\console\output\driver\Console.php	/^        $descriptorspec = [1 => ['pipe', 'w'], 2 => ['pipe', 'w']];$/;"	v
dimensions	thinkphp\library\think\console\output\driver\Console.php	/^        $dimensions = $this->getTerminalDimensions();$/;"	v
doWrite	thinkphp\library\think\console\output\driver\Console.php	/^    protected function doWrite($message, $newline, $stream = null)$/;"	f
emptyLine	thinkphp\library\think\console\output\driver\Console.php	/^            $messages[] = $emptyLine = sprintf('<error>%s<\/error>', str_repeat(' ', $len));$/;"	v
encoding	thinkphp\library\think\console\output\driver\Console.php	/^        if (false === $encoding = mb_detect_encoding($string)) {$/;"	v
file	thinkphp\library\think\console\output\driver\Console.php	/^                    $file     = isset($trace[$i]['file']) ? $trace[$i]['file'] : 'n\/a';$/;"	v
formatter	thinkphp\library\think\console\output\driver\Console.php	/^        $this->formatter = new Formatter();$/;"	v
formatter	thinkphp\library\think\console\output\driver\Console.php	/^    private $formatter;$/;"	v
function	thinkphp\library\think\console\output\driver\Console.php	/^                    $function = $trace[$i]['function'];$/;"	v
getMode	thinkphp\library\think\console\output\driver\Console.php	/^    private function getMode()$/;"	f
getSttyColumns	thinkphp\library\think\console\output\driver\Console.php	/^    private function getSttyColumns()$/;"	f
getTerminalDimensions	thinkphp\library\think\console\output\driver\Console.php	/^    public function getTerminalDimensions()$/;"	f
getTerminalHeight	thinkphp\library\think\console\output\driver\Console.php	/^    protected function getTerminalHeight()$/;"	f
getTerminalWidth	thinkphp\library\think\console\output\driver\Console.php	/^    protected function getTerminalWidth()$/;"	f
hasColorSupport	thinkphp\library\think\console\output\driver\Console.php	/^    protected function hasColorSupport($stream)$/;"	f
hasStderrSupport	thinkphp\library\think\console\output\driver\Console.php	/^    protected function hasStderrSupport()$/;"	f
hasStdoutSupport	thinkphp\library\think\console\output\driver\Console.php	/^    protected function hasStdoutSupport()$/;"	f
info	thinkphp\library\think\console\output\driver\Console.php	/^            $info = stream_get_contents($pipes[1]);$/;"	v
isRunningOS400	thinkphp\library\think\console\output\driver\Console.php	/^    private function isRunningOS400()$/;"	f
len	thinkphp\library\think\console\output\driver\Console.php	/^                    $len = max($lineLength, $len);$/;"	v
len	thinkphp\library\think\console\output\driver\Console.php	/^            $len = $this->stringWidth($title);$/;"	v
line	thinkphp\library\think\console\output\driver\Console.php	/^                    $line     = isset($trace[$i]['line']) ? $trace[$i]['line'] : 'n\/a';$/;"	v
line	thinkphp\library\think\console\output\driver\Console.php	/^            $line    = $char;$/;"	v
line	thinkphp\library\think\console\output\driver\Console.php	/^        $line       = '';$/;"	v
lineLength	thinkphp\library\think\console\output\driver\Console.php	/^                    $lineLength = $this->stringWidth(preg_replace('\/\\[[^m]*m\/', '', $line)) + 4;$/;"	v
lines	thinkphp\library\think\console\output\driver\Console.php	/^            $lines = [];$/;"	v
lines	thinkphp\library\think\console\output\driver\Console.php	/^        $lines      = [];$/;"	v
message	thinkphp\library\think\console\output\driver\Console.php	/^                    $message = $this->formatter->format($message);$/;"	v
message	thinkphp\library\think\console\output\driver\Console.php	/^                    $message = strip_tags($this->formatter->format($message));$/;"	v
messages	thinkphp\library\think\console\output\driver\Console.php	/^            $messages   = ['', ''];$/;"	v
messages	thinkphp\library\think\console\output\driver\Console.php	/^        $messages = (array) $messages;$/;"	v
newline	thinkphp\library\think\console\output\driver\Console.php	/^    public function write($messages, $newline = false, $type = Output::OUTPUT_NORMAL, $stream = null)$/;"	v
openErrorStream	thinkphp\library\think\console\output\driver\Console.php	/^    private function openErrorStream()$/;"	f
openOutputStream	thinkphp\library\think\console\output\driver\Console.php	/^    private function openOutputStream()$/;"	f
output	thinkphp\library\think\console\output\driver\Console.php	/^        $this->output    = $output;$/;"	v
output	thinkphp\library\think\console\output\driver\Console.php	/^    private $output;$/;"	v
process	thinkphp\library\think\console\output\driver\Console.php	/^        $process        = proc_open('mode CON', $descriptorspec, $pipes, null, null, ['suppress_errors' => true]);$/;"	v
process	thinkphp\library\think\console\output\driver\Console.php	/^        $process        = proc_open('stty -a | grep columns', $descriptorspec, $pipes, null, null, ['suppress_errors' => true]);$/;"	v
renderException	thinkphp\library\think\console\output\driver\Console.php	/^    public function renderException(\\Exception $e)$/;"	f
setDecorated	thinkphp\library\think\console\output\driver\Console.php	/^    public function setDecorated($decorated)$/;"	f
splitStringByWidth	thinkphp\library\think\console\output\driver\Console.php	/^    private function splitStringByWidth($string, $width)$/;"	f
stderr	thinkphp\library\think\console\output\driver\Console.php	/^        $stderr    = $this->openErrorStream();$/;"	v
stdout	thinkphp\library\think\console\output\driver\Console.php	/^        $this->stdout    = $this->openOutputStream();$/;"	v
stdout	thinkphp\library\think\console\output\driver\Console.php	/^    private $stdout;$/;"	v
stream	thinkphp\library\think\console\output\driver\Console.php	/^            $stream = $this->stdout;$/;"	v
stream	thinkphp\library\think\console\output\driver\Console.php	/^    protected function doWrite($message, $newline, $stream = null)$/;"	v
stringWidth	thinkphp\library\think\console\output\driver\Console.php	/^    private function stringWidth($string)$/;"	f
terminalDimensions	thinkphp\library\think\console\output\driver\Console.php	/^    private $terminalDimensions;$/;"	v
title	thinkphp\library\think\console\output\driver\Console.php	/^            $title = sprintf('  [%s]  ', get_class($e));$/;"	v
trace	thinkphp\library\think\console\output\driver\Console.php	/^                $trace = $e->getTrace();$/;"	v
type	thinkphp\library\think\console\output\driver\Console.php	/^                    $type     = isset($trace[$i]['type']) ? $trace[$i]['type'] : '';$/;"	v
utf8String	thinkphp\library\think\console\output\driver\Console.php	/^        $utf8String = mb_convert_encoding($string, 'utf8', $encoding);$/;"	v
width	thinkphp\library\think\console\output\driver\Console.php	/^                $width = 1 << 31;$/;"	v
width	thinkphp\library\think\console\output\driver\Console.php	/^            $width = $this->getTerminalWidth() ? $this->getTerminalWidth() - 1 : PHP_INT_MAX;$/;"	v
write	thinkphp\library\think\console\output\driver\Console.php	/^    public function write($messages, $newline = false, $type = Output::OUTPUT_NORMAL, $stream = null)$/;"	f
Nothing	thinkphp\library\think\console\output\driver\Nothing.php	/^class Nothing$/;"	c
__construct	thinkphp\library\think\console\output\driver\Nothing.php	/^    public function __construct(Output $output)$/;"	f
newline	thinkphp\library\think\console\output\driver\Nothing.php	/^    public function write($messages, $newline = false, $options = Output::OUTPUT_NORMAL)$/;"	v
renderException	thinkphp\library\think\console\output\driver\Nothing.php	/^    public function renderException(\\Exception $e)$/;"	f
write	thinkphp\library\think\console\output\driver\Nothing.php	/^    public function write($messages, $newline = false, $options = Output::OUTPUT_NORMAL)$/;"	f
Stack	thinkphp\library\think\console\output\formatter\Stack.php	/^class Stack$/;"	c
__construct	thinkphp\library\think\console\output\formatter\Stack.php	/^    public function __construct(Style $emptyStyle = null)$/;"	f
emptyStyle	thinkphp\library\think\console\output\formatter\Stack.php	/^        $this->emptyStyle = $emptyStyle ?: new Style();$/;"	v
emptyStyle	thinkphp\library\think\console\output\formatter\Stack.php	/^        $this->emptyStyle = $emptyStyle;$/;"	v
emptyStyle	thinkphp\library\think\console\output\formatter\Stack.php	/^    private $emptyStyle;$/;"	v
emptyStyle	thinkphp\library\think\console\output\formatter\Stack.php	/^    public function __construct(Style $emptyStyle = null)$/;"	v
getCurrent	thinkphp\library\think\console\output\formatter\Stack.php	/^    public function getCurrent()$/;"	f
getEmptyStyle	thinkphp\library\think\console\output\formatter\Stack.php	/^    public function getEmptyStyle()$/;"	f
index	thinkphp\library\think\console\output\formatter\Stack.php	/^        foreach (array_reverse($this->styles, true) as $index => $stackedStyle) {$/;"	v
pop	thinkphp\library\think\console\output\formatter\Stack.php	/^    public function pop(Style $style = null)$/;"	f
push	thinkphp\library\think\console\output\formatter\Stack.php	/^    public function push(Style $style)$/;"	f
reset	thinkphp\library\think\console\output\formatter\Stack.php	/^    public function reset()$/;"	f
setEmptyStyle	thinkphp\library\think\console\output\formatter\Stack.php	/^    public function setEmptyStyle(Style $emptyStyle)$/;"	f
style	thinkphp\library\think\console\output\formatter\Stack.php	/^    public function pop(Style $style = null)$/;"	v
styles	thinkphp\library\think\console\output\formatter\Stack.php	/^                $this->styles = array_slice($this->styles, 0, $index);$/;"	v
styles	thinkphp\library\think\console\output\formatter\Stack.php	/^        $this->styles = [];$/;"	v
styles	thinkphp\library\think\console\output\formatter\Stack.php	/^    private $styles;$/;"	v
Style	thinkphp\library\think\console\output\formatter\Style.php	/^class Style$/;"	c
__construct	thinkphp\library\think\console\output\formatter\Style.php	/^    public function __construct($foreground = null, $background = null, array $options = [])$/;"	f
apply	thinkphp\library\think\console\output\formatter\Style.php	/^    public function apply($text)$/;"	f
availableBackgroundColors	thinkphp\library\think\console\output\formatter\Style.php	/^    private static $availableBackgroundColors = [$/;"	v
availableForegroundColors	thinkphp\library\think\console\output\formatter\Style.php	/^    private static $availableForegroundColors = [$/;"	v
availableOptions	thinkphp\library\think\console\output\formatter\Style.php	/^    private static $availableOptions = [$/;"	v
background	thinkphp\library\think\console\output\formatter\Style.php	/^            $this->background = null;$/;"	v
background	thinkphp\library\think\console\output\formatter\Style.php	/^        $this->background = static::$availableBackgroundColors[$color];$/;"	v
background	thinkphp\library\think\console\output\formatter\Style.php	/^    private $background;$/;"	v
background	thinkphp\library\think\console\output\formatter\Style.php	/^    public function __construct($foreground = null, $background = null, array $options = [])$/;"	v
foreground	thinkphp\library\think\console\output\formatter\Style.php	/^            $this->foreground = null;$/;"	v
foreground	thinkphp\library\think\console\output\formatter\Style.php	/^        $this->foreground = static::$availableForegroundColors[$color];$/;"	v
foreground	thinkphp\library\think\console\output\formatter\Style.php	/^    private $foreground;$/;"	v
options	thinkphp\library\think\console\output\formatter\Style.php	/^        $this->options = [];$/;"	v
options	thinkphp\library\think\console\output\formatter\Style.php	/^    private $options = [];$/;"	v
pos	thinkphp\library\think\console\output\formatter\Style.php	/^        $pos = array_search(static::$availableOptions[$option], $this->options);$/;"	v
setBackground	thinkphp\library\think\console\output\formatter\Style.php	/^    public function setBackground($color = null)$/;"	f
setCodes	thinkphp\library\think\console\output\formatter\Style.php	/^        $setCodes   = [];$/;"	v
setForeground	thinkphp\library\think\console\output\formatter\Style.php	/^    public function setForeground($color = null)$/;"	f
setOption	thinkphp\library\think\console\output\formatter\Style.php	/^    public function setOption($option)$/;"	f
setOptions	thinkphp\library\think\console\output\formatter\Style.php	/^    public function setOptions(array $options)$/;"	f
unsetCodes	thinkphp\library\think\console\output\formatter\Style.php	/^        $unsetCodes = [];$/;"	v
unsetOption	thinkphp\library\think\console\output\formatter\Style.php	/^    public function unsetOption($option)$/;"	f
Choice	thinkphp\library\think\console\output\question\Choice.php	/^class Choice extends Question$/;"	c
__construct	thinkphp\library\think\console\output\question\Choice.php	/^    public function __construct($question, array $choices, $default = null)$/;"	f
choices	thinkphp\library\think\console\output\question\Choice.php	/^        $choices      = $this->choices;$/;"	v
choices	thinkphp\library\think\console\output\question\Choice.php	/^        $this->choices = $choices;$/;"	v
choices	thinkphp\library\think\console\output\question\Choice.php	/^    private $choices;$/;"	v
default	thinkphp\library\think\console\output\question\Choice.php	/^    public function __construct($question, array $choices, $default = null)$/;"	v
errorMessage	thinkphp\library\think\console\output\question\Choice.php	/^        $errorMessage = $this->errorMessage;$/;"	v
errorMessage	thinkphp\library\think\console\output\question\Choice.php	/^        $this->errorMessage = $errorMessage;$/;"	v
errorMessage	thinkphp\library\think\console\output\question\Choice.php	/^    private $errorMessage = 'Value "%s" is invalid';$/;"	v
getChoices	thinkphp\library\think\console\output\question\Choice.php	/^    public function getChoices()$/;"	f
getDefaultValidator	thinkphp\library\think\console\output\question\Choice.php	/^    private function getDefaultValidator()$/;"	f
getPrompt	thinkphp\library\think\console\output\question\Choice.php	/^    public function getPrompt()$/;"	f
isAssoc	thinkphp\library\think\console\output\question\Choice.php	/^        $isAssoc      = $this->isAssoc($choices);$/;"	v
isMultiselect	thinkphp\library\think\console\output\question\Choice.php	/^    public function isMultiselect()$/;"	f
key	thinkphp\library\think\console\output\question\Choice.php	/^                foreach ($choices as $key => $choice) {$/;"	v
multiselect	thinkphp\library\think\console\output\question\Choice.php	/^        $multiselect  = $this->multiselect;$/;"	v
multiselect	thinkphp\library\think\console\output\question\Choice.php	/^        $this->multiselect = $multiselect;$/;"	v
multiselect	thinkphp\library\think\console\output\question\Choice.php	/^    private $multiselect  = false;$/;"	v
multiselectChoices	thinkphp\library\think\console\output\question\Choice.php	/^            $multiselectChoices = [];$/;"	v
prompt	thinkphp\library\think\console\output\question\Choice.php	/^        $this->prompt = $prompt;$/;"	v
prompt	thinkphp\library\think\console\output\question\Choice.php	/^    private $prompt       = ' > ';$/;"	v
result	thinkphp\library\think\console\output\question\Choice.php	/^                        $result = $choices[$result];$/;"	v
result	thinkphp\library\think\console\output\question\Choice.php	/^                        $result = $choices[$value];$/;"	v
result	thinkphp\library\think\console\output\question\Choice.php	/^                    $result = $value;$/;"	v
result	thinkphp\library\think\console\output\question\Choice.php	/^                $result = array_search($value, $choices);$/;"	v
results	thinkphp\library\think\console\output\question\Choice.php	/^                $results = [];$/;"	v
selectedChoices	thinkphp\library\think\console\output\question\Choice.php	/^                $selectedChoices = [$selected];$/;"	v
selectedChoices	thinkphp\library\think\console\output\question\Choice.php	/^                $selectedChoices = explode(',', $selectedChoices);$/;"	v
selectedChoices	thinkphp\library\think\console\output\question\Choice.php	/^            $selectedChoices = str_replace(' ', '', $selected);$/;"	v
setErrorMessage	thinkphp\library\think\console\output\question\Choice.php	/^    public function setErrorMessage($errorMessage)$/;"	f
setMultiselect	thinkphp\library\think\console\output\question\Choice.php	/^    public function setMultiselect($multiselect)$/;"	f
setPrompt	thinkphp\library\think\console\output\question\Choice.php	/^    public function setPrompt($prompt)$/;"	f
Confirmation	thinkphp\library\think\console\output\question\Confirmation.php	/^class Confirmation extends Question$/;"	c
__construct	thinkphp\library\think\console\output\question\Confirmation.php	/^    public function __construct($question, $default = true, $trueAnswerRegex = '\/^y\/i')$/;"	f
answerIsTrue	thinkphp\library\think\console\output\question\Confirmation.php	/^            $answerIsTrue = (bool) preg_match($regex, $answer);$/;"	v
default	thinkphp\library\think\console\output\question\Confirmation.php	/^        $default = $this->getDefault();$/;"	v
default	thinkphp\library\think\console\output\question\Confirmation.php	/^    public function __construct($question, $default = true, $trueAnswerRegex = '\/^y\/i')$/;"	v
getDefaultNormalizer	thinkphp\library\think\console\output\question\Confirmation.php	/^    private function getDefaultNormalizer()$/;"	f
regex	thinkphp\library\think\console\output\question\Confirmation.php	/^        $regex   = $this->trueAnswerRegex;$/;"	v
trueAnswerRegex	thinkphp\library\think\console\output\question\Confirmation.php	/^        $this->trueAnswerRegex = $trueAnswerRegex;$/;"	v
trueAnswerRegex	thinkphp\library\think\console\output\question\Confirmation.php	/^    private $trueAnswerRegex;$/;"	v
Builder	thinkphp\library\think\db\Builder.php	/^abstract class Builder$/;"	c
__construct	thinkphp\library\think\db\Builder.php	/^    public function __construct(Connection $connection)$/;"	f
array	thinkphp\library\think\db\Builder.php	/^                    $array = explode('&', $field);$/;"	v
array	thinkphp\library\think\db\Builder.php	/^                    $array = explode('|', $field);$/;"	v
array	thinkphp\library\think\db\Builder.php	/^                $array = [];$/;"	v
array	thinkphp\library\think\db\Builder.php	/^            $array = [];$/;"	v
between	thinkphp\library\think\db\Builder.php	/^            $between = ':' . $bindKey1 . ' AND :' . $bindKey2;$/;"	v
bind	thinkphp\library\think\db\Builder.php	/^                $bind  = [];$/;"	v
bind	thinkphp\library\think\db\Builder.php	/^            $bind = [$/;"	v
bind	thinkphp\library\think\db\Builder.php	/^        $bind = $this->connection->getFieldsBind($options['table']);$/;"	v
bindKey	thinkphp\library\think\db\Builder.php	/^                        $bindKey = $bindName . '_in_' . $i;$/;"	v
bindKey	thinkphp\library\think\db\Builder.php	/^                        $bindKey = $bindName . '_in_' . uniqid() . '_' . $i;$/;"	v
bindKey1	thinkphp\library\think\db\Builder.php	/^                $bindKey1 = $bindName . '_between_1' . uniqid();$/;"	v
bindKey1	thinkphp\library\think\db\Builder.php	/^                $bindKey1 = $bindName . '_between_1';$/;"	v
bindKey1	thinkphp\library\think\db\Builder.php	/^                $bindKey1 => [$data[0], $bindType],$/;"	v
bindKey2	thinkphp\library\think\db\Builder.php	/^                $bindKey2 = $bindName . '_between_2' . uniqid();$/;"	v
bindKey2	thinkphp\library\think\db\Builder.php	/^                $bindKey2 = $bindName . '_between_2';$/;"	v
bindKey2	thinkphp\library\think\db\Builder.php	/^                $bindKey2 => [$data[1], $bindType],$/;"	v
bindName	thinkphp\library\think\db\Builder.php	/^                $bindName = 'where_' . str_replace('.', '_', $field) . '_' . $k;$/;"	v
bindName	thinkphp\library\think\db\Builder.php	/^            $bindName = md5($bindName);$/;"	v
bindName	thinkphp\library\think\db\Builder.php	/^        $bindName = $bindName ?: $key;$/;"	v
bindName	thinkphp\library\think\db\Builder.php	/^        $bindName = $bindName ?: 'where_' . str_replace(['.', '-'], '_', $field);$/;"	v
bindName	thinkphp\library\think\db\Builder.php	/^    protected function parseDateTime(Query $query, $value, $key, $bindName = null, $bindType = null)$/;"	v
bindType	thinkphp\library\think\db\Builder.php	/^        $bindType = isset($binds[$field]) ? $binds[$field] : PDO::PARAM_STR;$/;"	v
binds	thinkphp\library\think\db\Builder.php	/^            $binds    = $this->connection->getFieldsBind($options['table']);$/;"	v
binds	thinkphp\library\think\db\Builder.php	/^        $binds    = $this->connection->getFieldsBind($query->getOptions('table'));$/;"	v
buildWhere	thinkphp\library\think\db\Builder.php	/^    public function buildWhere(Query $query, $where)$/;"	f
condition	thinkphp\library\think\db\Builder.php	/^                $condition = [];$/;"	v
connection	thinkphp\library\think\db\Builder.php	/^        $this->connection = $connection;$/;"	v
connection	thinkphp\library\think\db\Builder.php	/^    protected $connection;$/;"	v
data	thinkphp\library\think\db\Builder.php	/^            $data = is_array($value) ? $value : explode(',', $value);$/;"	v
data	thinkphp\library\think\db\Builder.php	/^        $data  = $this->parseData($query, $options['data']);$/;"	v
data	thinkphp\library\think\db\Builder.php	/^        $data = $this->parseData($query, $options['data']);$/;"	v
data	thinkphp\library\think\db\Builder.php	/^    protected function parseData(Query $query, $data = [])$/;"	v
delete	thinkphp\library\think\db\Builder.php	/^    public function delete(Query $query)$/;"	f
deleteSql	thinkphp\library\think\db\Builder.php	/^    protected $deleteSql = 'DELETE FROM %TABLE% %USING% %JOIN% %WHERE% %ORDER%%LIMIT% %LOCK%%COMMENT%';$/;"	v
exp	thinkphp\library\think\db\Builder.php	/^                $exp = $this->exp[$exp];$/;"	v
exp	thinkphp\library\think\db\Builder.php	/^            $exp = strtolower($exp);$/;"	v
exp	thinkphp\library\think\db\Builder.php	/^    protected $exp = ['eq' => '=', 'neq' => '<>', 'gt' => '>', 'egt' => '>=', 'lt' => '<', 'elt' => '<=', 'notlike' => 'NOT LIKE', 'not like' => 'NOT LIKE', 'like' => 'LIKE', 'in' => 'IN', 'exp' => 'EXP', 'notin' => 'NOT IN', 'not in' => 'NOT IN', 'between' => 'BETWEEN', 'not between' => 'NOT BETWEEN', 'notbetween' => 'NOT BETWEEN', 'exists' => 'EXISTS', 'notexists' => 'NOT EXISTS', 'not exists' => 'NOT EXISTS', 'null' => 'NULL', 'notnull' => 'NOT NULL', 'not null' => 'NOT NULL', '> time' => '> TIME', '< time' => '< TIME', '>= time' => '>= TIME', '<= time' => '<= TIME', 'between time' => 'BETWEEN TIME', 'not between time' => 'NOT BETWEEN TIME', 'notbetween time' => 'NOT BETWEEN TIME'];$/;"	v
field	thinkphp\library\think\db\Builder.php	/^                    $field = array_shift($value);$/;"	v
field	thinkphp\library\think\db\Builder.php	/^                    $field = is_string($field) ? $field : '';$/;"	v
field	thinkphp\library\think\db\Builder.php	/^            $field = $this->parseKey($query, $field);$/;"	v
field	thinkphp\library\think\db\Builder.php	/^    protected function parseValue(Query $query, $value, $field = '')$/;"	v
fields	thinkphp\library\think\db\Builder.php	/^            $fields = $options['field'];$/;"	v
fields	thinkphp\library\think\db\Builder.php	/^            $fields = $this->connection->getTableFields($options['table']);$/;"	v
fields	thinkphp\library\think\db\Builder.php	/^            $fields = array_keys($bind);$/;"	v
fields	thinkphp\library\think\db\Builder.php	/^            $fields = explode(',', $fields);$/;"	v
fields	thinkphp\library\think\db\Builder.php	/^        $fields = [];$/;"	v
fields	thinkphp\library\think\db\Builder.php	/^        $fields = array_keys($data);$/;"	v
fieldsStr	thinkphp\library\think\db\Builder.php	/^            $fieldsStr = '*';$/;"	v
fieldsStr	thinkphp\library\think\db\Builder.php	/^            $fieldsStr = implode(',', $array);$/;"	v
getConnection	thinkphp\library\think\db\Builder.php	/^    public function getConnection()$/;"	f
i	thinkphp\library\think\db\Builder.php	/^                $i     = 0;$/;"	v
index	thinkphp\library\think\db\Builder.php	/^            $index = join(",", $index);$/;"	v
info	thinkphp\library\think\db\Builder.php	/^            $info = $type[$key];$/;"	v
insert	thinkphp\library\think\db\Builder.php	/^    public function insert(Query $query, $replace = false)$/;"	f
insertAll	thinkphp\library\think\db\Builder.php	/^    public function insertAll(Query $query, $dataSet, $replace = false)$/;"	f
insertAllSql	thinkphp\library\think\db\Builder.php	/^    protected $insertAllSql = '%INSERT% INTO %TABLE% (%FIELD%) %DATA% %COMMENT%';$/;"	v
insertSql	thinkphp\library\think\db\Builder.php	/^    protected $insertSql = '%INSERT% INTO %TABLE% (%FIELD%) VALUES (%DATA%) %COMMENT%';$/;"	v
item	thinkphp\library\think\db\Builder.php	/^                    $item  = [];$/;"	v
item	thinkphp\library\think\db\Builder.php	/^            $item = $this->parseKey($query, $key);$/;"	v
item	thinkphp\library\think\db\Builder.php	/^            $item = array_pop($val);$/;"	v
item	thinkphp\library\think\db\Builder.php	/^        $item    = [];$/;"	v
joinStr	thinkphp\library\think\db\Builder.php	/^        $joinStr = '';$/;"	v
k	thinkphp\library\think\db\Builder.php	/^                foreach ($value as $k => $v) {$/;"	v
k	thinkphp\library\think\db\Builder.php	/^            foreach ($val as $k => $item) {$/;"	v
key	thinkphp\library\think\db\Builder.php	/^                    $key = str_replace('.', '_', $key);$/;"	v
key	thinkphp\library\think\db\Builder.php	/^                    $key = strstr($key, '@think', true);$/;"	v
key	thinkphp\library\think\db\Builder.php	/^                $key    = $this->connection->parseSqlTable($key);$/;"	v
key	thinkphp\library\think\db\Builder.php	/^            foreach ($data as $key => $val) {$/;"	v
key	thinkphp\library\think\db\Builder.php	/^            foreach ($fields as $key => $field) {$/;"	v
key	thinkphp\library\think\db\Builder.php	/^            foreach ($order as $key => $val) {$/;"	v
key	thinkphp\library\think\db\Builder.php	/^        $key = $field ? $this->parseKey($query, $field) : '';$/;"	v
key	thinkphp\library\think\db\Builder.php	/^        foreach ($data as $key => $val) {$/;"	v
key	thinkphp\library\think\db\Builder.php	/^        foreach ((array) $tables as $key => $table) {$/;"	v
lock	thinkphp\library\think\db\Builder.php	/^    protected function parseLock(Query $query, $lock = false)$/;"	v
logic	thinkphp\library\think\db\Builder.php	/^                $logic = isset($val[2]) ? $val[2] : 'AND';$/;"	v
logic	thinkphp\library\think\db\Builder.php	/^        foreach ($where as $logic => $val) {$/;"	v
newQuery	thinkphp\library\think\db\Builder.php	/^                    $newQuery = $query->newQuery()->setConnection($this->connection);$/;"	v
newQuery	thinkphp\library\think\db\Builder.php	/^        $newQuery = $query->newQuery()->setConnection($this->connection);$/;"	v
options	thinkphp\library\think\db\Builder.php	/^        $options  = $query->getOptions();$/;"	v
options	thinkphp\library\think\db\Builder.php	/^        $options = $query->getOptions();$/;"	v
order	thinkphp\library\think\db\Builder.php	/^            $order = implode(',', $array);$/;"	v
parseArrayData	thinkphp\library\think\db\Builder.php	/^    protected function parseArrayData($data)$/;"	f
parseClosure	thinkphp\library\think\db\Builder.php	/^    protected function parseClosure(Query $query, $call, $show = true)$/;"	f
parseComment	thinkphp\library\think\db\Builder.php	/^    protected function parseComment(Query $query, $comment)$/;"	f
parseData	thinkphp\library\think\db\Builder.php	/^    protected function parseData(Query $query, $data = [])$/;"	f
parseDateTime	thinkphp\library\think\db\Builder.php	/^    protected function parseDateTime(Query $query, $value, $key, $bindName = null, $bindType = null)$/;"	f
parseDistinct	thinkphp\library\think\db\Builder.php	/^    protected function parseDistinct(Query $query, $distinct)$/;"	f
parseField	thinkphp\library\think\db\Builder.php	/^    protected function parseField(Query $query, $fields)$/;"	f
parseForce	thinkphp\library\think\db\Builder.php	/^    protected function parseForce(Query $query, $index)$/;"	f
parseGroup	thinkphp\library\think\db\Builder.php	/^    protected function parseGroup(Query $query, $group)$/;"	f
parseHaving	thinkphp\library\think\db\Builder.php	/^    protected function parseHaving(Query $query, $having)$/;"	f
parseJoin	thinkphp\library\think\db\Builder.php	/^    protected function parseJoin(Query $query, $join)$/;"	f
parseKey	thinkphp\library\think\db\Builder.php	/^    protected function parseKey(Query $query, $key)$/;"	f
parseLimit	thinkphp\library\think\db\Builder.php	/^    protected function parseLimit(Query $query, $limit)$/;"	f
parseLock	thinkphp\library\think\db\Builder.php	/^    protected function parseLock(Query $query, $lock = false)$/;"	f
parseOrder	thinkphp\library\think\db\Builder.php	/^    protected function parseOrder(Query $query, $order)$/;"	f
parseTable	thinkphp\library\think\db\Builder.php	/^    protected function parseTable(Query $query, $tables)$/;"	f
parseUnion	thinkphp\library\think\db\Builder.php	/^    protected function parseUnion(Query $query, $union)$/;"	f
parseValue	thinkphp\library\think\db\Builder.php	/^    protected function parseValue(Query $query, $value, $field = '')$/;"	f
parseWhere	thinkphp\library\think\db\Builder.php	/^    protected function parseWhere(Query $query, $where)$/;"	f
parseWhereItem	thinkphp\library\think\db\Builder.php	/^    protected function parseWhereItem(Query $query, $field, $val, $rule = '', $binds = [], $bindName = null)$/;"	f
pos	thinkphp\library\think\db\Builder.php	/^            if (isset($options['alias']) && $pos = array_search($table, $options['alias'])) {$/;"	v
replace	thinkphp\library\think\db\Builder.php	/^    public function insert(Query $query, $replace = false)$/;"	v
replace	thinkphp\library\think\db\Builder.php	/^    public function insertAll(Query $query, $dataSet, $replace = false)$/;"	v
result	thinkphp\library\think\db\Builder.php	/^                $result = $value;$/;"	v
result	thinkphp\library\think\db\Builder.php	/^                $result = false;$/;"	v
result	thinkphp\library\think\db\Builder.php	/^        $result = [];$/;"	v
rule	thinkphp\library\think\db\Builder.php	/^                $rule = $item;$/;"	v
rule	thinkphp\library\think\db\Builder.php	/^    protected function parseWhereItem(Query $query, $field, $val, $rule = '', $binds = [], $bindName = null)$/;"	v
select	thinkphp\library\think\db\Builder.php	/^    public function select(Query $query)$/;"	f
selectInsert	thinkphp\library\think\db\Builder.php	/^    public function selectInsert(Query $query, $fields, $table)$/;"	f
selectSql	thinkphp\library\think\db\Builder.php	/^    protected $selectSql = 'SELECT%DISTINCT% %FIELD% FROM %TABLE%%FORCE%%JOIN%%WHERE%%GROUP%%HAVING%%ORDER%%LIMIT% %UNION%%LOCK%%COMMENT%';$/;"	v
show	thinkphp\library\think\db\Builder.php	/^    protected function parseClosure(Query $query, $call, $show = true)$/;"	v
sort	thinkphp\library\think\db\Builder.php	/^                    $sort    = in_array(strtolower(trim($val)), ['asc', 'desc']) ? ' ' . $val : '';$/;"	v
str	thinkphp\library\think\db\Builder.php	/^            $str = [];$/;"	v
table	thinkphp\library\think\db\Builder.php	/^                $table = $pos;$/;"	v
table	thinkphp\library\think\db\Builder.php	/^                $table = $this->connection->parseSqlTable($table);$/;"	v
table	thinkphp\library\think\db\Builder.php	/^                $table = $this->parseTable($query, $table);$/;"	v
table	thinkphp\library\think\db\Builder.php	/^            $table = $options['table'];$/;"	v
table	thinkphp\library\think\db\Builder.php	/^        $table = $this->parseTable($query, $options['table']);$/;"	v
type	thinkphp\library\think\db\Builder.php	/^        $type = $this->connection->getTableInfo($table, 'type');$/;"	v
type	thinkphp\library\think\db\Builder.php	/^        $type = $union['type'];$/;"	v
update	thinkphp\library\think\db\Builder.php	/^    public function update(Query $query)$/;"	f
updateSql	thinkphp\library\think\db\Builder.php	/^    protected $updateSql = 'UPDATE %TABLE% SET %SET% %JOIN% %WHERE% %ORDER%%LIMIT% %LOCK%%COMMENT%';$/;"	v
val	thinkphp\library\think\db\Builder.php	/^                $val = $val->__toString();$/;"	v
val	thinkphp\library\think\db\Builder.php	/^            $val = is_null($val) ? ['null', ''] : ['=', $val];$/;"	v
val	thinkphp\library\think\db\Builder.php	/^            } elseif (is_array($val) && $val = $this->parseArrayData($val)) {$/;"	v
value	thinkphp\library\think\db\Builder.php	/^                $value = ':' . $bindName;$/;"	v
value	thinkphp\library\think\db\Builder.php	/^                $value = array_unique(is_array($value) ? $value : explode(',', $value));$/;"	v
value	thinkphp\library\think\db\Builder.php	/^                $value = date('Y-m-d H:i:s', $value);$/;"	v
value	thinkphp\library\think\db\Builder.php	/^                $value = date('Y-m-d', $value);$/;"	v
value	thinkphp\library\think\db\Builder.php	/^                $value = explode(',', $value);$/;"	v
value	thinkphp\library\think\db\Builder.php	/^                $value = strtotime($value) ?: $value;$/;"	v
value	thinkphp\library\think\db\Builder.php	/^            $value    = array_values($data);$/;"	v
value	thinkphp\library\think\db\Builder.php	/^            $value = $value ? '1' : '0';$/;"	v
value	thinkphp\library\think\db\Builder.php	/^            $value = $value->__toString();$/;"	v
value	thinkphp\library\think\db\Builder.php	/^            $value = 'null';$/;"	v
value	thinkphp\library\think\db\Builder.php	/^            $value = strpos($value, ':') === 0 && $query->isBind(substr($value, 1)) ? $value : $this->connection->quote($value);$/;"	v
values	thinkphp\library\think\db\Builder.php	/^        $values = array_values($data);$/;"	v
where	thinkphp\library\think\db\Builder.php	/^            $where = [];$/;"	v
whereClause	thinkphp\library\think\db\Builder.php	/^                    $whereClause = $this->buildWhere($query, $newQuery->getOptions('where'));$/;"	v
whereStr	thinkphp\library\think\db\Builder.php	/^            $whereStr = $whereStr . $this->parseWhereItem($query, $field, $condition, '', $binds);$/;"	v
whereStr	thinkphp\library\think\db\Builder.php	/^            $whereStr = $whereStr ? '( ' . $whereStr . ' ) AND ' : '';$/;"	v
whereStr	thinkphp\library\think\db\Builder.php	/^        $whereStr = $this->buildWhere($query, $where);$/;"	v
whereStr	thinkphp\library\think\db\Builder.php	/^        $whereStr = '';$/;"	v
zone	thinkphp\library\think\db\Builder.php	/^                $zone = implode(',', $array);$/;"	v
Connection	thinkphp\library\think\db\Connection.php	/^abstract class Connection$/;"	c
PDOStatement	thinkphp\library\think\db\Connection.php	/^                $this->PDOStatement = $this->linkID->prepare($sql);$/;"	v
PDOStatement	thinkphp\library\think\db\Connection.php	/^            $this->PDOStatement = $this->linkID->prepare($sql);$/;"	v
PDOStatement	thinkphp\library\think\db\Connection.php	/^        $this->PDOStatement = null;$/;"	v
PDOStatement	thinkphp\library\think\db\Connection.php	/^    protected $PDOStatement;$/;"	v
__construct	thinkphp\library\think\db\Connection.php	/^    protected function __construct(array $config = [])$/;"	f
__destruct	thinkphp\library\think\db\Connection.php	/^    public function __destruct()$/;"	f
_config	thinkphp\library\think\db\Connection.php	/^        $_config = [];$/;"	v
attrCase	thinkphp\library\think\db\Connection.php	/^            $this->attrCase = $params[PDO::ATTR_CASE];$/;"	v
attrCase	thinkphp\library\think\db\Connection.php	/^    protected $attrCase = PDO::CASE_LOWER;$/;"	v
batchQuery	thinkphp\library\think\db\Connection.php	/^    public function batchQuery($sqlArray = [])$/;"	f
bind	thinkphp\library\think\db\Connection.php	/^            $bind   = $type   = [];$/;"	v
bind	thinkphp\library\think\db\Connection.php	/^            $bind = $query->getBind();$/;"	v
bind	thinkphp\library\think\db\Connection.php	/^            $bind = PDO::PARAM_BOOL;$/;"	v
bind	thinkphp\library\think\db\Connection.php	/^            $bind = PDO::PARAM_INT;$/;"	v
bind	thinkphp\library\think\db\Connection.php	/^            $bind = PDO::PARAM_STR;$/;"	v
bind	thinkphp\library\think\db\Connection.php	/^        $bind = $query->getBind();$/;"	v
bind	thinkphp\library\think\db\Connection.php	/^        $this->bind = $bind;$/;"	v
bind	thinkphp\library\think\db\Connection.php	/^    protected $bind = [];$/;"	v
bind	thinkphp\library\think\db\Connection.php	/^    protected function bindValue(array $bind = [])$/;"	v
bind	thinkphp\library\think\db\Connection.php	/^    protected function getCacheKey($value, $options, $bind = [])$/;"	v
bind	thinkphp\library\think\db\Connection.php	/^    public function execute($sql, $bind = [])$/;"	v
bind	thinkphp\library\think\db\Connection.php	/^    public function getCursor($sql, $bind = [], $master = false, $model = null, $condition = null, $relation = null)$/;"	v
bind	thinkphp\library\think\db\Connection.php	/^    public function getRealSql($sql, array $bind = [])$/;"	v
bind	thinkphp\library\think\db\Connection.php	/^    public function query($sql, $bind = [], $master = false, $pdo = false)$/;"	v
bindParam	thinkphp\library\think\db\Connection.php	/^    protected function bindParam($bind)$/;"	f
bindValue	thinkphp\library\think\db\Connection.php	/^    protected function bindValue(array $bind = [])$/;"	f
builder	thinkphp\library\think\db\Connection.php	/^        $this->builder = $builder;$/;"	v
builder	thinkphp\library\think\db\Connection.php	/^        $this->builder = new $class($this);$/;"	v
builder	thinkphp\library\think\db\Connection.php	/^    protected $builder;$/;"	v
builderClassName	thinkphp\library\think\db\Connection.php	/^    protected $builderClassName;$/;"	v
cache	thinkphp\library\think\db\Connection.php	/^            $cache     = $options['cache'];$/;"	v
cache	thinkphp\library\think\db\Connection.php	/^            $cache = $options['cache'];$/;"	v
cache	thinkphp\library\think\db\Connection.php	/^            $cache = Container::get('cache');$/;"	v
cache	thinkphp\library\think\db\Connection.php	/^        $cache = Container::get('cache');$/;"	v
cacheData	thinkphp\library\think\db\Connection.php	/^    protected function cacheData($key, $data, $config = [])$/;"	f
cacheFile	thinkphp\library\think\db\Connection.php	/^            $cacheFile = Container::get('app')->getRuntimePath() . 'schema\/' . $schema . '.php';$/;"	v
class	thinkphp\library\think\db\Connection.php	/^            $class = false !== strpos($options['type'], '\\\\') ? $options['type'] : '\\\\think\\\\db\\\\connector\\\\' . ucwords($options['type']);$/;"	v
class	thinkphp\library\think\db\Connection.php	/^        $class = $this->getBuilderClass();$/;"	v
close	thinkphp\library\think\db\Connection.php	/^    public function close()$/;"	f
column	thinkphp\library\think\db\Connection.php	/^                        $column = $key1;$/;"	v
column	thinkphp\library\think\db\Connection.php	/^                        $column = $key2;$/;"	v
column	thinkphp\library\think\db\Connection.php	/^                        $column = null;$/;"	v
column	thinkphp\library\think\db\Connection.php	/^    public function column(Query $query, $field, $key = '')$/;"	f
commit	thinkphp\library\think\db\Connection.php	/^    public function commit()$/;"	f
condition	thinkphp\library\think\db\Connection.php	/^        $condition = isset($options['where']['AND']) ? $options['where']['AND'] : null;$/;"	v
config	thinkphp\library\think\db\Connection.php	/^                $config = $this->config;$/;"	v
config	thinkphp\library\think\db\Connection.php	/^                $config = array_merge($this->config, $config);$/;"	v
config	thinkphp\library\think\db\Connection.php	/^            $config = Container::get('config')->get('database.' . $config);$/;"	v
config	thinkphp\library\think\db\Connection.php	/^            $config = Container::get('config')->pull('database');$/;"	v
config	thinkphp\library\think\db\Connection.php	/^            $this->config = array_merge($this->config, $config);$/;"	v
config	thinkphp\library\think\db\Connection.php	/^    protected $config = [$/;"	v
config	thinkphp\library\think\db\Connection.php	/^    protected function __construct(array $config = [])$/;"	v
config	thinkphp\library\think\db\Connection.php	/^    protected function cacheData($key, $data, $config = [])$/;"	v
config	thinkphp\library\think\db\Connection.php	/^    public function connect(array $config = [], $linkNum = 0, $autoConnection = false)$/;"	v
connect	thinkphp\library\think\db\Connection.php	/^    public function connect(array $config = [], $linkNum = 0, $autoConnection = false)$/;"	f
count	thinkphp\library\think\db\Connection.php	/^                    $count  = count($fields);$/;"	v
cursor	thinkphp\library\think\db\Connection.php	/^    public function cursor(Query $query)$/;"	f
data	thinkphp\library\think\db\Connection.php	/^                    $data = $item;$/;"	v
data	thinkphp\library\think\db\Connection.php	/^                $data          = $item;$/;"	v
data	thinkphp\library\think\db\Connection.php	/^            $data = $options['data'];$/;"	v
data	thinkphp\library\think\db\Connection.php	/^            $data = $value;$/;"	v
data	thinkphp\library\think\db\Connection.php	/^            $data = $value[1];$/;"	v
data	thinkphp\library\think\db\Connection.php	/^        $data   = $options['data'];$/;"	v
data	thinkphp\library\think\db\Connection.php	/^        $data = $options['data'];$/;"	v
dataSet	thinkphp\library\think\db\Connection.php	/^    public function insertAll(Query $query, $dataSet = [], $replace = false)$/;"	v
dbConfig	thinkphp\library\think\db\Connection.php	/^        $dbConfig = [];$/;"	v
dbMaster	thinkphp\library\think\db\Connection.php	/^            $dbMaster = [];$/;"	v
dbMaster	thinkphp\library\think\db\Connection.php	/^        $dbMaster = false;$/;"	v
debug	thinkphp\library\think\db\Connection.php	/^            $debug = Container::get('debug');$/;"	v
debug	thinkphp\library\think\db\Connection.php	/^    protected function debug($start, $sql = '')$/;"	f
default	thinkphp\library\think\db\Connection.php	/^    public function value(Query $query, $field, $default = null)$/;"	v
delete	thinkphp\library\think\db\Connection.php	/^    public function delete(Query $query)$/;"	f
dsn	thinkphp\library\think\db\Connection.php	/^        $dsn = [$/;"	v
error	thinkphp\library\think\db\Connection.php	/^            $error = $error[1] . ':' . $error[2];$/;"	v
error	thinkphp\library\think\db\Connection.php	/^            $error = $this->PDOStatement->errorInfo();$/;"	v
error	thinkphp\library\think\db\Connection.php	/^            $error = '';$/;"	v
error	thinkphp\library\think\db\Connection.php	/^        $error = $e->getMessage();$/;"	v
error	thinkphp\library\think\db\Connection.php	/^    protected $error = '';$/;"	v
event	thinkphp\library\think\db\Connection.php	/^    protected static $event = [];$/;"	v
execute	thinkphp\library\think\db\Connection.php	/^    public function execute($sql, $bind = [])$/;"	f
explain	thinkphp\library\think\db\Connection.php	/^    protected function triggerSql($sql, $runtime, $explain = [])$/;"	v
fetch	thinkphp\library\think\db\Connection.php	/^    public function getTableInfo($tableName, $fetch = '')$/;"	v
fetchType	thinkphp\library\think\db\Connection.php	/^    protected $fetchType = PDO::FETCH_ASSOC;$/;"	v
field	thinkphp\library\think\db\Connection.php	/^                $field = $key . ',' . $field;$/;"	v
field	thinkphp\library\think\db\Connection.php	/^                $field = '*';$/;"	v
field	thinkphp\library\think\db\Connection.php	/^                $field = array_map('trim', explode(',', $field));$/;"	v
fieldCase	thinkphp\library\think\db\Connection.php	/^    public function fieldCase($info)$/;"	f
fields	thinkphp\library\think\db\Connection.php	/^                    $fields = array_keys($resultSet[0]);$/;"	v
fields	thinkphp\library\think\db\Connection.php	/^            $fields = array_keys($info);$/;"	v
find	thinkphp\library\think\db\Connection.php	/^    public function find(Query $query)$/;"	f
free	thinkphp\library\think\db\Connection.php	/^    public function free()$/;"	f
getBuilder	thinkphp\library\think\db\Connection.php	/^    public function getBuilder()$/;"	f
getBuilderClass	thinkphp\library\think\db\Connection.php	/^    public function getBuilderClass()$/;"	f
getCacheKey	thinkphp\library\think\db\Connection.php	/^    protected function getCacheKey($value, $options, $bind = [])$/;"	f
getConfig	thinkphp\library\think\db\Connection.php	/^    public function getConfig($config = '')$/;"	f
getCursor	thinkphp\library\think\db\Connection.php	/^    public function getCursor($sql, $bind = [], $master = false, $model = null, $condition = null, $relation = null)$/;"	f
getError	thinkphp\library\think\db\Connection.php	/^    public function getError()$/;"	f
getExecuteTimes	thinkphp\library\think\db\Connection.php	/^    public function getExecuteTimes()$/;"	f
getExplain	thinkphp\library\think\db\Connection.php	/^    abstract protected function getExplain($sql);$/;"	f
getFieldBindType	thinkphp\library\think\db\Connection.php	/^    public function getFieldBindType($type)$/;"	f
getFields	thinkphp\library\think\db\Connection.php	/^    abstract public function getFields($tableName);$/;"	f
getFieldsBind	thinkphp\library\think\db\Connection.php	/^    public function getFieldsBind($tableName)$/;"	f
getFieldsType	thinkphp\library\think\db\Connection.php	/^    public function getFieldsType($tableName)$/;"	f
getLastInsID	thinkphp\library\think\db\Connection.php	/^    public function getLastInsID($sequence = null)$/;"	f
getLastSql	thinkphp\library\think\db\Connection.php	/^    public function getLastSql()$/;"	f
getNumRows	thinkphp\library\think\db\Connection.php	/^    public function getNumRows()$/;"	f
getPdo	thinkphp\library\think\db\Connection.php	/^    public function getPdo()$/;"	f
getPk	thinkphp\library\think\db\Connection.php	/^    public function getPk($tableName)$/;"	f
getQueryTimes	thinkphp\library\think\db\Connection.php	/^    public function getQueryTimes($execute = false)$/;"	f
getRealSql	thinkphp\library\think\db\Connection.php	/^    public function getRealSql($sql, array $bind = [])$/;"	f
getResult	thinkphp\library\think\db\Connection.php	/^    protected function getResult($pdo = false, $procedure = false)$/;"	f
getTableFields	thinkphp\library\think\db\Connection.php	/^    public function getTableFields($tableName)$/;"	f
getTableInfo	thinkphp\library\think\db\Connection.php	/^    public function getTableInfo($tableName, $fetch = '')$/;"	f
getTables	thinkphp\library\think\db\Connection.php	/^    abstract public function getTables($dbName);$/;"	f
guid	thinkphp\library\think\db\Connection.php	/^            $guid   = is_string($cache['key']) ? $cache['key'] : md5($field . serialize($options) . serialize($query->getBind(false)));$/;"	v
info	thinkphp\library\think\db\Connection.php	/^                $info = $this->getFields($tableName);$/;"	v
info	thinkphp\library\think\db\Connection.php	/^                $info = array_change_key_case($info);$/;"	v
info	thinkphp\library\think\db\Connection.php	/^                $info = array_change_key_case($info, CASE_UPPER);$/;"	v
info	thinkphp\library\think\db\Connection.php	/^                $info = include $cacheFile;$/;"	v
info	thinkphp\library\think\db\Connection.php	/^        $info = [$/;"	v
info	thinkphp\library\think\db\Connection.php	/^        $info = parse_url($dsnStr);$/;"	v
info	thinkphp\library\think\db\Connection.php	/^    protected static $info = [];$/;"	v
initConnect	thinkphp\library\think\db\Connection.php	/^    protected function initConnect($master = true)$/;"	f
initialize	thinkphp\library\think\db\Connection.php	/^    protected function initialize()$/;"	f
insert	thinkphp\library\think\db\Connection.php	/^    public function insert(Query $query, $replace = false, $getLastInsID = false, $sequence = null)$/;"	f
insertAll	thinkphp\library\think\db\Connection.php	/^    public function insertAll(Query $query, $dataSet = [], $replace = false)$/;"	f
instance	thinkphp\library\think\db\Connection.php	/^                $instance = $model->newInstance($result, $condition);$/;"	v
instance	thinkphp\library\think\db\Connection.php	/^    protected static $instance = [];$/;"	v
instance	thinkphp\library\think\db\Connection.php	/^    public static function instance($config = [], $name = false)$/;"	f
isBreak	thinkphp\library\think\db\Connection.php	/^    protected function isBreak($e)$/;"	f
item	thinkphp\library\think\db\Connection.php	/^        $item = [];$/;"	v
key	thinkphp\library\think\db\Connection.php	/^                    $key    = $key ?: $key1;$/;"	v
key	thinkphp\library\think\db\Connection.php	/^                    $key = 'think:' . $options['table'] . '|' . $data[$pk];$/;"	v
key	thinkphp\library\think\db\Connection.php	/^                $key = $cache['key'];$/;"	v
key	thinkphp\library\think\db\Connection.php	/^                $key = 'think:' . $options['table'] . '|' . $data;$/;"	v
key	thinkphp\library\think\db\Connection.php	/^                $key = 'think:' . (is_array($options['table']) ? key($options['table']) : $options['table']) . '|' . $data;$/;"	v
key	thinkphp\library\think\db\Connection.php	/^                $key = md5(serialize($options) . serialize($query->getBind(false)));$/;"	v
key	thinkphp\library\think\db\Connection.php	/^            $key       = is_string($cache['key']) ? $cache['key'] : md5(serialize($options) . serialize($query->getBind(false)));$/;"	v
key	thinkphp\library\think\db\Connection.php	/^            $key    = is_string($cache['key']) ? $cache['key'] : md5($field . serialize($options) . serialize($query->getBind(false)));$/;"	v
key	thinkphp\library\think\db\Connection.php	/^            $key = $options['cache']['key'];$/;"	v
key	thinkphp\library\think\db\Connection.php	/^            $key = $this->getCacheKey($options['where']['AND'][$pk], $options, $query->getBind(false));$/;"	v
key	thinkphp\library\think\db\Connection.php	/^            foreach ($info as $key => $val) {$/;"	v
key	thinkphp\library\think\db\Connection.php	/^        foreach ($bind as $key => $val) {$/;"	v
key	thinkphp\library\think\db\Connection.php	/^    public function column(Query $query, $field, $key = '')$/;"	v
key1	thinkphp\library\think\db\Connection.php	/^                    $key1   = array_shift($fields);$/;"	v
key2	thinkphp\library\think\db\Connection.php	/^                    $key2   = $fields ? array_shift($fields) : '';$/;"	v
lastInsId	thinkphp\library\think\db\Connection.php	/^            $lastInsId = $this->getLastInsID($sequence);$/;"	v
linkID	thinkphp\library\think\db\Connection.php	/^                $this->linkID = $this->linkRead;$/;"	v
linkID	thinkphp\library\think\db\Connection.php	/^                $this->linkID = $this->linkWrite;$/;"	v
linkID	thinkphp\library\think\db\Connection.php	/^            $this->linkID = $this->connect();$/;"	v
linkID	thinkphp\library\think\db\Connection.php	/^        $this->linkID    = null;$/;"	v
linkID	thinkphp\library\think\db\Connection.php	/^    protected $linkID;$/;"	v
linkRead	thinkphp\library\think\db\Connection.php	/^                    $this->linkRead = $this->multiConnect(false);$/;"	v
linkRead	thinkphp\library\think\db\Connection.php	/^        $this->linkRead  = null;$/;"	v
linkRead	thinkphp\library\think\db\Connection.php	/^    protected $linkRead;$/;"	v
linkWrite	thinkphp\library\think\db\Connection.php	/^                    $this->linkWrite = $this->multiConnect(true);$/;"	v
linkWrite	thinkphp\library\think\db\Connection.php	/^        $this->linkWrite = null;$/;"	v
linkWrite	thinkphp\library\think\db\Connection.php	/^    protected $linkWrite;$/;"	v
links	thinkphp\library\think\db\Connection.php	/^        $this->links     = [];$/;"	v
links	thinkphp\library\think\db\Connection.php	/^    protected $links = [];$/;"	v
listen	thinkphp\library\think\db\Connection.php	/^    public function listen($callback)$/;"	f
log	thinkphp\library\think\db\Connection.php	/^    public function log($log, $type = 'sql')$/;"	f
m	thinkphp\library\think\db\Connection.php	/^        $m = floor(mt_rand(0, $this->config['master_num'] - 1));$/;"	v
master	thinkphp\library\think\db\Connection.php	/^    public function quote($str, $master = true)$/;"	v
multiConnect	thinkphp\library\think\db\Connection.php	/^    protected function multiConnect($master = false)$/;"	f
name	thinkphp\library\think\db\Connection.php	/^                $name = md5(serialize($config));$/;"	v
name	thinkphp\library\think\db\Connection.php	/^            $name = md5(serialize($config));$/;"	v
name	thinkphp\library\think\db\Connection.php	/^    public static function instance($config = [], $name = false)$/;"	v
numRows	thinkphp\library\think\db\Connection.php	/^            $this->numRows = $this->PDOStatement->rowCount();$/;"	v
numRows	thinkphp\library\think\db\Connection.php	/^        $this->numRows = count($item);$/;"	v
numRows	thinkphp\library\think\db\Connection.php	/^        $this->numRows = count($result);$/;"	v
numRows	thinkphp\library\think\db\Connection.php	/^    protected $numRows = 0;$/;"	v
options	thinkphp\library\think\db\Connection.php	/^            $options = self::parseConfig($config);$/;"	v
options	thinkphp\library\think\db\Connection.php	/^        $options   = $query->getOptions();$/;"	v
options	thinkphp\library\think\db\Connection.php	/^        $options = $query->getOptions();$/;"	v
param	thinkphp\library\think\db\Connection.php	/^                $param = array_shift($val);$/;"	v
param	thinkphp\library\think\db\Connection.php	/^            $param = is_numeric($key) ? $key + 1 : ':' . $key;$/;"	v
params	thinkphp\library\think\db\Connection.php	/^                $params = $config['params'] + $this->params;$/;"	v
params	thinkphp\library\think\db\Connection.php	/^                $params = $this->params;$/;"	v
params	thinkphp\library\think\db\Connection.php	/^    protected $params = [$/;"	v
parseConfig	thinkphp\library\think\db\Connection.php	/^    private static function parseConfig($config)$/;"	f
parseDsn	thinkphp\library\think\db\Connection.php	/^    abstract protected function parseDsn($config);$/;"	f
parseDsnConfig	thinkphp\library\think\db\Connection.php	/^    private static function parseDsnConfig($dsnStr)$/;"	f
parseSavepoint	thinkphp\library\think\db\Connection.php	/^    protected function parseSavepoint($name)$/;"	f
parseSavepointRollBack	thinkphp\library\think\db\Connection.php	/^    protected function parseSavepointRollBack($name)$/;"	f
parseSqlTable	thinkphp\library\think\db\Connection.php	/^    public function parseSqlTable($sql)$/;"	f
pdo	thinkphp\library\think\db\Connection.php	/^            $pdo = $this->query($sql, $bind, $options['master'], true);$/;"	v
pdo	thinkphp\library\think\db\Connection.php	/^    public function pdo(Query $query)$/;"	f
pk	thinkphp\library\think\db\Connection.php	/^                $pk = $query->getPk($options);$/;"	v
pk	thinkphp\library\think\db\Connection.php	/^                $pk = count($pk) > 1 ? $pk : $pk[0];$/;"	v
pk	thinkphp\library\think\db\Connection.php	/^                $pk = null;$/;"	v
pk	thinkphp\library\think\db\Connection.php	/^        $pk      = $query->getPk($options);$/;"	v
pk	thinkphp\library\think\db\Connection.php	/^        $pk   = $query->getPk($options);$/;"	v
prefix	thinkphp\library\think\db\Connection.php	/^            $prefix = $this->getConfig('prefix');$/;"	v
procedure	thinkphp\library\think\db\Connection.php	/^            $procedure = in_array(strtolower(substr(trim($sql), 0, 4)), ['call', 'exec']);$/;"	v
procedure	thinkphp\library\think\db\Connection.php	/^        $procedure = in_array(strtolower(substr(trim($sql), 0, 4)), ['call', 'exec']);$/;"	v
procedure	thinkphp\library\think\db\Connection.php	/^    protected function getResult($pdo = false, $procedure = false)$/;"	v
procedure	thinkphp\library\think\db\Connection.php	/^    protected function procedure()$/;"	f
query	thinkphp\library\think\db\Connection.php	/^    public function query($sql, $bind = [], $master = false, $pdo = false)$/;"	f
queryStr	thinkphp\library\think\db\Connection.php	/^        $this->queryStr = $sql;$/;"	v
queryStr	thinkphp\library\think\db\Connection.php	/^    protected $queryStr = '';$/;"	v
quote	thinkphp\library\think\db\Connection.php	/^    public function quote($str, $master = true)$/;"	f
r	thinkphp\library\think\db\Connection.php	/^                $r = $m;$/;"	v
r	thinkphp\library\think\db\Connection.php	/^                $r = $this->config['slave_no'];$/;"	v
r	thinkphp\library\think\db\Connection.php	/^                $r = floor(mt_rand($this->config['master_num'], count($_config['hostname']) - 1));$/;"	v
r	thinkphp\library\think\db\Connection.php	/^            $r = floor(mt_rand(0, count($_config['hostname']) - 1));$/;"	v
r	thinkphp\library\think\db\Connection.php	/^        return $this->connect($dbConfig, $r, $r == $m ? false : $dbMaster);$/;"	v
relation	thinkphp\library\think\db\Connection.php	/^        $relation  = isset($options['relaltion']) ? $options['relation'] : null;$/;"	v
replace	thinkphp\library\think\db\Connection.php	/^    public function insert(Query $query, $replace = false, $getLastInsID = false, $sequence = null)$/;"	v
result	thinkphp\library\think\db\Connection.php	/^                    $result = $this->getExplain($sql);$/;"	v
result	thinkphp\library\think\db\Connection.php	/^                    $result = [];$/;"	v
result	thinkphp\library\think\db\Connection.php	/^                    $result = array_column($resultSet, $column, $key);$/;"	v
result	thinkphp\library\think\db\Connection.php	/^                    $result = array_column($resultSet, null, $key);$/;"	v
result	thinkphp\library\think\db\Connection.php	/^                $result  = [];$/;"	v
result	thinkphp\library\think\db\Connection.php	/^                $result = $pdo->fetchAll(PDO::FETCH_COLUMN);$/;"	v
result	thinkphp\library\think\db\Connection.php	/^                $result = $this->PDOStatement->bindValue($param, $val);$/;"	v
result	thinkphp\library\think\db\Connection.php	/^                $result = $this->PDOStatement->bindValue($param, $val[0], $val[1]);$/;"	v
result	thinkphp\library\think\db\Connection.php	/^                $result = call_user_func_array($callback, [$this]);$/;"	v
result	thinkphp\library\think\db\Connection.php	/^                $result = call_user_func_array([$this->PDOStatement, 'bindParam'], $val);$/;"	v
result	thinkphp\library\think\db\Connection.php	/^                $result = isset($resultSet[0]) ? $resultSet[0] : null;$/;"	v
result	thinkphp\library\think\db\Connection.php	/^            $result = $pdo->fetchColumn();$/;"	v
result	thinkphp\library\think\db\Connection.php	/^            $result = $this->getResult();$/;"	v
result	thinkphp\library\think\db\Connection.php	/^            $result = '' == $sql ? 0 : $this->execute($sql, $bind);$/;"	v
result	thinkphp\library\think\db\Connection.php	/^            $result = Container::get('cache')->get($guid);$/;"	v
result	thinkphp\library\think\db\Connection.php	/^            $result = Container::get('cache')->get($key);$/;"	v
result	thinkphp\library\think\db\Connection.php	/^            $result = null;$/;"	v
result	thinkphp\library\think\db\Connection.php	/^        $result = $this->PDOStatement->fetchAll($this->fetchType);$/;"	v
result	thinkphp\library\think\db\Connection.php	/^        $result = $this->execute($sql, $bind);$/;"	v
result	thinkphp\library\think\db\Connection.php	/^        $result = false;$/;"	v
resultSet	thinkphp\library\think\db\Connection.php	/^                $resultSet = $pdo->fetchAll(PDO::FETCH_ASSOC);$/;"	v
resultSet	thinkphp\library\think\db\Connection.php	/^                $resultSet = $this->query($sql, $bind, $options['master'], $options['fetch_pdo']);$/;"	v
resultSet	thinkphp\library\think\db\Connection.php	/^            $resultSet = Container::get('cache')->get($key);$/;"	v
resultSet	thinkphp\library\think\db\Connection.php	/^        $resultSet = false;$/;"	v
rollback	thinkphp\library\think\db\Connection.php	/^    public function rollback()$/;"	f
runtime	thinkphp\library\think\db\Connection.php	/^                $runtime = $debug->getRangeTime('queryStartTime', 'queryEndTime');$/;"	v
schema	thinkphp\library\think\db\Connection.php	/^            $schema = $tableName;$/;"	v
schema	thinkphp\library\think\db\Connection.php	/^            $schema = $this->getConfig('database') . '.' . $tableName;$/;"	v
select	thinkphp\library\think\db\Connection.php	/^    public function select(Query $query)$/;"	f
selectInsert	thinkphp\library\think\db\Connection.php	/^    public function selectInsert(Query $query, $fields, $table)$/;"	f
sequence	thinkphp\library\think\db\Connection.php	/^            $sequence  = $sequence ?: (isset($options['sequence']) ? $options['sequence'] : null);$/;"	v
setBuilder	thinkphp\library\think\db\Connection.php	/^    protected function setBuilder(Builder $builder)$/;"	f
setConfig	thinkphp\library\think\db\Connection.php	/^    public function setConfig($config, $value = '')$/;"	f
sql	thinkphp\library\think\db\Connection.php	/^                $sql     = $sql ?: $this->getLastsql();$/;"	v
sql	thinkphp\library\think\db\Connection.php	/^            $sql    = preg_replace_callback("\/__([A-Z0-9_-]+)__\/sU", function ($match) use ($prefix) {$/;"	v
sql	thinkphp\library\think\db\Connection.php	/^            $sql = $this->builder->select($query);$/;"	v
sql	thinkphp\library\think\db\Connection.php	/^            $sql = is_numeric($key) ?$/;"	v
sql	thinkphp\library\think\db\Connection.php	/^        $sql  = $this->builder->update($query);$/;"	v
sql	thinkphp\library\think\db\Connection.php	/^        $sql = $this->builder->delete($query);$/;"	v
sql	thinkphp\library\think\db\Connection.php	/^        $sql = $this->builder->insert($query, $replace);$/;"	v
sql	thinkphp\library\think\db\Connection.php	/^        $sql = $this->builder->insertAll($query, $dataSet, $replace);$/;"	v
sql	thinkphp\library\think\db\Connection.php	/^        $sql = $this->builder->select($query);$/;"	v
sql	thinkphp\library\think\db\Connection.php	/^        $sql = $this->builder->selectInsert($query, $fields, $table);$/;"	v
sql	thinkphp\library\think\db\Connection.php	/^    protected function debug($start, $sql = '')$/;"	v
startTime	thinkphp\library\think\db\Connection.php	/^                    $startTime = microtime(true);$/;"	v
startTrans	thinkphp\library\think\db\Connection.php	/^    public function startTrans()$/;"	f
supportSavepoint	thinkphp\library\think\db\Connection.php	/^    protected function supportSavepoint()$/;"	f
table	thinkphp\library\think\db\Connection.php	/^        $table = $this->parseSqlTable($table);$/;"	v
tableName	thinkphp\library\think\db\Connection.php	/^            $tableName = $this->parseSqlTable($tableName);$/;"	v
tableName	thinkphp\library\think\db\Connection.php	/^            $tableName = key($tableName) ?: current($tableName);$/;"	v
transTimes	thinkphp\library\think\db\Connection.php	/^        $this->transTimes = max(0, $this->transTimes - 1);$/;"	v
transTimes	thinkphp\library\think\db\Connection.php	/^    protected $transTimes = 0;$/;"	v
transaction	thinkphp\library\think\db\Connection.php	/^    public function transaction($callback)$/;"	f
triggerSql	thinkphp\library\think\db\Connection.php	/^    protected function triggerSql($sql, $runtime, $explain = [])$/;"	f
type	thinkphp\library\think\db\Connection.php	/^            $type  = is_array($val) ? $val[1] : PDO::PARAM_STR;$/;"	v
type	thinkphp\library\think\db\Connection.php	/^    public function log($log, $type = 'sql')$/;"	v
update	thinkphp\library\think\db\Connection.php	/^    public function update(Query $query)$/;"	f
value	thinkphp\library\think\db\Connection.php	/^                $value = $this->quote($value);$/;"	v
value	thinkphp\library\think\db\Connection.php	/^                $value = (float) $value;$/;"	v
value	thinkphp\library\think\db\Connection.php	/^            $value = is_array($val) ? $val[0] : $val;$/;"	v
value	thinkphp\library\think\db\Connection.php	/^    public function setConfig($config, $value = '')$/;"	v
value	thinkphp\library\think\db\Connection.php	/^    public function value(Query $query, $field, $default = null)$/;"	f
Query	thinkphp\library\think\db\Query.php	/^class Query$/;"	c
__call	thinkphp\library\think\db\Query.php	/^    public function __call($method, $args)$/;"	f
__construct	thinkphp\library\think\db\Query.php	/^    public function __construct(Connection $connection = null)$/;"	f
alias	thinkphp\library\think\db\Query.php	/^                        $alias = $join;$/;"	v
alias	thinkphp\library\think\db\Query.php	/^            $alias = $this->options['alias'][$table];$/;"	v
alias	thinkphp\library\think\db\Query.php	/^    public function alias($alias)$/;"	f
all	thinkphp\library\think\db\Query.php	/^    public function union($union, $all = false)$/;"	v
attr	thinkphp\library\think\db\Query.php	/^                    $attr        = isset($alias) ? $alias . '.' . $key : $key;$/;"	v
avg	thinkphp\library\think\db\Query.php	/^    public function avg($field)$/;"	f
batchQuery	thinkphp\library\think\db\Query.php	/^    public function batchQuery($sql = [])$/;"	f
bind	thinkphp\library\think\db\Query.php	/^            $bind    = $this->bind;$/;"	v
bind	thinkphp\library\think\db\Query.php	/^            $this->bind = [];$/;"	v
bind	thinkphp\library\think\db\Query.php	/^            $this->bind = array_merge($this->bind, $key);$/;"	v
bind	thinkphp\library\think\db\Query.php	/^        $bind      = $this->bind;$/;"	v
bind	thinkphp\library\think\db\Query.php	/^        $bind = $this->bind;$/;"	v
bind	thinkphp\library\think\db\Query.php	/^    protected $bind = [];$/;"	v
bind	thinkphp\library\think\db\Query.php	/^    public function bind($key, $value = false, $type = PDO::PARAM_STR)$/;"	f
bind	thinkphp\library\think\db\Query.php	/^    public function execute($sql, $bind = [])$/;"	v
bind	thinkphp\library\think\db\Query.php	/^    public function query($sql, $bind = [], $master = false, $class = false)$/;"	v
buildSql	thinkphp\library\think\db\Query.php	/^    public function buildSql($sub = true)$/;"	f
cache	thinkphp\library\think\db\Query.php	/^        $cache = Container::get('cache');$/;"	v
cache	thinkphp\library\think\db\Query.php	/^    public function cache($key = true, $expire = null, $tag = null)$/;"	f
callback	thinkphp\library\think\db\Query.php	/^    public static function extend($method, $callback = null)$/;"	v
chunk	thinkphp\library\think\db\Query.php	/^    public function chunk($count, $callback, $column = null, $order = 'asc')$/;"	f
class	thinkphp\library\think\db\Query.php	/^            $class = get_class($this->model);$/;"	v
class	thinkphp\library\think\db\Query.php	/^        $class = $this->model;$/;"	v
class	thinkphp\library\think\db\Query.php	/^        $class = false !== strpos($config['type'], '\\\\') ? $config['type'] : '\\\\think\\\\paginator\\\\driver\\\\' . ucwords($config['type']);$/;"	v
closure	thinkphp\library\think\db\Query.php	/^                    $closure  = $relation;$/;"	v
closure	thinkphp\library\think\db\Query.php	/^                $closure    = $relation;$/;"	v
closure	thinkphp\library\think\db\Query.php	/^                $closure = false;$/;"	v
closure	thinkphp\library\think\db\Query.php	/^            $closure     = false;$/;"	v
column	thinkphp\library\think\db\Query.php	/^            $column = $column[0];$/;"	v
column	thinkphp\library\think\db\Query.php	/^        $column = $column ?: $this->getPk($table);$/;"	v
column	thinkphp\library\think\db\Query.php	/^    public function chunk($count, $callback, $column = null, $order = 'asc')$/;"	v
column	thinkphp\library\think\db\Query.php	/^    public function column($field, $key = '')$/;"	f
comment	thinkphp\library\think\db\Query.php	/^    public function comment($comment)$/;"	f
commit	thinkphp\library\think\db\Query.php	/^    public function commit()$/;"	f
condition	thinkphp\library\think\db\Query.php	/^            $condition = $condition($this);$/;"	v
condition	thinkphp\library\think\db\Query.php	/^        $condition = !empty($this->options['where']) ? $this->options['where'] : [];$/;"	v
condition	thinkphp\library\think\db\Query.php	/^        $condition = (!$resultSet && isset($options['where']['AND'])) ? $options['where']['AND'] : null;$/;"	v
condition	thinkphp\library\think\db\Query.php	/^    public function join($join, $condition = null, $type = 'INNER')$/;"	v
condition	thinkphp\library\think\db\Query.php	/^    public function useSoftDelete($field, $condition = null)$/;"	v
config	thinkphp\library\think\db\Query.php	/^            $config   = array_merge($paginate, $config);$/;"	v
config	thinkphp\library\think\db\Query.php	/^            $config   = array_merge($paginate, $listRows);$/;"	v
connect	thinkphp\library\think\db\Query.php	/^    public function connect($config = [], $name = false)$/;"	f
connection	thinkphp\library\think\db\Query.php	/^            $this->connection = $connection;$/;"	v
connection	thinkphp\library\think\db\Query.php	/^            $this->connection = Connection::instance();$/;"	v
connection	thinkphp\library\think\db\Query.php	/^        $connection = clone $this->connection;$/;"	v
connection	thinkphp\library\think\db\Query.php	/^        $this->connection = $connection;$/;"	v
connection	thinkphp\library\think\db\Query.php	/^        $this->connection = Connection::instance($config, $name);$/;"	v
connection	thinkphp\library\think\db\Query.php	/^    protected $connection;$/;"	v
connection	thinkphp\library\think\db\Query.php	/^    public function __construct(Connection $connection = null)$/;"	v
connections	thinkphp\library\think\db\Query.php	/^    protected static $connections = [];$/;"	v
count	thinkphp\library\think\db\Query.php	/^                $count    = '(' . $this->model->$relation()->getRelationCountQuery($closure) . ')';$/;"	v
count	thinkphp\library\think\db\Query.php	/^    public function count($field = '*')$/;"	f
cursor	thinkphp\library\think\db\Query.php	/^    public function cursor($data = null)$/;"	f
data	thinkphp\library\think\db\Query.php	/^            $data = $field;$/;"	v
data	thinkphp\library\think\db\Query.php	/^            $data = null;$/;"	v
data	thinkphp\library\think\db\Query.php	/^    public function data($field, $value = null)$/;"	f
data	thinkphp\library\think\db\Query.php	/^    public function insert(array $data = [], $replace = false, $getLastInsID = false, $sequence = null)$/;"	v
data	thinkphp\library\think\db\Query.php	/^    public function update(array $data = [])$/;"	v
date	thinkphp\library\think\db\Query.php	/^            $date = getdate();$/;"	v
dec	thinkphp\library\think\db\Query.php	/^    public function dec($field, $step = 1)$/;"	f
default	thinkphp\library\think\db\Query.php	/^    public function value($field, $default = null, $force = false)$/;"	v
delete	thinkphp\library\think\db\Query.php	/^    public function delete($data = null)$/;"	f
distinct	thinkphp\library\think\db\Query.php	/^    public function distinct($distinct)$/;"	f
end	thinkphp\library\think\db\Query.php	/^            $end    = end($resultSet);$/;"	v
endTime	thinkphp\library\think\db\Query.php	/^            $endTime = strtotime('+1 day', $time);$/;"	v
endTime	thinkphp\library\think\db\Query.php	/^    public function whereBetweenTime($field, $startTime, $endTime = null)$/;"	v
event	thinkphp\library\think\db\Query.php	/^    private static $event = [];$/;"	v
event	thinkphp\library\think\db\Query.php	/^    public static function event($event, $callback)$/;"	f
except	thinkphp\library\think\db\Query.php	/^    public function field($field, $except = false, $tableName = '', $prefix = '', $alias = '')$/;"	v
execute	thinkphp\library\think\db\Query.php	/^    public function execute($sql, $bind = [])$/;"	f
exp	thinkphp\library\think\db\Query.php	/^    public function exp($field, $value)$/;"	f
expire	thinkphp\library\think\db\Query.php	/^            $expire = $key;$/;"	v
expire	thinkphp\library\think\db\Query.php	/^    public function cache($key = true, $expire = null, $tag = null)$/;"	v
extend	thinkphp\library\think\db\Query.php	/^    private static $extend = [];$/;"	v
extend	thinkphp\library\think\db\Query.php	/^    public static function extend($method, $callback = null)$/;"	f
failException	thinkphp\library\think\db\Query.php	/^    public function failException($fail = true)$/;"	f
fetchPdo	thinkphp\library\think\db\Query.php	/^    public function fetchPdo($pdo = true)$/;"	f
fetchSql	thinkphp\library\think\db\Query.php	/^    public function fetchSql($fetch = true)$/;"	f
field	thinkphp\library\think\db\Query.php	/^                    $field = $this->options['via'] . '.' . $field;$/;"	v
field	thinkphp\library\think\db\Query.php	/^                    $field = explode(',', $field);$/;"	v
field	thinkphp\library\think\db\Query.php	/^                $field = empty($order) ? $field : [$field => $order];$/;"	v
field	thinkphp\library\think\db\Query.php	/^            $field  = $fields ? array_diff($fields, $field) : $field;$/;"	v
field	thinkphp\library\think\db\Query.php	/^            $field  = $fields ?: ['*'];$/;"	v
field	thinkphp\library\think\db\Query.php	/^            $field = $this->options['via'] . '.' . $field;$/;"	v
field	thinkphp\library\think\db\Query.php	/^            $field = Loader::parseName(substr($method, 5));$/;"	v
field	thinkphp\library\think\db\Query.php	/^            $field = array_map('trim', explode(',', $field));$/;"	v
field	thinkphp\library\think\db\Query.php	/^            $field = array_merge($this->options['field'], $field);$/;"	v
field	thinkphp\library\think\db\Query.php	/^    public function field($field, $except = false, $tableName = '', $prefix = '', $alias = '')$/;"	f
field	thinkphp\library\think\db\Query.php	/^    public function view($join, $field = true, $on = null, $type = 'INNER')$/;"	v
field2	thinkphp\library\think\db\Query.php	/^            $field2   = $operator;$/;"	v
field2	thinkphp\library\think\db\Query.php	/^    public function whereColumn($field1, $operator, $field2 = null, $logic = 'AND')$/;"	v
fields	thinkphp\library\think\db\Query.php	/^                $fields = $alias . '.*';$/;"	v
fields	thinkphp\library\think\db\Query.php	/^            $fields = $this->connection->getTableFields($tableName ?: (isset($this->options['table']) ? $this->options['table'] : $this->getTable()));$/;"	v
fields	thinkphp\library\think\db\Query.php	/^            $fields = [];$/;"	v
fields	thinkphp\library\think\db\Query.php	/^        $fields = is_string($field) ? explode(',', $field) : $field;$/;"	v
find	thinkphp\library\think\db\Query.php	/^    public function find($data = null)$/;"	f
findOrFail	thinkphp\library\think\db\Query.php	/^    public function findOrFail($data = null)$/;"	f
first	thinkphp\library\think\db\Query.php	/^                $first = false;$/;"	v
first	thinkphp\library\think\db\Query.php	/^        $first = true;$/;"	v
force	thinkphp\library\think\db\Query.php	/^    public function force($force)$/;"	f
getBind	thinkphp\library\think\db\Query.php	/^    public function getBind($clear = true)$/;"	f
getConfig	thinkphp\library\think\db\Query.php	/^    public function getConfig($name = '')$/;"	f
getConnection	thinkphp\library\think\db\Query.php	/^    public function getConnection()$/;"	f
getJoinTable	thinkphp\library\think\db\Query.php	/^    protected function getJoinTable($join, &$alias = null)$/;"	f
getLastInsID	thinkphp\library\think\db\Query.php	/^    public function getLastInsID($sequence = null)$/;"	f
getLastSql	thinkphp\library\think\db\Query.php	/^    public function getLastSql()$/;"	f
getModel	thinkphp\library\think\db\Query.php	/^    public function getModel()$/;"	f
getOptions	thinkphp\library\think\db\Query.php	/^    public function getOptions($name = '')$/;"	f
getPartitionTableName	thinkphp\library\think\db\Query.php	/^    public function getPartitionTableName($data, $field, $rule = [])$/;"	f
getPdo	thinkphp\library\think\db\Query.php	/^    public function getPdo()$/;"	f
getPk	thinkphp\library\think\db\Query.php	/^    public function getPk($options = '')$/;"	f
getTable	thinkphp\library\think\db\Query.php	/^    public function getTable($name = '')$/;"	f
group	thinkphp\library\think\db\Query.php	/^    public function group($group)$/;"	f
guid	thinkphp\library\think\db\Query.php	/^            $guid = md5($this->getTable() . '_' . $field . '_' . serialize($condition));$/;"	v
having	thinkphp\library\think\db\Query.php	/^    public function having($having)$/;"	f
inc	thinkphp\library\think\db\Query.php	/^    public function inc($field, $step = 1)$/;"	f
insert	thinkphp\library\think\db\Query.php	/^    public function insert(array $data = [], $replace = false, $getLastInsID = false, $sequence = null)$/;"	f
insertAll	thinkphp\library\think\db\Query.php	/^    public function insertAll(array $dataSet)$/;"	f
insertGetId	thinkphp\library\think\db\Query.php	/^    public function insertGetId(array $data, $replace = false, $sequence = null)$/;"	f
isBind	thinkphp\library\think\db\Query.php	/^    public function isBind($key)$/;"	f
join	thinkphp\library\think\db\Query.php	/^            $join = trim($join);$/;"	v
join	thinkphp\library\think\db\Query.php	/^    public function join($join, $condition = null, $type = 'INNER')$/;"	f
key	thinkphp\library\think\db\Query.php	/^                    foreach ($field as $key => $val) {$/;"	v
key	thinkphp\library\think\db\Query.php	/^                foreach ($field as $key => $val) {$/;"	v
key	thinkphp\library\think\db\Query.php	/^                foreach ($options['where'][$logic] as $key => $val) {$/;"	v
key	thinkphp\library\think\db\Query.php	/^                foreach ($resultSet as $key => &$result) {$/;"	v
key	thinkphp\library\think\db\Query.php	/^            $key    = true;$/;"	v
key	thinkphp\library\think\db\Query.php	/^            $key = $column;$/;"	v
key	thinkphp\library\think\db\Query.php	/^            $key = isset($alias) ? $alias . '.' . $pk : $pk;$/;"	v
key	thinkphp\library\think\db\Query.php	/^            foreach ($alias as $key => $val) {$/;"	v
key	thinkphp\library\think\db\Query.php	/^            foreach ($field as $key => $val) {$/;"	v
key	thinkphp\library\think\db\Query.php	/^            foreach ($join as $key => $val) {$/;"	v
key	thinkphp\library\think\db\Query.php	/^            foreach ($join as $key => $value) {$/;"	v
key	thinkphp\library\think\db\Query.php	/^            foreach ($method as $key => $val) {$/;"	v
key	thinkphp\library\think\db\Query.php	/^            foreach ($options['order'] as $key => $val) {$/;"	v
key	thinkphp\library\think\db\Query.php	/^            foreach ($relations as $key => $relation) {$/;"	v
key	thinkphp\library\think\db\Query.php	/^            foreach ($tables as $key => $val) {$/;"	v
key	thinkphp\library\think\db\Query.php	/^        foreach ($with as $key => $relation) {$/;"	v
key	thinkphp\library\think\db\Query.php	/^    public function column($field, $key = '')$/;"	v
lastId	thinkphp\library\think\db\Query.php	/^            $lastId = is_array($end) ? $end[$key] : $end->$key;$/;"	v
lazyWrite	thinkphp\library\think\db\Query.php	/^    protected function lazyWrite($type, $guid, $step, $lazyTime)$/;"	f
length	thinkphp\library\think\db\Query.php	/^    public function limit($offset, $length = null)$/;"	v
limit	thinkphp\library\think\db\Query.php	/^    public function limit($offset, $length = null)$/;"	f
listRows	thinkphp\library\think\db\Query.php	/^            $listRows              = $listRows > 0 ? $listRows : (is_numeric($options['limit']) ? $options['limit'] : 20);$/;"	v
listRows	thinkphp\library\think\db\Query.php	/^            $listRows = $config['list_rows'];$/;"	v
listRows	thinkphp\library\think\db\Query.php	/^            $listRows = $listRows ?: $config['list_rows'];$/;"	v
listRows	thinkphp\library\think\db\Query.php	/^    public function page($page, $listRows = null)$/;"	v
listen	thinkphp\library\think\db\Query.php	/^    public function listen($callback)$/;"	f
lock	thinkphp\library\think\db\Query.php	/^    public function lock($lock = false)$/;"	f
logic	thinkphp\library\think\db\Query.php	/^        $logic = strtoupper($logic);$/;"	v
logic	thinkphp\library\think\db\Query.php	/^    public function removeWhereField($field, $logic = 'AND')$/;"	v
logic	thinkphp\library\think\db\Query.php	/^    public function whereBetween($field, $condition, $logic = 'AND')$/;"	v
logic	thinkphp\library\think\db\Query.php	/^    public function whereExists($condition, $logic = 'AND')$/;"	v
logic	thinkphp\library\think\db\Query.php	/^    public function whereExp($field, $condition, $logic = 'AND')$/;"	v
logic	thinkphp\library\think\db\Query.php	/^    public function whereIn($field, $condition, $logic = 'AND')$/;"	v
logic	thinkphp\library\think\db\Query.php	/^    public function whereLike($field, $condition, $logic = 'AND')$/;"	v
logic	thinkphp\library\think\db\Query.php	/^    public function whereNotBetween($field, $condition, $logic = 'AND')$/;"	v
logic	thinkphp\library\think\db\Query.php	/^    public function whereNotExists($condition, $logic = 'AND')$/;"	v
logic	thinkphp\library\think\db\Query.php	/^    public function whereNotIn($field, $condition, $logic = 'AND')$/;"	v
logic	thinkphp\library\think\db\Query.php	/^    public function whereNotLike($field, $condition, $logic = 'AND')$/;"	v
logic	thinkphp\library\think\db\Query.php	/^    public function whereNotNull($field, $logic = 'AND')$/;"	v
logic	thinkphp\library\think\db\Query.php	/^    public function whereNull($field, $logic = 'AND')$/;"	v
master	thinkphp\library\think\db\Query.php	/^    public function master()$/;"	f
max	thinkphp\library\think\db\Query.php	/^    public function max($field)$/;"	f
method	thinkphp\library\think\db\Query.php	/^                $method = 'scope' . trim($name);$/;"	v
method	thinkphp\library\think\db\Query.php	/^            $method = 'scope' . $method;$/;"	v
min	thinkphp\library\think\db\Query.php	/^    public function min($field)$/;"	f
model	thinkphp\library\think\db\Query.php	/^            $model    = $class->$relation();$/;"	v
model	thinkphp\library\think\db\Query.php	/^        $this->model = $model;$/;"	v
model	thinkphp\library\think\db\Query.php	/^    protected $model;$/;"	v
model	thinkphp\library\think\db\Query.php	/^    public function model($model)$/;"	f
name	thinkphp\library\think\db\Query.php	/^                            $name = $alias . '.' . $key;$/;"	v
name	thinkphp\library\think\db\Query.php	/^                            $name = $key;$/;"	v
name	thinkphp\library\think\db\Query.php	/^            $name = Loader::parseName(substr($method, 10));$/;"	v
name	thinkphp\library\think\db\Query.php	/^        $name = $name ?: $this->name;$/;"	v
name	thinkphp\library\think\db\Query.php	/^        $this->name = $name;$/;"	v
name	thinkphp\library\think\db\Query.php	/^    protected $name = '';$/;"	v
name	thinkphp\library\think\db\Query.php	/^    public function connect($config = [], $name = false)$/;"	v
name	thinkphp\library\think\db\Query.php	/^    public function name($name)$/;"	f
newQuery	thinkphp\library\think\db\Query.php	/^    public function newQuery()$/;"	f
offset	thinkphp\library\think\db\Query.php	/^            $offset                = $listRows * ($page - 1);$/;"	v
op	thinkphp\library\think\db\Query.php	/^            $op = is_array($range) ? 'between' : '>';$/;"	v
op	thinkphp\library\think\db\Query.php	/^    public function where($field, $op = null, $condition = null)$/;"	v
op	thinkphp\library\think\db\Query.php	/^    public function whereOr($field, $op = null, $condition = null)$/;"	v
op	thinkphp\library\think\db\Query.php	/^    public function whereXor($field, $op = null, $condition = null)$/;"	v
operator	thinkphp\library\think\db\Query.php	/^            $operator = '=';$/;"	v
options	thinkphp\library\think\db\Query.php	/^                $this->options = [];$/;"	v
options	thinkphp\library\think\db\Query.php	/^            $options = $this->getOptions();$/;"	v
options	thinkphp\library\think\db\Query.php	/^            $this->options = [];$/;"	v
options	thinkphp\library\think\db\Query.php	/^        $options = $this->getOptions();$/;"	v
options	thinkphp\library\think\db\Query.php	/^        $this->options = $options;$/;"	v
options	thinkphp\library\think\db\Query.php	/^    protected $options = [];$/;"	v
options	thinkphp\library\think\db\Query.php	/^    protected function options(array $options)$/;"	f
options	thinkphp\library\think\db\Query.php	/^    protected function resultToModel(&$result, $options = [], $resultSet = false)$/;"	v
order	thinkphp\library\think\db\Query.php	/^    public function order($field, $order = null)$/;"	f
order	thinkphp\library\think\db\Query.php	/^    public function order($field, $order = null)$/;"	v
otherwise	thinkphp\library\think\db\Query.php	/^    public function when($condition, $query, $otherwise = null)$/;"	v
page	thinkphp\library\think\db\Query.php	/^            $page                  = $page > 0 ? $page : 1;$/;"	v
page	thinkphp\library\think\db\Query.php	/^        $page  = isset($config['page']) ? (int) $config['page'] : call_user_func([$/;"	v
page	thinkphp\library\think\db\Query.php	/^        $page = $page < 1 ? 1 : $page;$/;"	v
page	thinkphp\library\think\db\Query.php	/^    public function page($page, $listRows = null)$/;"	f
paginate	thinkphp\library\think\db\Query.php	/^        $paginate = Container::get('config')->pull('paginate');$/;"	v
paginate	thinkphp\library\think\db\Query.php	/^    public function paginate($listRows = null, $simple = false, $config = [])$/;"	f
param	thinkphp\library\think\db\Query.php	/^        $param = func_get_args();$/;"	v
param	thinkphp\library\think\db\Query.php	/^    protected function parseWhereExp($logic, $field, $op, $condition, $param = [])$/;"	v
parseOptions	thinkphp\library\think\db\Query.php	/^    protected function parseOptions()$/;"	f
parsePkWhere	thinkphp\library\think\db\Query.php	/^    public function parsePkWhere($data)$/;"	f
parseView	thinkphp\library\think\db\Query.php	/^    protected function parseView(&$options)$/;"	f
parseWhereExp	thinkphp\library\think\db\Query.php	/^    protected function parseWhereExp($logic, $field, $op, $condition, $param = [])$/;"	f
partition	thinkphp\library\think\db\Query.php	/^    public function partition($data, $field, $rule = [])$/;"	f
pk	thinkphp\library\think\db\Query.php	/^            $pk = $this->connection->getPk(is_array($options) ? $options['table'] : $this->getTable());$/;"	v
pk	thinkphp\library\think\db\Query.php	/^            $pk = $this->pk;$/;"	v
pk	thinkphp\library\think\db\Query.php	/^        $pk = $this->getPk($this->options);$/;"	v
pk	thinkphp\library\think\db\Query.php	/^        $this->pk = $pk;$/;"	v
pk	thinkphp\library\think\db\Query.php	/^    protected $pk;$/;"	v
pk	thinkphp\library\think\db\Query.php	/^    public function pk($pk)$/;"	f
prefix	thinkphp\library\think\db\Query.php	/^                $prefix = $this->prefix;$/;"	v
prefix	thinkphp\library\think\db\Query.php	/^            $prefix = $prefix ?: $tableName;$/;"	v
prefix	thinkphp\library\think\db\Query.php	/^        $this->prefix     = $this->connection->getConfig('prefix');$/;"	v
prefix	thinkphp\library\think\db\Query.php	/^        $this->prefix = $this->connection->getConfig('prefix');$/;"	v
prefix	thinkphp\library\think\db\Query.php	/^    protected $prefix = '';$/;"	v
query	thinkphp\library\think\db\Query.php	/^    public function query($sql, $bind = [], $master = false, $class = false)$/;"	f
range	thinkphp\library\think\db\Query.php	/^                    $range = $op;$/;"	v
range	thinkphp\library\think\db\Query.php	/^                    $range = 'this week 00:00:00';$/;"	v
range	thinkphp\library\think\db\Query.php	/^                    $range = ['last week 00:00:00', 'this week 00:00:00'];$/;"	v
range	thinkphp\library\think\db\Query.php	/^                    $range = ['today', 'tomorrow'];$/;"	v
range	thinkphp\library\think\db\Query.php	/^                    $range = ['yesterday', 'today'];$/;"	v
range	thinkphp\library\think\db\Query.php	/^                    $range = [date('y-m-01', strtotime('-1 month')), mktime(0, 0, 0, $date['mon'], 1, $date['year'])];$/;"	v
range	thinkphp\library\think\db\Query.php	/^                    $range = [mktime(0, 0, 0, 1, 1, $date['year'] - 1), mktime(0, 0, 0, 1, 1, $date['year'])];$/;"	v
range	thinkphp\library\think\db\Query.php	/^                    $range = mktime(0, 0, 0, $date['mon'], 1, $date['year']);$/;"	v
range	thinkphp\library\think\db\Query.php	/^                    $range = mktime(0, 0, 0, 1, 1, $date['year']);$/;"	v
range	thinkphp\library\think\db\Query.php	/^    public function whereTime($field, $op, $range = null)$/;"	v
relation	thinkphp\library\think\db\Query.php	/^                    $relation = $key;$/;"	v
relation	thinkphp\library\think\db\Query.php	/^                $relation    = $key;$/;"	v
relation	thinkphp\library\think\db\Query.php	/^                $relation   = $key;$/;"	v
relation	thinkphp\library\think\db\Query.php	/^                $relation = Loader::parseName($relation, 1, false);$/;"	v
relation	thinkphp\library\think\db\Query.php	/^            $relation = Loader::parseName($relation, 1, false);$/;"	v
relation	thinkphp\library\think\db\Query.php	/^            $relation = explode(',', $relation);$/;"	v
relation	thinkphp\library\think\db\Query.php	/^    public function relation($relation)$/;"	f
relations	thinkphp\library\think\db\Query.php	/^            $relations = is_string($relation) ? explode(',', $relation) : $relation;$/;"	v
removeOption	thinkphp\library\think\db\Query.php	/^    public function removeOption($option = true)$/;"	f
removeWhereField	thinkphp\library\think\db\Query.php	/^    public function removeWhereField($field, $logic = 'AND')$/;"	f
replace	thinkphp\library\think\db\Query.php	/^    public function insertGetId(array $data, $replace = false, $sequence = null)$/;"	v
result	thinkphp\library\think\db\Query.php	/^            $result = Container::getInstance()->invoke(self::$event[$event], [$this]);$/;"	v
result	thinkphp\library\think\db\Query.php	/^        $result    = $this->model->newInstance($result, $condition);$/;"	v
result	thinkphp\library\think\db\Query.php	/^        $result = $this->connection->find($this);$/;"	v
result	thinkphp\library\think\db\Query.php	/^        $result = $this->connection->value($this, $field, $default);$/;"	v
result	thinkphp\library\think\db\Query.php	/^        $result = false;$/;"	v
resultSet	thinkphp\library\think\db\Query.php	/^                $resultSet = $result->toCollection($resultSet);$/;"	v
resultSet	thinkphp\library\think\db\Query.php	/^                $resultSet = $resultSet->all();$/;"	v
resultSet	thinkphp\library\think\db\Query.php	/^                $resultSet = $this->model->toCollection($resultSet);$/;"	v
resultSet	thinkphp\library\think\db\Query.php	/^            $resultSet = $resultSet->all();$/;"	v
resultSet	thinkphp\library\think\db\Query.php	/^            $resultSet = $this->options($options)$/;"	v
resultSet	thinkphp\library\think\db\Query.php	/^            $resultSet = new Collection($resultSet);$/;"	v
resultSet	thinkphp\library\think\db\Query.php	/^        $resultSet = $this->connection->select($this);$/;"	v
resultSet	thinkphp\library\think\db\Query.php	/^        $resultSet = $this->options($options)->limit($count)->order($column, $order)->select();$/;"	v
resultToModel	thinkphp\library\think\db\Query.php	/^    protected function resultToModel(&$result, $options = [], $resultSet = false)$/;"	f
results	thinkphp\library\think\db\Query.php	/^            $results = $this->limit(($page - 1) * $listRows, $listRows + 1)->select();$/;"	v
results	thinkphp\library\think\db\Query.php	/^            $results = $this->options($options)->bind($bind)->page($page, $listRows)->select();$/;"	v
results	thinkphp\library\think\db\Query.php	/^            $results = $this->page($page, $listRows)->select();$/;"	v
rollback	thinkphp\library\think\db\Query.php	/^    public function rollback()$/;"	f
rule	thinkphp\library\think\db\Query.php	/^    public function getPartitionTableName($data, $field, $rule = [])$/;"	v
rule	thinkphp\library\think\db\Query.php	/^    public function partition($data, $field, $rule = [])$/;"	v
scope	thinkphp\library\think\db\Query.php	/^            $scope = explode(',', $scope);$/;"	v
scope	thinkphp\library\think\db\Query.php	/^    public function scope($scope, ...$args)$/;"	f
select	thinkphp\library\think\db\Query.php	/^    public function select($data = null)$/;"	f
selectInsert	thinkphp\library\think\db\Query.php	/^    public function selectInsert($fields, $table)$/;"	f
selectOrFail	thinkphp\library\think\db\Query.php	/^    public function selectOrFail($data = null)$/;"	f
seq	thinkphp\library\think\db\Query.php	/^                        $seq = (ord($value{0}) % $rule['num']) + 1;$/;"	v
seq	thinkphp\library\think\db\Query.php	/^                        $seq = (ord(substr($type($value), 0, 1)) % $rule['num']) + 1;$/;"	v
seq	thinkphp\library\think\db\Query.php	/^                    $seq  = floor($value \/ $step) + 1;$/;"	v
seq	thinkphp\library\think\db\Query.php	/^                    $seq = ($value % $rule['num']) + 1;$/;"	v
seq	thinkphp\library\think\db\Query.php	/^                    $seq = (ord(substr(md5($value), 0, 1)) % $rule['num']) + 1;$/;"	v
seq	thinkphp\library\think\db\Query.php	/^                    $seq = date('Y', $value) - $rule['expr'] + 1;$/;"	v
sequence	thinkphp\library\think\db\Query.php	/^    public function sequence($sequence = null)$/;"	f
setConnection	thinkphp\library\think\db\Query.php	/^    public function setConnection(Connection $connection)$/;"	f
setDec	thinkphp\library\think\db\Query.php	/^    public function setDec($field, $step = 1, $lazyTime = 0)$/;"	f
setField	thinkphp\library\think\db\Query.php	/^    public function setField($field, $value = '')$/;"	f
setInc	thinkphp\library\think\db\Query.php	/^    public function setInc($field, $step = 1, $lazyTime = 0)$/;"	f
setOption	thinkphp\library\think\db\Query.php	/^    public function setOption($option, $value)$/;"	f
simple	thinkphp\library\think\db\Query.php	/^            $simple = false;$/;"	v
simple	thinkphp\library\think\db\Query.php	/^    public function paginate($listRows = null, $simple = false, $config = [])$/;"	v
startTrans	thinkphp\library\think\db\Query.php	/^    public function startTrans()$/;"	f
step	thinkphp\library\think\db\Query.php	/^                    $step = $rule['expr'];$/;"	v
step	thinkphp\library\think\db\Query.php	/^            $step = $this->lazyWrite('dec', $guid, $step, $lazyTime);$/;"	v
step	thinkphp\library\think\db\Query.php	/^            $step = $this->lazyWrite('inc', $guid, $step, $lazyTime);$/;"	v
step	thinkphp\library\think\db\Query.php	/^    public function dec($field, $step = 1)$/;"	v
step	thinkphp\library\think\db\Query.php	/^    public function inc($field, $step = 1)$/;"	v
step	thinkphp\library\think\db\Query.php	/^    public function setDec($field, $step = 1, $lazyTime = 0)$/;"	v
step	thinkphp\library\think\db\Query.php	/^    public function setInc($field, $step = 1, $lazyTime = 0)$/;"	v
strict	thinkphp\library\think\db\Query.php	/^    public function strict($strict = true)$/;"	f
subQuery	thinkphp\library\think\db\Query.php	/^    public function withCount($relation, $subQuery = true)$/;"	v
subRelation	thinkphp\library\think\db\Query.php	/^                $subRelation = $relation;$/;"	v
subRelation	thinkphp\library\think\db\Query.php	/^            $subRelation = '';$/;"	v
subSql	thinkphp\library\think\db\Query.php	/^            $subSql  = $this->options($options)->field('count(' . $field . ')')->bind($this->bind)->buildSql();$/;"	v
sum	thinkphp\library\think\db\Query.php	/^    public function sum($field)$/;"	f
table	thinkphp\library\think\db\Query.php	/^                    $table = $join;$/;"	v
table	thinkphp\library\think\db\Query.php	/^                    $table = $this->connection->parseSqlTable($table);$/;"	v
table	thinkphp\library\think\db\Query.php	/^                    $table = $this->getTable($table);$/;"	v
table	thinkphp\library\think\db\Query.php	/^                $table  = [];$/;"	v
table	thinkphp\library\think\db\Query.php	/^                $table = $join;$/;"	v
table	thinkphp\library\think\db\Query.php	/^                $table = $table . '@think' . uniqid();$/;"	v
table	thinkphp\library\think\db\Query.php	/^                $table = $this->getTable();$/;"	v
table	thinkphp\library\think\db\Query.php	/^                $table = [$table => $alias];$/;"	v
table	thinkphp\library\think\db\Query.php	/^                $table = is_array($this->options['table']) ? key($this->options['table']) : $this->options['table'];$/;"	v
table	thinkphp\library\think\db\Query.php	/^            $table  = $this->getJoinTable($join, $alias);$/;"	v
table	thinkphp\library\think\db\Query.php	/^            $table  = [];$/;"	v
table	thinkphp\library\think\db\Query.php	/^            $table = $this->getJoinTable($join);$/;"	v
table	thinkphp\library\think\db\Query.php	/^            $table = '';$/;"	v
table	thinkphp\library\think\db\Query.php	/^            $table = [$table => $alias];$/;"	v
table	thinkphp\library\think\db\Query.php	/^            $table = is_array($options['table']) ? key($options['table']) : $options['table'];$/;"	v
table	thinkphp\library\think\db\Query.php	/^        $table = is_array($this->options['table']) ? key($this->options['table']) : $this->options['table'];$/;"	v
table	thinkphp\library\think\db\Query.php	/^    public function table($table)$/;"	f
tableName	thinkphp\library\think\db\Query.php	/^            $tableName = '( ' . implode(" UNION ", $tableName) . ') AS ' . $this->name;$/;"	v
tableName	thinkphp\library\think\db\Query.php	/^            $tableName = [];$/;"	v
tables	thinkphp\library\think\db\Query.php	/^                $tables = explode(',', $table);$/;"	v
tables	thinkphp\library\think\db\Query.php	/^            $tables = $table;$/;"	v
throwNotFound	thinkphp\library\think\db\Query.php	/^    protected function throwNotFound($options = [])$/;"	f
time	thinkphp\library\think\db\Query.php	/^            $time    = is_string($startTime) ? strtotime($startTime) : $startTime;$/;"	v
total	thinkphp\library\think\db\Query.php	/^            $total   = $this->count();$/;"	v
total	thinkphp\library\think\db\Query.php	/^            $total   = null;$/;"	v
total	thinkphp\library\think\db\Query.php	/^            $total  = $simple;$/;"	v
transaction	thinkphp\library\think\db\Query.php	/^    public function transaction($callback)$/;"	f
trigger	thinkphp\library\think\db\Query.php	/^    public function trigger($event)$/;"	f
type	thinkphp\library\think\db\Query.php	/^            $type  = $rule['type'];$/;"	v
union	thinkphp\library\think\db\Query.php	/^    public function union($union, $all = false)$/;"	f
update	thinkphp\library\think\db\Query.php	/^    public function update(array $data = [])$/;"	f
useSoftDelete	thinkphp\library\think\db\Query.php	/^    public function useSoftDelete($field, $condition = null)$/;"	f
using	thinkphp\library\think\db\Query.php	/^    public function using($using)$/;"	f
val	thinkphp\library\think\db\Query.php	/^                    $val = $prefix . '.' . $val . ($alias ? ' AS ' . $alias . $val : '');$/;"	v
value	thinkphp\library\think\db\Query.php	/^                        $value = strtotime($value);$/;"	v
value	thinkphp\library\think\db\Query.php	/^            $value = $cache->$type($guid, $step);$/;"	v
value	thinkphp\library\think\db\Query.php	/^            $value = $data[$field];$/;"	v
value	thinkphp\library\think\db\Query.php	/^    public function bind($key, $value = false, $type = PDO::PARAM_STR)$/;"	v
value	thinkphp\library\think\db\Query.php	/^    public function data($field, $value = null)$/;"	v
value	thinkphp\library\think\db\Query.php	/^    public function setField($field, $value = '')$/;"	v
value	thinkphp\library\think\db\Query.php	/^    public function value($field, $default = null, $force = false)$/;"	f
via	thinkphp\library\think\db\Query.php	/^    public function via($via = '')$/;"	f
view	thinkphp\library\think\db\Query.php	/^    public function view($join, $field = true, $on = null, $type = 'INNER')$/;"	f
when	thinkphp\library\think\db\Query.php	/^    public function when($condition, $query, $otherwise = null)$/;"	f
where	thinkphp\library\think\db\Query.php	/^                    $where = $field;$/;"	v
where	thinkphp\library\think\db\Query.php	/^                    $where = [];$/;"	v
where	thinkphp\library\think\db\Query.php	/^                $where = [$field, 'null', ''];$/;"	v
where	thinkphp\library\think\db\Query.php	/^            $where = $param;$/;"	v
where	thinkphp\library\think\db\Query.php	/^            $where = [$field, $op, $condition, isset($param[2]) ? $param[2] : null];$/;"	v
where	thinkphp\library\think\db\Query.php	/^            $where = [$field, $op, ''];$/;"	v
where	thinkphp\library\think\db\Query.php	/^            $where = [$field, 'eq', $op];$/;"	v
where	thinkphp\library\think\db\Query.php	/^            $where = ['', 'exp', $field];$/;"	v
where	thinkphp\library\think\db\Query.php	/^            $where = is_string($op) ? [$op, $field] : $field;$/;"	v
where	thinkphp\library\think\db\Query.php	/^    public function where($field, $op = null, $condition = null)$/;"	f
whereBetween	thinkphp\library\think\db\Query.php	/^    public function whereBetween($field, $condition, $logic = 'AND')$/;"	f
whereBetweenTime	thinkphp\library\think\db\Query.php	/^    public function whereBetweenTime($field, $startTime, $endTime = null)$/;"	f
whereColumn	thinkphp\library\think\db\Query.php	/^    public function whereColumn($field1, $operator, $field2 = null, $logic = 'AND')$/;"	f
whereExists	thinkphp\library\think\db\Query.php	/^    public function whereExists($condition, $logic = 'AND')$/;"	f
whereExp	thinkphp\library\think\db\Query.php	/^    public function whereExp($field, $condition, $logic = 'AND')$/;"	f
whereIn	thinkphp\library\think\db\Query.php	/^    public function whereIn($field, $condition, $logic = 'AND')$/;"	f
whereLike	thinkphp\library\think\db\Query.php	/^    public function whereLike($field, $condition, $logic = 'AND')$/;"	f
whereNotBetween	thinkphp\library\think\db\Query.php	/^    public function whereNotBetween($field, $condition, $logic = 'AND')$/;"	f
whereNotExists	thinkphp\library\think\db\Query.php	/^    public function whereNotExists($condition, $logic = 'AND')$/;"	f
whereNotIn	thinkphp\library\think\db\Query.php	/^    public function whereNotIn($field, $condition, $logic = 'AND')$/;"	f
whereNotLike	thinkphp\library\think\db\Query.php	/^    public function whereNotLike($field, $condition, $logic = 'AND')$/;"	f
whereNotNull	thinkphp\library\think\db\Query.php	/^    public function whereNotNull($field, $logic = 'AND')$/;"	f
whereNull	thinkphp\library\think\db\Query.php	/^    public function whereNull($field, $logic = 'AND')$/;"	f
whereOr	thinkphp\library\think\db\Query.php	/^    public function whereOr($field, $op = null, $condition = null)$/;"	f
whereTime	thinkphp\library\think\db\Query.php	/^    public function whereTime($field, $op, $range = null)$/;"	f
whereXor	thinkphp\library\think\db\Query.php	/^    public function whereXor($field, $op = null, $condition = null)$/;"	f
with	thinkphp\library\think\db\Query.php	/^            $with = explode(',', $with);$/;"	v
with	thinkphp\library\think\db\Query.php	/^    public function with($with)$/;"	f
withCount	thinkphp\library\think\db\Query.php	/^    public function withCount($relation, $subQuery = true)$/;"	f
withField	thinkphp\library\think\db\Query.php	/^    public function withField($field)$/;"	f
Mysql	thinkphp\library\think\db\builder\Mysql.php	/^class Mysql extends Builder$/;"	c
alias	thinkphp\library\think\db\builder\Mysql.php	/^            $alias             = $query->getOptions('alias');$/;"	v
array	thinkphp\library\think\db\builder\Mysql.php	/^            $array = [];$/;"	v
fieldsStr	thinkphp\library\think\db\builder\Mysql.php	/^        $fieldsStr = parent::parseField($query, $fields);$/;"	v
fun	thinkphp\library\think\db\builder\Mysql.php	/^                $fun   = isset($data[2]) ? $data[2] : 'GeomFromText';$/;"	v
key	thinkphp\library\think\db\builder\Mysql.php	/^                $key     = !is_numeric($key) ? $key : $field;$/;"	v
key	thinkphp\library\think\db\builder\Mysql.php	/^            $key                = 'json_extract(' . $field . ', \\'$.' . $name . '\\')';$/;"	v
key	thinkphp\library\think\db\builder\Mysql.php	/^            $key = '`' . $key . '`';$/;"	v
key	thinkphp\library\think\db\builder\Mysql.php	/^            $key = '`' . $table . '`.' . $key;$/;"	v
key	thinkphp\library\think\db\builder\Mysql.php	/^            foreach ($options['point'] as $key => $field) {$/;"	v
key	thinkphp\library\think\db\builder\Mysql.php	/^        $key = trim($key);$/;"	v
options	thinkphp\library\think\db\builder\Mysql.php	/^        $options   = $query->getOptions();$/;"	v
parseArrayData	thinkphp\library\think\db\builder\Mysql.php	/^    protected function parseArrayData($data)$/;"	f
parseField	thinkphp\library\think\db\builder\Mysql.php	/^    protected function parseField(Query $query, $fields)$/;"	f
parseKey	thinkphp\library\think\db\builder\Mysql.php	/^    protected function parseKey(Query $query, $key)$/;"	f
parseRand	thinkphp\library\think\db\builder\Mysql.php	/^    protected function parseRand(Query $query)$/;"	f
point	thinkphp\library\think\db\builder\Mysql.php	/^                $point = isset($data[3]) ? $data[3] : 'POINT';$/;"	v
result	thinkphp\library\think\db\builder\Mysql.php	/^                $result = $fun . '(\\'' . $point . '(' . $value . ')\\')';$/;"	v
result	thinkphp\library\think\db\builder\Mysql.php	/^                $result = $value;$/;"	v
result	thinkphp\library\think\db\builder\Mysql.php	/^                $result = false;$/;"	v
table	thinkphp\library\think\db\builder\Mysql.php	/^                $table = $alias[$table];$/;"	v
table	thinkphp\library\think\db\builder\Mysql.php	/^                $table = $query->getTable();$/;"	v
table	thinkphp\library\think\db\builder\Mysql.php	/^                $table = str_replace('.', '`.`', $table);$/;"	v
updateSql	thinkphp\library\think\db\builder\Mysql.php	/^    protected $updateSql = 'UPDATE %TABLE% %JOIN% SET %SET% %WHERE% %ORDER%%LIMIT% %LOCK%%COMMENT%';$/;"	v
value	thinkphp\library\think\db\builder\Mysql.php	/^                    $value = implode(' ', $value);$/;"	v
Pgsql	thinkphp\library\think\db\builder\Pgsql.php	/^class Pgsql extends Builder$/;"	c
alias	thinkphp\library\think\db\builder\Pgsql.php	/^            $alias             = $query->getOptions('alias');$/;"	v
insertAllSql	thinkphp\library\think\db\builder\Pgsql.php	/^    protected $insertAllSql = 'INSERT INTO %TABLE% (%FIELD%) %DATA% %COMMENT%';$/;"	v
insertSql	thinkphp\library\think\db\builder\Pgsql.php	/^    protected $insertSql    = 'INSERT INTO %TABLE% (%FIELD%) VALUES (%DATA%) %COMMENT%';$/;"	v
key	thinkphp\library\think\db\builder\Pgsql.php	/^            $key                = $field . '->>\\'' . $name . '\\'';$/;"	v
key	thinkphp\library\think\db\builder\Pgsql.php	/^            $key = $table . '.' . $key;$/;"	v
key	thinkphp\library\think\db\builder\Pgsql.php	/^        $key = trim($key);$/;"	v
limit	thinkphp\library\think\db\builder\Pgsql.php	/^            $limit = explode(',', $limit);$/;"	v
limitStr	thinkphp\library\think\db\builder\Pgsql.php	/^        $limitStr = '';$/;"	v
parseKey	thinkphp\library\think\db\builder\Pgsql.php	/^    protected function parseKey(Query $query, $key)$/;"	f
parseLimit	thinkphp\library\think\db\builder\Pgsql.php	/^    public function parseLimit(Query $query, $limit)$/;"	f
parseRand	thinkphp\library\think\db\builder\Pgsql.php	/^    protected function parseRand(Query $query)$/;"	f
table	thinkphp\library\think\db\builder\Pgsql.php	/^                $table = $alias[$table];$/;"	v
table	thinkphp\library\think\db\builder\Pgsql.php	/^                $table = $query->getTable();$/;"	v
Sqlite	thinkphp\library\think\db\builder\Sqlite.php	/^class Sqlite extends Builder$/;"	c
alias	thinkphp\library\think\db\builder\Sqlite.php	/^            $alias             = $query->getOptions('alias');$/;"	v
key	thinkphp\library\think\db\builder\Sqlite.php	/^            $key = $table . '.' . $key;$/;"	v
key	thinkphp\library\think\db\builder\Sqlite.php	/^        $key = trim($key);$/;"	v
limit	thinkphp\library\think\db\builder\Sqlite.php	/^            $limit = explode(',', $limit);$/;"	v
limitStr	thinkphp\library\think\db\builder\Sqlite.php	/^        $limitStr = '';$/;"	v
parseKey	thinkphp\library\think\db\builder\Sqlite.php	/^    protected function parseKey(Query $query, $key)$/;"	f
parseLimit	thinkphp\library\think\db\builder\Sqlite.php	/^    public function parseLimit(Query $query, $limit)$/;"	f
parseRand	thinkphp\library\think\db\builder\Sqlite.php	/^    protected function parseRand(Query $query)$/;"	f
table	thinkphp\library\think\db\builder\Sqlite.php	/^                $table = $alias[$table];$/;"	v
table	thinkphp\library\think\db\builder\Sqlite.php	/^                $table = $query->getTable();$/;"	v
Sqlsrv	thinkphp\library\think\db\builder\Sqlsrv.php	/^class Sqlsrv extends Builder$/;"	c
alias	thinkphp\library\think\db\builder\Sqlsrv.php	/^            $alias             = $query->getOptions('alias');$/;"	v
array	thinkphp\library\think\db\builder\Sqlsrv.php	/^            $array = [];$/;"	v
deleteSql	thinkphp\library\think\db\builder\Sqlsrv.php	/^    protected $deleteSql       = 'DELETE FROM %TABLE% %USING% FROM %TABLE% %JOIN% %WHERE% %LIMIT% %LOCK%%COMMENT%';$/;"	v
insertAllSql	thinkphp\library\think\db\builder\Sqlsrv.php	/^    protected $insertAllSql    = 'INSERT INTO %TABLE% (%FIELD%) %DATA% %COMMENT%';$/;"	v
insertSql	thinkphp\library\think\db\builder\Sqlsrv.php	/^    protected $insertSql       = 'INSERT INTO %TABLE% (%FIELD%) VALUES (%DATA%) %COMMENT%';$/;"	v
key	thinkphp\library\think\db\builder\Sqlsrv.php	/^            $key = '[' . $key . ']';$/;"	v
key	thinkphp\library\think\db\builder\Sqlsrv.php	/^            $key = '[' . $table . '].' . $key;$/;"	v
key	thinkphp\library\think\db\builder\Sqlsrv.php	/^            foreach ($order as $key => $val) {$/;"	v
key	thinkphp\library\think\db\builder\Sqlsrv.php	/^        $key = trim($key);$/;"	v
limit	thinkphp\library\think\db\builder\Sqlsrv.php	/^        $limit = explode(',', $limit);$/;"	v
limitStr	thinkphp\library\think\db\builder\Sqlsrv.php	/^            $limitStr = '(T1.ROW_NUMBER BETWEEN ' . $limit[0] . ' + 1 AND ' . $limit[0] . ' + ' . $limit[1] . ')';$/;"	v
limitStr	thinkphp\library\think\db\builder\Sqlsrv.php	/^            $limitStr = '(T1.ROW_NUMBER BETWEEN 1 AND ' . $limit[0] . ")";$/;"	v
order	thinkphp\library\think\db\builder\Sqlsrv.php	/^            $order = implode(',', $array);$/;"	v
parseKey	thinkphp\library\think\db\builder\Sqlsrv.php	/^    protected function parseKey(Query $query, $key)$/;"	f
parseLimit	thinkphp\library\think\db\builder\Sqlsrv.php	/^    protected function parseLimit(Query $query, $limit)$/;"	f
parseOrder	thinkphp\library\think\db\builder\Sqlsrv.php	/^    protected function parseOrder(Query $query, $order)$/;"	f
parseRand	thinkphp\library\think\db\builder\Sqlsrv.php	/^    protected function parseRand(Query $query)$/;"	f
selectInsert	thinkphp\library\think\db\builder\Sqlsrv.php	/^    public function selectInsert(Query $query, $fields, $table)$/;"	f
selectInsertSql	thinkphp\library\think\db\builder\Sqlsrv.php	/^    protected $selectInsertSql = 'SELECT %DISTINCT% %FIELD% FROM %TABLE%%JOIN%%WHERE%%GROUP%%HAVING%';$/;"	v
selectSql	thinkphp\library\think\db\builder\Sqlsrv.php	/^        $this->selectSql = $this->selectInsertSql;$/;"	v
selectSql	thinkphp\library\think\db\builder\Sqlsrv.php	/^    protected $selectSql       = 'SELECT T1.* FROM (SELECT thinkphp.*, ROW_NUMBER() OVER (%ORDER%) AS ROW_NUMBER FROM (SELECT %DISTINCT% %FIELD% FROM %TABLE%%JOIN%%WHERE%%GROUP%%HAVING%) AS thinkphp) AS T1 %LIMIT%%COMMENT%';$/;"	v
sort	thinkphp\library\think\db\builder\Sqlsrv.php	/^                    $sort    = in_array(strtolower(trim($val)), ['asc', 'desc']) ? ' ' . $val : '';$/;"	v
table	thinkphp\library\think\db\builder\Sqlsrv.php	/^                $table = $alias[$table];$/;"	v
table	thinkphp\library\think\db\builder\Sqlsrv.php	/^                $table = $query->getTable();$/;"	v
updateSql	thinkphp\library\think\db\builder\Sqlsrv.php	/^    protected $updateSql       = 'UPDATE %TABLE% SET %SET% FROM %TABLE% %JOIN% %WHERE% %LIMIT% %LOCK%%COMMENT%';$/;"	v
Mysql	thinkphp\library\think\db\connector\Mysql.php	/^class Mysql extends Connection$/;"	c
builder	thinkphp\library\think\db\connector\Mysql.php	/^    protected $builder = '\\\\think\\\\db\\\\builder\\\\Mysql';$/;"	v
dsn	thinkphp\library\think\db\connector\Mysql.php	/^        $dsn = 'mysql:dbname=' . $config['database'] . ';host=' . $config['hostname'];$/;"	v
field	thinkphp\library\think\db\connector\Mysql.php	/^                    $field = explode(',', $field);$/;"	v
getExplain	thinkphp\library\think\db\connector\Mysql.php	/^    protected function getExplain($sql)$/;"	f
getFields	thinkphp\library\think\db\connector\Mysql.php	/^    public function getFields($tableName)$/;"	f
getTables	thinkphp\library\think\db\connector\Mysql.php	/^    public function getTables($dbName = '')$/;"	f
info	thinkphp\library\think\db\connector\Mysql.php	/^        $info   = [];$/;"	v
initialize	thinkphp\library\think\db\connector\Mysql.php	/^    protected function initialize()$/;"	f
key	thinkphp\library\think\db\connector\Mysql.php	/^            foreach ($result as $key => $val) {$/;"	v
key	thinkphp\library\think\db\connector\Mysql.php	/^        foreach ($result as $key => $val) {$/;"	v
parseDsn	thinkphp\library\think\db\connector\Mysql.php	/^    protected function parseDsn($config)$/;"	f
pdo	thinkphp\library\think\db\connector\Mysql.php	/^        $pdo    = $this->linkID->query("EXPLAIN " . $sql);$/;"	v
pdo	thinkphp\library\think\db\connector\Mysql.php	/^        $pdo    = $this->query($sql, [], false, true);$/;"	v
result	thinkphp\library\think\db\connector\Mysql.php	/^        $result = $pdo->fetch(PDO::FETCH_ASSOC);$/;"	v
result	thinkphp\library\think\db\connector\Mysql.php	/^        $result = $pdo->fetchAll(PDO::FETCH_ASSOC);$/;"	v
result	thinkphp\library\think\db\connector\Mysql.php	/^        $result = array_change_key_case($result);$/;"	v
sql	thinkphp\library\think\db\connector\Mysql.php	/^        $sql    = !empty($dbName) ? 'SHOW TABLES FROM ' . $dbName : 'SHOW TABLES ';$/;"	v
sql	thinkphp\library\think\db\connector\Mysql.php	/^        $sql    = 'SHOW COLUMNS FROM ' . $tableName;$/;"	v
supportSavepoint	thinkphp\library\think\db\connector\Mysql.php	/^    protected function supportSavepoint()$/;"	f
tableName	thinkphp\library\think\db\connector\Mysql.php	/^                $tableName = str_replace('.', '`.`', $tableName);$/;"	v
tableName	thinkphp\library\think\db\connector\Mysql.php	/^            $tableName = '`' . $tableName . '`';$/;"	v
val	thinkphp\library\think\db\connector\Mysql.php	/^                $val                 = array_change_key_case($val);$/;"	v
value	thinkphp\library\think\db\connector\Mysql.php	/^        Query::extend('point', function ($query, $field, $value = null, $fun = 'GeomFromText', $type = 'POINT') {$/;"	v
Pgsql	thinkphp\library\think\db\connector\Pgsql.php	/^class Pgsql extends Connection$/;"	c
builder	thinkphp\library\think\db\connector\Pgsql.php	/^    protected $builder = '\\\\think\\\\db\\\\builder\\\\Pgsql';$/;"	v
dsn	thinkphp\library\think\db\connector\Pgsql.php	/^        $dsn = 'pgsql:dbname=' . $config['database'] . ';host=' . $config['hostname'];$/;"	v
getExplain	thinkphp\library\think\db\connector\Pgsql.php	/^    protected function getExplain($sql)$/;"	f
getFields	thinkphp\library\think\db\connector\Pgsql.php	/^    public function getFields($tableName)$/;"	f
getTables	thinkphp\library\think\db\connector\Pgsql.php	/^    public function getTables($dbName = '')$/;"	f
info	thinkphp\library\think\db\connector\Pgsql.php	/^        $info   = [];$/;"	v
key	thinkphp\library\think\db\connector\Pgsql.php	/^            foreach ($result as $key => $val) {$/;"	v
key	thinkphp\library\think\db\connector\Pgsql.php	/^        foreach ($result as $key => $val) {$/;"	v
params	thinkphp\library\think\db\connector\Pgsql.php	/^    protected $params = [$/;"	v
parseDsn	thinkphp\library\think\db\connector\Pgsql.php	/^    protected function parseDsn($config)$/;"	f
pdo	thinkphp\library\think\db\connector\Pgsql.php	/^        $pdo    = $this->query($sql, [], false, true);$/;"	v
result	thinkphp\library\think\db\connector\Pgsql.php	/^        $result = $pdo->fetchAll(PDO::FETCH_ASSOC);$/;"	v
sql	thinkphp\library\think\db\connector\Pgsql.php	/^        $sql             = 'select fields_name as "field",fields_type as "type",fields_not_null as "null",fields_key_name as "key",fields_default as "default",fields_default as "extra" from table_msg(\\'' . $tableName . '\\');';$/;"	v
sql	thinkphp\library\think\db\connector\Pgsql.php	/^        $sql    = "select tablename as Tables_in_test from pg_tables where  schemaname ='public'";$/;"	v
supportSavepoint	thinkphp\library\think\db\connector\Pgsql.php	/^    protected function supportSavepoint()$/;"	f
val	thinkphp\library\think\db\connector\Pgsql.php	/^                $val                 = array_change_key_case($val);$/;"	v
Sqlite	thinkphp\library\think\db\connector\Sqlite.php	/^class Sqlite extends Connection$/;"	c
builder	thinkphp\library\think\db\connector\Sqlite.php	/^    protected $builder = '\\\\think\\\\db\\\\builder\\\\Sqlite';$/;"	v
dsn	thinkphp\library\think\db\connector\Sqlite.php	/^        $dsn = 'sqlite:' . $config['database'];$/;"	v
getExplain	thinkphp\library\think\db\connector\Sqlite.php	/^    protected function getExplain($sql)$/;"	f
getFields	thinkphp\library\think\db\connector\Sqlite.php	/^    public function getFields($tableName)$/;"	f
getTables	thinkphp\library\think\db\connector\Sqlite.php	/^    public function getTables($dbName = '')$/;"	f
info	thinkphp\library\think\db\connector\Sqlite.php	/^        $info   = [];$/;"	v
key	thinkphp\library\think\db\connector\Sqlite.php	/^            foreach ($result as $key => $val) {$/;"	v
key	thinkphp\library\think\db\connector\Sqlite.php	/^        foreach ($result as $key => $val) {$/;"	v
parseDsn	thinkphp\library\think\db\connector\Sqlite.php	/^    protected function parseDsn($config)$/;"	f
pdo	thinkphp\library\think\db\connector\Sqlite.php	/^        $pdo    = $this->query($sql, [], false, true);$/;"	v
result	thinkphp\library\think\db\connector\Sqlite.php	/^        $result = $pdo->fetchAll(PDO::FETCH_ASSOC);$/;"	v
sql	thinkphp\library\think\db\connector\Sqlite.php	/^        $sql             = 'PRAGMA table_info( ' . $tableName . ' )';$/;"	v
sql	thinkphp\library\think\db\connector\Sqlite.php	/^        $sql = "SELECT name FROM sqlite_master WHERE type='table' "$/;"	v
supportSavepoint	thinkphp\library\think\db\connector\Sqlite.php	/^    protected function supportSavepoint()$/;"	f
val	thinkphp\library\think\db\connector\Sqlite.php	/^                $val                = array_change_key_case($val);$/;"	v
Sqlsrv	thinkphp\library\think\db\connector\Sqlsrv.php	/^class Sqlsrv extends Connection$/;"	c
builder	thinkphp\library\think\db\connector\Sqlsrv.php	/^    protected $builder = '\\\\think\\\\db\\\\builder\\\\Sqlsrv';$/;"	v
dsn	thinkphp\library\think\db\connector\Sqlsrv.php	/^        $dsn = 'sqlsrv:Database=' . $config['database'] . ';Server=' . $config['hostname'];$/;"	v
getExplain	thinkphp\library\think\db\connector\Sqlsrv.php	/^    protected function getExplain($sql)$/;"	f
getFields	thinkphp\library\think\db\connector\Sqlsrv.php	/^    public function getFields($tableName)$/;"	f
getTables	thinkphp\library\think\db\connector\Sqlsrv.php	/^    public function getTables($dbName = '')$/;"	f
info	thinkphp\library\think\db\connector\Sqlsrv.php	/^        $info   = [];$/;"	v
key	thinkphp\library\think\db\connector\Sqlsrv.php	/^            foreach ($result as $key => $val) {$/;"	v
key	thinkphp\library\think\db\connector\Sqlsrv.php	/^        foreach ($result as $key => $val) {$/;"	v
params	thinkphp\library\think\db\connector\Sqlsrv.php	/^    protected $params = [$/;"	v
parseDsn	thinkphp\library\think\db\connector\Sqlsrv.php	/^    protected function parseDsn($config)$/;"	f
pdo	thinkphp\library\think\db\connector\Sqlsrv.php	/^        $pdo    = $this->query($sql, [], false, true);$/;"	v
pdo	thinkphp\library\think\db\connector\Sqlsrv.php	/^        $pdo = $this->linkID->query($sql);$/;"	v
result	thinkphp\library\think\db\connector\Sqlsrv.php	/^        $result = $pdo->fetch(PDO::FETCH_ASSOC);$/;"	v
result	thinkphp\library\think\db\connector\Sqlsrv.php	/^        $result = $pdo->fetchAll(PDO::FETCH_ASSOC);$/;"	v
sql	thinkphp\library\think\db\connector\Sqlsrv.php	/^        $sql = "SELECT   column_name,   data_type,   column_default,   is_nullable$/;"	v
sql	thinkphp\library\think\db\connector\Sqlsrv.php	/^        $sql = "SELECT TABLE_NAME$/;"	v
sql	thinkphp\library\think\db\connector\Sqlsrv.php	/^        $sql = "SELECT column_name FROM information_schema.key_column_usage WHERE table_name='$tableName'";$/;"	v
val	thinkphp\library\think\db\connector\Sqlsrv.php	/^                $val                       = array_change_key_case($val);$/;"	v
pgsql_type	thinkphp\library\think\db\connector\pgsql.sql	/^CREATE OR REPLACE FUNCTION pgsql_type(a_type varchar) RETURNS varchar AS$/;"	f
table_msg	thinkphp\library\think\db\connector\pgsql.sql	/^CREATE OR REPLACE FUNCTION "public"."table_msg" (a_schema_name varchar, a_table_name varchar) RETURNS SETOF "public"."tablestruct" AS$/;"	f
table_msg	thinkphp\library\think\db\connector\pgsql.sql	/^CREATE OR REPLACE FUNCTION "public"."table_msg" (a_table_name varchar) RETURNS SETOF "public"."tablestruct" AS$/;"	f
BindParamException	thinkphp\library\think\db\exception\BindParamException.php	/^class BindParamException extends DbException$/;"	c
__construct	thinkphp\library\think\db\exception\BindParamException.php	/^    public function __construct($message, $config, $sql, $bind, $code = 10502)$/;"	f
code	thinkphp\library\think\db\exception\BindParamException.php	/^    public function __construct($message, $config, $sql, $bind, $code = 10502)$/;"	v
DataNotFoundException	thinkphp\library\think\db\exception\DataNotFoundException.php	/^class DataNotFoundException extends DbException$/;"	c
__construct	thinkphp\library\think\db\exception\DataNotFoundException.php	/^    public function __construct($message, $table = '', array $config = [])$/;"	f
getTable	thinkphp\library\think\db\exception\DataNotFoundException.php	/^    public function getTable()$/;"	f
message	thinkphp\library\think\db\exception\DataNotFoundException.php	/^        $this->message = $message;$/;"	v
table	thinkphp\library\think\db\exception\DataNotFoundException.php	/^        $this->table   = $table;$/;"	v
table	thinkphp\library\think\db\exception\DataNotFoundException.php	/^    protected $table;$/;"	v
table	thinkphp\library\think\db\exception\DataNotFoundException.php	/^    public function __construct($message, $table = '', array $config = [])$/;"	v
ModelNotFoundException	thinkphp\library\think\db\exception\ModelNotFoundException.php	/^class ModelNotFoundException extends DbException$/;"	c
__construct	thinkphp\library\think\db\exception\ModelNotFoundException.php	/^    public function __construct($message, $model = '', array $config = [])$/;"	f
getModel	thinkphp\library\think\db\exception\ModelNotFoundException.php	/^    public function getModel()$/;"	f
message	thinkphp\library\think\db\exception\ModelNotFoundException.php	/^        $this->message = $message;$/;"	v
model	thinkphp\library\think\db\exception\ModelNotFoundException.php	/^        $this->model   = $model;$/;"	v
model	thinkphp\library\think\db\exception\ModelNotFoundException.php	/^    protected $model;$/;"	v
model	thinkphp\library\think\db\exception\ModelNotFoundException.php	/^    public function __construct($message, $model = '', array $config = [])$/;"	v
Console	thinkphp\library\think\debug\Console.php	/^class Console$/;"	c
__construct	thinkphp\library\think\debug\Console.php	/^    public function __construct($config = [])$/;"	f
accept	thinkphp\library\think\debug\Console.php	/^        $accept      = $request->header('accept');$/;"	v
base	thinkphp\library\think\debug\Console.php	/^        $base = [$/;"	v
config	thinkphp\library\think\debug\Console.php	/^            $this->config = array_merge($this->config, $config);$/;"	v
config	thinkphp\library\think\debug\Console.php	/^    protected $config = [$/;"	v
console	thinkphp\library\think\debug\Console.php	/^    protected function console($type, $msg)$/;"	f
contentType	thinkphp\library\think\debug\Console.php	/^        $contentType = $response->getHeader('Content-Type');$/;"	v
info	thinkphp\library\think\debug\Console.php	/^        $info = Container::get('debug')->getFile(true);$/;"	v
js	thinkphp\library\think\debug\Console.php	/^        $js = <<<JS$/;"	v
key	thinkphp\library\think\debug\Console.php	/^        foreach ((array) $msg as $key => $m) {$/;"	v
lines	thinkphp\library\think\debug\Console.php	/^        $lines = '';$/;"	v
log	thinkphp\library\think\debug\Console.php	/^    public function output(Response $response, array $log = [])$/;"	v
m	thinkphp\library\think\debug\Console.php	/^                    $m      = is_string($key) ? $key . ' ' . $m : $key + 1 . ' ' . $m;$/;"	v
mem	thinkphp\library\think\debug\Console.php	/^        $mem     = number_format((memory_get_usage() - Container::get('app')->getBeginMem()) \/ 1024, 2);$/;"	v
msg	thinkphp\library\think\debug\Console.php	/^                    $msg    = json_encode($m);$/;"	v
msg	thinkphp\library\think\debug\Console.php	/^                    $msg    = str_replace("\\n", '\\n', $m);$/;"	v
name	thinkphp\library\think\debug\Console.php	/^            $name = strtolower($name);$/;"	v
name	thinkphp\library\think\debug\Console.php	/^        foreach ($this->config['tabs'] as $name => $title) {$/;"	v
names	thinkphp\library\think\debug\Console.php	/^                        $names  = explode('|', $name);$/;"	v
output	thinkphp\library\think\debug\Console.php	/^    public function output(Response $response, array $log = [])$/;"	f
reqs	thinkphp\library\think\debug\Console.php	/^        $reqs    = $runtime > 0 ? number_format(1 \/ $runtime, 2) : '∞';$/;"	v
request	thinkphp\library\think\debug\Console.php	/^        $request     = Container::get('request');$/;"	v
result	thinkphp\library\think\debug\Console.php	/^                            $result = array_merge($result, isset($log[$name]) ? $log[$name] : []);$/;"	v
result	thinkphp\library\think\debug\Console.php	/^                        $result = [];$/;"	v
runtime	thinkphp\library\think\debug\Console.php	/^        $runtime = number_format(microtime(true) - Container::get('app')->getBeginTime(), 10);$/;"	v
style	thinkphp\library\think\debug\Console.php	/^                    $style  = "color:#009bb4;";$/;"	v
style	thinkphp\library\think\debug\Console.php	/^                    $style  = 'color:#F4006B;font-size:14px;';$/;"	v
trace	thinkphp\library\think\debug\Console.php	/^        $trace = [];$/;"	v
trace_tabs	thinkphp\library\think\debug\Console.php	/^        $trace_tabs = array_values($this->config['tabs']);$/;"	v
type	thinkphp\library\think\debug\Console.php	/^        $type       = strtolower($type);$/;"	v
type	thinkphp\library\think\debug\Console.php	/^        foreach ($trace as $type => $msg) {$/;"	v
uri	thinkphp\library\think\debug\Console.php	/^            $uri = $_SERVER['SERVER_PROTOCOL'] . ' ' . $_SERVER['REQUEST_METHOD'] . ' : ' . $_SERVER['HTTP_HOST'] . $_SERVER['REQUEST_URI'];$/;"	v
uri	thinkphp\library\think\debug\Console.php	/^            $uri = 'cmd:' . implode(' ', $_SERVER['argv']);$/;"	v
var_type	thinkphp\library\think\debug\Console.php	/^                    $var_type = gettype($m);$/;"	v
Html	thinkphp\library\think\debug\Html.php	/^class Html$/;"	c
__construct	thinkphp\library\think\debug\Html.php	/^    public function __construct(array $config = [])$/;"	f
accept	thinkphp\library\think\debug\Html.php	/^        $accept      = $request->header('accept');$/;"	v
base	thinkphp\library\think\debug\Html.php	/^        $base = [$/;"	v
config	thinkphp\library\think\debug\Html.php	/^        $this->config = array_merge($this->config, $config);$/;"	v
config	thinkphp\library\think\debug\Html.php	/^    protected $config = [$/;"	v
config	thinkphp\library\think\debug\Html.php	/^    public function __construct(array $config = [])$/;"	v
contentType	thinkphp\library\think\debug\Html.php	/^        $contentType = $response->getHeader('Content-Type');$/;"	v
info	thinkphp\library\think\debug\Html.php	/^        $info = Container::get('debug')->getFile(true);$/;"	v
log	thinkphp\library\think\debug\Html.php	/^    public function output(Response $response, array $log = [])$/;"	v
mem	thinkphp\library\think\debug\Html.php	/^        $mem     = number_format((memory_get_usage() - Container::get('app')->getBeginMem()) \/ 1024, 2);$/;"	v
name	thinkphp\library\think\debug\Html.php	/^            $name = strtolower($name);$/;"	v
name	thinkphp\library\think\debug\Html.php	/^        foreach ($this->config['tabs'] as $name => $title) {$/;"	v
names	thinkphp\library\think\debug\Html.php	/^                        $names  = explode('|', $name);$/;"	v
output	thinkphp\library\think\debug\Html.php	/^    public function output(Response $response, array $log = [])$/;"	f
reqs	thinkphp\library\think\debug\Html.php	/^        $reqs    = $runtime > 0 ? number_format(1 \/ $runtime, 2) : '∞';$/;"	v
request	thinkphp\library\think\debug\Html.php	/^        $request     = Container::get('request');$/;"	v
result	thinkphp\library\think\debug\Html.php	/^                            $result = array_merge($result, isset($log[$name]) ? $log[$name] : []);$/;"	v
result	thinkphp\library\think\debug\Html.php	/^                        $result = [];$/;"	v
runtime	thinkphp\library\think\debug\Html.php	/^        $runtime = number_format(microtime(true) - Container::get('app')->getBeginTime(), 10);$/;"	v
trace	thinkphp\library\think\debug\Html.php	/^        $trace = [];$/;"	v
uri	thinkphp\library\think\debug\Html.php	/^            $uri = $_SERVER['SERVER_PROTOCOL'] . ' ' . $_SERVER['REQUEST_METHOD'] . ' : ' . $_SERVER['HTTP_HOST'] . $_SERVER['REQUEST_URI'];$/;"	v
uri	thinkphp\library\think\debug\Html.php	/^            $uri = 'cmd:' . implode(' ', $_SERVER['argv']);$/;"	v
ClassNotFoundException	thinkphp\library\think\exception\ClassNotFoundException.php	/^class ClassNotFoundException extends \\RuntimeException$/;"	c
__construct	thinkphp\library\think\exception\ClassNotFoundException.php	/^    public function __construct($message, $class = '')$/;"	f
class	thinkphp\library\think\exception\ClassNotFoundException.php	/^        $this->class   = $class;$/;"	v
class	thinkphp\library\think\exception\ClassNotFoundException.php	/^    protected $class;$/;"	v
class	thinkphp\library\think\exception\ClassNotFoundException.php	/^    public function __construct($message, $class = '')$/;"	v
getClass	thinkphp\library\think\exception\ClassNotFoundException.php	/^    public function getClass()$/;"	f
message	thinkphp\library\think\exception\ClassNotFoundException.php	/^        $this->message = $message;$/;"	v
DbException	thinkphp\library\think\exception\DbException.php	/^class DbException extends Exception$/;"	c
__construct	thinkphp\library\think\exception\DbException.php	/^    public function __construct($message, array $config, $sql, $code = 10500)$/;"	f
code	thinkphp\library\think\exception\DbException.php	/^        $this->code    = $code;$/;"	v
code	thinkphp\library\think\exception\DbException.php	/^    public function __construct($message, array $config, $sql, $code = 10500)$/;"	v
message	thinkphp\library\think\exception\DbException.php	/^        $this->message = $message;$/;"	v
ErrorException	thinkphp\library\think\exception\ErrorException.php	/^class ErrorException extends Exception$/;"	c
__construct	thinkphp\library\think\exception\ErrorException.php	/^    public function __construct($severity, $message, $file, $line, array $context = [])$/;"	f
code	thinkphp\library\think\exception\ErrorException.php	/^        $this->code     = 0;$/;"	v
context	thinkphp\library\think\exception\ErrorException.php	/^    public function __construct($severity, $message, $file, $line, array $context = [])$/;"	v
file	thinkphp\library\think\exception\ErrorException.php	/^        $this->file     = $file;$/;"	v
getSeverity	thinkphp\library\think\exception\ErrorException.php	/^    final public function getSeverity()$/;"	f
line	thinkphp\library\think\exception\ErrorException.php	/^        $this->line     = $line;$/;"	v
message	thinkphp\library\think\exception\ErrorException.php	/^        $this->message  = $message;$/;"	v
severity	thinkphp\library\think\exception\ErrorException.php	/^        $this->severity = $severity;$/;"	v
severity	thinkphp\library\think\exception\ErrorException.php	/^    protected $severity;$/;"	v
Handle	thinkphp\library\think\exception\Handle.php	/^class Handle$/;"	c
code	thinkphp\library\think\exception\Handle.php	/^            $code = $exception->getSeverity();$/;"	v
code	thinkphp\library\think\exception\Handle.php	/^        $code = $exception->getCode();$/;"	v
const	thinkphp\library\think\exception\Handle.php	/^        $const = get_defined_constants(true);$/;"	v
content	thinkphp\library\think\exception\Handle.php	/^        $content  = ob_get_clean();$/;"	v
contents	thinkphp\library\think\exception\Handle.php	/^            $contents = file($exception->getFile());$/;"	v
convertExceptionToResponse	thinkphp\library\think\exception\Handle.php	/^    protected function convertExceptionToResponse(Exception $exception)$/;"	f
data	thinkphp\library\think\exception\Handle.php	/^                $data = [$/;"	v
data	thinkphp\library\think\exception\Handle.php	/^            $data = $exception->getData();$/;"	v
data	thinkphp\library\think\exception\Handle.php	/^            $data = [$/;"	v
data	thinkphp\library\think\exception\Handle.php	/^        $data = [];$/;"	v
first	thinkphp\library\think\exception\Handle.php	/^        $first = ($line - 9 > 0) ? $line - 9 : 1;$/;"	v
getCode	thinkphp\library\think\exception\Handle.php	/^    protected function getCode(Exception $exception)$/;"	f
getConst	thinkphp\library\think\exception\Handle.php	/^    private static function getConst()$/;"	f
getExtendData	thinkphp\library\think\exception\Handle.php	/^    protected function getExtendData(Exception $exception)$/;"	f
getMessage	thinkphp\library\think\exception\Handle.php	/^    protected function getMessage(Exception $exception)$/;"	f
getSourceCode	thinkphp\library\think\exception\Handle.php	/^    protected function getSourceCode(Exception $exception)$/;"	f
ignoreReport	thinkphp\library\think\exception\Handle.php	/^    protected $ignoreReport = [$/;"	v
isIgnoreReport	thinkphp\library\think\exception\Handle.php	/^    protected function isIgnoreReport(Exception $exception)$/;"	f
lang	thinkphp\library\think\exception\Handle.php	/^        $lang = Container::get('lang');$/;"	v
line	thinkphp\library\think\exception\Handle.php	/^        $line  = $exception->getLine();$/;"	v
log	thinkphp\library\think\exception\Handle.php	/^                $log = "[{$data['code']}]{$data['message']}";$/;"	v
log	thinkphp\library\think\exception\Handle.php	/^                $log = "[{$data['code']}]{$data['message']}[{$data['file']}:{$data['line']}]";$/;"	v
message	thinkphp\library\think\exception\Handle.php	/^            $message = $lang->get($message);$/;"	v
message	thinkphp\library\think\exception\Handle.php	/^            $message = $lang->has($name) ? $lang->get($name) . ':' . substr(strstr($message, ','), 1) : $message;$/;"	v
message	thinkphp\library\think\exception\Handle.php	/^            $message = $lang->has($name) ? $lang->get($name) . strstr($message, ':') : $message;$/;"	v
message	thinkphp\library\think\exception\Handle.php	/^        $message = $exception->getMessage();$/;"	v
name	thinkphp\library\think\exception\Handle.php	/^            $name    = strstr($message, ',', true);$/;"	v
name	thinkphp\library\think\exception\Handle.php	/^            $name    = strstr($message, ':', true);$/;"	v
render	thinkphp\library\think\exception\Handle.php	/^        $this->render = $render;$/;"	v
render	thinkphp\library\think\exception\Handle.php	/^    protected $render;$/;"	v
render	thinkphp\library\think\exception\Handle.php	/^    public function render(Exception $e)$/;"	f
renderForConsole	thinkphp\library\think\exception\Handle.php	/^    public function renderForConsole(Output $output, Exception $e)$/;"	f
renderHttpException	thinkphp\library\think\exception\Handle.php	/^    protected function renderHttpException(HttpException $e)$/;"	f
report	thinkphp\library\think\exception\Handle.php	/^    public function report(Exception $exception)$/;"	f
response	thinkphp\library\think\exception\Handle.php	/^        $response = Response::create($content, 'html');$/;"	v
result	thinkphp\library\think\exception\Handle.php	/^            $result = call_user_func_array($this->render, [$e]);$/;"	v
setRender	thinkphp\library\think\exception\Handle.php	/^    public function setRender($render)$/;"	f
source	thinkphp\library\think\exception\Handle.php	/^            $source   = [$/;"	v
source	thinkphp\library\think\exception\Handle.php	/^            $source = [];$/;"	v
status	thinkphp\library\think\exception\Handle.php	/^        $status   = $e->getStatusCode();$/;"	v
statusCode	thinkphp\library\think\exception\Handle.php	/^            $statusCode = $exception->getStatusCode();$/;"	v
statusCode	thinkphp\library\think\exception\Handle.php	/^            $statusCode = 500;$/;"	v
template	thinkphp\library\think\exception\Handle.php	/^        $template = Container::get('app')->config('http_exception_template');$/;"	v
HttpException	thinkphp\library\think\exception\HttpException.php	/^class HttpException extends \\RuntimeException$/;"	c
__construct	thinkphp\library\think\exception\HttpException.php	/^    public function __construct($statusCode, $message = null, \\Exception $previous = null, array $headers = [], $code = 0)$/;"	f
getHeaders	thinkphp\library\think\exception\HttpException.php	/^    public function getHeaders()$/;"	f
getStatusCode	thinkphp\library\think\exception\HttpException.php	/^    public function getStatusCode()$/;"	f
headers	thinkphp\library\think\exception\HttpException.php	/^        $this->headers    = $headers;$/;"	v
headers	thinkphp\library\think\exception\HttpException.php	/^    private $headers;$/;"	v
message	thinkphp\library\think\exception\HttpException.php	/^    public function __construct($statusCode, $message = null, \\Exception $previous = null, array $headers = [], $code = 0)$/;"	v
statusCode	thinkphp\library\think\exception\HttpException.php	/^        $this->statusCode = $statusCode;$/;"	v
statusCode	thinkphp\library\think\exception\HttpException.php	/^    private $statusCode;$/;"	v
HttpResponseException	thinkphp\library\think\exception\HttpResponseException.php	/^class HttpResponseException extends \\RuntimeException$/;"	c
__construct	thinkphp\library\think\exception\HttpResponseException.php	/^    public function __construct(Response $response)$/;"	f
getResponse	thinkphp\library\think\exception\HttpResponseException.php	/^    public function getResponse()$/;"	f
response	thinkphp\library\think\exception\HttpResponseException.php	/^        $this->response = $response;$/;"	v
response	thinkphp\library\think\exception\HttpResponseException.php	/^    protected $response;$/;"	v
PDOException	thinkphp\library\think\exception\PDOException.php	/^class PDOException extends DbException$/;"	c
__construct	thinkphp\library\think\exception\PDOException.php	/^    public function __construct(\\PDOException $exception, array $config, $sql, $code = 10501)$/;"	f
code	thinkphp\library\think\exception\PDOException.php	/^    public function __construct(\\PDOException $exception, array $config, $sql, $code = 10501)$/;"	v
error	thinkphp\library\think\exception\PDOException.php	/^        $error = $exception->errorInfo;$/;"	v
RouteNotFoundException	thinkphp\library\think\exception\RouteNotFoundException.php	/^class RouteNotFoundException extends HttpException$/;"	c
__construct	thinkphp\library\think\exception\RouteNotFoundException.php	/^    public function __construct()$/;"	f
TemplateNotFoundException	thinkphp\library\think\exception\TemplateNotFoundException.php	/^class TemplateNotFoundException extends \\RuntimeException$/;"	c
__construct	thinkphp\library\think\exception\TemplateNotFoundException.php	/^    public function __construct($message, $template = '')$/;"	f
getTemplate	thinkphp\library\think\exception\TemplateNotFoundException.php	/^    public function getTemplate()$/;"	f
message	thinkphp\library\think\exception\TemplateNotFoundException.php	/^        $this->message  = $message;$/;"	v
template	thinkphp\library\think\exception\TemplateNotFoundException.php	/^        $this->template = $template;$/;"	v
template	thinkphp\library\think\exception\TemplateNotFoundException.php	/^    protected $template;$/;"	v
template	thinkphp\library\think\exception\TemplateNotFoundException.php	/^    public function __construct($message, $template = '')$/;"	v
ThrowableError	thinkphp\library\think\exception\ThrowableError.php	/^class ThrowableError extends \\ErrorException$/;"	c
__construct	thinkphp\library\think\exception\ThrowableError.php	/^    public function __construct(\\Throwable $e)$/;"	f
message	thinkphp\library\think\exception\ThrowableError.php	/^            $message  = 'Fatal error: ' . $e->getMessage();$/;"	v
message	thinkphp\library\think\exception\ThrowableError.php	/^            $message  = 'Parse error: ' . $e->getMessage();$/;"	v
message	thinkphp\library\think\exception\ThrowableError.php	/^            $message  = 'Type error: ' . $e->getMessage();$/;"	v
setTrace	thinkphp\library\think\exception\ThrowableError.php	/^    protected function setTrace($trace)$/;"	f
severity	thinkphp\library\think\exception\ThrowableError.php	/^            $severity = E_ERROR;$/;"	v
severity	thinkphp\library\think\exception\ThrowableError.php	/^            $severity = E_PARSE;$/;"	v
severity	thinkphp\library\think\exception\ThrowableError.php	/^            $severity = E_RECOVERABLE_ERROR;$/;"	v
traceReflector	thinkphp\library\think\exception\ThrowableError.php	/^        $traceReflector = new \\ReflectionProperty('Exception', 'trace');$/;"	v
ValidateException	thinkphp\library\think\exception\ValidateException.php	/^class ValidateException extends \\RuntimeException$/;"	c
__construct	thinkphp\library\think\exception\ValidateException.php	/^    public function __construct($error)$/;"	f
error	thinkphp\library\think\exception\ValidateException.php	/^        $this->error   = $error;$/;"	v
error	thinkphp\library\think\exception\ValidateException.php	/^    protected $error;$/;"	v
getError	thinkphp\library\think\exception\ValidateException.php	/^    public function getError()$/;"	f
message	thinkphp\library\think\exception\ValidateException.php	/^        $this->message = is_array($error) ? implode("\\n\\r", $error) : $error;$/;"	v
App	thinkphp\library\think\facade\App.php	/^class App extends Facade$/;"	c
Build	thinkphp\library\think\facade\Build.php	/^class Build extends Facade$/;"	c
Cache	thinkphp\library\think\facade\Cache.php	/^class Cache extends Facade$/;"	c
Config	thinkphp\library\think\facade\Config.php	/^class Config extends Facade$/;"	c
Cookie	thinkphp\library\think\facade\Cookie.php	/^class Cookie extends Facade$/;"	c
Debug	thinkphp\library\think\facade\Debug.php	/^class Debug extends Facade$/;"	c
Env	thinkphp\library\think\facade\Env.php	/^class Env extends Facade$/;"	c
Hook	thinkphp\library\think\facade\Hook.php	/^class Hook extends Facade$/;"	c
Lang	thinkphp\library\think\facade\Lang.php	/^class Lang extends Facade$/;"	c
Log	thinkphp\library\think\facade\Log.php	/^class Log extends Facade$/;"	c
Request	thinkphp\library\think\facade\Request.php	/^class Request extends Facade$/;"	c
Response	thinkphp\library\think\facade\Response.php	/^class Response extends Facade$/;"	c
Route	thinkphp\library\think\facade\Route.php	/^class Route extends Facade$/;"	c
Session	thinkphp\library\think\facade\Session.php	/^class Session extends Facade$/;"	c
Url	thinkphp\library\think\facade\Url.php	/^class Url extends Facade$/;"	c
Validate	thinkphp\library\think\facade\Validate.php	/^class Validate extends Facade$/;"	c
View	thinkphp\library\think\facade\View.php	/^class View extends Facade$/;"	c
File	thinkphp\library\think\log\driver\File.php	/^class File$/;"	c
__construct	thinkphp\library\think\log\driver\File.php	/^    public function __construct($config = [])$/;"	f
apart	thinkphp\library\think\log\driver\File.php	/^    protected function write($message, $destination, $apart = false)$/;"	v
cli	thinkphp\library\think\log\driver\File.php	/^        $cli         = PHP_SAPI == 'cli' ? '_cli' : '';$/;"	v
config	thinkphp\library\think\log\driver\File.php	/^            $this->config = array_merge($this->config, $config);$/;"	v
config	thinkphp\library\think\log\driver\File.php	/^    protected $config = [$/;"	v
current_uri	thinkphp\library\think\log\driver\File.php	/^                $current_uri = $_SERVER['HTTP_HOST'] . $_SERVER['REQUEST_URI'];$/;"	v
destination	thinkphp\library\think\log\driver\File.php	/^        $destination = $this->config['path'] . date('Ym') . '\/' . date('d') . $cli . '.log';$/;"	v
file_load	thinkphp\library\think\log\driver\File.php	/^                $file_load   = ' [文件加载：' . count(get_included_files()) . ']';$/;"	v
filename	thinkphp\library\think\log\driver\File.php	/^                $filename = $path . '\/' . date('d') . '_' . $type . $cli . '.log';$/;"	v
info	thinkphp\library\think\log\driver\File.php	/^        $info = '';$/;"	v
level	thinkphp\library\think\log\driver\File.php	/^            $level = '';$/;"	v
log	thinkphp\library\think\log\driver\File.php	/^    public function save(array $log = [])$/;"	v
memory_str	thinkphp\library\think\log\driver\File.php	/^                $memory_str  = ' [内存消耗：' . $memory_use . 'kb]';$/;"	v
memory_use	thinkphp\library\think\log\driver\File.php	/^                $memory_use  = number_format((memory_get_usage() - Container::get('app')->getBeginMem()) \/ 1024, 2);$/;"	v
message	thinkphp\library\think\log\driver\File.php	/^                $message     = '[ info ] ' . $current_uri . $time_str . $memory_str . $file_load . "\\r\\n" . $message;$/;"	v
message	thinkphp\library\think\log\driver\File.php	/^            $message = "---------------------------------------------------------------\\r\\n[{$now}] {$server} {$remote} {$method} {$uri}\\r\\n" . $message;$/;"	v
message	thinkphp\library\think\log\driver\File.php	/^            $message = "[{$now}]" . $message;$/;"	v
method	thinkphp\library\think\log\driver\File.php	/^            $method  = isset($_SERVER['REQUEST_METHOD']) ? $_SERVER['REQUEST_METHOD'] : 'CLI';$/;"	v
msg	thinkphp\library\think\log\driver\File.php	/^                    $msg = var_export($msg, true);$/;"	v
now	thinkphp\library\think\log\driver\File.php	/^            $now     = date($this->config['time_format']);$/;"	v
path	thinkphp\library\think\log\driver\File.php	/^        $path = dirname($destination);$/;"	v
remote	thinkphp\library\think\log\driver\File.php	/^            $remote  = isset($_SERVER['REMOTE_ADDR']) ? $_SERVER['REMOTE_ADDR'] : '0.0.0.0';$/;"	v
reqs	thinkphp\library\think\log\driver\File.php	/^                $reqs        = $runtime > 0 ? number_format(1 \/ $runtime, 2) : '∞';$/;"	v
runtime	thinkphp\library\think\log\driver\File.php	/^                $runtime     = round(microtime(true) - Container::get('app')->getBeginTime(), 10);$/;"	v
save	thinkphp\library\think\log\driver\File.php	/^    public function save(array $log = [])$/;"	f
server	thinkphp\library\think\log\driver\File.php	/^            $server  = isset($_SERVER['SERVER_ADDR']) ? $_SERVER['SERVER_ADDR'] : '0.0.0.0';$/;"	v
time_str	thinkphp\library\think\log\driver\File.php	/^                $time_str    = ' [运行时间：' . number_format($runtime, 6) . 's][吞吐率：' . $reqs . 'req\/s]';$/;"	v
type	thinkphp\library\think\log\driver\File.php	/^        foreach ($log as $type => $val) {$/;"	v
uri	thinkphp\library\think\log\driver\File.php	/^            $uri     = isset($_SERVER['REQUEST_URI']) ? $_SERVER['REQUEST_URI'] : '';$/;"	v
write	thinkphp\library\think\log\driver\File.php	/^    protected function write($message, $destination, $apart = false)$/;"	f
writed	thinkphp\library\think\log\driver\File.php	/^    protected $writed = [];$/;"	v
Socket	thinkphp\library\think\log\driver\Socket.php	/^class Socket$/;"	c
__construct	thinkphp\library\think\log\driver\Socket.php	/^    public function __construct(array $config = [])$/;"	f
address	thinkphp\library\think\log\driver\Socket.php	/^        $address = '\/' . $client_id; \/\/将client_id作为地址， server端通过地址判断将日志发布给谁$/;"	v
allowForceClientIds	thinkphp\library\think\log\driver\Socket.php	/^            $this->allowForceClientIds = $this->config['force_client_ids'];$/;"	v
allowForceClientIds	thinkphp\library\think\log\driver\Socket.php	/^            $this->allowForceClientIds = array_intersect($allow_client_ids, $this->config['force_client_ids']);$/;"	v
allowForceClientIds	thinkphp\library\think\log\driver\Socket.php	/^    protected $allowForceClientIds = []; \/\/配置强制推送且被授权的client_id$/;"	v
allow_client_ids	thinkphp\library\think\log\driver\Socket.php	/^        $allow_client_ids = $this->config['allow_client_ids'];$/;"	v
args	thinkphp\library\think\log\driver\Socket.php	/^                $args = ['tabid' => null];$/;"	v
args	thinkphp\library\think\log\driver\Socket.php	/^        static $args = [];$/;"	v
ch	thinkphp\library\think\log\driver\Socket.php	/^        $ch  = curl_init();$/;"	v
check	thinkphp\library\think\log\driver\Socket.php	/^    protected function check()$/;"	f
client_id	thinkphp\library\think\log\driver\Socket.php	/^                $client_id = $force_client_id;$/;"	v
client_id	thinkphp\library\think\log\driver\Socket.php	/^            $client_id = $this->getClientArg('client_id');$/;"	v
client_id	thinkphp\library\think\log\driver\Socket.php	/^            $client_id = '';$/;"	v
config	thinkphp\library\think\log\driver\Socket.php	/^            $this->config = array_merge($this->config, $config);$/;"	v
config	thinkphp\library\think\log\driver\Socket.php	/^    protected $config = [$/;"	v
config	thinkphp\library\think\log\driver\Socket.php	/^    public function __construct(array $config = [])$/;"	v
css	thinkphp\library\think\log\driver\Socket.php	/^    protected $css = [$/;"	v
current_uri	thinkphp\library\think\log\driver\Socket.php	/^                $current_uri = $_SERVER['HTTP_HOST'] . $_SERVER['REQUEST_URI'];$/;"	v
current_uri	thinkphp\library\think\log\driver\Socket.php	/^                $current_uri = 'cmd:' . implode(' ', $_SERVER['argv']);$/;"	v
file_load	thinkphp\library\think\log\driver\Socket.php	/^            $file_load  = ' [文件加载：' . count(get_included_files()) . ']';$/;"	v
getClientArg	thinkphp\library\think\log\driver\Socket.php	/^    protected function getClientArg($name)$/;"	f
headers	thinkphp\library\think\log\driver\Socket.php	/^        $headers = [$/;"	v
key	thinkphp\library\think\log\driver\Socket.php	/^            $key = 'HTTP_SOCKETLOG';$/;"	v
key	thinkphp\library\think\log\driver\Socket.php	/^        $key = 'HTTP_USER_AGENT';$/;"	v
log	thinkphp\library\think\log\driver\Socket.php	/^    public function save(array $log = [])$/;"	v
logs	thinkphp\library\think\log\driver\Socket.php	/^        $logs = [$/;"	v
memory_str	thinkphp\library\think\log\driver\Socket.php	/^            $memory_str = ' [内存消耗：' . $memory_use . 'kb]';$/;"	v
memory_use	thinkphp\library\think\log\driver\Socket.php	/^            $memory_use = number_format((memory_get_usage() - Container::get('app')->getBeginMem()) \/ 1024, 2);$/;"	v
message	thinkphp\library\think\log\driver\Socket.php	/^    protected function send($host, $message = '', $address = '\/')$/;"	v
msg	thinkphp\library\think\log\driver\Socket.php	/^                    $msg = var_export($msg, true);$/;"	v
msg	thinkphp\library\think\log\driver\Socket.php	/^        $msg     = @json_encode($logs);$/;"	v
port	thinkphp\library\think\log\driver\Socket.php	/^    public $port = 1116; \/\/SocketLog 服务的http的端口号$/;"	v
reqs	thinkphp\library\think\log\driver\Socket.php	/^            $reqs       = $runtime > 0 ? number_format(1 \/ $runtime, 2) : '∞';$/;"	v
runtime	thinkphp\library\think\log\driver\Socket.php	/^            $runtime    = round(microtime(true) - Container::get('app')->getBeginTime(), 10);$/;"	v
save	thinkphp\library\think\log\driver\Socket.php	/^    public function save(array $log = [])$/;"	f
send	thinkphp\library\think\log\driver\Socket.php	/^    protected function send($host, $message = '', $address = '\/')$/;"	f
sendToClient	thinkphp\library\think\log\driver\Socket.php	/^    protected function sendToClient($tabid, $client_id, $logs, $force_client_id)$/;"	f
tabid	thinkphp\library\think\log\driver\Socket.php	/^        $tabid = $this->getClientArg('tabid');$/;"	v
time_str	thinkphp\library\think\log\driver\Socket.php	/^            $time_str   = ' [运行时间：' . number_format($runtime, 6) . 's][吞吐率：' . $reqs . 'req\/s]';$/;"	v
trace	thinkphp\library\think\log\driver\Socket.php	/^        $trace = [];$/;"	v
type	thinkphp\library\think\log\driver\Socket.php	/^        foreach ($log as $type => $val) {$/;"	v
url	thinkphp\library\think\log\driver\Socket.php	/^        $url = 'http:\/\/' . $host . ':' . $this->port . $address;$/;"	v
Test	thinkphp\library\think\log\driver\Test.php	/^class Test$/;"	c
log	thinkphp\library\think\log\driver\Test.php	/^    public function save(array $log = [])$/;"	v
save	thinkphp\library\think\log\driver\Test.php	/^    public function save(array $log = [])$/;"	f
Collection	thinkphp\library\think\model\Collection.php	/^class Collection extends BaseCollection$/;"	c
append	thinkphp\library\think\model\Collection.php	/^    public function append($append = [], $override = false)$/;"	f
column	thinkphp\library\think\model\Collection.php	/^    public function column($column_key, $index_key = null)$/;"	f
hidden	thinkphp\library\think\model\Collection.php	/^    public function hidden($hidden = [], $override = false)$/;"	f
index_key	thinkphp\library\think\model\Collection.php	/^    public function column($column_key, $index_key = null)$/;"	v
item	thinkphp\library\think\model\Collection.php	/^        $item = current($this->items);$/;"	v
load	thinkphp\library\think\model\Collection.php	/^    public function load($relation)$/;"	f
override	thinkphp\library\think\model\Collection.php	/^    public function append($append = [], $override = false)$/;"	v
override	thinkphp\library\think\model\Collection.php	/^    public function hidden($hidden = [], $override = false)$/;"	v
override	thinkphp\library\think\model\Collection.php	/^    public function visible($visible = [], $override = false)$/;"	v
visible	thinkphp\library\think\model\Collection.php	/^    public function visible($visible = [], $override = false)$/;"	f
Pivot	thinkphp\library\think\model\Pivot.php	/^class Pivot extends Model$/;"	c
__construct	thinkphp\library\think\model\Pivot.php	/^    public function __construct(Model $parent = null, $data = [], $table = '')$/;"	f
autoWriteTimestamp	thinkphp\library\think\model\Pivot.php	/^    protected $autoWriteTimestamp = false;$/;"	v
class	thinkphp\library\think\model\Pivot.php	/^        $this->class = $this->name;$/;"	v
name	thinkphp\library\think\model\Pivot.php	/^            $this->name = $table;$/;"	v
parent	thinkphp\library\think\model\Pivot.php	/^        $this->parent = $parent;$/;"	v
parent	thinkphp\library\think\model\Pivot.php	/^    public $parent;$/;"	v
parent	thinkphp\library\think\model\Pivot.php	/^    public function __construct(Model $parent = null, $data = [], $table = '')$/;"	v
Relation	thinkphp\library\think\model\Relation.php	/^abstract class Relation$/;"	c
__call	thinkphp\library\think\model\Relation.php	/^    public function __call($method, $args)$/;"	f
baseQuery	thinkphp\library\think\model\Relation.php	/^    abstract protected function baseQuery();$/;"	f
baseQuery	thinkphp\library\think\model\Relation.php	/^    protected $baseQuery;$/;"	v
field	thinkphp\library\think\model\Relation.php	/^                    $field = $model . '.' . $field;$/;"	v
fields	thinkphp\library\think\model\Relation.php	/^                $fields = explode(',', $fields);$/;"	v
fields	thinkphp\library\think\model\Relation.php	/^            $fields = $model . '.*';$/;"	v
fields	thinkphp\library\think\model\Relation.php	/^        $fields = $this->query->getOptions('field');$/;"	v
foreignKey	thinkphp\library\think\model\Relation.php	/^    protected $foreignKey;$/;"	v
getModel	thinkphp\library\think\model\Relation.php	/^    public function getModel()$/;"	f
getParent	thinkphp\library\think\model\Relation.php	/^    public function getParent()$/;"	f
getQueryFields	thinkphp\library\think\model\Relation.php	/^    protected function getQueryFields($model)$/;"	f
getQueryWhere	thinkphp\library\think\model\Relation.php	/^    protected function getQueryWhere(&$where, $relation)$/;"	f
getRelationQueryFields	thinkphp\library\think\model\Relation.php	/^    protected function getRelationQueryFields($fields, $model)$/;"	f
key	thinkphp\library\think\model\Relation.php	/^        foreach ($where as $key => $val) {$/;"	v
localKey	thinkphp\library\think\model\Relation.php	/^    protected $localKey;$/;"	v
model	thinkphp\library\think\model\Relation.php	/^    protected $model;$/;"	v
parent	thinkphp\library\think\model\Relation.php	/^    protected $parent;$/;"	v
query	thinkphp\library\think\model\Relation.php	/^    protected $query;$/;"	v
resultSetBuild	thinkphp\library\think\model\Relation.php	/^    protected function resultSetBuild($resultSet)$/;"	f
allowField	thinkphp\library\think\model\concern\Attribute.php	/^    public function allowField($field)$/;"	f
appendData	thinkphp\library\think\model\concern\Attribute.php	/^    public function appendData($data, $set = false)$/;"	f
autoWriteTimestamp	thinkphp\library\think\model\concern\Attribute.php	/^        $this->autoWriteTimestamp = $auto;$/;"	v
autoWriteTimestamp	thinkphp\library\think\model\concern\Attribute.php	/^    protected function autoWriteTimestamp($name)$/;"	f
data	thinkphp\library\think\model\concern\Attribute.php	/^                $data = get_object_vars($data);$/;"	v
data	thinkphp\library\think\model\concern\Attribute.php	/^                $this->data = $data;$/;"	v
data	thinkphp\library\think\model\concern\Attribute.php	/^            $this->data = [];$/;"	v
data	thinkphp\library\think\model\concern\Attribute.php	/^            $this->data = array_merge($this->data, $data);$/;"	v
data	thinkphp\library\think\model\concern\Attribute.php	/^        $data = array_udiff_assoc($this->data, $this->origin, function ($a, $b) {$/;"	v
data	thinkphp\library\think\model\concern\Attribute.php	/^    private $data = [];$/;"	v
data	thinkphp\library\think\model\concern\Attribute.php	/^    public function data($data, $value = null)$/;"	f
data	thinkphp\library\think\model\concern\Attribute.php	/^    public function setAttr($name, $value, $data = [])$/;"	v
field	thinkphp\library\think\model\concern\Attribute.php	/^            $field = explode(',', $field);$/;"	v
field	thinkphp\library\think\model\concern\Attribute.php	/^        $this->field = $field;$/;"	v
field	thinkphp\library\think\model\concern\Attribute.php	/^    protected $field = [];$/;"	v
format	thinkphp\library\think\model\concern\Attribute.php	/^                    $format = !empty($param) ? $param : $this->dateFormat;$/;"	v
format	thinkphp\library\think\model\concern\Attribute.php	/^                $format = !empty($param) ? $param : $this->dateFormat;$/;"	v
getAttr	thinkphp\library\think\model\concern\Attribute.php	/^    public function getAttr($name)$/;"	f
getChangedData	thinkphp\library\think\model\concern\Attribute.php	/^    public function getChangedData()$/;"	f
getData	thinkphp\library\think\model\concern\Attribute.php	/^    public function getData($name = null)$/;"	f
getOrigin	thinkphp\library\think\model\concern\Attribute.php	/^    public function getOrigin($name = null)$/;"	f
getPk	thinkphp\library\think\model\concern\Attribute.php	/^    public function getPk()$/;"	f
isAutoWriteTimestamp	thinkphp\library\think\model\concern\Attribute.php	/^    public function isAutoWriteTimestamp($auto)$/;"	f
isPk	thinkphp\library\think\model\concern\Attribute.php	/^    protected function isPk($key)$/;"	f
isRelationData	thinkphp\library\think\model\concern\Attribute.php	/^        $isRelationData = false;$/;"	v
key	thinkphp\library\think\model\concern\Attribute.php	/^                foreach ($data as $key => $value) {$/;"	v
key	thinkphp\library\think\model\concern\Attribute.php	/^            foreach ($data as $key => $value) {$/;"	v
key	thinkphp\library\think\model\concern\Attribute.php	/^            foreach ($this->readonly as $key => $field) {$/;"	v
method	thinkphp\library\think\model\concern\Attribute.php	/^            $method = 'set' . Loader::parseName($name, 1) . 'Attr';$/;"	v
method	thinkphp\library\think\model\concern\Attribute.php	/^        $method = 'get' . Loader::parseName($name, 1) . 'Attr';$/;"	v
modelRelation	thinkphp\library\think\model\concern\Attribute.php	/^                $modelRelation = $this->$relation();$/;"	v
notFound	thinkphp\library\think\model\concern\Attribute.php	/^            $notFound = false;$/;"	v
notFound	thinkphp\library\think\model\concern\Attribute.php	/^            $notFound = true;$/;"	v
option	thinkphp\library\think\model\concern\Attribute.php	/^                $option = !empty($param) ? (int) $param : JSON_UNESCAPED_UNICODE;$/;"	v
origin	thinkphp\library\think\model\concern\Attribute.php	/^    private $origin = [];$/;"	v
pk	thinkphp\library\think\model\concern\Attribute.php	/^        $pk = $this->getPk();$/;"	v
pk	thinkphp\library\think\model\concern\Attribute.php	/^        if (is_string($pk) && $pk == $key) {$/;"	v
pk	thinkphp\library\think\model\concern\Attribute.php	/^    protected $pk = 'id';$/;"	v
readTransform	thinkphp\library\think\model\concern\Attribute.php	/^    protected function readTransform($value, $type)$/;"	f
readonly	thinkphp\library\think\model\concern\Attribute.php	/^        $this->readonly = $field;$/;"	v
readonly	thinkphp\library\think\model\concern\Attribute.php	/^    protected $readonly = [];$/;"	v
readonly	thinkphp\library\think\model\concern\Attribute.php	/^    public function readonly($field)$/;"	f
relation	thinkphp\library\think\model\concern\Attribute.php	/^            $relation = $this->isRelationAttr($name);$/;"	v
relation	thinkphp\library\think\model\concern\Attribute.php	/^            if ($notFound && $relation = $this->isRelationAttr($name)) {$/;"	v
set	thinkphp\library\think\model\concern\Attribute.php	/^    public function appendData($data, $set = false)$/;"	v
setAttr	thinkphp\library\think\model\concern\Attribute.php	/^    public function setAttr($name, $value, $data = [])$/;"	f
type	thinkphp\library\think\model\concern\Attribute.php	/^            $type = $this->type[$name];$/;"	v
type	thinkphp\library\think\model\concern\Attribute.php	/^    protected $type = [];$/;"	v
value	thinkphp\library\think\model\concern\Attribute.php	/^                    $value  = $this->formatDateTime($value, $format);$/;"	v
value	thinkphp\library\think\model\concern\Attribute.php	/^                    $value  = $this->formatDateTime(strtotime($value), $format);$/;"	v
value	thinkphp\library\think\model\concern\Attribute.php	/^                    $value  = $this->formatDateTime(time(), $format);$/;"	v
value	thinkphp\library\think\model\concern\Attribute.php	/^                    $value = $this->getRelationData($modelRelation);$/;"	v
value	thinkphp\library\think\model\concern\Attribute.php	/^                    $value = (float) $value;$/;"	v
value	thinkphp\library\think\model\concern\Attribute.php	/^                    $value = (float) number_format($value, $param, '.', '');$/;"	v
value	thinkphp\library\think\model\concern\Attribute.php	/^                    $value = json_encode($value, JSON_FORCE_OBJECT);$/;"	v
value	thinkphp\library\think\model\concern\Attribute.php	/^                    $value = new $type($value);$/;"	v
value	thinkphp\library\think\model\concern\Attribute.php	/^                    $value = strtotime($value);$/;"	v
value	thinkphp\library\think\model\concern\Attribute.php	/^                    $value = time();$/;"	v
value	thinkphp\library\think\model\concern\Attribute.php	/^                $value         = $this->getRelationData($modelRelation);$/;"	v
value	thinkphp\library\think\model\concern\Attribute.php	/^                $value  = $this->formatDateTime($value, $format);$/;"	v
value	thinkphp\library\think\model\concern\Attribute.php	/^                $value  = is_numeric($value) ? $value : strtotime($value);$/;"	v
value	thinkphp\library\think\model\concern\Attribute.php	/^                $value  = json_encode($value, $option);$/;"	v
value	thinkphp\library\think\model\concern\Attribute.php	/^                $value = $this->$method($value, array_merge($this->data, $data));$/;"	v
value	thinkphp\library\think\model\concern\Attribute.php	/^                $value = $this->formatDateTime($value, $this->dateFormat);$/;"	v
value	thinkphp\library\think\model\concern\Attribute.php	/^                $value = $this->formatDateTime(strtotime($value), $this->dateFormat);$/;"	v
value	thinkphp\library\think\model\concern\Attribute.php	/^                $value = $this->writeTransform($value, $this->type[$name]);$/;"	v
value	thinkphp\library\think\model\concern\Attribute.php	/^                $value = (array) $value;$/;"	v
value	thinkphp\library\think\model\concern\Attribute.php	/^                $value = (bool) $value;$/;"	v
value	thinkphp\library\think\model\concern\Attribute.php	/^                $value = (int) $value;$/;"	v
value	thinkphp\library\think\model\concern\Attribute.php	/^                $value = empty($value) ? [] : json_decode($value, true);$/;"	v
value	thinkphp\library\think\model\concern\Attribute.php	/^                $value = empty($value) ? new \\stdClass() : json_decode($value);$/;"	v
value	thinkphp\library\think\model\concern\Attribute.php	/^                $value = json_decode($value, true);$/;"	v
value	thinkphp\library\think\model\concern\Attribute.php	/^                $value = serialize($value);$/;"	v
value	thinkphp\library\think\model\concern\Attribute.php	/^                $value = unserialize($value);$/;"	v
value	thinkphp\library\think\model\concern\Attribute.php	/^            $value    = $this->getData($name);$/;"	v
value	thinkphp\library\think\model\concern\Attribute.php	/^            $value    = null;$/;"	v
value	thinkphp\library\think\model\concern\Attribute.php	/^            $value = $this->$method($value, $this->data);$/;"	v
value	thinkphp\library\think\model\concern\Attribute.php	/^            $value = $this->autoWriteTimestamp($name);$/;"	v
value	thinkphp\library\think\model\concern\Attribute.php	/^            $value = $this->formatDateTime(time(), $this->dateFormat);$/;"	v
value	thinkphp\library\think\model\concern\Attribute.php	/^            $value = $this->formatDateTime(time(), $this->dateFormat, true);$/;"	v
value	thinkphp\library\think\model\concern\Attribute.php	/^            $value = $this->readTransform($value, $this->type[$name]);$/;"	v
value	thinkphp\library\think\model\concern\Attribute.php	/^    public function data($data, $value = null)$/;"	v
writeTransform	thinkphp\library\think\model\concern\Attribute.php	/^    protected function writeTransform($value, $type)$/;"	f
__toString	thinkphp\library\think\model\concern\Conversion.php	/^    public function __toString()$/;"	f
append	thinkphp\library\think\model\concern\Conversion.php	/^            $append = explode(',', $append);$/;"	v
append	thinkphp\library\think\model\concern\Conversion.php	/^        $this->append = $override ? $append : array_merge($this->append, $append);$/;"	v
append	thinkphp\library\think\model\concern\Conversion.php	/^    protected $append = [];$/;"	v
append	thinkphp\library\think\model\concern\Conversion.php	/^    public function append($append = [], $override = false)$/;"	f
appendRelationAttr	thinkphp\library\think\model\concern\Conversion.php	/^    public function appendRelationAttr($attr, $append)$/;"	f
array	thinkphp\library\think\model\concern\Conversion.php	/^            $array = $this->parseAttr($this->hidden, $hidden, false);$/;"	v
array	thinkphp\library\think\model\concern\Conversion.php	/^            $array = $this->parseAttr($this->visible, $visible);$/;"	v
array	thinkphp\library\think\model\concern\Conversion.php	/^        $array = [];$/;"	v
class	thinkphp\library\think\model\concern\Conversion.php	/^            $class      = $this->resultSetType;$/;"	v
collection	thinkphp\library\think\model\concern\Conversion.php	/^            $collection = new $class($collection);$/;"	v
collection	thinkphp\library\think\model\concern\Conversion.php	/^            $collection = new \\think\\model\\Collection($collection);$/;"	v
data	thinkphp\library\think\model\concern\Conversion.php	/^            $data  = array_diff_key($data, array_flip($array));$/;"	v
data	thinkphp\library\think\model\concern\Conversion.php	/^            $data  = array_intersect_key($data, array_flip($array));$/;"	v
data	thinkphp\library\think\model\concern\Conversion.php	/^        $data = array_merge($this->data, $this->relation);$/;"	v
hidden	thinkphp\library\think\model\concern\Conversion.php	/^        $hidden  = [];$/;"	v
hidden	thinkphp\library\think\model\concern\Conversion.php	/^        $this->hidden = $override ? $hidden : array_merge($this->hidden, $hidden);$/;"	v
hidden	thinkphp\library\think\model\concern\Conversion.php	/^    protected $hidden = [];$/;"	v
hidden	thinkphp\library\think\model\concern\Conversion.php	/^    public function hidden($hidden = [], $override = false)$/;"	f
item	thinkphp\library\think\model\concern\Conversion.php	/^        $item    = [];$/;"	v
jsonSerialize	thinkphp\library\think\model\concern\Conversion.php	/^    public function jsonSerialize()$/;"	f
key	thinkphp\library\think\model\concern\Conversion.php	/^                $key = is_numeric($key) ? $attr : $key;$/;"	v
key	thinkphp\library\think\model\concern\Conversion.php	/^            foreach ($append as $key => $attr) {$/;"	v
key	thinkphp\library\think\model\concern\Conversion.php	/^            foreach ($this->append as $key => $name) {$/;"	v
key	thinkphp\library\think\model\concern\Conversion.php	/^        foreach ($attrs as $key => $val) {$/;"	v
key	thinkphp\library\think\model\concern\Conversion.php	/^        foreach ($data as $key => $val) {$/;"	v
model	thinkphp\library\think\model\concern\Conversion.php	/^            $model = $this->getRelationData($this->$relation());$/;"	v
model	thinkphp\library\think\model\concern\Conversion.php	/^            $model = $this->relation[$relation];$/;"	v
override	thinkphp\library\think\model\concern\Conversion.php	/^    public function append($append = [], $override = false)$/;"	v
override	thinkphp\library\think\model\concern\Conversion.php	/^    public function hidden($hidden = [], $override = false)$/;"	v
override	thinkphp\library\think\model\concern\Conversion.php	/^    public function visible($visible = [], $override = false)$/;"	v
parseAttr	thinkphp\library\think\model\concern\Conversion.php	/^    protected function parseAttr($attrs, &$result, $visible = true)$/;"	f
relation	thinkphp\library\think\model\concern\Conversion.php	/^                    $relation   = $this->getAttr($key);$/;"	v
relation	thinkphp\library\think\model\concern\Conversion.php	/^        $relation = Loader::parseName($attr, 1, false);$/;"	v
relation	thinkphp\library\think\model\concern\Conversion.php	/^        $this->relation = [];$/;"	v
removeRelation	thinkphp\library\think\model\concern\Conversion.php	/^    public function removeRelation()$/;"	f
resultSetType	thinkphp\library\think\model\concern\Conversion.php	/^    protected $resultSetType;$/;"	v
toArray	thinkphp\library\think\model\concern\Conversion.php	/^    public function toArray()$/;"	f
toCollection	thinkphp\library\think\model\concern\Conversion.php	/^    public function toCollection($collection)$/;"	f
toJson	thinkphp\library\think\model\concern\Conversion.php	/^    public function toJson($options = JSON_UNESCAPED_UNICODE)$/;"	f
visible	thinkphp\library\think\model\concern\Conversion.php	/^        $this->visible = $override ? $visible : array_merge($this->visible, $visible);$/;"	v
visible	thinkphp\library\think\model\concern\Conversion.php	/^        $visible = [];$/;"	v
visible	thinkphp\library\think\model\concern\Conversion.php	/^    protected $visible = [];$/;"	v
visible	thinkphp\library\think\model\concern\Conversion.php	/^    protected function parseAttr($attrs, &$result, $visible = true)$/;"	v
visible	thinkphp\library\think\model\concern\Conversion.php	/^    public function visible($visible = [], $override = false)$/;"	f
afterDelete	thinkphp\library\think\model\concern\ModelEvent.php	/^    protected static function afterDelete($callback, $override = false)$/;"	f
afterInsert	thinkphp\library\think\model\concern\ModelEvent.php	/^    protected static function afterInsert($callback, $override = false)$/;"	f
afterUpdate	thinkphp\library\think\model\concern\ModelEvent.php	/^    protected static function afterUpdate($callback, $override = false)$/;"	f
afterWrite	thinkphp\library\think\model\concern\ModelEvent.php	/^    protected static function afterWrite($callback, $override = false)$/;"	f
beforeDelete	thinkphp\library\think\model\concern\ModelEvent.php	/^    protected static function beforeDelete($callback, $override = false)$/;"	f
beforeInsert	thinkphp\library\think\model\concern\ModelEvent.php	/^    protected static function beforeInsert($callback, $override = false)$/;"	f
beforeUpdate	thinkphp\library\think\model\concern\ModelEvent.php	/^    protected static function beforeUpdate($callback, $override = false)$/;"	f
beforeWrite	thinkphp\library\think\model\concern\ModelEvent.php	/^    protected static function beforeWrite($callback, $override = false)$/;"	f
class	thinkphp\library\think\model\concern\ModelEvent.php	/^        $class = static::class;$/;"	v
event	thinkphp\library\think\model\concern\ModelEvent.php	/^    private static $event = [];$/;"	v
event	thinkphp\library\think\model\concern\ModelEvent.php	/^    public static function event($event, $callback, $override = false)$/;"	f
override	thinkphp\library\think\model\concern\ModelEvent.php	/^    protected static function afterDelete($callback, $override = false)$/;"	v
override	thinkphp\library\think\model\concern\ModelEvent.php	/^    protected static function afterInsert($callback, $override = false)$/;"	v
override	thinkphp\library\think\model\concern\ModelEvent.php	/^    protected static function afterUpdate($callback, $override = false)$/;"	v
override	thinkphp\library\think\model\concern\ModelEvent.php	/^    protected static function afterWrite($callback, $override = false)$/;"	v
override	thinkphp\library\think\model\concern\ModelEvent.php	/^    protected static function beforeDelete($callback, $override = false)$/;"	v
override	thinkphp\library\think\model\concern\ModelEvent.php	/^    protected static function beforeInsert($callback, $override = false)$/;"	v
override	thinkphp\library\think\model\concern\ModelEvent.php	/^    protected static function beforeUpdate($callback, $override = false)$/;"	v
override	thinkphp\library\think\model\concern\ModelEvent.php	/^    protected static function beforeWrite($callback, $override = false)$/;"	v
override	thinkphp\library\think\model\concern\ModelEvent.php	/^    public static function event($event, $callback, $override = false)$/;"	v
result	thinkphp\library\think\model\concern\ModelEvent.php	/^                $result = Container::getInstance()->invoke($callback, [$this]);$/;"	v
trigger	thinkphp\library\think\model\concern\ModelEvent.php	/^    protected function trigger($event)$/;"	f
alias	thinkphp\library\think\model\concern\RelationShip.php	/^    public function morphTo($morph = null, $alias = [])$/;"	v
autoRelationDelete	thinkphp\library\think\model\concern\RelationShip.php	/^    protected function autoRelationDelete()$/;"	f
autoRelationInsert	thinkphp\library\think\model\concern\RelationShip.php	/^    protected function autoRelationInsert()$/;"	f
autoRelationUpdate	thinkphp\library\think\model\concern\RelationShip.php	/^    protected function autoRelationUpdate()$/;"	f
belongsTo	thinkphp\library\think\model\concern\RelationShip.php	/^    public function belongsTo($model, $foreignKey = '', $localKey = '')$/;"	f
belongsToMany	thinkphp\library\think\model\concern\RelationShip.php	/^    public function belongsToMany($model, $table = '', $foreignKey = '', $localKey = '')$/;"	f
checkAutoRelationWrite	thinkphp\library\think\model\concern\RelationShip.php	/^    protected function checkAutoRelationWrite()$/;"	f
closure	thinkphp\library\think\model\concern\RelationShip.php	/^                $closure  = $relation;$/;"	v
closure	thinkphp\library\think\model\concern\RelationShip.php	/^            $closure     = false;$/;"	v
closure	thinkphp\library\think\model\concern\RelationShip.php	/^            $closure     = null;$/;"	v
closure	thinkphp\library\think\model\concern\RelationShip.php	/^            $closure = false;$/;"	v
count	thinkphp\library\think\model\concern\RelationShip.php	/^            $count = $this->$relation()->relationCount($result, $closure);$/;"	v
data	thinkphp\library\think\model\concern\RelationShip.php	/^    public function setRelation($name, $value, $data = [])$/;"	v
eagerlyResult	thinkphp\library\think\model\concern\RelationShip.php	/^    public function eagerlyResult(&$result, $relation)$/;"	f
eagerlyResultSet	thinkphp\library\think\model\concern\RelationShip.php	/^    public function eagerlyResultSet(&$resultSet, $relation)$/;"	f
foreignKey	thinkphp\library\think\model\concern\RelationShip.php	/^            $foreignKey = $morph . '_id';$/;"	v
foreignKey	thinkphp\library\think\model\concern\RelationShip.php	/^        $foreignKey = $foreignKey ?: $name . '_id';$/;"	v
foreignKey	thinkphp\library\think\model\concern\RelationShip.php	/^        $foreignKey = $foreignKey ?: $this->getForeignKey($model);$/;"	v
foreignKey	thinkphp\library\think\model\concern\RelationShip.php	/^        $foreignKey = $foreignKey ?: $this->getForeignKey($this->name);$/;"	v
foreignKey	thinkphp\library\think\model\concern\RelationShip.php	/^    public function belongsTo($model, $foreignKey = '', $localKey = '')$/;"	v
foreignKey	thinkphp\library\think\model\concern\RelationShip.php	/^    public function hasMany($model, $foreignKey = '', $localKey = '')$/;"	v
foreignKey	thinkphp\library\think\model\concern\RelationShip.php	/^    public function hasManyThrough($model, $through, $foreignKey = '', $throughKey = '', $localKey = '')$/;"	v
foreignKey	thinkphp\library\think\model\concern\RelationShip.php	/^    public function hasOne($model, $foreignKey = '', $localKey = '')$/;"	v
getForeignKey	thinkphp\library\think\model\concern\RelationShip.php	/^    protected function getForeignKey($name)$/;"	f
getParent	thinkphp\library\think\model\concern\RelationShip.php	/^    public function getParent()$/;"	f
getRelation	thinkphp\library\think\model\concern\RelationShip.php	/^    public function getRelation($name = null)$/;"	f
getRelationData	thinkphp\library\think\model\concern\RelationShip.php	/^    protected function getRelationData(Relation $modelRelation)$/;"	f
has	thinkphp\library\think\model\concern\RelationShip.php	/^    public static function has($relation, $operator = '>=', $count = 1, $id = '*')$/;"	f
hasMany	thinkphp\library\think\model\concern\RelationShip.php	/^    public function hasMany($model, $foreignKey = '', $localKey = '')$/;"	f
hasManyThrough	thinkphp\library\think\model\concern\RelationShip.php	/^    public function hasManyThrough($model, $through, $foreignKey = '', $throughKey = '', $localKey = '')$/;"	f
hasOne	thinkphp\library\think\model\concern\RelationShip.php	/^    public function hasOne($model, $foreignKey = '', $localKey = '')$/;"	f
hasWhere	thinkphp\library\think\model\concern\RelationShip.php	/^    public static function hasWhere($relation, $where = [], $fields = '*')$/;"	f
isRelationAttr	thinkphp\library\think\model\concern\RelationShip.php	/^    protected function isRelationAttr($attr)$/;"	f
key	thinkphp\library\think\model\concern\RelationShip.php	/^        foreach ($relations as $key => $relation) {$/;"	v
key	thinkphp\library\think\model\concern\RelationShip.php	/^        foreach ($this->relationWrite as $key => $name) {$/;"	v
key	thinkphp\library\think\model\concern\RelationShip.php	/^        foreach ($this->together as $key => $name) {$/;"	v
localKey	thinkphp\library\think\model\concern\RelationShip.php	/^        $localKey   = $localKey ?: $this->getForeignKey($this->name);$/;"	v
localKey	thinkphp\library\think\model\concern\RelationShip.php	/^        $localKey   = $localKey ?: $this->getPk();$/;"	v
localKey	thinkphp\library\think\model\concern\RelationShip.php	/^        $localKey   = $localKey ?: (new $model)->getPk();$/;"	v
method	thinkphp\library\think\model\concern\RelationShip.php	/^            $method = Loader::parseName($name, 1, false);$/;"	v
method	thinkphp\library\think\model\concern\RelationShip.php	/^            $method = Loader::parseName($relation, 1, false);$/;"	v
method	thinkphp\library\think\model\concern\RelationShip.php	/^        $method = 'set' . Loader::parseName($name, 1) . 'Attr';$/;"	v
model	thinkphp\library\think\model\concern\RelationShip.php	/^                $model = $this->getAttr($name);$/;"	v
model	thinkphp\library\think\model\concern\RelationShip.php	/^            $model = implode('\\\\', $path);$/;"	v
model	thinkphp\library\think\model\concern\RelationShip.php	/^        $model      = $this->parseModel($model);$/;"	v
model	thinkphp\library\think\model\concern\RelationShip.php	/^        $model = $this->parseModel($model);$/;"	v
morph	thinkphp\library\think\model\concern\RelationShip.php	/^            $morph = $relation;$/;"	v
morph	thinkphp\library\think\model\concern\RelationShip.php	/^            $morph = Loader::parseName($trace[1]['function']);$/;"	v
morph	thinkphp\library\think\model\concern\RelationShip.php	/^    public function morphMany($model, $morph = null, $type = '')$/;"	v
morph	thinkphp\library\think\model\concern\RelationShip.php	/^    public function morphOne($model, $morph = null, $type = '')$/;"	v
morphMany	thinkphp\library\think\model\concern\RelationShip.php	/^    public function morphMany($model, $morph = null, $type = '')$/;"	f
morphOne	thinkphp\library\think\model\concern\RelationShip.php	/^    public function morphOne($model, $morph = null, $type = '')$/;"	f
morphTo	thinkphp\library\think\model\concern\RelationShip.php	/^    public function morphTo($morph = null, $alias = [])$/;"	f
morphType	thinkphp\library\think\model\concern\RelationShip.php	/^            $morphType  = $morph . '_type';$/;"	v
name	thinkphp\library\think\model\concern\RelationShip.php	/^                $name     = $relation;$/;"	v
name	thinkphp\library\think\model\concern\RelationShip.php	/^                $name = Loader::parseName($relation) . '_count';$/;"	v
name	thinkphp\library\think\model\concern\RelationShip.php	/^            $name   = is_numeric($key) ? $name : $key;$/;"	v
name	thinkphp\library\think\model\concern\RelationShip.php	/^            $name = basename(str_replace('\\\\', '\/', $name));$/;"	v
name	thinkphp\library\think\model\concern\RelationShip.php	/^        $name       = Loader::parseName(basename(str_replace('\\\\', '\/', $model)));$/;"	v
name	thinkphp\library\think\model\concern\RelationShip.php	/^        foreach ($this->relationWrite as $name => $val) {$/;"	v
operator	thinkphp\library\think\model\concern\RelationShip.php	/^    public static function has($relation, $operator = '>=', $count = 1, $id = '*')$/;"	v
parent	thinkphp\library\think\model\concern\RelationShip.php	/^        $this->parent = $model;$/;"	v
parent	thinkphp\library\think\model\concern\RelationShip.php	/^    private $parent;$/;"	v
parseModel	thinkphp\library\think\model\concern\RelationShip.php	/^    protected function parseModel($model)$/;"	f
path	thinkphp\library\think\model\concern\RelationShip.php	/^            $path = explode('\\\\', static::class);$/;"	v
relation	thinkphp\library\think\model\concern\RelationShip.php	/^                $relation    = $key;$/;"	v
relation	thinkphp\library\think\model\concern\RelationShip.php	/^                $relation = $key;$/;"	v
relation	thinkphp\library\think\model\concern\RelationShip.php	/^            $relation = Loader::parseName($relation, 1, false);$/;"	v
relation	thinkphp\library\think\model\concern\RelationShip.php	/^            $relation = explode(',', $relation);$/;"	v
relation	thinkphp\library\think\model\concern\RelationShip.php	/^        $relation   = Loader::parseName($trace[1]['function']);$/;"	v
relation	thinkphp\library\think\model\concern\RelationShip.php	/^        $relation = (new static())->$relation();$/;"	v
relation	thinkphp\library\think\model\concern\RelationShip.php	/^        $relation = Loader::parseName($attr, 1, false);$/;"	v
relation	thinkphp\library\think\model\concern\RelationShip.php	/^        $relation = Loader::parseName($trace[1]['function']);$/;"	v
relation	thinkphp\library\think\model\concern\RelationShip.php	/^    private $relation = [];$/;"	v
relationCount	thinkphp\library\think\model\concern\RelationShip.php	/^    public function relationCount(&$result, $relation)$/;"	f
relationQuery	thinkphp\library\think\model\concern\RelationShip.php	/^    public function relationQuery($relations)$/;"	f
relationWrite	thinkphp\library\think\model\concern\RelationShip.php	/^    private $relationWrite;$/;"	v
relations	thinkphp\library\think\model\concern\RelationShip.php	/^            $relations = explode(',', $relations);$/;"	v
relations	thinkphp\library\think\model\concern\RelationShip.php	/^        $relations = is_string($relation) ? explode(',', $relation) : $relation;$/;"	v
result	thinkphp\library\think\model\concern\RelationShip.php	/^            $result = $this->getRelation($name);$/;"	v
setParent	thinkphp\library\think\model\concern\RelationShip.php	/^    public function setParent($model)$/;"	f
setRelation	thinkphp\library\think\model\concern\RelationShip.php	/^    public function setRelation($name, $value, $data = [])$/;"	f
subRelation	thinkphp\library\think\model\concern\RelationShip.php	/^                $subRelation = $relation;$/;"	v
subRelation	thinkphp\library\think\model\concern\RelationShip.php	/^            $subRelation = '';$/;"	v
table	thinkphp\library\think\model\concern\RelationShip.php	/^        $table      = $table ?: Loader::parseName($this->name) . '_' . $name;$/;"	v
table	thinkphp\library\think\model\concern\RelationShip.php	/^    public function belongsToMany($model, $table = '', $foreignKey = '', $localKey = '')$/;"	v
through	thinkphp\library\think\model\concern\RelationShip.php	/^        $through    = $this->parseModel($through);$/;"	v
throughKey	thinkphp\library\think\model\concern\RelationShip.php	/^        $throughKey = $throughKey ?: $this->getForeignKey($through);$/;"	v
together	thinkphp\library\think\model\concern\RelationShip.php	/^        $this->together = $relation;$/;"	v
together	thinkphp\library\think\model\concern\RelationShip.php	/^    private $together;$/;"	v
together	thinkphp\library\think\model\concern\RelationShip.php	/^    public function together($relation)$/;"	f
trace	thinkphp\library\think\model\concern\RelationShip.php	/^            $trace = debug_backtrace(false, 2);$/;"	v
trace	thinkphp\library\think\model\concern\RelationShip.php	/^        $trace      = debug_backtrace(false, 2);$/;"	v
trace	thinkphp\library\think\model\concern\RelationShip.php	/^        $trace    = debug_backtrace(false, 2);$/;"	v
type	thinkphp\library\think\model\concern\RelationShip.php	/^        $type = $type ?: Loader::parseName($this->name);$/;"	v
value	thinkphp\library\think\model\concern\RelationShip.php	/^            $value = $modelRelation->getRelation();$/;"	v
value	thinkphp\library\think\model\concern\RelationShip.php	/^            $value = $this->$method($value, array_merge($this->data, $data));$/;"	v
value	thinkphp\library\think\model\concern\RelationShip.php	/^            $value = $this->parent;$/;"	v
where	thinkphp\library\think\model\concern\RelationShip.php	/^    public static function hasWhere($relation, $where = [], $fields = '*')$/;"	v
array	thinkphp\library\think\model\concern\SoftDelete.php	/^            $array = explode('.', $field);$/;"	v
count	thinkphp\library\think\model\concern\SoftDelete.php	/^        $count     = 0;$/;"	v
data	thinkphp\library\think\model\concern\SoftDelete.php	/^            $data = null;$/;"	v
data	thinkphp\library\think\model\concern\SoftDelete.php	/^        $this->data   = [];$/;"	v
delete	thinkphp\library\think\model\concern\SoftDelete.php	/^    public function delete($force = false)$/;"	f
destroy	thinkphp\library\think\model\concern\SoftDelete.php	/^    public static function destroy($data, $force = false)$/;"	f
field	thinkphp\library\think\model\concern\SoftDelete.php	/^            $field = '__TABLE__.' . $field;$/;"	v
field	thinkphp\library\think\model\concern\SoftDelete.php	/^            $field = array_pop($array);$/;"	v
field	thinkphp\library\think\model\concern\SoftDelete.php	/^        $field = $model->getDeleteTimeField(true);$/;"	v
field	thinkphp\library\think\model\concern\SoftDelete.php	/^        $field = $this->getDeleteTimeField();$/;"	v
field	thinkphp\library\think\model\concern\SoftDelete.php	/^        $field = property_exists($this, 'deleteTime') && isset($this->deleteTime) ? $this->deleteTime : 'delete_time';$/;"	v
force	thinkphp\library\think\model\concern\SoftDelete.php	/^    public static function destroy($data, $force = false)$/;"	v
getDeleteTimeField	thinkphp\library\think\model\concern\SoftDelete.php	/^    protected function getDeleteTimeField($read = false)$/;"	f
model	thinkphp\library\think\model\concern\SoftDelete.php	/^        $model = new static();$/;"	v
name	thinkphp\library\think\model\concern\SoftDelete.php	/^        $name = $this->getDeleteTimeField();$/;"	v
onlyTrashed	thinkphp\library\think\model\concern\SoftDelete.php	/^    public static function onlyTrashed()$/;"	f
origin	thinkphp\library\think\model\concern\SoftDelete.php	/^        $this->origin = [];$/;"	v
pk	thinkphp\library\think\model\concern\SoftDelete.php	/^            $pk         = $this->getPk();$/;"	v
query	thinkphp\library\think\model\concern\SoftDelete.php	/^        $query = self::withTrashed();$/;"	v
restore	thinkphp\library\think\model\concern\SoftDelete.php	/^    public function restore($where = [])$/;"	f
result	thinkphp\library\think\model\concern\SoftDelete.php	/^                $result = $data->delete($force);$/;"	v
result	thinkphp\library\think\model\concern\SoftDelete.php	/^            $result = $this->db(false)->where($where)->delete();$/;"	v
result	thinkphp\library\think\model\concern\SoftDelete.php	/^            $result = $this->isUpdate()->save();$/;"	v
resultSet	thinkphp\library\think\model\concern\SoftDelete.php	/^        $resultSet = $query->select($data);$/;"	v
trashed	thinkphp\library\think\model\concern\SoftDelete.php	/^    public function trashed()$/;"	f
where	thinkphp\library\think\model\concern\SoftDelete.php	/^            $where = $this->getWhere();$/;"	v
withTrashed	thinkphp\library\think\model\concern\SoftDelete.php	/^    public static function withTrashed()$/;"	f
autoWriteTimestamp	thinkphp\library\think\model\concern\TimeStamp.php	/^    protected $autoWriteTimestamp;$/;"	v
checkTimeStampWrite	thinkphp\library\think\model\concern\TimeStamp.php	/^    protected function checkTimeStampWrite()$/;"	f
createTime	thinkphp\library\think\model\concern\TimeStamp.php	/^    protected $createTime = 'create_time';$/;"	v
dateFormat	thinkphp\library\think\model\concern\TimeStamp.php	/^    protected $dateFormat;$/;"	v
formatDateTime	thinkphp\library\think\model\concern\TimeStamp.php	/^    protected function formatDateTime($time, $format, $timestamp = false)$/;"	f
time	thinkphp\library\think\model\concern\TimeStamp.php	/^            $time = date($format, $time);$/;"	v
time	thinkphp\library\think\model\concern\TimeStamp.php	/^            $time = new $format($time);$/;"	v
timestamp	thinkphp\library\think\model\concern\TimeStamp.php	/^    protected function formatDateTime($time, $format, $timestamp = false)$/;"	v
updateTime	thinkphp\library\think\model\concern\TimeStamp.php	/^    protected $updateTime = 'update_time';$/;"	v
BelongsTo	thinkphp\library\think\model\relation\BelongsTo.php	/^class BelongsTo extends OneToOne$/;"	c
__construct	thinkphp\library\think\model\relation\BelongsTo.php	/^    public function __construct(Model $parent, $model, $foreignKey, $localKey, $relation = null)$/;"	f
associate	thinkphp\library\think\model\relation\BelongsTo.php	/^    public function associate($model)$/;"	f
attr	thinkphp\library\think\model\relation\BelongsTo.php	/^            $attr = Loader::parseName($relation);$/;"	v
closure	thinkphp\library\think\model\relation\BelongsTo.php	/^    public function getRelation($subRelation = '', $closure = null)$/;"	v
count	thinkphp\library\think\model\relation\BelongsTo.php	/^    public function has($operator = '>=', $count = 1, $id = '*')$/;"	v
data	thinkphp\library\think\model\relation\BelongsTo.php	/^            $data = $this->eagerlyWhere($this, [$/;"	v
data	thinkphp\library\think\model\relation\BelongsTo.php	/^        $data       = $this->eagerlyWhere($this, [$/;"	v
dissociate	thinkphp\library\think\model\relation\BelongsTo.php	/^    public function dissociate()$/;"	f
eagerlyOne	thinkphp\library\think\model\relation\BelongsTo.php	/^    protected function eagerlyOne(&$result, $relation, $subRelation, $closure)$/;"	f
eagerlySet	thinkphp\library\think\model\relation\BelongsTo.php	/^    protected function eagerlySet(&$resultSet, $relation, $subRelation, $closure)$/;"	f
fields	thinkphp\library\think\model\relation\BelongsTo.php	/^        $fields = $this->getRelationQueryFields($fields, $model);$/;"	v
fields	thinkphp\library\think\model\relation\BelongsTo.php	/^    public function hasWhere($where = [], $fields = null)$/;"	v
foreignKey	thinkphp\library\think\model\relation\BelongsTo.php	/^        $foreignKey = $this->foreignKey;$/;"	v
foreignKey	thinkphp\library\think\model\relation\BelongsTo.php	/^        $this->foreignKey = $foreignKey;$/;"	v
getRelation	thinkphp\library\think\model\relation\BelongsTo.php	/^    public function getRelation($subRelation = '', $closure = null)$/;"	f
has	thinkphp\library\think\model\relation\BelongsTo.php	/^    public function has($operator = '>=', $count = 1, $id = '*')$/;"	f
hasWhere	thinkphp\library\think\model\relation\BelongsTo.php	/^    public function hasWhere($where = [], $fields = null)$/;"	f
joinType	thinkphp\library\think\model\relation\BelongsTo.php	/^        $this->joinType   = 'INNER';$/;"	v
localKey	thinkphp\library\think\model\relation\BelongsTo.php	/^        $localKey   = $this->localKey;$/;"	v
localKey	thinkphp\library\think\model\relation\BelongsTo.php	/^        $this->localKey   = $localKey;$/;"	v
model	thinkphp\library\think\model\relation\BelongsTo.php	/^        $model    = basename(str_replace('\\\\', '\/', get_class($this->parent)));$/;"	v
model	thinkphp\library\think\model\relation\BelongsTo.php	/^        $this->model      = $model;$/;"	v
parent	thinkphp\library\think\model\relation\BelongsTo.php	/^        $this->parent     = $parent;$/;"	v
pk	thinkphp\library\think\model\relation\BelongsTo.php	/^        $pk         = $model->getPk();$/;"	v
query	thinkphp\library\think\model\relation\BelongsTo.php	/^        $this->query      = (new $model)->db();$/;"	v
range	thinkphp\library\think\model\relation\BelongsTo.php	/^        $range = [];$/;"	v
relation	thinkphp\library\think\model\relation\BelongsTo.php	/^        $relation = basename(str_replace('\\\\', '\/', $this->model));$/;"	v
relation	thinkphp\library\think\model\relation\BelongsTo.php	/^        $this->relation   = $relation;$/;"	v
relation	thinkphp\library\think\model\relation\BelongsTo.php	/^    public function __construct(Model $parent, $model, $foreignKey, $localKey, $relation = null)$/;"	v
relationModel	thinkphp\library\think\model\relation\BelongsTo.php	/^                    $relationModel = $data[$result->$foreignKey];$/;"	v
relationModel	thinkphp\library\think\model\relation\BelongsTo.php	/^                    $relationModel = null;$/;"	v
relationModel	thinkphp\library\think\model\relation\BelongsTo.php	/^            $relationModel = $data[$result->$foreignKey];$/;"	v
relationModel	thinkphp\library\think\model\relation\BelongsTo.php	/^            $relationModel = null;$/;"	v
relationModel	thinkphp\library\think\model\relation\BelongsTo.php	/^        $relationModel = $this->query$/;"	v
table	thinkphp\library\think\model\relation\BelongsTo.php	/^        $table    = $this->query->getTable();$/;"	v
BelongsToMany	thinkphp\library\think\model\relation\BelongsToMany.php	/^class BelongsToMany extends Relation$/;"	c
__construct	thinkphp\library\think\model\relation\BelongsToMany.php	/^    public function __construct(Model $parent, $model, $table, $foreignKey, $localKey)$/;"	f
attach	thinkphp\library\think\model\relation\BelongsToMany.php	/^    public function attach($data, $pivot = [])$/;"	f
attr	thinkphp\library\think\model\relation\BelongsToMany.php	/^            $attr = Loader::parseName($relation);$/;"	v
baseQuery	thinkphp\library\think\model\relation\BelongsToMany.php	/^            $this->baseQuery = true;$/;"	v
baseQuery	thinkphp\library\think\model\relation\BelongsToMany.php	/^    protected function baseQuery()$/;"	f
belongsToManyQuery	thinkphp\library\think\model\relation\BelongsToMany.php	/^    protected function belongsToManyQuery($foreignKey, $localKey, $condition = [])$/;"	f
buildQuery	thinkphp\library\think\model\relation\BelongsToMany.php	/^    protected function buildQuery()$/;"	f
changes	thinkphp\library\think\model\relation\BelongsToMany.php	/^        $changes = [$/;"	v
closure	thinkphp\library\think\model\relation\BelongsToMany.php	/^    public function getRelation($subRelation = '', $closure = null)$/;"	v
condition	thinkphp\library\think\model\relation\BelongsToMany.php	/^    protected function belongsToManyQuery($foreignKey, $localKey, $condition = [])$/;"	v
count	thinkphp\library\think\model\relation\BelongsToMany.php	/^            $count = $this->belongsToManyQuery($this->foreignKey, $this->localKey, [$/;"	v
count	thinkphp\library\think\model\relation\BelongsToMany.php	/^        $count = 0;$/;"	v
count	thinkphp\library\think\model\relation\BelongsToMany.php	/^    public function has($operator = '>=', $count = 1, $id = '*', $joinType = 'INNER')$/;"	v
current	thinkphp\library\think\model\relation\BelongsToMany.php	/^        $current = $this->pivot$/;"	v
data	thinkphp\library\think\model\relation\BelongsToMany.php	/^            $data = $this->eagerlyManyToMany([$/;"	v
data	thinkphp\library\think\model\relation\BelongsToMany.php	/^        $data = [];$/;"	v
detach	thinkphp\library\think\model\relation\BelongsToMany.php	/^        $detach = array_diff($current, array_keys($records));$/;"	v
detach	thinkphp\library\think\model\relation\BelongsToMany.php	/^    public function detach($data = null, $relationDel = false)$/;"	f
detaching	thinkphp\library\think\model\relation\BelongsToMany.php	/^    public function sync($ids, $detaching = true)$/;"	v
eagerlyManyToMany	thinkphp\library\think\model\relation\BelongsToMany.php	/^    protected function eagerlyManyToMany($where, $relation, $subRelation = '')$/;"	f
eagerlyResult	thinkphp\library\think\model\relation\BelongsToMany.php	/^    public function eagerlyResult(&$result, $relation, $subRelation, $closure)$/;"	f
eagerlyResultSet	thinkphp\library\think\model\relation\BelongsToMany.php	/^    public function eagerlyResultSet(&$resultSet, $relation, $subRelation, $closure)$/;"	f
field	thinkphp\library\think\model\relation\BelongsToMany.php	/^        $field = 'pivot.' . $field;$/;"	v
fields	thinkphp\library\think\model\relation\BelongsToMany.php	/^        $fields    = $this->getQueryFields($tableName);$/;"	v
fields	thinkphp\library\think\model\relation\BelongsToMany.php	/^    public function hasWhere($where = [], $fields = null)$/;"	v
find	thinkphp\library\think\model\relation\BelongsToMany.php	/^    public function find($data = null)$/;"	f
findOrFail	thinkphp\library\think\model\relation\BelongsToMany.php	/^    public function findOrFail($data = null)$/;"	f
foreignKey	thinkphp\library\think\model\relation\BelongsToMany.php	/^        $foreignKey = $this->foreignKey;$/;"	v
foreignKey	thinkphp\library\think\model\relation\BelongsToMany.php	/^        $this->foreignKey = $foreignKey;$/;"	v
getRelation	thinkphp\library\think\model\relation\BelongsToMany.php	/^    public function getRelation($subRelation = '', $closure = null)$/;"	f
getRelationCountQuery	thinkphp\library\think\model\relation\BelongsToMany.php	/^    public function getRelationCountQuery($closure)$/;"	f
has	thinkphp\library\think\model\relation\BelongsToMany.php	/^    public function has($operator = '>=', $count = 1, $id = '*', $joinType = 'INNER')$/;"	f
hasWhere	thinkphp\library\think\model\relation\BelongsToMany.php	/^    public function hasWhere($where = [], $fields = null)$/;"	f
hydratePivot	thinkphp\library\think\model\relation\BelongsToMany.php	/^    protected function hydratePivot($models)$/;"	f
id	thinkphp\library\think\model\relation\BelongsToMany.php	/^                $id = $data;$/;"	v
id	thinkphp\library\think\model\relation\BelongsToMany.php	/^                $id = $model->getLastInsID();$/;"	v
id	thinkphp\library\think\model\relation\BelongsToMany.php	/^            $id         = $data->$relationFk;$/;"	v
id	thinkphp\library\think\model\relation\BelongsToMany.php	/^            $id = $data;$/;"	v
id	thinkphp\library\think\model\relation\BelongsToMany.php	/^        foreach ($records as $id => $attributes) {$/;"	v
ids	thinkphp\library\think\model\relation\BelongsToMany.php	/^            $ids                    = (array) $id;$/;"	v
key	thinkphp\library\think\model\relation\BelongsToMany.php	/^            foreach ($model->getData() as $key => $val) {$/;"	v
key	thinkphp\library\think\model\relation\BelongsToMany.php	/^            foreach ($set->getData() as $key => $val) {$/;"	v
key	thinkphp\library\think\model\relation\BelongsToMany.php	/^        foreach ($dataSet as $key => $data) {$/;"	v
key	thinkphp\library\think\model\relation\BelongsToMany.php	/^        foreach ($ids as $key => $value) {$/;"	v
list	thinkphp\library\think\model\relation\BelongsToMany.php	/^        $list = $this->belongsToManyQuery($this->foreignKey, $this->localKey, $where)$/;"	v
localKey	thinkphp\library\think\model\relation\BelongsToMany.php	/^        $localKey   = $this->localKey;$/;"	v
localKey	thinkphp\library\think\model\relation\BelongsToMany.php	/^        $this->localKey   = $localKey;$/;"	v
middle	thinkphp\library\think\model\relation\BelongsToMany.php	/^            $this->middle    = basename(str_replace('\\\\', '\/', $table));$/;"	v
middle	thinkphp\library\think\model\relation\BelongsToMany.php	/^            $this->middle = $table;$/;"	v
middle	thinkphp\library\think\model\relation\BelongsToMany.php	/^    protected $middle;$/;"	v
model	thinkphp\library\think\model\relation\BelongsToMany.php	/^                $model = new $this->model;$/;"	v
model	thinkphp\library\think\model\relation\BelongsToMany.php	/^            $model = $this->model;$/;"	v
model	thinkphp\library\think\model\relation\BelongsToMany.php	/^        $this->model      = $model;$/;"	v
newPivot	thinkphp\library\think\model\relation\BelongsToMany.php	/^    protected function newPivot($data = [])$/;"	f
op	thinkphp\library\think\model\relation\BelongsToMany.php	/^    public function wherePivot($field, $op = null, $condition = null)$/;"	v
paginate	thinkphp\library\think\model\relation\BelongsToMany.php	/^    public function paginate($listRows = null, $simple = false, $config = [])$/;"	f
parent	thinkphp\library\think\model\relation\BelongsToMany.php	/^        $this->parent     = $parent;$/;"	v
pivot	thinkphp\library\think\model\relation\BelongsToMany.php	/^            $pivot = [];$/;"	v
pivot	thinkphp\library\think\model\relation\BelongsToMany.php	/^        $pivot = $this->pivotName ?: '\\\\think\\\\model\\\\Pivot';$/;"	v
pivot	thinkphp\library\think\model\relation\BelongsToMany.php	/^        $this->pivot = $this->newPivot();$/;"	v
pivot	thinkphp\library\think\model\relation\BelongsToMany.php	/^    protected $pivot;$/;"	v
pivot	thinkphp\library\think\model\relation\BelongsToMany.php	/^    public function attach($data, $pivot = [])$/;"	v
pivot	thinkphp\library\think\model\relation\BelongsToMany.php	/^    public function pivot($pivot)$/;"	f
pivot	thinkphp\library\think\model\relation\BelongsToMany.php	/^    public function save($data, array $pivot = [])$/;"	v
pivot	thinkphp\library\think\model\relation\BelongsToMany.php	/^    public function saveAll(array $dataSet, array $pivot = [], $samePivot = false)$/;"	v
pivotData	thinkphp\library\think\model\relation\BelongsToMany.php	/^                $pivotData = $pivot;$/;"	v
pivotData	thinkphp\library\think\model\relation\BelongsToMany.php	/^                $pivotData = isset($pivot[$key]) ? $pivot[$key] : [];$/;"	v
pivotName	thinkphp\library\think\model\relation\BelongsToMany.php	/^            $this->pivotName = $table;$/;"	v
pivotName	thinkphp\library\think\model\relation\BelongsToMany.php	/^        $this->pivotName = $pivot;$/;"	v
pivotName	thinkphp\library\think\model\relation\BelongsToMany.php	/^    protected $pivotName;$/;"	v
pk	thinkphp\library\think\model\relation\BelongsToMany.php	/^            $pk                     = $this->parent->getPk();$/;"	v
pk	thinkphp\library\think\model\relation\BelongsToMany.php	/^            $pk    = $result->$pk;$/;"	v
pk	thinkphp\library\think\model\relation\BelongsToMany.php	/^            $pk    = $this->parent->getPk();$/;"	v
pk	thinkphp\library\think\model\relation\BelongsToMany.php	/^            $pk = $result->$pk;$/;"	v
pk	thinkphp\library\think\model\relation\BelongsToMany.php	/^        $pk                     = $this->parent->getPk();$/;"	v
pk	thinkphp\library\think\model\relation\BelongsToMany.php	/^        $pk    = $result->getPk();$/;"	v
pk	thinkphp\library\think\model\relation\BelongsToMany.php	/^        $pk    = $resultSet[0]->getPk();$/;"	v
pk	thinkphp\library\think\model\relation\BelongsToMany.php	/^        $pk = $result->getPk();$/;"	v
pk	thinkphp\library\think\model\relation\BelongsToMany.php	/^        $pk = $this->parent->getPk();$/;"	v
query	thinkphp\library\think\model\relation\BelongsToMany.php	/^        $query = $this->query$/;"	v
query	thinkphp\library\think\model\relation\BelongsToMany.php	/^        $this->query = (new $model)->db();$/;"	v
range	thinkphp\library\think\model\relation\BelongsToMany.php	/^        $range = [];$/;"	v
records	thinkphp\library\think\model\relation\BelongsToMany.php	/^        $records = [];$/;"	v
relationCount	thinkphp\library\think\model\relation\BelongsToMany.php	/^    public function relationCount($result, $closure)$/;"	f
relationDel	thinkphp\library\think\model\relation\BelongsToMany.php	/^    public function detach($data = null, $relationDel = false)$/;"	v
relationFk	thinkphp\library\think\model\relation\BelongsToMany.php	/^            $relationFk = $data->getPk();$/;"	v
relationFk	thinkphp\library\think\model\relation\BelongsToMany.php	/^            $relationFk = $this->query->getPk();$/;"	v
result	thinkphp\library\think\model\relation\BelongsToMany.php	/^                $result = $result[0];$/;"	v
result	thinkphp\library\think\model\relation\BelongsToMany.php	/^            $result = $this->attach($data, $pivotData);$/;"	v
result	thinkphp\library\think\model\relation\BelongsToMany.php	/^        $result = $this->buildQuery()->find($data);$/;"	v
result	thinkphp\library\think\model\relation\BelongsToMany.php	/^        $result = $this->buildQuery()->paginate($listRows, $simple, $config);$/;"	v
result	thinkphp\library\think\model\relation\BelongsToMany.php	/^        $result = $this->buildQuery()->relation($subRelation)->select();$/;"	v
result	thinkphp\library\think\model\relation\BelongsToMany.php	/^        $result = $this->buildQuery()->select($data);$/;"	v
result	thinkphp\library\think\model\relation\BelongsToMany.php	/^        $result = false;$/;"	v
save	thinkphp\library\think\model\relation\BelongsToMany.php	/^    public function save($data, array $pivot = [])$/;"	f
saveAll	thinkphp\library\think\model\relation\BelongsToMany.php	/^    public function saveAll(array $dataSet, array $pivot = [], $samePivot = false)$/;"	f
select	thinkphp\library\think\model\relation\BelongsToMany.php	/^    public function select($data = null)$/;"	f
selectOrFail	thinkphp\library\think\model\relation\BelongsToMany.php	/^    public function selectOrFail($data = null)$/;"	f
simple	thinkphp\library\think\model\relation\BelongsToMany.php	/^    public function paginate($listRows = null, $simple = false, $config = [])$/;"	v
subRelation	thinkphp\library\think\model\relation\BelongsToMany.php	/^    protected function eagerlyManyToMany($where, $relation, $subRelation = '')$/;"	v
sync	thinkphp\library\think\model\relation\BelongsToMany.php	/^    public function sync($ids, $detaching = true)$/;"	f
table	thinkphp\library\think\model\relation\BelongsToMany.php	/^            $table = $this->pivot->getTable();$/;"	v
table	thinkphp\library\think\model\relation\BelongsToMany.php	/^        $table     = $this->pivot->getTable();$/;"	v
tableName	thinkphp\library\think\model\relation\BelongsToMany.php	/^        $tableName = $this->query->getTable();$/;"	v
wherePivot	thinkphp\library\think\model\relation\BelongsToMany.php	/^    public function wherePivot($field, $op = null, $condition = null)$/;"	f
HasMany	thinkphp\library\think\model\relation\HasMany.php	/^class HasMany extends Relation$/;"	c
__construct	thinkphp\library\think\model\relation\HasMany.php	/^    public function __construct(Model $parent, $model, $foreignKey, $localKey)$/;"	f
attr	thinkphp\library\think\model\relation\HasMany.php	/^            $attr = Loader::parseName($relation);$/;"	v
baseQuery	thinkphp\library\think\model\relation\HasMany.php	/^            $this->baseQuery = true;$/;"	v
baseQuery	thinkphp\library\think\model\relation\HasMany.php	/^    protected function baseQuery()$/;"	f
closure	thinkphp\library\think\model\relation\HasMany.php	/^    public function getRelation($subRelation = '', $closure = null)$/;"	v
count	thinkphp\library\think\model\relation\HasMany.php	/^            $count = $this->query->where($this->foreignKey, '=', $result->$localKey)->count();$/;"	v
count	thinkphp\library\think\model\relation\HasMany.php	/^        $count    = 0;$/;"	v
count	thinkphp\library\think\model\relation\HasMany.php	/^    public function has($operator = '>=', $count = 1, $id = '*', $joinType = 'INNER')$/;"	v
data	thinkphp\library\think\model\relation\HasMany.php	/^            $data = $data->getData();$/;"	v
data	thinkphp\library\think\model\relation\HasMany.php	/^            $data = $this->eagerlyOneToMany($this, [$/;"	v
data	thinkphp\library\think\model\relation\HasMany.php	/^        $data = [];$/;"	v
eagerlyOneToMany	thinkphp\library\think\model\relation\HasMany.php	/^    protected function eagerlyOneToMany($model, $where, $relation, $subRelation = '', $closure = false)$/;"	f
eagerlyResult	thinkphp\library\think\model\relation\HasMany.php	/^    public function eagerlyResult(&$result, $relation, $subRelation, $closure)$/;"	f
eagerlyResultSet	thinkphp\library\think\model\relation\HasMany.php	/^    public function eagerlyResultSet(&$resultSet, $relation, $subRelation, $closure)$/;"	f
fields	thinkphp\library\think\model\relation\HasMany.php	/^        $fields = $this->getRelationQueryFields($fields, $model);$/;"	v
fields	thinkphp\library\think\model\relation\HasMany.php	/^    public function hasWhere($where = [], $fields = null)$/;"	v
foreignKey	thinkphp\library\think\model\relation\HasMany.php	/^        $foreignKey = $this->foreignKey;$/;"	v
foreignKey	thinkphp\library\think\model\relation\HasMany.php	/^        $this->foreignKey = $foreignKey;$/;"	v
getRelation	thinkphp\library\think\model\relation\HasMany.php	/^    public function getRelation($subRelation = '', $closure = null)$/;"	f
getRelationCountQuery	thinkphp\library\think\model\relation\HasMany.php	/^    public function getRelationCountQuery($closure)$/;"	f
has	thinkphp\library\think\model\relation\HasMany.php	/^    public function has($operator = '>=', $count = 1, $id = '*', $joinType = 'INNER')$/;"	f
hasWhere	thinkphp\library\think\model\relation\HasMany.php	/^    public function hasWhere($where = [], $fields = null)$/;"	f
key	thinkphp\library\think\model\relation\HasMany.php	/^        foreach ($dataSet as $key => $data) {$/;"	v
list	thinkphp\library\think\model\relation\HasMany.php	/^        $list   = $this->query->relation($subRelation)->select();$/;"	v
list	thinkphp\library\think\model\relation\HasMany.php	/^        $list = $model->where($where)->with($subRelation)->select();$/;"	v
localKey	thinkphp\library\think\model\relation\HasMany.php	/^        $localKey = $this->localKey;$/;"	v
localKey	thinkphp\library\think\model\relation\HasMany.php	/^        $this->localKey   = $localKey;$/;"	v
model	thinkphp\library\think\model\relation\HasMany.php	/^        $model    = basename(str_replace('\\\\', '\/', get_class($this->parent)));$/;"	v
model	thinkphp\library\think\model\relation\HasMany.php	/^        $model = new $this->model;$/;"	v
model	thinkphp\library\think\model\relation\HasMany.php	/^        $this->model      = $model;$/;"	v
parent	thinkphp\library\think\model\relation\HasMany.php	/^        $parent = clone $this->parent;$/;"	v
parent	thinkphp\library\think\model\relation\HasMany.php	/^        $this->parent     = $parent;$/;"	v
pk	thinkphp\library\think\model\relation\HasMany.php	/^                $pk = $result->$localKey;$/;"	v
pk	thinkphp\library\think\model\relation\HasMany.php	/^            $pk   = $result->$localKey;$/;"	v
query	thinkphp\library\think\model\relation\HasMany.php	/^        $this->query      = (new $model)->db();$/;"	v
range	thinkphp\library\think\model\relation\HasMany.php	/^        $range    = [];$/;"	v
relation	thinkphp\library\think\model\relation\HasMany.php	/^        $relation = basename(str_replace('\\\\', '\/', $this->model));$/;"	v
relationCount	thinkphp\library\think\model\relation\HasMany.php	/^    public function relationCount($result, $closure)$/;"	f
result	thinkphp\library\think\model\relation\HasMany.php	/^            $result = $this->save($data);$/;"	v
result	thinkphp\library\think\model\relation\HasMany.php	/^        $result = false;$/;"	v
save	thinkphp\library\think\model\relation\HasMany.php	/^    public function save($data)$/;"	f
saveAll	thinkphp\library\think\model\relation\HasMany.php	/^    public function saveAll(array $dataSet)$/;"	f
subRelation	thinkphp\library\think\model\relation\HasMany.php	/^    protected function eagerlyOneToMany($model, $where, $relation, $subRelation = '', $closure = false)$/;"	v
table	thinkphp\library\think\model\relation\HasMany.php	/^        $table    = $this->query->getTable();$/;"	v
HasManyThrough	thinkphp\library\think\model\relation\HasManyThrough.php	/^class HasManyThrough extends Relation$/;"	c
__construct	thinkphp\library\think\model\relation\HasManyThrough.php	/^    public function __construct(Model $parent, $model, $through, $foreignKey, $throughKey, $localKey)$/;"	f
alias	thinkphp\library\think\model\relation\HasManyThrough.php	/^            $alias        = Loader::parseName(basename(str_replace('\\\\', '\/', $this->model)));$/;"	v
baseQuery	thinkphp\library\think\model\relation\HasManyThrough.php	/^            $this->baseQuery = true;$/;"	v
baseQuery	thinkphp\library\think\model\relation\HasManyThrough.php	/^    protected function baseQuery()$/;"	f
closure	thinkphp\library\think\model\relation\HasManyThrough.php	/^    public function getRelation($subRelation = '', $closure = null)$/;"	v
count	thinkphp\library\think\model\relation\HasManyThrough.php	/^    public function has($operator = '>=', $count = 1, $id = '*', $joinType = 'INNER')$/;"	v
eagerlyResult	thinkphp\library\think\model\relation\HasManyThrough.php	/^    public function eagerlyResult(&$result, $relation, $subRelation, $closure, $class)$/;"	f
eagerlyResultSet	thinkphp\library\think\model\relation\HasManyThrough.php	/^    public function eagerlyResultSet(&$resultSet, $relation, $subRelation, $closure, $class)$/;"	f
fields	thinkphp\library\think\model\relation\HasManyThrough.php	/^            $fields       = $this->getQueryFields($alias);$/;"	v
fields	thinkphp\library\think\model\relation\HasManyThrough.php	/^    public function hasWhere($where = [], $fields = null)$/;"	v
foreignKey	thinkphp\library\think\model\relation\HasManyThrough.php	/^        $this->foreignKey = $foreignKey;$/;"	v
getRelation	thinkphp\library\think\model\relation\HasManyThrough.php	/^    public function getRelation($subRelation = '', $closure = null)$/;"	f
has	thinkphp\library\think\model\relation\HasManyThrough.php	/^    public function has($operator = '>=', $count = 1, $id = '*', $joinType = 'INNER')$/;"	f
hasWhere	thinkphp\library\think\model\relation\HasManyThrough.php	/^    public function hasWhere($where = [], $fields = null)$/;"	f
localKey	thinkphp\library\think\model\relation\HasManyThrough.php	/^        $this->localKey   = $localKey;$/;"	v
model	thinkphp\library\think\model\relation\HasManyThrough.php	/^        $this->model      = $model;$/;"	v
modelTable	thinkphp\library\think\model\relation\HasManyThrough.php	/^            $modelTable   = $this->parent->getTable();$/;"	v
parent	thinkphp\library\think\model\relation\HasManyThrough.php	/^        $this->parent     = $parent;$/;"	v
pk	thinkphp\library\think\model\relation\HasManyThrough.php	/^            $pk           = (new $through)->getPk();$/;"	v
query	thinkphp\library\think\model\relation\HasManyThrough.php	/^        $this->query      = (new $model)->db();$/;"	v
relationCount	thinkphp\library\think\model\relation\HasManyThrough.php	/^    public function relationCount($result, $closure)$/;"	f
through	thinkphp\library\think\model\relation\HasManyThrough.php	/^            $through      = $this->through;$/;"	v
through	thinkphp\library\think\model\relation\HasManyThrough.php	/^        $this->through    = $through;$/;"	v
through	thinkphp\library\think\model\relation\HasManyThrough.php	/^    protected $through;$/;"	v
throughKey	thinkphp\library\think\model\relation\HasManyThrough.php	/^            $throughKey   = $this->throughKey;$/;"	v
throughKey	thinkphp\library\think\model\relation\HasManyThrough.php	/^        $this->throughKey = $throughKey;$/;"	v
throughKey	thinkphp\library\think\model\relation\HasManyThrough.php	/^    protected $throughKey;$/;"	v
throughTable	thinkphp\library\think\model\relation\HasManyThrough.php	/^            $throughTable = $through::getTable();$/;"	v
HasOne	thinkphp\library\think\model\relation\HasOne.php	/^class HasOne extends OneToOne$/;"	c
__construct	thinkphp\library\think\model\relation\HasOne.php	/^    public function __construct(Model $parent, $model, $foreignKey, $localKey)$/;"	f
attr	thinkphp\library\think\model\relation\HasOne.php	/^            $attr = Loader::parseName($relation);$/;"	v
closure	thinkphp\library\think\model\relation\HasOne.php	/^    public function getRelation($subRelation = '', $closure = null)$/;"	v
data	thinkphp\library\think\model\relation\HasOne.php	/^            $data = $this->eagerlyWhere($this, [$/;"	v
data	thinkphp\library\think\model\relation\HasOne.php	/^        $data       = $this->eagerlyWhere($this, [$/;"	v
eagerlyOne	thinkphp\library\think\model\relation\HasOne.php	/^    protected function eagerlyOne(&$result, $relation, $subRelation, $closure)$/;"	f
eagerlySet	thinkphp\library\think\model\relation\HasOne.php	/^    protected function eagerlySet(&$resultSet, $relation, $subRelation, $closure)$/;"	f
fields	thinkphp\library\think\model\relation\HasOne.php	/^        $fields = $this->getRelationQueryFields($fields, $model);$/;"	v
fields	thinkphp\library\think\model\relation\HasOne.php	/^    public function hasWhere($where = [], $fields = null)$/;"	v
foreignKey	thinkphp\library\think\model\relation\HasOne.php	/^        $foreignKey = $this->foreignKey;$/;"	v
foreignKey	thinkphp\library\think\model\relation\HasOne.php	/^        $this->foreignKey = $foreignKey;$/;"	v
getRelation	thinkphp\library\think\model\relation\HasOne.php	/^    public function getRelation($subRelation = '', $closure = null)$/;"	f
has	thinkphp\library\think\model\relation\HasOne.php	/^    public function has()$/;"	f
hasWhere	thinkphp\library\think\model\relation\HasOne.php	/^    public function hasWhere($where = [], $fields = null)$/;"	f
joinType	thinkphp\library\think\model\relation\HasOne.php	/^        $this->joinType   = 'INNER';$/;"	v
localKey	thinkphp\library\think\model\relation\HasOne.php	/^        $localKey   = $this->localKey;$/;"	v
localKey	thinkphp\library\think\model\relation\HasOne.php	/^        $localKey = $this->localKey;$/;"	v
localKey	thinkphp\library\think\model\relation\HasOne.php	/^        $this->localKey   = $localKey;$/;"	v
model	thinkphp\library\think\model\relation\HasOne.php	/^        $model      = basename(str_replace('\\\\', '\/', get_class($this->parent)));$/;"	v
model	thinkphp\library\think\model\relation\HasOne.php	/^        $model    = basename(str_replace('\\\\', '\/', get_class($this->parent)));$/;"	v
model	thinkphp\library\think\model\relation\HasOne.php	/^        $this->model      = $model;$/;"	v
parent	thinkphp\library\think\model\relation\HasOne.php	/^        $this->parent     = $parent;$/;"	v
query	thinkphp\library\think\model\relation\HasOne.php	/^        $this->query      = (new $model)->db();$/;"	v
range	thinkphp\library\think\model\relation\HasOne.php	/^        $range = [];$/;"	v
relation	thinkphp\library\think\model\relation\HasOne.php	/^        $relation   = basename(str_replace('\\\\', '\/', $this->model));$/;"	v
relation	thinkphp\library\think\model\relation\HasOne.php	/^        $relation = basename(str_replace('\\\\', '\/', $this->model));$/;"	v
relationModel	thinkphp\library\think\model\relation\HasOne.php	/^                    $relationModel = $data[$result->$localKey];$/;"	v
relationModel	thinkphp\library\think\model\relation\HasOne.php	/^                    $relationModel = null;$/;"	v
relationModel	thinkphp\library\think\model\relation\HasOne.php	/^            $relationModel = $data[$result->$localKey];$/;"	v
relationModel	thinkphp\library\think\model\relation\HasOne.php	/^            $relationModel = null;$/;"	v
relationModel	thinkphp\library\think\model\relation\HasOne.php	/^        $relationModel = $this->query$/;"	v
table	thinkphp\library\think\model\relation\HasOne.php	/^        $table      = $this->query->getTable();$/;"	v
table	thinkphp\library\think\model\relation\HasOne.php	/^        $table    = $this->query->getTable();$/;"	v
MorphMany	thinkphp\library\think\model\relation\MorphMany.php	/^class MorphMany extends Relation$/;"	c
__construct	thinkphp\library\think\model\relation\MorphMany.php	/^    public function __construct(Model $parent, $model, $morphKey, $morphType, $type)$/;"	f
attr	thinkphp\library\think\model\relation\MorphMany.php	/^            $attr = Loader::parseName($relation);$/;"	v
baseQuery	thinkphp\library\think\model\relation\MorphMany.php	/^            $this->baseQuery = true;$/;"	v
baseQuery	thinkphp\library\think\model\relation\MorphMany.php	/^    protected function baseQuery()$/;"	f
closure	thinkphp\library\think\model\relation\MorphMany.php	/^    public function getRelation($subRelation = '', $closure = null)$/;"	v
count	thinkphp\library\think\model\relation\MorphMany.php	/^            $count = $this->query$/;"	v
count	thinkphp\library\think\model\relation\MorphMany.php	/^        $count = 0;$/;"	v
count	thinkphp\library\think\model\relation\MorphMany.php	/^    public function has($operator = '>=', $count = 1, $id = '*', $joinType = 'INNER')$/;"	v
data	thinkphp\library\think\model\relation\MorphMany.php	/^            $data = $data->getData();$/;"	v
data	thinkphp\library\think\model\relation\MorphMany.php	/^            $data = $this->eagerlyMorphToMany([$/;"	v
data	thinkphp\library\think\model\relation\MorphMany.php	/^        $data = [];$/;"	v
eagerlyMorphToMany	thinkphp\library\think\model\relation\MorphMany.php	/^    protected function eagerlyMorphToMany($where, $relation, $subRelation = '', $closure = false)$/;"	f
eagerlyResult	thinkphp\library\think\model\relation\MorphMany.php	/^    public function eagerlyResult(&$result, $relation, $subRelation, $closure)$/;"	f
eagerlyResultSet	thinkphp\library\think\model\relation\MorphMany.php	/^    public function eagerlyResultSet(&$resultSet, $relation, $subRelation, $closure)$/;"	f
fields	thinkphp\library\think\model\relation\MorphMany.php	/^    public function hasWhere($where = [], $fields = null)$/;"	v
getRelation	thinkphp\library\think\model\relation\MorphMany.php	/^    public function getRelation($subRelation = '', $closure = null)$/;"	f
getRelationCountQuery	thinkphp\library\think\model\relation\MorphMany.php	/^    public function getRelationCountQuery($closure)$/;"	f
has	thinkphp\library\think\model\relation\MorphMany.php	/^    public function has($operator = '>=', $count = 1, $id = '*', $joinType = 'INNER')$/;"	f
hasWhere	thinkphp\library\think\model\relation\MorphMany.php	/^    public function hasWhere($where = [], $fields = null)$/;"	f
key	thinkphp\library\think\model\relation\MorphMany.php	/^            $key  = $result->$pk;$/;"	v
key	thinkphp\library\think\model\relation\MorphMany.php	/^        foreach ($dataSet as $key => $data) {$/;"	v
list	thinkphp\library\think\model\relation\MorphMany.php	/^        $list     = $this->query->where($where)->with($subRelation)->select();$/;"	v
list	thinkphp\library\think\model\relation\MorphMany.php	/^        $list   = $this->query->relation($subRelation)->select();$/;"	v
model	thinkphp\library\think\model\relation\MorphMany.php	/^        $model = new $this->model;$/;"	v
model	thinkphp\library\think\model\relation\MorphMany.php	/^        $this->model     = $model;$/;"	v
morphKey	thinkphp\library\think\model\relation\MorphMany.php	/^        $morphKey  = $this->morphKey;$/;"	v
morphKey	thinkphp\library\think\model\relation\MorphMany.php	/^        $morphKey = $this->morphKey;$/;"	v
morphKey	thinkphp\library\think\model\relation\MorphMany.php	/^        $this->morphKey  = $morphKey;$/;"	v
morphKey	thinkphp\library\think\model\relation\MorphMany.php	/^    protected $morphKey;$/;"	v
morphType	thinkphp\library\think\model\relation\MorphMany.php	/^        $morphType = $this->morphType;$/;"	v
morphType	thinkphp\library\think\model\relation\MorphMany.php	/^        $this->morphType = $morphType;$/;"	v
morphType	thinkphp\library\think\model\relation\MorphMany.php	/^    protected $morphType;$/;"	v
parent	thinkphp\library\think\model\relation\MorphMany.php	/^        $parent = clone $this->parent;$/;"	v
parent	thinkphp\library\think\model\relation\MorphMany.php	/^        $this->parent    = $parent;$/;"	v
pk	thinkphp\library\think\model\relation\MorphMany.php	/^            $pk = $result->getPk();$/;"	v
pk	thinkphp\library\think\model\relation\MorphMany.php	/^            $pk = $this->parent->getPk();$/;"	v
pk	thinkphp\library\think\model\relation\MorphMany.php	/^        $pk    = $result->getPk();$/;"	v
pk	thinkphp\library\think\model\relation\MorphMany.php	/^        $pk = $result->getPk();$/;"	v
pk	thinkphp\library\think\model\relation\MorphMany.php	/^        $pk = $this->parent->getPk();$/;"	v
query	thinkphp\library\think\model\relation\MorphMany.php	/^        $this->query     = (new $model)->db();$/;"	v
range	thinkphp\library\think\model\relation\MorphMany.php	/^        $range     = [];$/;"	v
relationCount	thinkphp\library\think\model\relation\MorphMany.php	/^    public function relationCount($result, $closure)$/;"	f
result	thinkphp\library\think\model\relation\MorphMany.php	/^            $result = $this->save($data);$/;"	v
result	thinkphp\library\think\model\relation\MorphMany.php	/^        $result = false;$/;"	v
save	thinkphp\library\think\model\relation\MorphMany.php	/^    public function save($data)$/;"	f
saveAll	thinkphp\library\think\model\relation\MorphMany.php	/^    public function saveAll(array $dataSet)$/;"	f
subRelation	thinkphp\library\think\model\relation\MorphMany.php	/^    protected function eagerlyMorphToMany($where, $relation, $subRelation = '', $closure = false)$/;"	v
type	thinkphp\library\think\model\relation\MorphMany.php	/^        $this->type      = $type;$/;"	v
type	thinkphp\library\think\model\relation\MorphMany.php	/^        $type      = $this->type;$/;"	v
type	thinkphp\library\think\model\relation\MorphMany.php	/^    protected $type;$/;"	v
MorphOne	thinkphp\library\think\model\relation\MorphOne.php	/^class MorphOne extends Relation$/;"	c
__construct	thinkphp\library\think\model\relation\MorphOne.php	/^    public function __construct(Model $parent, $model, $morphKey, $morphType, $type)$/;"	f
attr	thinkphp\library\think\model\relation\MorphOne.php	/^            $attr = Loader::parseName($relation);$/;"	v
baseQuery	thinkphp\library\think\model\relation\MorphOne.php	/^            $this->baseQuery = true;$/;"	v
baseQuery	thinkphp\library\think\model\relation\MorphOne.php	/^    protected function baseQuery()$/;"	f
closure	thinkphp\library\think\model\relation\MorphOne.php	/^    public function getRelation($subRelation = '', $closure = null)$/;"	v
count	thinkphp\library\think\model\relation\MorphOne.php	/^    public function has($operator = '>=', $count = 1, $id = '*', $joinType = 'INNER')$/;"	v
data	thinkphp\library\think\model\relation\MorphOne.php	/^            $data = $data->getData();$/;"	v
data	thinkphp\library\think\model\relation\MorphOne.php	/^            $data = $this->eagerlyMorphToOne([$/;"	v
data	thinkphp\library\think\model\relation\MorphOne.php	/^        $data = [];$/;"	v
eagerlyMorphToOne	thinkphp\library\think\model\relation\MorphOne.php	/^    protected function eagerlyMorphToOne($where, $relation, $subRelation = '', $closure = false)$/;"	f
eagerlyResult	thinkphp\library\think\model\relation\MorphOne.php	/^    public function eagerlyResult(&$result, $relation, $subRelation, $closure)$/;"	f
eagerlyResultSet	thinkphp\library\think\model\relation\MorphOne.php	/^    public function eagerlyResultSet(&$resultSet, $relation, $subRelation, $closure)$/;"	f
fields	thinkphp\library\think\model\relation\MorphOne.php	/^    public function hasWhere($where = [], $fields = null)$/;"	v
getRelation	thinkphp\library\think\model\relation\MorphOne.php	/^    public function getRelation($subRelation = '', $closure = null)$/;"	f
has	thinkphp\library\think\model\relation\MorphOne.php	/^    public function has($operator = '>=', $count = 1, $id = '*', $joinType = 'INNER')$/;"	f
hasWhere	thinkphp\library\think\model\relation\MorphOne.php	/^    public function hasWhere($where = [], $fields = null)$/;"	f
list	thinkphp\library\think\model\relation\MorphOne.php	/^        $list     = $this->query->where($where)->with($subRelation)->find();$/;"	v
model	thinkphp\library\think\model\relation\MorphOne.php	/^        $model = new $this->model;$/;"	v
model	thinkphp\library\think\model\relation\MorphOne.php	/^        $this->model     = $model;$/;"	v
morphKey	thinkphp\library\think\model\relation\MorphOne.php	/^        $morphKey  = $this->morphKey;$/;"	v
morphKey	thinkphp\library\think\model\relation\MorphOne.php	/^        $morphKey = $this->morphKey;$/;"	v
morphKey	thinkphp\library\think\model\relation\MorphOne.php	/^        $this->morphKey  = $morphKey;$/;"	v
morphKey	thinkphp\library\think\model\relation\MorphOne.php	/^    protected $morphKey;$/;"	v
morphType	thinkphp\library\think\model\relation\MorphOne.php	/^        $morphType = $this->morphType;$/;"	v
morphType	thinkphp\library\think\model\relation\MorphOne.php	/^        $this->morphType = $morphType;$/;"	v
morphType	thinkphp\library\think\model\relation\MorphOne.php	/^    protected $morphType;$/;"	v
parent	thinkphp\library\think\model\relation\MorphOne.php	/^        $this->parent    = $parent;$/;"	v
pk	thinkphp\library\think\model\relation\MorphOne.php	/^            $pk   = $result->$pk;$/;"	v
pk	thinkphp\library\think\model\relation\MorphOne.php	/^            $pk = $result->getPk();$/;"	v
pk	thinkphp\library\think\model\relation\MorphOne.php	/^            $pk = $this->parent->getPk();$/;"	v
pk	thinkphp\library\think\model\relation\MorphOne.php	/^        $pk = $result->getPk();$/;"	v
pk	thinkphp\library\think\model\relation\MorphOne.php	/^        $pk = $this->parent->getPk();$/;"	v
query	thinkphp\library\think\model\relation\MorphOne.php	/^        $this->query     = (new $model)->db();$/;"	v
range	thinkphp\library\think\model\relation\MorphOne.php	/^        $range     = [];$/;"	v
relationModel	thinkphp\library\think\model\relation\MorphOne.php	/^                    $relationModel = $data[$result->$pk];$/;"	v
relationModel	thinkphp\library\think\model\relation\MorphOne.php	/^                    $relationModel = null;$/;"	v
relationModel	thinkphp\library\think\model\relation\MorphOne.php	/^                $relationModel = $data[$pk];$/;"	v
relationModel	thinkphp\library\think\model\relation\MorphOne.php	/^                $relationModel = null;$/;"	v
relationModel	thinkphp\library\think\model\relation\MorphOne.php	/^        $relationModel = $this->query->relation($subRelation)->find();$/;"	v
save	thinkphp\library\think\model\relation\MorphOne.php	/^    public function save($data)$/;"	f
subRelation	thinkphp\library\think\model\relation\MorphOne.php	/^    protected function eagerlyMorphToOne($where, $relation, $subRelation = '', $closure = false)$/;"	v
type	thinkphp\library\think\model\relation\MorphOne.php	/^        $this->type      = $type;$/;"	v
type	thinkphp\library\think\model\relation\MorphOne.php	/^        $type      = $this->type;$/;"	v
type	thinkphp\library\think\model\relation\MorphOne.php	/^    protected $type;$/;"	v
MorphTo	thinkphp\library\think\model\relation\MorphTo.php	/^class MorphTo extends Relation$/;"	c
__construct	thinkphp\library\think\model\relation\MorphTo.php	/^    public function __construct(Model $parent, $morphType, $morphKey, $alias = [], $relation = null)$/;"	f
alias	thinkphp\library\think\model\relation\MorphTo.php	/^        $this->alias     = $alias;$/;"	v
alias	thinkphp\library\think\model\relation\MorphTo.php	/^        $this->alias = $alias;$/;"	v
alias	thinkphp\library\think\model\relation\MorphTo.php	/^    protected $alias;$/;"	v
alias	thinkphp\library\think\model\relation\MorphTo.php	/^    public function __construct(Model $parent, $morphType, $morphKey, $alias = [], $relation = null)$/;"	v
associate	thinkphp\library\think\model\relation\MorphTo.php	/^    public function associate($model)$/;"	f
attr	thinkphp\library\think\model\relation\MorphTo.php	/^            $attr = Loader::parseName($relation);$/;"	v
baseQuery	thinkphp\library\think\model\relation\MorphTo.php	/^    protected function baseQuery()$/;"	f
closure	thinkphp\library\think\model\relation\MorphTo.php	/^    public function getRelation($subRelation = '', $closure = null)$/;"	v
count	thinkphp\library\think\model\relation\MorphTo.php	/^    public function has($operator = '>=', $count = 1, $id = '*', $joinType = 'INNER')$/;"	v
data	thinkphp\library\think\model\relation\MorphTo.php	/^                $data  = [];$/;"	v
data	thinkphp\library\think\model\relation\MorphTo.php	/^        $data = (new $model)->with($subRelation)->find($pk);$/;"	v
dissociate	thinkphp\library\think\model\relation\MorphTo.php	/^    public function dissociate()$/;"	f
eagerlyMorphToOne	thinkphp\library\think\model\relation\MorphTo.php	/^    protected function eagerlyMorphToOne($model, $relation, &$result, $subRelation = '')$/;"	f
eagerlyResult	thinkphp\library\think\model\relation\MorphTo.php	/^    public function eagerlyResult(&$result, $relation, $subRelation, $closure)$/;"	f
eagerlyResultSet	thinkphp\library\think\model\relation\MorphTo.php	/^    public function eagerlyResultSet(&$resultSet, $relation, $subRelation, $closure)$/;"	f
fields	thinkphp\library\think\model\relation\MorphTo.php	/^    public function hasWhere($where = [], $fields = null)$/;"	v
getRelation	thinkphp\library\think\model\relation\MorphTo.php	/^    public function getRelation($subRelation = '', $closure = null)$/;"	f
has	thinkphp\library\think\model\relation\MorphTo.php	/^    public function has($operator = '>=', $count = 1, $id = '*', $joinType = 'INNER')$/;"	f
hasWhere	thinkphp\library\think\model\relation\MorphTo.php	/^    public function hasWhere($where = [], $fields = null)$/;"	f
k	thinkphp\library\think\model\relation\MorphTo.php	/^                foreach ($list as $k => $vo) {$/;"	v
key	thinkphp\library\think\model\relation\MorphTo.php	/^            foreach ($range as $key => $val) {$/;"	v
list	thinkphp\library\think\model\relation\MorphTo.php	/^                $list  = $obj->all($val, $subRelation);$/;"	v
model	thinkphp\library\think\model\relation\MorphTo.php	/^                $model = $this->parseModel($key);$/;"	v
model	thinkphp\library\think\model\relation\MorphTo.php	/^            $model = $this->alias[$model];$/;"	v
model	thinkphp\library\think\model\relation\MorphTo.php	/^            $model = implode('\\\\', $path);$/;"	v
model	thinkphp\library\think\model\relation\MorphTo.php	/^        $model = $this->parseModel($result->{$this->morphType});$/;"	v
model	thinkphp\library\think\model\relation\MorphTo.php	/^        $model = $this->parseModel($this->parent->$morphType);$/;"	v
morphKey	thinkphp\library\think\model\relation\MorphTo.php	/^        $morphKey  = $this->morphKey;$/;"	v
morphKey	thinkphp\library\think\model\relation\MorphTo.php	/^        $this->morphKey  = $morphKey;$/;"	v
morphKey	thinkphp\library\think\model\relation\MorphTo.php	/^    protected $morphKey;$/;"	v
morphType	thinkphp\library\think\model\relation\MorphTo.php	/^        $morphType = $this->morphType;$/;"	v
morphType	thinkphp\library\think\model\relation\MorphTo.php	/^        $this->morphType = $morphType;$/;"	v
morphType	thinkphp\library\think\model\relation\MorphTo.php	/^    protected $morphType;$/;"	v
obj	thinkphp\library\think\model\relation\MorphTo.php	/^                $obj   = new $model;$/;"	v
parent	thinkphp\library\think\model\relation\MorphTo.php	/^        $this->parent    = $parent;$/;"	v
parseModel	thinkphp\library\think\model\relation\MorphTo.php	/^    protected function parseModel($model)$/;"	f
path	thinkphp\library\think\model\relation\MorphTo.php	/^            $path = explode('\\\\', get_class($this->parent));$/;"	v
pk	thinkphp\library\think\model\relation\MorphTo.php	/^                $pk    = $obj->getPk();$/;"	v
pk	thinkphp\library\think\model\relation\MorphTo.php	/^        $pk        = $model->getPk();$/;"	v
pk	thinkphp\library\think\model\relation\MorphTo.php	/^        $pk   = $this->parent->{$this->morphKey};$/;"	v
pk	thinkphp\library\think\model\relation\MorphTo.php	/^        $pk = $this->parent->$morphKey;$/;"	v
range	thinkphp\library\think\model\relation\MorphTo.php	/^        $range     = [];$/;"	v
relation	thinkphp\library\think\model\relation\MorphTo.php	/^        $this->relation  = $relation;$/;"	v
relation	thinkphp\library\think\model\relation\MorphTo.php	/^    protected $relation;$/;"	v
relationCount	thinkphp\library\think\model\relation\MorphTo.php	/^    public function relationCount($result, $closure)$/;"	f
relationModel	thinkphp\library\think\model\relation\MorphTo.php	/^                            $relationModel = $data[$result->$morphKey];$/;"	v
relationModel	thinkphp\library\think\model\relation\MorphTo.php	/^        $relationModel = (new $model)->relation($subRelation)->find($pk);$/;"	v
removeOption	thinkphp\library\think\model\relation\MorphTo.php	/^    public function removeOption()$/;"	f
setAlias	thinkphp\library\think\model\relation\MorphTo.php	/^    public function setAlias($alias)$/;"	f
subRelation	thinkphp\library\think\model\relation\MorphTo.php	/^    protected function eagerlyMorphToOne($model, $relation, &$result, $subRelation = '')$/;"	v
OneToOne	thinkphp\library\think\model\relation\OneToOne.php	/^abstract class OneToOne extends Relation$/;"	c
alias	thinkphp\library\think\model\relation\OneToOne.php	/^        $alias = $name;$/;"	v
attr	thinkphp\library\think\model\relation\OneToOne.php	/^            $attr = explode(',', $attr);$/;"	v
baseQuery	thinkphp\library\think\model\relation\OneToOne.php	/^    protected function baseQuery()$/;"	f
bind	thinkphp\library\think\model\relation\OneToOne.php	/^    public function bind($attr)$/;"	f
bindAttr	thinkphp\library\think\model\relation\OneToOne.php	/^        $this->bindAttr = $attr;$/;"	v
bindAttr	thinkphp\library\think\model\relation\OneToOne.php	/^    protected $bindAttr = [];$/;"	v
bindAttr	thinkphp\library\think\model\relation\OneToOne.php	/^    protected function bindAttr($model, &$result, $bindAttr)$/;"	f
data	thinkphp\library\think\model\relation\OneToOne.php	/^            $data = $data->getData();$/;"	v
data	thinkphp\library\think\model\relation\OneToOne.php	/^        $data = [];$/;"	v
eagerly	thinkphp\library\think\model\relation\OneToOne.php	/^    public function eagerly(Query $query, $relation, $subRelation, $closure, $first)$/;"	f
eagerlyOne	thinkphp\library\think\model\relation\OneToOne.php	/^    abstract protected function eagerlyOne(&$result, $relation, $subRelation, $closure);$/;"	f
eagerlyResult	thinkphp\library\think\model\relation\OneToOne.php	/^    public function eagerlyResult(&$result, $relation, $subRelation, $closure)$/;"	f
eagerlyResultSet	thinkphp\library\think\model\relation\OneToOne.php	/^    public function eagerlyResultSet(&$resultSet, $relation, $subRelation, $closure)$/;"	f
eagerlySet	thinkphp\library\think\model\relation\OneToOne.php	/^    abstract protected function eagerlySet(&$resultSet, $relation, $subRelation, $closure);$/;"	f
eagerlyType	thinkphp\library\think\model\relation\OneToOne.php	/^        $this->eagerlyType = $type;$/;"	v
eagerlyType	thinkphp\library\think\model\relation\OneToOne.php	/^    protected $eagerlyType = 1;$/;"	v
eagerlyWhere	thinkphp\library\think\model\relation\OneToOne.php	/^    protected function eagerlyWhere($model, $where, $key, $relation, $subRelation = '', $closure = false)$/;"	f
field	thinkphp\library\think\model\relation\OneToOne.php	/^                $field = $query->getOptions('field');$/;"	v
field	thinkphp\library\think\model\relation\OneToOne.php	/^                $field = $query->getOptions('with_field');$/;"	v
field	thinkphp\library\think\model\relation\OneToOne.php	/^                $field = true;$/;"	v
field	thinkphp\library\think\model\relation\OneToOne.php	/^            $field = $this->option['field'];$/;"	v
field	thinkphp\library\think\model\relation\OneToOne.php	/^            $field = true;$/;"	v
getEagerlyType	thinkphp\library\think\model\relation\OneToOne.php	/^    public function getEagerlyType()$/;"	f
joinAlias	thinkphp\library\think\model\relation\OneToOne.php	/^        $joinAlias = $relation;$/;"	v
joinTable	thinkphp\library\think\model\relation\OneToOne.php	/^        $joinTable = $this->query->getTable();$/;"	v
joinType	thinkphp\library\think\model\relation\OneToOne.php	/^        $this->joinType = $type;$/;"	v
joinType	thinkphp\library\think\model\relation\OneToOne.php	/^    protected $joinType;$/;"	v
joinType	thinkphp\library\think\model\relation\OneToOne.php	/^    public function joinType($type)$/;"	f
key	thinkphp\library\think\model\relation\OneToOne.php	/^            $key = is_numeric($key) ? $attr : $key;$/;"	v
key	thinkphp\library\think\model\relation\OneToOne.php	/^        foreach ($bindAttr as $key => $attr) {$/;"	v
key	thinkphp\library\think\model\relation\OneToOne.php	/^        foreach ($result->getData() as $key => $val) {$/;"	v
list	thinkphp\library\think\model\relation\OneToOne.php	/^        $list = $model->where($where)->with($subRelation)->select();$/;"	v
match	thinkphp\library\think\model\relation\OneToOne.php	/^    protected function match($model, $relation, &$result)$/;"	f
model	thinkphp\library\think\model\relation\OneToOne.php	/^        $model = new $this->model;$/;"	v
name	thinkphp\library\think\model\relation\OneToOne.php	/^        $name  = Loader::parseName(basename(str_replace('\\\\', '\/', $query->getModel())));$/;"	v
relation	thinkphp\library\think\model\relation\OneToOne.php	/^    protected $relation;$/;"	v
relationCount	thinkphp\library\think\model\relation\OneToOne.php	/^    public function relationCount($result, $closure)$/;"	f
relationModel	thinkphp\library\think\model\relation\OneToOne.php	/^            $relationModel = new $model($list[$relation]);$/;"	v
relationModel	thinkphp\library\think\model\relation\OneToOne.php	/^            $relationModel = null;$/;"	v
save	thinkphp\library\think\model\relation\OneToOne.php	/^    public function save($data)$/;"	f
setEagerlyType	thinkphp\library\think\model\relation\OneToOne.php	/^    public function setEagerlyType($type)$/;"	f
subRelation	thinkphp\library\think\model\relation\OneToOne.php	/^    protected function eagerlyWhere($model, $where, $key, $relation, $subRelation = '', $closure = false)$/;"	v
table	thinkphp\library\think\model\relation\OneToOne.php	/^            $table = $query->getTable();$/;"	v
Collection	thinkphp\library\think\paginator\Collection.php	/^class Collection extends \\think\\Collection$/;"	c
__call	thinkphp\library\think\paginator\Collection.php	/^    public function __call($method, $args)$/;"	f
__construct	thinkphp\library\think\paginator\Collection.php	/^    public function __construct($items = [], Paginator $paginator = null)$/;"	f
make	thinkphp\library\think\paginator\Collection.php	/^    public static function make($items = [], Paginator $paginator = null)$/;"	f
paginator	thinkphp\library\think\paginator\Collection.php	/^        $this->paginator = $paginator;$/;"	v
paginator	thinkphp\library\think\paginator\Collection.php	/^    protected $paginator;$/;"	v
paginator	thinkphp\library\think\paginator\Collection.php	/^    public function __construct($items = [], Paginator $paginator = null)$/;"	v
paginator	thinkphp\library\think\paginator\Collection.php	/^    public static function make($items = [], Paginator $paginator = null)$/;"	v
toArray	thinkphp\library\think\paginator\Collection.php	/^    public function toArray()$/;"	f
total	thinkphp\library\think\paginator\Collection.php	/^                $total = $this->total();$/;"	v
total	thinkphp\library\think\paginator\Collection.php	/^                $total = null;$/;"	v
Bootstrap	thinkphp\library\think\paginator\driver\Bootstrap.php	/^class Bootstrap extends Paginator$/;"	c
block	thinkphp\library\think\paginator\driver\Bootstrap.php	/^        $block = [$/;"	v
getActivePageWrapper	thinkphp\library\think\paginator\driver\Bootstrap.php	/^    protected function getActivePageWrapper($text)$/;"	f
getAvailablePageWrapper	thinkphp\library\think\paginator\driver\Bootstrap.php	/^    protected function getAvailablePageWrapper($url, $page)$/;"	f
getDisabledTextWrapper	thinkphp\library\think\paginator\driver\Bootstrap.php	/^    protected function getDisabledTextWrapper($text)$/;"	f
getDots	thinkphp\library\think\paginator\driver\Bootstrap.php	/^    protected function getDots()$/;"	f
getLinks	thinkphp\library\think\paginator\driver\Bootstrap.php	/^    protected function getLinks()$/;"	f
getNextButton	thinkphp\library\think\paginator\driver\Bootstrap.php	/^    protected function getNextButton($text = '&raquo;')$/;"	f
getPageLinkWrapper	thinkphp\library\think\paginator\driver\Bootstrap.php	/^    protected function getPageLinkWrapper($url, $page)$/;"	f
getPreviousButton	thinkphp\library\think\paginator\driver\Bootstrap.php	/^    protected function getPreviousButton($text = "&laquo;")$/;"	f
getUrlLinks	thinkphp\library\think\paginator\driver\Bootstrap.php	/^    protected function getUrlLinks(array $urls)$/;"	f
html	thinkphp\library\think\paginator\driver\Bootstrap.php	/^        $html = '';$/;"	v
page	thinkphp\library\think\paginator\driver\Bootstrap.php	/^        foreach ($urls as $page => $url) {$/;"	v
render	thinkphp\library\think\paginator\driver\Bootstrap.php	/^    public function render()$/;"	f
side	thinkphp\library\think\paginator\driver\Bootstrap.php	/^        $side   = 3;$/;"	v
url	thinkphp\library\think\paginator\driver\Bootstrap.php	/^        $url = $this->url($/;"	v
url	thinkphp\library\think\paginator\driver\Bootstrap.php	/^        $url = $this->url($this->currentPage() + 1);$/;"	v
window	thinkphp\library\think\paginator\driver\Bootstrap.php	/^        $window = $side * 2;$/;"	v
Builder	thinkphp\library\think\process\Builder.php	/^class Builder$/;"	c
__construct	thinkphp\library\think\process\Builder.php	/^    public function __construct(array $arguments = [])$/;"	f
add	thinkphp\library\think\process\Builder.php	/^    public function add($argument)$/;"	f
addEnvironmentVariables	thinkphp\library\think\process\Builder.php	/^    public function addEnvironmentVariables(array $variables)$/;"	f
arguments	thinkphp\library\think\process\Builder.php	/^        $arguments = array_merge($this->prefix, $this->arguments);$/;"	v
arguments	thinkphp\library\think\process\Builder.php	/^        $this->arguments = $arguments;$/;"	v
arguments	thinkphp\library\think\process\Builder.php	/^    private $arguments;$/;"	v
arguments	thinkphp\library\think\process\Builder.php	/^    public function __construct(array $arguments = [])$/;"	v
arguments	thinkphp\library\think\process\Builder.php	/^    public static function create(array $arguments = [])$/;"	v
create	thinkphp\library\think\process\Builder.php	/^    public static function create(array $arguments = [])$/;"	f
cwd	thinkphp\library\think\process\Builder.php	/^        $this->cwd = $cwd;$/;"	v
cwd	thinkphp\library\think\process\Builder.php	/^    private $cwd;$/;"	v
disableOutput	thinkphp\library\think\process\Builder.php	/^    public function disableOutput()$/;"	f
enableOutput	thinkphp\library\think\process\Builder.php	/^    public function enableOutput()$/;"	f
env	thinkphp\library\think\process\Builder.php	/^            $env = $this->env;$/;"	v
env	thinkphp\library\think\process\Builder.php	/^            $env = array_replace($_ENV, $_SERVER, $this->env);$/;"	v
env	thinkphp\library\think\process\Builder.php	/^        $this->env = array_replace($this->env, $variables);$/;"	v
env	thinkphp\library\think\process\Builder.php	/^    private $env = null;$/;"	v
getProcess	thinkphp\library\think\process\Builder.php	/^    public function getProcess()$/;"	f
inheritEnv	thinkphp\library\think\process\Builder.php	/^        $this->inheritEnv = $inheritEnv;$/;"	v
inheritEnv	thinkphp\library\think\process\Builder.php	/^    private $inheritEnv     = true;$/;"	v
inheritEnvironmentVariables	thinkphp\library\think\process\Builder.php	/^    public function inheritEnvironmentVariables($inheritEnv = true)$/;"	f
input	thinkphp\library\think\process\Builder.php	/^        $this->input = Utils::validateInput(sprintf('%s::%s', __CLASS__, __FUNCTION__), $input);$/;"	v
input	thinkphp\library\think\process\Builder.php	/^    private $input;$/;"	v
options	thinkphp\library\think\process\Builder.php	/^        $options = $this->options;$/;"	v
options	thinkphp\library\think\process\Builder.php	/^    private $options        = [];$/;"	v
outputDisabled	thinkphp\library\think\process\Builder.php	/^        $this->outputDisabled = false;$/;"	v
outputDisabled	thinkphp\library\think\process\Builder.php	/^        $this->outputDisabled = true;$/;"	v
outputDisabled	thinkphp\library\think\process\Builder.php	/^    private $outputDisabled = false;$/;"	v
prefix	thinkphp\library\think\process\Builder.php	/^        $this->prefix = is_array($prefix) ? $prefix : [$prefix];$/;"	v
prefix	thinkphp\library\think\process\Builder.php	/^    private $prefix         = [];$/;"	v
process	thinkphp\library\think\process\Builder.php	/^        $process = new Process($script, $this->cwd, $env, $this->input, $this->timeout, $options);$/;"	v
script	thinkphp\library\think\process\Builder.php	/^        $script    = implode(' ', array_map([__NAMESPACE__ . '\\\\Utils', 'escapeArgument'], $arguments));$/;"	v
setArguments	thinkphp\library\think\process\Builder.php	/^    public function setArguments(array $arguments)$/;"	f
setEnv	thinkphp\library\think\process\Builder.php	/^    public function setEnv($name, $value)$/;"	f
setInput	thinkphp\library\think\process\Builder.php	/^    public function setInput($input)$/;"	f
setOption	thinkphp\library\think\process\Builder.php	/^    public function setOption($name, $value)$/;"	f
setPrefix	thinkphp\library\think\process\Builder.php	/^    public function setPrefix($prefix)$/;"	f
setTimeout	thinkphp\library\think\process\Builder.php	/^    public function setTimeout($timeout)$/;"	f
setWorkingDirectory	thinkphp\library\think\process\Builder.php	/^    public function setWorkingDirectory($cwd)$/;"	f
timeout	thinkphp\library\think\process\Builder.php	/^            $this->timeout = null;$/;"	v
timeout	thinkphp\library\think\process\Builder.php	/^        $this->timeout = $timeout;$/;"	v
timeout	thinkphp\library\think\process\Builder.php	/^        $timeout = (float) $timeout;$/;"	v
timeout	thinkphp\library\think\process\Builder.php	/^    private $timeout        = 60;$/;"	v
Utils	thinkphp\library\think\process\Utils.php	/^class Utils$/;"	c
char	thinkphp\library\think\process\Utils.php	/^        return 2 < strlen($arg) && $char === $arg[0] && $char === $arg[strlen($arg) - 1];$/;"	v
escapeArgument	thinkphp\library\think\process\Utils.php	/^    public static function escapeArgument($argument)$/;"	f
escapedArgument	thinkphp\library\think\process\Utils.php	/^            $escapedArgument = '"' . $escapedArgument . '"';$/;"	v
escapedArgument	thinkphp\library\think\process\Utils.php	/^        $escapedArgument = '';$/;"	v
isSurroundedBy	thinkphp\library\think\process\Utils.php	/^    private static function isSurroundedBy($arg, $char)$/;"	f
quote	thinkphp\library\think\process\Utils.php	/^                $quote = true;$/;"	v
quote	thinkphp\library\think\process\Utils.php	/^        $quote           = false;$/;"	v
validateInput	thinkphp\library\think\process\Utils.php	/^    public static function validateInput($caller, $input)$/;"	f
Faild	thinkphp\library\think\process\exception\Faild.php	/^class Faild extends \\RuntimeException$/;"	c
__construct	thinkphp\library\think\process\exception\Faild.php	/^    public function __construct(Process $process)$/;"	f
error	thinkphp\library\think\process\exception\Faild.php	/^        $error = sprintf('The command "%s" failed.' . "\\nExit Code: %s(%s)", $process->getCommandLine(), $process->getExitCode(), $process->getExitCodeText());$/;"	v
getProcess	thinkphp\library\think\process\exception\Faild.php	/^    public function getProcess()$/;"	f
process	thinkphp\library\think\process\exception\Faild.php	/^        $this->process = $process;$/;"	v
process	thinkphp\library\think\process\exception\Faild.php	/^    private $process;$/;"	v
Failed	thinkphp\library\think\process\exception\Failed.php	/^class Failed extends \\RuntimeException$/;"	c
__construct	thinkphp\library\think\process\exception\Failed.php	/^    public function __construct(Process $process)$/;"	f
error	thinkphp\library\think\process\exception\Failed.php	/^        $error = sprintf('The command "%s" failed.' . "\\nExit Code: %s(%s)", $process->getCommandLine(), $process->getExitCode(), $process->getExitCodeText());$/;"	v
getProcess	thinkphp\library\think\process\exception\Failed.php	/^    public function getProcess()$/;"	f
process	thinkphp\library\think\process\exception\Failed.php	/^        $this->process = $process;$/;"	v
process	thinkphp\library\think\process\exception\Failed.php	/^    private $process;$/;"	v
Timeout	thinkphp\library\think\process\exception\Timeout.php	/^class Timeout extends \\RuntimeException$/;"	c
__construct	thinkphp\library\think\process\exception\Timeout.php	/^    public function __construct(Process $process, $timeoutType)$/;"	f
getExceededTimeout	thinkphp\library\think\process\exception\Timeout.php	/^    public function getExceededTimeout()$/;"	f
getProcess	thinkphp\library\think\process\exception\Timeout.php	/^    public function getProcess()$/;"	f
isGeneralTimeout	thinkphp\library\think\process\exception\Timeout.php	/^    public function isGeneralTimeout()$/;"	f
isIdleTimeout	thinkphp\library\think\process\exception\Timeout.php	/^    public function isIdleTimeout()$/;"	f
process	thinkphp\library\think\process\exception\Timeout.php	/^        $this->process     = $process;$/;"	v
process	thinkphp\library\think\process\exception\Timeout.php	/^    private $process;$/;"	v
timeoutType	thinkphp\library\think\process\exception\Timeout.php	/^        $this->timeoutType = $timeoutType;$/;"	v
timeoutType	thinkphp\library\think\process\exception\Timeout.php	/^        return $this->timeoutType === self::TYPE_GENERAL;$/;"	v
timeoutType	thinkphp\library\think\process\exception\Timeout.php	/^        return $this->timeoutType === self::TYPE_IDLE;$/;"	v
timeoutType	thinkphp\library\think\process\exception\Timeout.php	/^    private $timeoutType;$/;"	v
Pipes	thinkphp\library\think\process\pipes\Pipes.php	/^abstract class Pipes$/;"	c
areOpen	thinkphp\library\think\process\pipes\Pipes.php	/^    abstract public function areOpen();$/;"	f
blocked	thinkphp\library\think\process\pipes\Pipes.php	/^        $this->blocked = false;$/;"	v
blocked	thinkphp\library\think\process\pipes\Pipes.php	/^    private $blocked = true;$/;"	v
close	thinkphp\library\think\process\pipes\Pipes.php	/^    abstract public function readAndWrite($blocking, $close = false);$/;"	v
close	thinkphp\library\think\process\pipes\Pipes.php	/^    public function close()$/;"	f
getDescriptors	thinkphp\library\think\process\pipes\Pipes.php	/^    abstract public function getDescriptors();$/;"	f
getFiles	thinkphp\library\think\process\pipes\Pipes.php	/^    abstract public function getFiles();$/;"	f
hasSystemCallBeenInterrupted	thinkphp\library\think\process\pipes\Pipes.php	/^    protected function hasSystemCallBeenInterrupted()$/;"	f
input	thinkphp\library\think\process\pipes\Pipes.php	/^    protected $input;$/;"	v
inputBuffer	thinkphp\library\think\process\pipes\Pipes.php	/^    protected $inputBuffer = '';$/;"	v
lastError	thinkphp\library\think\process\pipes\Pipes.php	/^        $lastError = error_get_last();$/;"	v
pipes	thinkphp\library\think\process\pipes\Pipes.php	/^        $this->pipes = [];$/;"	v
pipes	thinkphp\library\think\process\pipes\Pipes.php	/^    public $pipes = [];$/;"	v
readAndWrite	thinkphp\library\think\process\pipes\Pipes.php	/^    abstract public function readAndWrite($blocking, $close = false);$/;"	f
unblock	thinkphp\library\think\process\pipes\Pipes.php	/^    protected function unblock()$/;"	f
Unix	thinkphp\library\think\process\pipes\Unix.php	/^class Unix extends Pipes$/;"	c
__construct	thinkphp\library\think\process\pipes\Unix.php	/^    public function __construct($ttyMode, $ptyMode, $input, $disableOutput)$/;"	f
__destruct	thinkphp\library\think\process\pipes\Unix.php	/^    public function __destruct()$/;"	f
areOpen	thinkphp\library\think\process\pipes\Unix.php	/^    public function areOpen()$/;"	f
close	thinkphp\library\think\process\pipes\Unix.php	/^    public function readAndWrite($blocking, $close = false)$/;"	v
create	thinkphp\library\think\process\pipes\Unix.php	/^    public static function create(Process $process, $input)$/;"	f
data	thinkphp\library\think\process\pipes\Unix.php	/^            $data = '';$/;"	v
dataread	thinkphp\library\think\process\pipes\Unix.php	/^            while ('' !== $dataread = (string) fread($pipe, self::CHUNK_SIZE)) {$/;"	v
disableOutput	thinkphp\library\think\process\pipes\Unix.php	/^        $this->disableOutput = (bool) $disableOutput;$/;"	v
disableOutput	thinkphp\library\think\process\pipes\Unix.php	/^    private $disableOutput;$/;"	v
e	thinkphp\library\think\process\pipes\Unix.php	/^        $e = null;$/;"	v
getDescriptors	thinkphp\library\think\process\pipes\Unix.php	/^    public function getDescriptors()$/;"	f
getFiles	thinkphp\library\think\process\pipes\Unix.php	/^    public function getFiles()$/;"	f
input	thinkphp\library\think\process\pipes\Unix.php	/^                    $this->input = null;$/;"	v
input	thinkphp\library\think\process\pipes\Unix.php	/^            $this->input = $input;$/;"	v
inputBuffer	thinkphp\library\think\process\pipes\Unix.php	/^                    $this->inputBuffer = (string) substr($this->inputBuffer, $written);$/;"	v
inputBuffer	thinkphp\library\think\process\pipes\Unix.php	/^            $this->inputBuffer = (string) $input;$/;"	v
n	thinkphp\library\think\process\pipes\Unix.php	/^        if (false === $n = @stream_select($r, $w, $e, 0, $blocking ? Process::TIMEOUT_PRECISION * 1E6 : 0)) {$/;"	v
nullstream	thinkphp\library\think\process\pipes\Unix.php	/^            $nullstream = fopen('\/dev\/null', 'c');$/;"	v
pipes	thinkphp\library\think\process\pipes\Unix.php	/^                $this->pipes = [];$/;"	v
ptyMode	thinkphp\library\think\process\pipes\Unix.php	/^        $this->ptyMode       = (bool) $ptyMode;$/;"	v
ptyMode	thinkphp\library\think\process\pipes\Unix.php	/^    private $ptyMode;$/;"	v
r	thinkphp\library\think\process\pipes\Unix.php	/^            $r = $this->pipes;$/;"	v
r	thinkphp\library\think\process\pipes\Unix.php	/^            $r = array_merge($this->pipes, ['input' => $this->input]);$/;"	v
read	thinkphp\library\think\process\pipes\Unix.php	/^        $read = [];$/;"	v
readAndWrite	thinkphp\library\think\process\pipes\Unix.php	/^    public function readAndWrite($blocking, $close = false)$/;"	f
ttyMode	thinkphp\library\think\process\pipes\Unix.php	/^        $this->ttyMode       = (bool) $ttyMode;$/;"	v
ttyMode	thinkphp\library\think\process\pipes\Unix.php	/^    private $ttyMode;$/;"	v
type	thinkphp\library\think\process\pipes\Unix.php	/^            $type = (false !== $found = array_search($pipe, $this->pipes)) ? $found : 'input';$/;"	v
w	thinkphp\library\think\process\pipes\Unix.php	/^        $w = isset($this->pipes[0]) ? [$this->pipes[0]] : null;$/;"	v
written	thinkphp\library\think\process\pipes\Unix.php	/^                $written = fwrite($w[0], $this->inputBuffer, 2 << 18); \/\/ write 512k$/;"	v
Windows	thinkphp\library\think\process\pipes\Windows.php	/^class Windows extends Pipes$/;"	c
__construct	thinkphp\library\think\process\pipes\Windows.php	/^    public function __construct($disableOutput, $input)$/;"	f
__destruct	thinkphp\library\think\process\pipes\Windows.php	/^    public function __destruct()$/;"	f
areOpen	thinkphp\library\think\process\pipes\Windows.php	/^    public function areOpen()$/;"	f
close	thinkphp\library\think\process\pipes\Windows.php	/^    public function close()$/;"	f
close	thinkphp\library\think\process\pipes\Windows.php	/^    public function readAndWrite($blocking, $close = false)$/;"	v
create	thinkphp\library\think\process\pipes\Windows.php	/^    public static function create(Process $process, $input)$/;"	f
data	thinkphp\library\think\process\pipes\Windows.php	/^            $data     = '';$/;"	v
data	thinkphp\library\think\process\pipes\Windows.php	/^            $data = '';$/;"	v
dataread	thinkphp\library\think\process\pipes\Windows.php	/^                if (false !== $dataread = fread($fileHandle, self::CHUNK_SIZE)) {$/;"	v
dataread	thinkphp\library\think\process\pipes\Windows.php	/^            $dataread = null;$/;"	v
disableOutput	thinkphp\library\think\process\pipes\Windows.php	/^        $this->disableOutput = (bool) $disableOutput;$/;"	v
disableOutput	thinkphp\library\think\process\pipes\Windows.php	/^    private $disableOutput;$/;"	v
e	thinkphp\library\think\process\pipes\Windows.php	/^        $e = null;$/;"	v
fh	thinkphp\library\think\process\pipes\Windows.php	/^        $fh   = $this->fileHandles;$/;"	v
fileHandles	thinkphp\library\think\process\pipes\Windows.php	/^        $this->fileHandles = [];$/;"	v
fileHandles	thinkphp\library\think\process\pipes\Windows.php	/^    private $fileHandles = [];$/;"	v
files	thinkphp\library\think\process\pipes\Windows.php	/^            $this->files = [$/;"	v
files	thinkphp\library\think\process\pipes\Windows.php	/^        $this->files = [];$/;"	v
files	thinkphp\library\think\process\pipes\Windows.php	/^    private $files = [];$/;"	v
getDescriptors	thinkphp\library\think\process\pipes\Windows.php	/^    public function getDescriptors()$/;"	f
getFiles	thinkphp\library\think\process\pipes\Windows.php	/^    public function getFiles()$/;"	f
input	thinkphp\library\think\process\pipes\Windows.php	/^                $this->input = null;$/;"	v
input	thinkphp\library\think\process\pipes\Windows.php	/^            $this->input = $input;$/;"	v
inputBuffer	thinkphp\library\think\process\pipes\Windows.php	/^                    $this->inputBuffer = (string) substr($this->inputBuffer, $written);$/;"	v
inputBuffer	thinkphp\library\think\process\pipes\Windows.php	/^            $this->inputBuffer = $input;$/;"	v
length	thinkphp\library\think\process\pipes\Windows.php	/^            if (0 < $length = strlen($data)) {$/;"	v
n	thinkphp\library\think\process\pipes\Windows.php	/^        if (false === $n = @stream_select($r, $w, $e, 0, $blocking ? Process::TIMEOUT_PRECISION * 1E6 : 0)) {$/;"	v
nullstream	thinkphp\library\think\process\pipes\Windows.php	/^            $nullstream = fopen('NUL', 'c');$/;"	v
offset	thinkphp\library\think\process\pipes\Windows.php	/^            foreach ($this->files as $offset => $file) {$/;"	v
pipes	thinkphp\library\think\process\pipes\Windows.php	/^                $this->pipes = [];$/;"	v
r	thinkphp\library\think\process\pipes\Windows.php	/^        $r = null !== $this->input ? ['input' => $this->input] : null;$/;"	v
read	thinkphp\library\think\process\pipes\Windows.php	/^        $read = [];$/;"	v
readAndWrite	thinkphp\library\think\process\pipes\Windows.php	/^    public function readAndWrite($blocking, $close = false)$/;"	f
readBytes	thinkphp\library\think\process\pipes\Windows.php	/^    private $readBytes = [$/;"	v
removeFiles	thinkphp\library\think\process\pipes\Windows.php	/^    private function removeFiles()$/;"	f
type	thinkphp\library\think\process\pipes\Windows.php	/^        foreach ($fh as $type => $fileHandle) {$/;"	v
w	thinkphp\library\think\process\pipes\Windows.php	/^        $w = isset($this->pipes[0]) ? [$this->pipes[0]] : null;$/;"	v
write	thinkphp\library\think\process\pipes\Windows.php	/^    private function write($blocking, $close)$/;"	f
written	thinkphp\library\think\process\pipes\Windows.php	/^                $written = fwrite($w[0], $this->inputBuffer, 2 << 18);$/;"	v
Json	thinkphp\library\think\response\Json.php	/^class Json extends Response$/;"	c
contentType	thinkphp\library\think\response\Json.php	/^    protected $contentType = 'application\/json';$/;"	v
data	thinkphp\library\think\response\Json.php	/^            $data = json_encode($data, $this->options['json_encode_param']);$/;"	v
options	thinkphp\library\think\response\Json.php	/^    protected $options = [$/;"	v
output	thinkphp\library\think\response\Json.php	/^    protected function output($data)$/;"	f
Jsonp	thinkphp\library\think\response\Jsonp.php	/^class Jsonp extends Response$/;"	c
contentType	thinkphp\library\think\response\Jsonp.php	/^    protected $contentType = 'application\/javascript';$/;"	v
data	thinkphp\library\think\response\Jsonp.php	/^            $data = $handler . '(' . $data . ');';$/;"	v
data	thinkphp\library\think\response\Jsonp.php	/^            $data = json_encode($data, $this->options['json_encode_param']);$/;"	v
handler	thinkphp\library\think\response\Jsonp.php	/^            $handler           = !empty($var_jsonp_handler) ? $var_jsonp_handler : $this->options['default_jsonp_handler'];$/;"	v
options	thinkphp\library\think\response\Jsonp.php	/^    protected $options = [$/;"	v
output	thinkphp\library\think\response\Jsonp.php	/^    protected function output($data)$/;"	f
var_jsonp_handler	thinkphp\library\think\response\Jsonp.php	/^            $var_jsonp_handler = Container::get('request')->param($this->options['var_jsonp_handler'], "");$/;"	v
Redirect	thinkphp\library\think\response\Redirect.php	/^class Redirect extends Response$/;"	c
__construct	thinkphp\library\think\response\Redirect.php	/^    public function __construct($data = '', $code = 302, array $header = [], array $options = [])$/;"	f
code	thinkphp\library\think\response\Redirect.php	/^    public function __construct($data = '', $code = 302, array $header = [], array $options = [])$/;"	v
data	thinkphp\library\think\response\Redirect.php	/^            $this->data = $session->get('redirect_url');$/;"	v
getTargetUrl	thinkphp\library\think\response\Redirect.php	/^    public function getTargetUrl()$/;"	f
key	thinkphp\library\think\response\Redirect.php	/^            foreach ($name as $key => $val) {$/;"	v
options	thinkphp\library\think\response\Redirect.php	/^    protected $options = [];$/;"	v
output	thinkphp\library\think\response\Redirect.php	/^    protected function output($data)$/;"	f
params	thinkphp\library\think\response\Redirect.php	/^        $this->params = $params;$/;"	v
params	thinkphp\library\think\response\Redirect.php	/^    protected $params = [];$/;"	v
params	thinkphp\library\think\response\Redirect.php	/^    public function params($params = [])$/;"	f
remember	thinkphp\library\think\response\Redirect.php	/^    public function remember()$/;"	f
restore	thinkphp\library\think\response\Redirect.php	/^    public function restore()$/;"	f
session	thinkphp\library\think\response\Redirect.php	/^        $session = Container::get('session');$/;"	v
value	thinkphp\library\think\response\Redirect.php	/^    public function with($name, $value = null)$/;"	v
with	thinkphp\library\think\response\Redirect.php	/^    public function with($name, $value = null)$/;"	f
View	thinkphp\library\think\response\View.php	/^class View extends Response$/;"	c
assign	thinkphp\library\think\response\View.php	/^    public function assign($name, $value = '')$/;"	f
contentType	thinkphp\library\think\response\View.php	/^    protected $contentType = 'text\/html';$/;"	v
exists	thinkphp\library\think\response\View.php	/^    public function exists($name)$/;"	f
getVars	thinkphp\library\think\response\View.php	/^    public function getVars($name = null)$/;"	f
options	thinkphp\library\think\response\View.php	/^    protected $options     = [];$/;"	v
output	thinkphp\library\think\response\View.php	/^    protected function output($data)$/;"	f
replace	thinkphp\library\think\response\View.php	/^            $this->replace = array_merge($this->replace, $content);$/;"	v
replace	thinkphp\library\think\response\View.php	/^    protected $replace     = [];$/;"	v
replace	thinkphp\library\think\response\View.php	/^    public function replace($content, $replace = '')$/;"	f
replace	thinkphp\library\think\response\View.php	/^    public function replace($content, $replace = '')$/;"	v
value	thinkphp\library\think\response\View.php	/^    public function assign($name, $value = '')$/;"	v
vars	thinkphp\library\think\response\View.php	/^            $this->vars = array_merge($this->vars, $name);$/;"	v
vars	thinkphp\library\think\response\View.php	/^    protected $vars        = [];$/;"	v
Xml	thinkphp\library\think\response\Xml.php	/^class Xml extends Response$/;"	c
array	thinkphp\library\think\response\Xml.php	/^            $array = [];$/;"	v
attr	thinkphp\library\think\response\Xml.php	/^                $id && $attr = " {$id}=\\"{$key}\\"";$/;"	v
attr	thinkphp\library\think\response\Xml.php	/^            $attr = implode(' ', $array);$/;"	v
attr	thinkphp\library\think\response\Xml.php	/^        $attr = empty($attr) ? '' : " {$attr}";$/;"	v
attr	thinkphp\library\think\response\Xml.php	/^        $attr = trim($attr);$/;"	v
contentType	thinkphp\library\think\response\Xml.php	/^    protected $contentType = 'text\/xml';$/;"	v
data	thinkphp\library\think\response\Xml.php	/^            $data = $data->toArray();$/;"	v
dataToXml	thinkphp\library\think\response\Xml.php	/^    protected function dataToXml($data, $item, $id)$/;"	f
key	thinkphp\library\think\response\Xml.php	/^                $key         = $item;$/;"	v
key	thinkphp\library\think\response\Xml.php	/^            foreach ($attr as $key => $value) {$/;"	v
key	thinkphp\library\think\response\Xml.php	/^        foreach ($data as $key => $val) {$/;"	v
options	thinkphp\library\think\response\Xml.php	/^    protected $options = [$/;"	v
output	thinkphp\library\think\response\Xml.php	/^    protected function output($data)$/;"	f
xml	thinkphp\library\think\response\Xml.php	/^        $xml  = "<?xml version=\\"1.0\\" encoding=\\"{$encoding}\\"?>";$/;"	v
xml	thinkphp\library\think\response\Xml.php	/^        $xml = $attr = '';$/;"	v
xmlEncode	thinkphp\library\think\response\Xml.php	/^    protected function xmlEncode($data, $root, $item, $attr, $id, $encoding)$/;"	f
Dispatch	thinkphp\library\think\route\Dispatch.php	/^abstract class Dispatch$/;"	c
__construct	thinkphp\library\think\route\Dispatch.php	/^    public function __construct($dispatch, $param = [], $code = null)$/;"	f
app	thinkphp\library\think\route\Dispatch.php	/^        $this->app      = Container::get('app');$/;"	v
app	thinkphp\library\think\route\Dispatch.php	/^    protected $app;$/;"	v
code	thinkphp\library\think\route\Dispatch.php	/^        $this->code     = $code;$/;"	v
code	thinkphp\library\think\route\Dispatch.php	/^    protected $code;$/;"	v
convert	thinkphp\library\think\route\Dispatch.php	/^        $this->convert = $convert;$/;"	v
convert	thinkphp\library\think\route\Dispatch.php	/^    protected $convert;$/;"	v
convert	thinkphp\library\think\route\Dispatch.php	/^    public function convert($convert)$/;"	f
dispatch	thinkphp\library\think\route\Dispatch.php	/^        $this->dispatch = $dispatch;$/;"	v
dispatch	thinkphp\library\think\route\Dispatch.php	/^    protected $dispatch;$/;"	v
getDispatch	thinkphp\library\think\route\Dispatch.php	/^    public function getDispatch()$/;"	f
getParam	thinkphp\library\think\route\Dispatch.php	/^    public function getParam()$/;"	f
param	thinkphp\library\think\route\Dispatch.php	/^        $this->param    = $param;$/;"	v
param	thinkphp\library\think\route\Dispatch.php	/^    protected $param;$/;"	v
param	thinkphp\library\think\route\Dispatch.php	/^    public function __construct($dispatch, $param = [], $code = null)$/;"	v
run	thinkphp\library\think\route\Dispatch.php	/^    abstract public function run();$/;"	f
Domain	thinkphp\library\think\route\Domain.php	/^class Domain extends RuleGroup$/;"	c
__construct	thinkphp\library\think\route\Domain.php	/^    public function __construct(Route $router, $name = '', $rule = null, $option = [], $pattern = [])$/;"	f
action	thinkphp\library\think\route\Domain.php	/^            $action              = $array[0];$/;"	v
action	thinkphp\library\think\route\Domain.php	/^        $action = !empty($array[0]) ? $array[0] : Container::get('config')->get('default_action');$/;"	v
alias	thinkphp\library\think\route\Domain.php	/^        $alias = array_shift($array);$/;"	v
array	thinkphp\library\think\route\Domain.php	/^        $array  = explode('|', $url, 2);$/;"	v
array	thinkphp\library\think\route\Domain.php	/^        $array  = explode('|', $url, 3);$/;"	v
array	thinkphp\library\think\route\Domain.php	/^        $array = explode('|', $url);$/;"	v
bind	thinkphp\library\think\route\Domain.php	/^        $bind = $this->router->getBind($this->name);$/;"	v
bind	thinkphp\library\think\route\Domain.php	/^        $bind = implode('|', $array);$/;"	v
bindToClass	thinkphp\library\think\route\Domain.php	/^    public function bindToClass($url, $class, $depr = '\/')$/;"	f
bindToController	thinkphp\library\think\route\Domain.php	/^    public function bindToController($url, $controller, $depr = '\/')$/;"	f
bindToModule	thinkphp\library\think\route\Domain.php	/^    public function bindToModule($url, $controller, $depr = '\/')$/;"	f
bindToNamespace	thinkphp\library\think\route\Domain.php	/^    public function bindToNamespace($url, $namespace, $depr = '\/')$/;"	f
check	thinkphp\library\think\route\Domain.php	/^    public function check($request, $url, $depr = '\/', $completeMatch = false)$/;"	f
checkRouteAlias	thinkphp\library\think\route\Domain.php	/^    private function checkRouteAlias($request, $url, $depr)$/;"	f
checkUrlBind	thinkphp\library\think\route\Domain.php	/^    private function checkUrlBind(&$url, $depr = '\/')$/;"	f
class	thinkphp\library\think\route\Domain.php	/^        $class  = !empty($array[0]) ? $array[0] : Container::get('config')->get('default_controller');$/;"	v
depr	thinkphp\library\think\route\Domain.php	/^    private function checkUrlBind(&$url, $depr = '\/')$/;"	v
depr	thinkphp\library\think\route\Domain.php	/^    public function bindToClass($url, $class, $depr = '\/')$/;"	v
depr	thinkphp\library\think\route\Domain.php	/^    public function bindToController($url, $controller, $depr = '\/')$/;"	v
depr	thinkphp\library\think\route\Domain.php	/^    public function bindToModule($url, $controller, $depr = '\/')$/;"	v
depr	thinkphp\library\think\route\Domain.php	/^    public function bindToNamespace($url, $namespace, $depr = '\/')$/;"	v
depr	thinkphp\library\think\route\Domain.php	/^    public function check($request, $url, $depr = '\/', $completeMatch = false)$/;"	v
group	thinkphp\library\think\route\Domain.php	/^            $group = new RuleGroup($this->router);$/;"	v
item	thinkphp\library\think\route\Domain.php	/^        $item  = $this->router->getAlias($alias);$/;"	v
method	thinkphp\library\think\route\Domain.php	/^        $method = !empty($array[1]) ? $array[1] : Container::get('config')->get('default_action');$/;"	v
name	thinkphp\library\think\route\Domain.php	/^        $this->name    = trim($name, '\/');$/;"	v
name	thinkphp\library\think\route\Domain.php	/^    public function __construct(Route $router, $name = '', $rule = null, $option = [], $pattern = [])$/;"	v
option	thinkphp\library\think\route\Domain.php	/^        $this->option  = $option;$/;"	v
pattern	thinkphp\library\think\route\Domain.php	/^        $this->pattern = $pattern;$/;"	v
result	thinkphp\library\think\route\Domain.php	/^            $result = $this->checkRouteAlias($request, $url, $depr);$/;"	v
result	thinkphp\library\think\route\Domain.php	/^        $result = $this->checkUrlBind($url, $depr);$/;"	v
router	thinkphp\library\think\route\Domain.php	/^        $this->router  = $router;$/;"	v
rule	thinkphp\library\think\route\Domain.php	/^            $rule = $item;$/;"	v
rule	thinkphp\library\think\route\Domain.php	/^            $this->rule = null;$/;"	v
rule	thinkphp\library\think\route\Domain.php	/^        $this->rule    = $rule;$/;"	v
url	thinkphp\library\think\route\Domain.php	/^        $url    = str_replace($depr, '|', $url);$/;"	v
Resource	thinkphp\library\think\route\Resource.php	/^class Resource extends RuleGroup$/;"	c
__construct	thinkphp\library\think\route\Resource.php	/^    public function __construct(Route $router, RuleGroup $group = null, $name = '', $route = '', $option = [], $pattern = [], $rest = [])$/;"	f
array	thinkphp\library\think\route\Resource.php	/^            $array = explode('.', $rule);$/;"	v
buildResourceRule	thinkphp\library\think\route\Resource.php	/^    protected function buildResourceRule($rule, $option = [])$/;"	f
check	thinkphp\library\think\route\Resource.php	/^    public function check($request, $url, $depr = '\/', $completeMatch = false)$/;"	f
depr	thinkphp\library\think\route\Resource.php	/^    public function check($request, $url, $depr = '\/', $completeMatch = false)$/;"	v
except	thinkphp\library\think\route\Resource.php	/^    public function except($except)$/;"	f
group	thinkphp\library\think\route\Resource.php	/^        $group = $this->router->getGroup();$/;"	v
group	thinkphp\library\think\route\Resource.php	/^    public function __construct(Route $router, RuleGroup $group = null, $name = '', $route = '', $option = [], $pattern = [], $rest = [])$/;"	v
item	thinkphp\library\think\route\Resource.php	/^            $item  = [];$/;"	v
item	thinkphp\library\think\route\Resource.php	/^            $item = trim(substr(trim($rule . $val[1], '\/'), strlen($this->name)), '\/');$/;"	v
key	thinkphp\library\think\route\Resource.php	/^        foreach ($this->rest as $key => $val) {$/;"	v
last	thinkphp\library\think\route\Resource.php	/^            $last  = array_pop($array);$/;"	v
name	thinkphp\library\think\route\Resource.php	/^        $this->name     = strpos($rule, '.') ? strstr($rule, '.', true) : $rule;$/;"	v
only	thinkphp\library\think\route\Resource.php	/^    public function only($only)$/;"	f
option	thinkphp\library\think\route\Resource.php	/^        $this->option  = $option;$/;"	v
option	thinkphp\library\think\route\Resource.php	/^    protected function buildResourceRule($rule, $option = [])$/;"	v
parent	thinkphp\library\think\route\Resource.php	/^        $this->parent   = $group;$/;"	v
pattern	thinkphp\library\think\route\Resource.php	/^        $this->pattern = $pattern;$/;"	v
resource	thinkphp\library\think\route\Resource.php	/^        $this->resource = $name;$/;"	v
resource	thinkphp\library\think\route\Resource.php	/^    protected $resource;$/;"	v
resource	thinkphp\library\think\route\Resource.php	/^    public function rest($name, $resource = [])$/;"	v
rest	thinkphp\library\think\route\Resource.php	/^            $this->rest = $resource ? $name : array_merge($this->rest, $name);$/;"	v
rest	thinkphp\library\think\route\Resource.php	/^        $this->rest    = $rest;$/;"	v
rest	thinkphp\library\think\route\Resource.php	/^    protected $rest = [];$/;"	v
rest	thinkphp\library\think\route\Resource.php	/^    public function rest($name, $resource = [])$/;"	f
route	thinkphp\library\think\route\Resource.php	/^        $this->route    = $route;$/;"	v
route	thinkphp\library\think\route\Resource.php	/^    protected $route;$/;"	v
router	thinkphp\library\think\route\Resource.php	/^        $this->router   = $router;$/;"	v
rule	thinkphp\library\think\route\Resource.php	/^            $rule = implode('\/', $item) . '\/' . $last;$/;"	v
vars	thinkphp\library\think\route\Resource.php	/^    public function vars($vars)$/;"	f
Rule	thinkphp\library\think\route\Rule.php	/^abstract class Rule$/;"	c
__call	thinkphp\library\think\route\Rule.php	/^    public function __call($method, $args)$/;"	f
action	thinkphp\library\think\route\Rule.php	/^            $action = 0 !== strpos($action, $prefix) ? $prefix . $action : $action;$/;"	v
action	thinkphp\library\think\route\Rule.php	/^        $action           = array_pop($path);$/;"	v
after	thinkphp\library\think\route\Rule.php	/^    public function after($after)$/;"	f
ajax	thinkphp\library\think\route\Rule.php	/^    public function ajax($ajax = true)$/;"	f
allowOptions	thinkphp\library\think\route\Rule.php	/^    public function allowOptions($allow = true)$/;"	f
app	thinkphp\library\think\route\Rule.php	/^            $app = Container::get('app');$/;"	v
autoValidate	thinkphp\library\think\route\Rule.php	/^    protected function autoValidate($option, $request)$/;"	f
before	thinkphp\library\think\route\Rule.php	/^            $before = $option['before'];$/;"	v
before	thinkphp\library\think\route\Rule.php	/^    public function before($before)$/;"	f
cache	thinkphp\library\think\route\Rule.php	/^    public function cache($cache)$/;"	f
call	thinkphp\library\think\route\Rule.php	/^                $call = 'is' . $item;$/;"	v
check	thinkphp\library\think\route\Rule.php	/^    abstract public function check($request, $url, $depr = '\/');$/;"	f
checkAfter	thinkphp\library\think\route\Rule.php	/^    protected function checkAfter($after)$/;"	f
checkAllowOptions	thinkphp\library\think\route\Rule.php	/^    protected function checkAllowOptions($request)$/;"	f
checkOption	thinkphp\library\think\route\Rule.php	/^    protected function checkOption($option, Request $request)$/;"	f
completeMatch	thinkphp\library\think\route\Rule.php	/^    public function completeMatch($match = true)$/;"	f
config	thinkphp\library\think\route\Rule.php	/^        $config           = Container::get('config');$/;"	v
controller	thinkphp\library\think\route\Rule.php	/^        $controller       = !empty($path) ? array_pop($path) : null;$/;"	v
createBindModel	thinkphp\library\think\route\Rule.php	/^    protected function createBindModel($bindModel, $matches)$/;"	f
crossDomain	thinkphp\library\think\route\Rule.php	/^    public function crossDomain()$/;"	f
denyExt	thinkphp\library\think\route\Rule.php	/^    public function denyExt($ext)$/;"	f
depr	thinkphp\library\think\route\Rule.php	/^    abstract public function check($request, $url, $depr = '\/');$/;"	v
depr	thinkphp\library\think\route\Rule.php	/^    public function depr($depr)$/;"	f
dispatch	thinkphp\library\think\route\Rule.php	/^            $dispatch = $this->checkAfter($option['after']);$/;"	v
dispatch	thinkphp\library\think\route\Rule.php	/^    protected function dispatch($request, $route, $option)$/;"	f
domain	thinkphp\library\think\route\Rule.php	/^    public function domain($domain)$/;"	f
exception	thinkphp\library\think\route\Rule.php	/^                    $exception = true;$/;"	v
expire	thinkphp\library\think\route\Rule.php	/^            $expire = $cache;$/;"	v
ext	thinkphp\library\think\route\Rule.php	/^    public function ext($ext)$/;"	f
fields	thinkphp\library\think\route\Rule.php	/^                $fields = explode('&', $key);$/;"	v
fun	thinkphp\library\think\route\Rule.php	/^            $fun = '';$/;"	v
getName	thinkphp\library\think\route\Rule.php	/^    public function getName()$/;"	f
getOption	thinkphp\library\think\route\Rule.php	/^    public function getOption($name = '')$/;"	f
getPattern	thinkphp\library\think\route\Rule.php	/^    public function getPattern($name = '')$/;"	f
hook	thinkphp\library\think\route\Rule.php	/^            $hook   = Container::get('hook');$/;"	v
hook	thinkphp\library\think\route\Rule.php	/^        $hook = Container::get('hook');$/;"	v
https	thinkphp\library\think\route\Rule.php	/^    public function https($https = true)$/;"	f
info	thinkphp\library\think\route\Rule.php	/^            $info = parse_url($url);$/;"	v
item	thinkphp\library\think\route\Rule.php	/^                $item = substr($item, 1, -1);$/;"	v
key	thinkphp\library\think\route\Rule.php	/^            $key    = str_replace('|', '\/', $url);$/;"	v
key	thinkphp\library\think\route\Rule.php	/^            foreach ($matches as $key => $val) {$/;"	v
key	thinkphp\library\think\route\Rule.php	/^        foreach ($bindModel as $key => $val) {$/;"	v
match	thinkphp\library\think\route\Rule.php	/^                        $match = false;$/;"	v
match	thinkphp\library\think\route\Rule.php	/^                $match = true;$/;"	v
matches	thinkphp\library\think\route\Rule.php	/^            $matches = $this->parseRuleVars($rule, $paths);$/;"	v
matches	thinkphp\library\think\route\Rule.php	/^            $matches = [];$/;"	v
matches	thinkphp\library\think\route\Rule.php	/^        $matches = [];$/;"	v
mergeExtraVars	thinkphp\library\think\route\Rule.php	/^    public function mergeExtraVars($merge = true)$/;"	f
method	thinkphp\library\think\route\Rule.php	/^            $method           = strpos($route, '@') ? explode('@', $route) : $route;$/;"	v
method	thinkphp\library\think\route\Rule.php	/^            $method = $this->method;$/;"	v
method	thinkphp\library\think\route\Rule.php	/^            $method = '*';$/;"	v
method	thinkphp\library\think\route\Rule.php	/^        $method           = $request->method();$/;"	v
method	thinkphp\library\think\route\Rule.php	/^    public function method($method)$/;"	f
model	thinkphp\library\think\route\Rule.php	/^                    $model     = $val;$/;"	v
model	thinkphp\library\think\route\Rule.php	/^    public function model($var, $model = null, $exception = true)$/;"	f
model	thinkphp\library\think\route\Rule.php	/^    public function model($var, $model = null, $exception = true)$/;"	v
module	thinkphp\library\think\route\Rule.php	/^        $module           = $config->get('app_multi_module') && !empty($path) ? array_pop($path) : null;$/;"	v
name	thinkphp\library\think\route\Rule.php	/^        $this->name = trim($name, '\/');$/;"	v
name	thinkphp\library\think\route\Rule.php	/^    protected $name;$/;"	v
name	thinkphp\library\think\route\Rule.php	/^    public function name($name)$/;"	f
option	thinkphp\library\think\route\Rule.php	/^            $this->option = array_merge($this->option, $name);$/;"	v
option	thinkphp\library\think\route\Rule.php	/^    protected $option = [];$/;"	v
option	thinkphp\library\think\route\Rule.php	/^    public function option($name, $value = '')$/;"	f
option	thinkphp\library\think\route\Rule.php	/^    public function parseRule($request, $rule, $route, $url, $option = [], $matches = [])$/;"	v
parent	thinkphp\library\think\route\Rule.php	/^    protected $parent;$/;"	v
parseModule	thinkphp\library\think\route\Rule.php	/^    protected function parseModule($url)$/;"	f
parseRequestCache	thinkphp\library\think\route\Rule.php	/^    protected function parseRequestCache($request, $cache)$/;"	f
parseRule	thinkphp\library\think\route\Rule.php	/^    public function parseRule($request, $rule, $route, $url, $option = [], $matches = [])$/;"	f
parseRuleVars	thinkphp\library\think\route\Rule.php	/^    protected function parseRuleVars($rule, &$paths)$/;"	f
parseUrlParams	thinkphp\library\think\route\Rule.php	/^    protected function parseUrlParams($url, &$var = [])$/;"	f
parseUrlPath	thinkphp\library\think\route\Rule.php	/^    protected function parseUrlPath($url)$/;"	f
path	thinkphp\library\think\route\Rule.php	/^            $path = [$url];$/;"	v
path	thinkphp\library\think\route\Rule.php	/^            $path = explode('\/', $info['path']);$/;"	v
path	thinkphp\library\think\route\Rule.php	/^            $path = explode('\/', $url);$/;"	v
paths	thinkphp\library\think\route\Rule.php	/^            $paths   = explode('|', $url);$/;"	v
pattern	thinkphp\library\think\route\Rule.php	/^            $this->pattern = array_merge($this->pattern, $name);$/;"	v
pattern	thinkphp\library\think\route\Rule.php	/^    protected $pattern = [];$/;"	v
pattern	thinkphp\library\think\route\Rule.php	/^    public function pattern($name, $rule = '')$/;"	f
pjax	thinkphp\library\think\route\Rule.php	/^    public function pjax($pjax = true)$/;"	f
prefix	thinkphp\library\think\route\Rule.php	/^            $prefix = $this->router->getMethodPrefix($method);$/;"	v
query	thinkphp\library\think\route\Rule.php	/^                    $query  = strpos($model, '\\\\') ? $model::where($where) : Container::get('app')->model($model)->where($where);$/;"	v
request	thinkphp\library\think\route\Rule.php	/^        $request          = Container::get('request');$/;"	v
response	thinkphp\library\think\route\Rule.php	/^    public function response($response)$/;"	f
result	thinkphp\library\think\route\Rule.php	/^                    $result = $query->failException($exception)->find();$/;"	v
result	thinkphp\library\think\route\Rule.php	/^                $result = $hook->exec($behavior);$/;"	v
result	thinkphp\library\think\route\Rule.php	/^                $result = Container::getInstance()->invokeFunction($val, $matches);$/;"	v
result	thinkphp\library\think\route\Rule.php	/^            $result            = new ControllerDispatch(implode('\/', $route), $var);$/;"	v
result	thinkphp\library\think\route\Rule.php	/^            $result           = new CallbackDispatch($method, $var);$/;"	v
result	thinkphp\library\think\route\Rule.php	/^            $result = $hook->exec($behavior);$/;"	v
result	thinkphp\library\think\route\Rule.php	/^            $result = $this->parseModule($route);$/;"	v
result	thinkphp\library\think\route\Rule.php	/^            $result = new CallbackDispatch($route);$/;"	v
result	thinkphp\library\think\route\Rule.php	/^            $result = new RedirectDispatch($route, [], isset($option['status']) ? $option['status'] : 301);$/;"	v
result	thinkphp\library\think\route\Rule.php	/^            $result = new ResponseDispatch($route);$/;"	v
route	thinkphp\library\think\route\Rule.php	/^                    $route = str_replace(':' . $key, $val, $route);$/;"	v
route	thinkphp\library\think\route\Rule.php	/^            $route             = substr($route, 1);$/;"	v
route	thinkphp\library\think\route\Rule.php	/^            $route            = str_replace('\/', '@', implode('\/', $path));$/;"	v
route	thinkphp\library\think\route\Rule.php	/^            $route = $option['prefix'] . $route;$/;"	v
router	thinkphp\library\think\route\Rule.php	/^    protected $router;$/;"	v
rule	thinkphp\library\think\route\Rule.php	/^            $rule = explode('\/', $rule);$/;"	v
rule	thinkphp\library\think\route\Rule.php	/^    public function pattern($name, $rule = '')$/;"	v
scene	thinkphp\library\think\route\Rule.php	/^    public function validate($validate, $scene = null, $message = [], $batch = false)$/;"	v
tag	thinkphp\library\think\route\Rule.php	/^            $tag    = null;$/;"	v
url	thinkphp\library\think\route\Rule.php	/^        $url = str_replace('|', '\/', $url);$/;"	v
url	thinkphp\library\think\route\Rule.php	/^        $url = trim($url, '\/');$/;"	v
v	thinkphp\library\think\route\Rule.php	/^            $v = Container::get('app')->validate($validate);$/;"	v
v	thinkphp\library\think\route\Rule.php	/^            $v = Container::get('app')->validate();$/;"	v
validate	thinkphp\library\think\route\Rule.php	/^    public function validate($validate, $scene = null, $message = [], $batch = false)$/;"	f
value	thinkphp\library\think\route\Rule.php	/^    public function option($name, $value = '')$/;"	v
var	thinkphp\library\think\route\Rule.php	/^                $var           = substr($item, 1);$/;"	v
var	thinkphp\library\think\route\Rule.php	/^        $var = [];$/;"	v
where	thinkphp\library\think\route\Rule.php	/^                $where = [];$/;"	v
RuleGroup	thinkphp\library\think\route\RuleGroup.php	/^class RuleGroup extends Rule$/;"	c
__construct	thinkphp\library\think\route\RuleGroup.php	/^    public function __construct(Route $router, RuleGroup $group = null, $name = '', $rule = [], $option = [], $pattern = [])$/;"	f
addRule	thinkphp\library\think\route\RuleGroup.php	/^    public function addRule($rule, $method = '*')$/;"	f
auto	thinkphp\library\think\route\RuleGroup.php	/^                $this->auto = $rule;$/;"	v
auto	thinkphp\library\think\route\RuleGroup.php	/^    protected $auto;$/;"	v
check	thinkphp\library\think\route\RuleGroup.php	/^    public function check($request, $url, $depr = '\/', $completeMatch = false)$/;"	f
completeMatch	thinkphp\library\think\route\RuleGroup.php	/^            $completeMatch = $this->option['complete_match'];$/;"	v
depr	thinkphp\library\think\route\RuleGroup.php	/^    public function check($request, $url, $depr = '\/', $completeMatch = false)$/;"	v
dispatch	thinkphp\library\think\route\RuleGroup.php	/^            $dispatch = $this->checkAfter($this->option['after']);$/;"	v
getRules	thinkphp\library\think\route\RuleGroup.php	/^    public function getRules($method = '')$/;"	f
group	thinkphp\library\think\route\RuleGroup.php	/^            $group = $this->router->getGroup();$/;"	v
group	thinkphp\library\think\route\RuleGroup.php	/^    public function __construct(Route $router, RuleGroup $group = null, $name = '', $rule = [], $option = [], $pattern = [])$/;"	v
item	thinkphp\library\think\route\RuleGroup.php	/^            $item   = $rules[$url];$/;"	v
key	thinkphp\library\think\route\RuleGroup.php	/^        foreach ($rules as $key => $item) {$/;"	v
method	thinkphp\library\think\route\RuleGroup.php	/^        $method = strtolower($request->method());$/;"	v
method	thinkphp\library\think\route\RuleGroup.php	/^    public function addRule($rule, $method = '*')$/;"	v
miss	thinkphp\library\think\route\RuleGroup.php	/^                $this->miss = $rule;$/;"	v
miss	thinkphp\library\think\route\RuleGroup.php	/^    protected $miss;$/;"	v
name	thinkphp\library\think\route\RuleGroup.php	/^        $name = $rule->getName();$/;"	v
name	thinkphp\library\think\route\RuleGroup.php	/^        $this->name    = trim($name, '\/');$/;"	v
option	thinkphp\library\think\route\RuleGroup.php	/^            $this->option = array_merge($this->parent->getOption(), $this->option);$/;"	v
option	thinkphp\library\think\route\RuleGroup.php	/^        $this->option  = $option;$/;"	v
parent	thinkphp\library\think\route\RuleGroup.php	/^        $this->parent  = $group;$/;"	v
pattern	thinkphp\library\think\route\RuleGroup.php	/^        $this->pattern = $pattern;$/;"	v
prefix	thinkphp\library\think\route\RuleGroup.php	/^            $prefix = $this->parent->getOption('prefix') . $prefix;$/;"	v
prefix	thinkphp\library\think\route\RuleGroup.php	/^    public function prefix($prefix)$/;"	f
result	thinkphp\library\think\route\RuleGroup.php	/^            $result = $item->check($request, $url, $depr, $completeMatch);$/;"	v
result	thinkphp\library\think\route\RuleGroup.php	/^            $result = $this->parseRule($request, '', $this->miss->getRoute(), $url, $this->miss->getOption());$/;"	v
result	thinkphp\library\think\route\RuleGroup.php	/^            $result = false;$/;"	v
result	thinkphp\library\think\route\RuleGroup.php	/^            $result = new UrlDispatch($this->auto->getRoute() . '\/' . $url, ['depr' => $depr, 'auto_search' => false]);$/;"	v
router	thinkphp\library\think\route\RuleGroup.php	/^        $this->router  = $router;$/;"	v
rule	thinkphp\library\think\route\RuleGroup.php	/^            $this->rule = null;$/;"	v
rule	thinkphp\library\think\route\RuleGroup.php	/^        $this->rule    = $rule;$/;"	v
rule	thinkphp\library\think\route\RuleGroup.php	/^        $this->rule = $rule;$/;"	v
rule	thinkphp\library\think\route\RuleGroup.php	/^    protected $rule;$/;"	v
rules	thinkphp\library\think\route\RuleGroup.php	/^        $rules  = array_merge($this->rules['*'], $this->rules[$method]);$/;"	v
rules	thinkphp\library\think\route\RuleGroup.php	/^    protected $rules = [$/;"	v
setRule	thinkphp\library\think\route\RuleGroup.php	/^    public function setRule($rule)$/;"	f
RuleItem	thinkphp\library\think\route\RuleItem.php	/^class RuleItem extends Rule$/;"	c
__construct	thinkphp\library\think\route\RuleItem.php	/^    public function __construct(Route $router, RuleGroup $group, $name, $route, $method = '*', $option = [], $pattern = [])$/;"	f
check	thinkphp\library\think\route\RuleItem.php	/^    public function check($request, $url, $depr = '\/', $completeMatch = false)$/;"	f
checkRule	thinkphp\library\think\route\RuleItem.php	/^    private function checkRule($request, $url, $depr, $completeMatch = false, $option = [])$/;"	f
completeMatch	thinkphp\library\think\route\RuleItem.php	/^            $completeMatch = $option['complete_match'];$/;"	v
completeMatch	thinkphp\library\think\route\RuleItem.php	/^    private function checkRule($request, $url, $depr, $completeMatch = false, $option = [])$/;"	v
depr	thinkphp\library\think\route\RuleItem.php	/^    public function check($request, $url, $depr = '\/', $completeMatch = false)$/;"	v
getRoute	thinkphp\library\think\route\RuleItem.php	/^    public function getRoute()$/;"	f
isAuto	thinkphp\library\think\route\RuleItem.php	/^    public function isAuto()$/;"	f
isMiss	thinkphp\library\think\route\RuleItem.php	/^    public function isMiss()$/;"	f
k	thinkphp\library\think\route\RuleItem.php	/^                    foreach ($value as $k => $name) {$/;"	v
key	thinkphp\library\think\route\RuleItem.php	/^        foreach ($m2 as $key => $val) {$/;"	v
len1	thinkphp\library\think\route\RuleItem.php	/^        $len1 = substr_count($url, '|');$/;"	v
len2	thinkphp\library\think\route\RuleItem.php	/^        $len2 = substr_count($this->name, '\/');$/;"	v
m1	thinkphp\library\think\route\RuleItem.php	/^        $m1 = explode('|', $url);$/;"	v
m2	thinkphp\library\think\route\RuleItem.php	/^        $m2 = explode('\/', $this->name);$/;"	v
match	thinkphp\library\think\route\RuleItem.php	/^            if (false !== $match = $this->match($url, $pattern)) {$/;"	v
match	thinkphp\library\think\route\RuleItem.php	/^    private function match($url, $pattern)$/;"	f
merge	thinkphp\library\think\route\RuleItem.php	/^        $merge = !empty($option['merge_extra_vars']) ? true : false;$/;"	v
method	thinkphp\library\think\route\RuleItem.php	/^        $this->method  = $method;$/;"	v
method	thinkphp\library\think\route\RuleItem.php	/^    protected $method;$/;"	v
method	thinkphp\library\think\route\RuleItem.php	/^    public function __construct(Route $router, RuleGroup $group, $name, $route, $method = '*', $option = [], $pattern = [])$/;"	v
name	thinkphp\library\think\route\RuleItem.php	/^                        $name      = substr($name, 0, -1);$/;"	v
name	thinkphp\library\think\route\RuleItem.php	/^                $name = substr($val, 1);$/;"	v
name	thinkphp\library\think\route\RuleItem.php	/^    protected $name;$/;"	v
option	thinkphp\library\think\route\RuleItem.php	/^        $option = array_merge($this->parent->getOption(), $this->option);$/;"	v
option	thinkphp\library\think\route\RuleItem.php	/^        $this->option  = $option;$/;"	v
optional	thinkphp\library\think\route\RuleItem.php	/^                $optional = false;$/;"	v
optional	thinkphp\library\think\route\RuleItem.php	/^                $optional = true;$/;"	v
parent	thinkphp\library\think\route\RuleItem.php	/^        $this->parent  = $group;$/;"	v
pattern	thinkphp\library\think\route\RuleItem.php	/^            $pattern = array_merge($this->parent->getPattern(), $this->pattern);$/;"	v
pattern	thinkphp\library\think\route\RuleItem.php	/^        $this->pattern = $pattern;$/;"	v
replace	thinkphp\library\think\route\RuleItem.php	/^                $replace = [];$/;"	v
result	thinkphp\library\think\route\RuleItem.php	/^                        $result = call_user_func_array($pattern[$name], [$m1[$key]]);$/;"	v
route	thinkphp\library\think\route\RuleItem.php	/^        $this->route   = $route;$/;"	v
route	thinkphp\library\think\route\RuleItem.php	/^    protected $route;$/;"	v
router	thinkphp\library\think\route\RuleItem.php	/^        $this->router  = $router;$/;"	v
rule	thinkphp\library\think\route\RuleItem.php	/^            $rule = substr($rule, 0, -1);$/;"	v
setRule	thinkphp\library\think\route\RuleItem.php	/^    public function setRule($rule)$/;"	f
url	thinkphp\library\think\route\RuleItem.php	/^            $url = implode('|', explode($depr, $url, $len2 + 1));$/;"	v
url	thinkphp\library\think\route\RuleItem.php	/^            $url = preg_replace('\/\\.(' . $request->ext() . ')$\/i', '', $url);$/;"	v
url	thinkphp\library\think\route\RuleItem.php	/^            $url = str_replace('|', $depr, $url);$/;"	v
url	thinkphp\library\think\route\RuleItem.php	/^            $url = str_replace(['|', $option['param_depr']], [$depr, '|'], $url);$/;"	v
val	thinkphp\library\think\route\RuleItem.php	/^                $val      = substr($val, 1, -1);$/;"	v
val	thinkphp\library\think\route\RuleItem.php	/^                $val = str_replace($matches[0], $replace, $val);$/;"	v
value	thinkphp\library\think\route\RuleItem.php	/^                $value   = [];$/;"	v
var	thinkphp\library\think\route\RuleItem.php	/^        $var = [];$/;"	v
Callback	thinkphp\library\think\route\dispatch\Callback.php	/^class Callback extends Dispatch$/;"	c
run	thinkphp\library\think\route\dispatch\Callback.php	/^    public function run()$/;"	f
vars	thinkphp\library\think\route\dispatch\Callback.php	/^        $vars = array_merge($this->app['request']->param(), $this->param);$/;"	v
Controller	thinkphp\library\think\route\dispatch\Controller.php	/^class Controller extends Dispatch$/;"	c
run	thinkphp\library\think\route\dispatch\Controller.php	/^    public function run()$/;"	f
vars	thinkphp\library\think\route\dispatch\Controller.php	/^        $vars = array_merge($this->app['request']->param(), $this->param);$/;"	v
Module	thinkphp\library\think\route\dispatch\Module.php	/^class Module extends Dispatch$/;"	c
action	thinkphp\library\think\route\dispatch\Module.php	/^        $action = $actionName . $this->app->config('app.action_suffix');$/;"	v
actionName	thinkphp\library\think\route\dispatch\Module.php	/^        $actionName = $convert ? strtolower($actionName) : $actionName;$/;"	v
actionName	thinkphp\library\think\route\dispatch\Module.php	/^        $actionName = strip_tags($result[2] ?: $this->app->config('app.default_action'));$/;"	v
available	thinkphp\library\think\route\dispatch\Module.php	/^                    $available = true;$/;"	v
available	thinkphp\library\think\route\dispatch\Module.php	/^                $available = true;$/;"	v
available	thinkphp\library\think\route\dispatch\Module.php	/^            $available = false;$/;"	v
bind	thinkphp\library\think\route\dispatch\Module.php	/^            $bind      = $this->app['route']->getBind();$/;"	v
call	thinkphp\library\think\route\dispatch\Module.php	/^            $call = [$instance, $action];$/;"	v
call	thinkphp\library\think\route\dispatch\Module.php	/^            $call = [$instance, '_empty'];$/;"	v
controller	thinkphp\library\think\route\dispatch\Module.php	/^        $controller = $convert ? strtolower($controller) : $controller;$/;"	v
controller	thinkphp\library\think\route\dispatch\Module.php	/^        $controller = strip_tags($result[1] ?: $this->app->config('app.default_controller'));$/;"	v
convert	thinkphp\library\think\route\dispatch\Module.php	/^        $convert = is_bool($this->convert) ? $this->convert : $this->app->config('app.url_convert');$/;"	v
instance	thinkphp\library\think\route\dispatch\Module.php	/^            $instance = $this->app->controller($controller,$/;"	v
module	thinkphp\library\think\route\dispatch\Module.php	/^                    $module    = $bindModule;$/;"	v
module	thinkphp\library\think\route\dispatch\Module.php	/^                $module    = $this->app->config('app.empty_module');$/;"	v
module	thinkphp\library\think\route\dispatch\Module.php	/^            $module    = strip_tags(strtolower($result[0] ?: $this->app->config('app.default_module')));$/;"	v
module	thinkphp\library\think\route\dispatch\Module.php	/^            $module = '';$/;"	v
result	thinkphp\library\think\route\dispatch\Module.php	/^            $result = explode('\/', $result);$/;"	v
result	thinkphp\library\think\route\dispatch\Module.php	/^        $result = $this->dispatch;$/;"	v
run	thinkphp\library\think\route\dispatch\Module.php	/^    public function run()$/;"	f
vars	thinkphp\library\think\route\dispatch\Module.php	/^            $vars = $this->app->config('app.url_param_type')$/;"	v
vars	thinkphp\library\think\route\dispatch\Module.php	/^            $vars = [$actionName];$/;"	v
Redirect	thinkphp\library\think\route\dispatch\Redirect.php	/^class Redirect extends Dispatch$/;"	c
run	thinkphp\library\think\route\dispatch\Redirect.php	/^    public function run()$/;"	f
Response	thinkphp\library\think\route\dispatch\Response.php	/^class Response extends Dispatch$/;"	c
run	thinkphp\library\think\route\dispatch\Response.php	/^    public function run()$/;"	f
Url	thinkphp\library\think\route\dispatch\Url.php	/^class Url extends Dispatch$/;"	c
action	thinkphp\library\think\route\dispatch\Url.php	/^        $action = !empty($path) ? array_shift($path) : null;$/;"	v
autoFindController	thinkphp\library\think\route\dispatch\Url.php	/^    protected function autoFindController($module, &$path)$/;"	f
bind	thinkphp\library\think\route\dispatch\Url.php	/^            $bind = str_replace('\/', $depr, $bind);$/;"	v
bind	thinkphp\library\think\route\dispatch\Url.php	/^        $bind   = $router->getBind();$/;"	v
controller	thinkphp\library\think\route\dispatch\Url.php	/^            $controller = !empty($path) ? array_shift($path) : null;$/;"	v
controller	thinkphp\library\think\route\dispatch\Url.php	/^            $controller = $this->autoFindController($module, $path);$/;"	v
controller	thinkphp\library\think\route\dispatch\Url.php	/^            $controller = array_shift($path);$/;"	v
controller	thinkphp\library\think\route\dispatch\Url.php	/^            $controller = implode('.', $item);$/;"	v
depr	thinkphp\library\think\route\dispatch\Url.php	/^        $depr   = $this->param['depr'];$/;"	v
dir	thinkphp\library\think\route\dispatch\Url.php	/^        $dir    = $this->app->getAppPath() . ($module ? $module . '\/' : '') . $this->app->config('url_controller_layer');$/;"	v
file	thinkphp\library\think\route\dispatch\Url.php	/^            $file   = $dir . '\/' . str_replace('.', '\/', $val) . $suffix . '.php';$/;"	v
file	thinkphp\library\think\route\dispatch\Url.php	/^            $file   = pathinfo($file, PATHINFO_DIRNAME) . '\/' . Loader::parseName(pathinfo($file, PATHINFO_FILENAME), 1) . '.php';$/;"	v
find	thinkphp\library\think\route\dispatch\Url.php	/^                $find = true;$/;"	v
find	thinkphp\library\think\route\dispatch\Url.php	/^        $find = false;$/;"	v
hasDefinedRoute	thinkphp\library\think\route\dispatch\Url.php	/^    protected function hasDefinedRoute($route, $bind)$/;"	f
info	thinkphp\library\think\route\dispatch\Url.php	/^            $info = parse_url($url);$/;"	v
item	thinkphp\library\think\route\dispatch\Url.php	/^        $item = [];$/;"	v
module	thinkphp\library\think\route\dispatch\Url.php	/^        $module = $this->app->config('app_multi_module') ? array_shift($path) : null;$/;"	v
module	thinkphp\library\think\route\dispatch\Url.php	/^        if (empty($module) || $module == $bind) {$/;"	v
name	thinkphp\library\think\route\dispatch\Url.php	/^        $name = strtolower($module . '\/' . Loader::parseName($controller, 1) . '\/' . $action);$/;"	v
name2	thinkphp\library\think\route\dispatch\Url.php	/^            $name2 = strtolower(Loader::parseName($controller, 1) . '\/' . $action);$/;"	v
name2	thinkphp\library\think\route\dispatch\Url.php	/^        $name2 = '';$/;"	v
parseUrl	thinkphp\library\think\route\dispatch\Url.php	/^    protected function parseUrl($url)$/;"	f
parseUrlPath	thinkphp\library\think\route\dispatch\Url.php	/^    private function parseUrlPath($url)$/;"	f
path	thinkphp\library\think\route\dispatch\Url.php	/^            $path       = array_slice($path, count($item));$/;"	v
path	thinkphp\library\think\route\dispatch\Url.php	/^            $path = [$url];$/;"	v
path	thinkphp\library\think\route\dispatch\Url.php	/^            $path = explode('\/', $info['path']);$/;"	v
path	thinkphp\library\think\route\dispatch\Url.php	/^            $path = explode('\/', $url);$/;"	v
result	thinkphp\library\think\route\dispatch\Url.php	/^        $result = $this->parseUrl($url);$/;"	v
route	thinkphp\library\think\route\dispatch\Url.php	/^        $route = [$module, $controller, $action];$/;"	v
router	thinkphp\library\think\route\dispatch\Url.php	/^        $router = $this->app['route'];$/;"	v
run	thinkphp\library\think\route\dispatch\Url.php	/^    public function run()$/;"	f
suffix	thinkphp\library\think\route\dispatch\Url.php	/^        $suffix = $this->app->getSuffix() || $this->app->config('controller_suffix') ? ucfirst($this->app->config('url_controller_layer')) : '';$/;"	v
url	thinkphp\library\think\route\dispatch\Url.php	/^            $url = $bind . ('.' != substr($bind, -1) ? $depr : '') . ltrim($url, $depr);$/;"	v
url	thinkphp\library\think\route\dispatch\Url.php	/^        $url    = str_replace($this->param['depr'], '|', $this->dispatch);$/;"	v
url	thinkphp\library\think\route\dispatch\Url.php	/^        $url = str_replace('|', '\/', $url);$/;"	v
url	thinkphp\library\think\route\dispatch\Url.php	/^        $url = trim($url, '\/');$/;"	v
var	thinkphp\library\think\route\dispatch\Url.php	/^        $var = [];$/;"	v
Memcache	thinkphp\library\think\session\driver\Memcache.php	/^class Memcache extends SessionHandler$/;"	c
__construct	thinkphp\library\think\session\driver\Memcache.php	/^    public function __construct($config = [])$/;"	f
close	thinkphp\library\think\session\driver\Memcache.php	/^    public function close()$/;"	f
config	thinkphp\library\think\session\driver\Memcache.php	/^        $this->config = array_merge($this->config, $config);$/;"	v
config	thinkphp\library\think\session\driver\Memcache.php	/^    protected $config  = [$/;"	v
destroy	thinkphp\library\think\session\driver\Memcache.php	/^    public function destroy($sessID)$/;"	f
gc	thinkphp\library\think\session\driver\Memcache.php	/^    public function gc($sessMaxLifeTime)$/;"	f
handler	thinkphp\library\think\session\driver\Memcache.php	/^        $this->handler = new \\Memcache;$/;"	v
handler	thinkphp\library\think\session\driver\Memcache.php	/^        $this->handler = null;$/;"	v
handler	thinkphp\library\think\session\driver\Memcache.php	/^    protected $handler = null;$/;"	v
hosts	thinkphp\library\think\session\driver\Memcache.php	/^        $hosts = explode(',', $this->config['host']);$/;"	v
i	thinkphp\library\think\session\driver\Memcache.php	/^        foreach ((array) $hosts as $i => $host) {$/;"	v
open	thinkphp\library\think\session\driver\Memcache.php	/^    public function open($savePath, $sessName)$/;"	f
port	thinkphp\library\think\session\driver\Memcache.php	/^            $port = isset($ports[$i]) ? $ports[$i] : $ports[0];$/;"	v
ports	thinkphp\library\think\session\driver\Memcache.php	/^        $ports = explode(',', $this->config['port']);$/;"	v
read	thinkphp\library\think\session\driver\Memcache.php	/^    public function read($sessID)$/;"	f
write	thinkphp\library\think\session\driver\Memcache.php	/^    public function write($sessID, $sessData)$/;"	f
Memcached	thinkphp\library\think\session\driver\Memcached.php	/^class Memcached extends SessionHandler$/;"	c
__construct	thinkphp\library\think\session\driver\Memcached.php	/^    public function __construct($config = [])$/;"	f
close	thinkphp\library\think\session\driver\Memcached.php	/^    public function close()$/;"	f
config	thinkphp\library\think\session\driver\Memcached.php	/^        $this->config = array_merge($this->config, $config);$/;"	v
config	thinkphp\library\think\session\driver\Memcached.php	/^    protected $config  = [$/;"	v
destroy	thinkphp\library\think\session\driver\Memcached.php	/^    public function destroy($sessID)$/;"	f
gc	thinkphp\library\think\session\driver\Memcached.php	/^    public function gc($sessMaxLifeTime)$/;"	f
handler	thinkphp\library\think\session\driver\Memcached.php	/^        $this->handler = new \\Memcached;$/;"	v
handler	thinkphp\library\think\session\driver\Memcached.php	/^        $this->handler = null;$/;"	v
handler	thinkphp\library\think\session\driver\Memcached.php	/^    protected $handler = null;$/;"	v
hosts	thinkphp\library\think\session\driver\Memcached.php	/^        $hosts = explode(',', $this->config['host']);$/;"	v
i	thinkphp\library\think\session\driver\Memcached.php	/^        foreach ((array) $hosts as $i => $host) {$/;"	v
open	thinkphp\library\think\session\driver\Memcached.php	/^    public function open($savePath, $sessName)$/;"	f
ports	thinkphp\library\think\session\driver\Memcached.php	/^        $ports = explode(',', $this->config['port']);$/;"	v
read	thinkphp\library\think\session\driver\Memcached.php	/^    public function read($sessID)$/;"	f
servers	thinkphp\library\think\session\driver\Memcached.php	/^        $servers = [];$/;"	v
write	thinkphp\library\think\session\driver\Memcached.php	/^    public function write($sessID, $sessData)$/;"	f
Redis	thinkphp\library\think\session\driver\Redis.php	/^class Redis extends SessionHandler$/;"	c
__construct	thinkphp\library\think\session\driver\Redis.php	/^    public function __construct($config = [])$/;"	f
close	thinkphp\library\think\session\driver\Redis.php	/^    public function close()$/;"	f
config	thinkphp\library\think\session\driver\Redis.php	/^        $this->config = array_merge($this->config, $config);$/;"	v
config	thinkphp\library\think\session\driver\Redis.php	/^    protected $config  = [$/;"	v
destroy	thinkphp\library\think\session\driver\Redis.php	/^    public function destroy($sessID)$/;"	f
func	thinkphp\library\think\session\driver\Redis.php	/^        $func = $this->config['persistent'] ? 'pconnect' : 'connect';$/;"	v
gc	thinkphp\library\think\session\driver\Redis.php	/^    public function gc($sessMaxLifeTime)$/;"	f
handler	thinkphp\library\think\session\driver\Redis.php	/^        $this->handler = new \\Redis;$/;"	v
handler	thinkphp\library\think\session\driver\Redis.php	/^        $this->handler = null;$/;"	v
handler	thinkphp\library\think\session\driver\Redis.php	/^    protected $handler = null;$/;"	v
open	thinkphp\library\think\session\driver\Redis.php	/^    public function open($savePath, $sessName)$/;"	f
read	thinkphp\library\think\session\driver\Redis.php	/^    public function read($sessID)$/;"	f
write	thinkphp\library\think\session\driver\Redis.php	/^    public function write($sessID, $sessData)$/;"	f
TagLib	thinkphp\library\think\template\TagLib.php	/^class TagLib$/;"	c
__construct	thinkphp\library\think\template\TagLib.php	/^    public function __construct($template)$/;"	f
_taglibs	thinkphp\library\think\template\TagLib.php	/^                static $_taglibs;$/;"	v
alias	thinkphp\library\think\template\TagLib.php	/^                    $alias = $lib . $name != $node['name'] ? ($lib ? strstr($node['name'], $lib) : $node['name']) : '';$/;"	v
alias	thinkphp\library\think\template\TagLib.php	/^                $alias = $lib . $name != $matches[1] ? ($lib ? strstr($matches[1], $lib) : $matches[1]) : '';$/;"	v
alias	thinkphp\library\think\template\TagLib.php	/^    public function parseAttr($str, $name, $alias = '')$/;"	v
array	thinkphp\library\think\template\TagLib.php	/^                        $array = (array) $val['alias'];$/;"	v
array	thinkphp\library\think\template\TagLib.php	/^                $array = (array) $val['alias'];$/;"	v
attrs	thinkphp\library\think\template\TagLib.php	/^                    $attrs  = $this->parseAttr($node['begin'][0], $name, $alias);$/;"	v
attrs	thinkphp\library\think\template\TagLib.php	/^                $attrs  = $this->parseAttr($matches[0], $name, $alias);$/;"	v
autoBuildVar	thinkphp\library\think\template\TagLib.php	/^    public function autoBuildVar(&$name)$/;"	f
begin	thinkphp\library\think\template\TagLib.php	/^                                $begin = array_pop($beginArray);$/;"	v
begin	thinkphp\library\think\template\TagLib.php	/^                            $begin = end($beginArray);$/;"	v
begin	thinkphp\library\think\template\TagLib.php	/^                    $begin = array_pop($beginArray);$/;"	v
begin	thinkphp\library\think\template\TagLib.php	/^        $begin   = $this->tpl->config('taglib_begin');$/;"	v
beginArray	thinkphp\library\think\template\TagLib.php	/^                $beginArray = [];$/;"	v
break	thinkphp\library\think\template\TagLib.php	/^            $break = '<!--###break###--!>';$/;"	v
close	thinkphp\library\think\template\TagLib.php	/^            $close                      = !isset($val['close']) || $val['close'] ? 1 : 0;$/;"	v
comparison	thinkphp\library\think\template\TagLib.php	/^    protected $comparison = [' nheq ' => ' !== ', ' heq ' => ' === ', ' neq ' => ' != ', ' eq ' => ' == ', ' egt ' => ' >= ', ' gt ' => ' > ', ' elt ' => ' <= ', ' lt ' => ' < '];$/;"	v
condition	thinkphp\library\think\template\TagLib.php	/^            $condition = ' ' . substr(strstr($condition, ':'), 1);$/;"	v
condition	thinkphp\library\think\template\TagLib.php	/^        $condition = str_ireplace(array_keys($this->comparison), array_values($this->comparison), $condition);$/;"	v
content	thinkphp\library\think\template\TagLib.php	/^                                $content = substr_replace($content, $begin['str'], $begin['pos'], $begin['len']);$/;"	v
content	thinkphp\library\think\template\TagLib.php	/^                        $content = substr_replace($content, $replace[1], $node['end'][1], strlen($node['end'][0]));$/;"	v
content	thinkphp\library\think\template\TagLib.php	/^                    $content = substr_replace($content, $begin['str'], $begin['pos'], $begin['len']);$/;"	v
content	thinkphp\library\think\template\TagLib.php	/^            $content = preg_replace_callback($regex, function ($matches) use (&$tags, &$lib) {$/;"	v
end	thinkphp\library\think\template\TagLib.php	/^        $end     = $this->tpl->config('taglib_end');$/;"	v
flag	thinkphp\library\think\template\TagLib.php	/^        $flag = substr($name, 0, 1);$/;"	v
getRegex	thinkphp\library\think\template\TagLib.php	/^    public function getRegex($tags, $close)$/;"	f
getTags	thinkphp\library\think\template\TagLib.php	/^    public function getTags()$/;"	f
key	thinkphp\library\think\template\TagLib.php	/^                foreach ($this->tags as $key => $val) {$/;"	v
key	thinkphp\library\think\template\TagLib.php	/^            foreach ($matches['name'] as $key => $val) {$/;"	v
lib	thinkphp\library\think\template\TagLib.php	/^        $lib  = $lib ? strtolower($lib) . ':' : '';$/;"	v
lib	thinkphp\library\think\template\TagLib.php	/^    public function parseTag(&$content, $lib = '')$/;"	v
method	thinkphp\library\think\template\TagLib.php	/^                    $method = 'tag' . $name;$/;"	v
method	thinkphp\library\think\template\TagLib.php	/^                $method = 'tag' . $name;$/;"	v
must	thinkphp\library\think\template\TagLib.php	/^                $must = explode(',', $tag['must']);$/;"	v
name	thinkphp\library\think\template\TagLib.php	/^                        $name = strtolower($match[2][0]);$/;"	v
name	thinkphp\library\think\template\TagLib.php	/^                    $name  = $tags[1][$node['name']];$/;"	v
name	thinkphp\library\think\template\TagLib.php	/^                $name  = $tags[0][strtolower($matches[1])];$/;"	v
name	thinkphp\library\think\template\TagLib.php	/^            $name = '$' . $name;$/;"	v
name	thinkphp\library\think\template\TagLib.php	/^            $name = substr($name, 1);$/;"	v
name	thinkphp\library\think\template\TagLib.php	/^        foreach ($this->tags as $name => $val) {$/;"	v
nodes	thinkphp\library\think\template\TagLib.php	/^            $nodes = [];$/;"	v
parse	thinkphp\library\think\template\TagLib.php	/^    protected $parse = [];$/;"	v
parseAttr	thinkphp\library\think\template\TagLib.php	/^    public function parseAttr($str, $name, $alias = '')$/;"	f
parseCondition	thinkphp\library\think\template\TagLib.php	/^    public function parseCondition($condition)$/;"	f
parseTag	thinkphp\library\think\template\TagLib.php	/^    public function parseTag(&$content, $lib = '')$/;"	f
pos	thinkphp\library\think\template\TagLib.php	/^                foreach ($nodes as $pos => $node) {$/;"	v
regex	thinkphp\library\think\template\TagLib.php	/^                $regex = $begin . '(' . $tagName . ')\\b(?>(?:(?!' . $end . ').)*)' . $end;$/;"	v
regex	thinkphp\library\think\template\TagLib.php	/^                $regex = $begin . '(' . $tagName . ')\\b(?>[^' . $end . ']*)' . $end;$/;"	v
regex	thinkphp\library\think\template\TagLib.php	/^                $regex = $begin . '(?:(' . $tagName . ')\\b(?>(?:(?!' . $end . ').)*)|\\\/(' . $tagName . '))' . $end;$/;"	v
regex	thinkphp\library\think\template\TagLib.php	/^                $regex = $begin . '(?:(' . $tagName . ')\\b(?>[^' . $end . ']*)|\\\/(' . $tagName . '))' . $end;$/;"	v
regex	thinkphp\library\think\template\TagLib.php	/^            $regex   = $this->getRegex(array_keys($tags[0]), 0);$/;"	v
regex	thinkphp\library\think\template\TagLib.php	/^            $regex = $this->getRegex(array_keys($tags[1]), 1);$/;"	v
regex	thinkphp\library\think\template\TagLib.php	/^        $regex  = '\/\\s+(?>(?P<name>[\\w-]+)\\s*)=(?>\\s*)([\\"\\'])(?P<value>(?:(?!\\\\2).)*)\\\\2\/is';$/;"	v
replace	thinkphp\library\think\template\TagLib.php	/^                    $replace = explode($break, $this->$method($attrs, $break));$/;"	v
result	thinkphp\library\think\template\TagLib.php	/^        $result = [];$/;"	v
right	thinkphp\library\think\template\TagLib.php	/^                $right = [];$/;"	v
single	thinkphp\library\think\template\TagLib.php	/^        $single  = strlen(ltrim($begin, '\\\\')) == 1 && strlen(ltrim($end, '\\\\')) == 1 ? true : false;$/;"	v
tag	thinkphp\library\think\template\TagLib.php	/^                            $tag           = $val;$/;"	v
tag	thinkphp\library\think\template\TagLib.php	/^                $tag = $this->tags[$name];$/;"	v
tagLib	thinkphp\library\think\template\TagLib.php	/^    protected $tagLib = '';$/;"	v
tagList	thinkphp\library\think\template\TagLib.php	/^    protected $tagList = [];$/;"	v
tagName	thinkphp\library\think\template\TagLib.php	/^        $tagName = is_array($tags) ? implode('|', $tags) : $tags;$/;"	v
tags	thinkphp\library\think\template\TagLib.php	/^        $tags = [];$/;"	v
tags	thinkphp\library\think\template\TagLib.php	/^    protected $tags = []; \/\/ 标签定义$/;"	v
tpl	thinkphp\library\think\template\TagLib.php	/^        $this->tpl = $template;$/;"	v
tpl	thinkphp\library\think\template\TagLib.php	/^    protected $tpl;$/;"	v
type	thinkphp\library\think\template\TagLib.php	/^                            $type          = !empty($array[1]) ? $array[1] : 'type';$/;"	v
type	thinkphp\library\think\template\TagLib.php	/^                    $type          = !empty($tag['alias'][1]) ? $tag['alias'][1] : 'type';$/;"	v
valid	thinkphp\library\think\template\TagLib.php	/^    protected $valid = false;$/;"	v
xml	thinkphp\library\think\template\TagLib.php	/^    protected $xml  = '';$/;"	v
File	thinkphp\library\think\template\driver\File.php	/^class File$/;"	c
check	thinkphp\library\think\template\driver\File.php	/^    public function check($cacheFile, $cacheTime)$/;"	f
dir	thinkphp\library\think\template\driver\File.php	/^        $dir = dirname($cacheFile);$/;"	v
read	thinkphp\library\think\template\driver\File.php	/^    public function read($cacheFile, $vars = [])$/;"	f
vars	thinkphp\library\think\template\driver\File.php	/^    public function read($cacheFile, $vars = [])$/;"	v
write	thinkphp\library\think\template\driver\File.php	/^    public function write($cacheFile, $content)$/;"	f
Cx	thinkphp\library\think\template\taglib\Cx.php	/^class Cx extends Taglib$/;"	c
__LIST__	thinkphp\library\think\template\taglib\Cx.php	/^            $parseStr .= ' $__LIST__ = ' . $name . ';';$/;"	v
array	thinkphp\library\think\template\taglib\Cx.php	/^        $array = explode(',', $file);$/;"	v
call	thinkphp\library\think\template\taglib\Cx.php	/^        $call = !empty($tag['call']) ? $tag['call'] : '';$/;"	v
comparison	thinkphp\library\think\template\taglib\Cx.php	/^                    $comparison = $value;$/;"	v
comparison	thinkphp\library\think\template\taglib\Cx.php	/^        $comparison = 'lt';$/;"	v
condition	thinkphp\library\think\template\taglib\Cx.php	/^        $condition = !empty($tag['expression']) ? $tag['expression'] : $tag['condition'];$/;"	v
condition	thinkphp\library\think\template\taglib\Cx.php	/^        $condition = $this->parseCondition($condition);$/;"	v
domain	thinkphp\library\think\template\taglib\Cx.php	/^        $domain = isset($tag['domain']) ? $tag['domain'] : 'false';$/;"	v
empty	thinkphp\library\think\template\taglib\Cx.php	/^        $empty  = isset($tag['empty']) ? $tag['empty'] : '';$/;"	v
end	thinkphp\library\think\template\taglib\Cx.php	/^                    $end = $value;$/;"	v
end	thinkphp\library\think\template\taglib\Cx.php	/^        $end        = 0;$/;"	v
endStr	thinkphp\library\think\template\taglib\Cx.php	/^            $endStr = '<?php endif; ?>';$/;"	v
endStr	thinkphp\library\think\template\taglib\Cx.php	/^        $endStr   = '';$/;"	v
expression	thinkphp\library\think\template\taglib\Cx.php	/^            $expression = $this->autoBuildVar($expression);$/;"	v
expression	thinkphp\library\think\template\taglib\Cx.php	/^            $expression = ltrim(rtrim($tag['expression'], ')'), '(');$/;"	v
file	thinkphp\library\think\template\taglib\Cx.php	/^        $file = isset($tag['file']) ? $tag['file'] : $tag['href'];$/;"	v
flag	thinkphp\library\think\template\taglib\Cx.php	/^            $flag  = substr($value, 0, 1);$/;"	v
flag	thinkphp\library\think\template\taglib\Cx.php	/^        $flag     = substr($name, 0, 1);$/;"	v
flag	thinkphp\library\think\template\taglib\Cx.php	/^        $flag  = substr($value, 0, 1);$/;"	v
flag	thinkphp\library\think\template\taglib\Cx.php	/^        $flag = substr($tag['value'], 0, 1);$/;"	v
flag	thinkphp\library\think\template\taglib\Cx.php	/^        $flag = substr($value, 0, 1);$/;"	v
fun	thinkphp\library\think\template\taglib\Cx.php	/^            $fun      = ('in' == $type) ? 'in_array' : '!in_array';$/;"	v
id	thinkphp\library\think\template\taglib\Cx.php	/^        $id     = $tag['id'];$/;"	v
index	thinkphp\library\think\template\taglib\Cx.php	/^            $index = $tag['index'];$/;"	v
isBreak	thinkphp\library\think\template\taglib\Cx.php	/^        $isBreak  = isset($tag['break']) ? $tag['break'] : '';$/;"	v
item	thinkphp\library\think\template\taglib\Cx.php	/^        $item   = !empty($tag['id']) ? $tag['id'] : $tag['item'];$/;"	v
key	thinkphp\library\think\template\taglib\Cx.php	/^        $key    = !empty($tag['key']) ? $tag['key'] : 'i';$/;"	v
key	thinkphp\library\think\template\taglib\Cx.php	/^        $key    = !empty($tag['key']) ? $tag['key'] : 'key';$/;"	v
key	thinkphp\library\think\template\taglib\Cx.php	/^        $parseStr .= 'foreach($__LIST__ as $key=>$' . $id . '): ';$/;"	v
key	thinkphp\library\think\template\taglib\Cx.php	/^        foreach ($tag as $key => $value) {$/;"	v
length	thinkphp\library\think\template\taglib\Cx.php	/^        $length = !empty($tag['length']) && is_numeric($tag['length']) ? intval($tag['length']) : 'null';$/;"	v
mod	thinkphp\library\think\template\taglib\Cx.php	/^                $mod = (int) $tag['mod'];$/;"	v
mod	thinkphp\library\think\template\taglib\Cx.php	/^        $mod    = isset($tag['mod']) ? $tag['mod'] : '2';$/;"	v
name	thinkphp\library\think\template\taglib\Cx.php	/^                    $name = $value;$/;"	v
name	thinkphp\library\think\template\taglib\Cx.php	/^            $name = $tag['value'];$/;"	v
name	thinkphp\library\think\template\taglib\Cx.php	/^            $name = $this->autoBuildVar($name);$/;"	v
name	thinkphp\library\think\template\taglib\Cx.php	/^            $name = $var;$/;"	v
name	thinkphp\library\think\template\taglib\Cx.php	/^            $name = '$_result';$/;"	v
name	thinkphp\library\think\template\taglib\Cx.php	/^            $name = 'isset(' . $name . ')';$/;"	v
name	thinkphp\library\think\template\taglib\Cx.php	/^        $name       = 'i';$/;"	v
name	thinkphp\library\think\template\taglib\Cx.php	/^        $name     = !empty($tag['expression']) ? $tag['expression'] : $tag['name'];$/;"	v
name	thinkphp\library\think\template\taglib\Cx.php	/^        $name     = $tag['name'];$/;"	v
name	thinkphp\library\think\template\taglib\Cx.php	/^        $name     = $this->autoBuildVar($name);$/;"	v
name	thinkphp\library\think\template\taglib\Cx.php	/^        $name   = $tag['name'];$/;"	v
name	thinkphp\library\think\template\taglib\Cx.php	/^        $name  = $tag['name'];$/;"	v
name	thinkphp\library\think\template\taglib\Cx.php	/^        $name  = $this->autoBuildVar($name);$/;"	v
name	thinkphp\library\think\template\taglib\Cx.php	/^        $name = !empty($tag['name']) ? $tag['name'] : 'func';$/;"	v
name	thinkphp\library\think\template\taglib\Cx.php	/^        $name = $this->autoBuildVar($name);$/;"	v
name	thinkphp\library\think\template\taglib\Cx.php	/^        $name = $this->autoBuildVar($tag['name']);$/;"	v
name	thinkphp\library\think\template\taglib\Cx.php	/^        $name = '\\'' . $tag['name'] . '\\'';$/;"	v
offset	thinkphp\library\think\template\taglib\Cx.php	/^        $offset = !empty($tag['offset']) && is_numeric($tag['offset']) ? intval($tag['offset']) : 0;$/;"	v
parseStr	thinkphp\library\think\template\taglib\Cx.php	/^            $parseStr   = '<?php foreach(' . $expression . '): ?>';$/;"	v
parseStr	thinkphp\library\think\template\taglib\Cx.php	/^            $parseStr = '<?php $_RANGE_VAR_=' . $str . ';if(' . $name . '<$_RANGE_VAR_[0] || ' . $name . '>$_RANGE_VAR_[1]):?>' . $content . '<?php endif; ?>';$/;"	v
parseStr	thinkphp\library\think\template\taglib\Cx.php	/^            $parseStr = '<?php $_RANGE_VAR_=' . $str . ';if(' . $name . '>= $_RANGE_VAR_[0] && ' . $name . '<= $_RANGE_VAR_[1]):?>' . $content . '<?php endif; ?>';$/;"	v
parseStr	thinkphp\library\think\template\taglib\Cx.php	/^            $parseStr = '<?php if(' . $fun . '((' . $name . '), ' . $str . ')): ?>' . $content . '<?php endif; ?>';$/;"	v
parseStr	thinkphp\library\think\template\taglib\Cx.php	/^        $parseStr  = '<?php elseif(' . $condition . '): ?>';$/;"	v
parseStr	thinkphp\library\think\template\taglib\Cx.php	/^        $parseStr  = '<?php if(' . $condition . '): ?>' . $content . '<?php endif; ?>';$/;"	v
parseStr	thinkphp\library\think\template\taglib\Cx.php	/^        $parseStr = '';$/;"	v
parseStr	thinkphp\library\think\template\taglib\Cx.php	/^        $parseStr = '<?php $' . $name . '=function(' . $vars . ') use(' . implode(',', $use) . ') {';$/;"	v
parseStr	thinkphp\library\think\template\taglib\Cx.php	/^        $parseStr = '<?php $__FOR_START_' . $rand . '__=' . $start . ';$__FOR_END_' . $rand . '__=' . $end . ';';$/;"	v
parseStr	thinkphp\library\think\template\taglib\Cx.php	/^        $parseStr = '<?php ' . $content . ' ?>';$/;"	v
parseStr	thinkphp\library\think\template\taglib\Cx.php	/^        $parseStr = '<?php ' . $name . ' = ' . $value . '; ?>';$/;"	v
parseStr	thinkphp\library\think\template\taglib\Cx.php	/^        $parseStr = '<?php ' . $value . ' ?>' . $content;$/;"	v
parseStr	thinkphp\library\think\template\taglib\Cx.php	/^        $parseStr = '<?php ';$/;"	v
parseStr	thinkphp\library\think\template\taglib\Cx.php	/^        $parseStr = '<?php default: ?>';$/;"	v
parseStr	thinkphp\library\think\template\taglib\Cx.php	/^        $parseStr = '<?php define(' . $name . ', ' . $value . '); ?>';$/;"	v
parseStr	thinkphp\library\think\template\taglib\Cx.php	/^        $parseStr = '<?php else: ?>';$/;"	v
parseStr	thinkphp\library\think\template\taglib\Cx.php	/^        $parseStr = '<?php if(!(empty(' . $name . ') || ((' . $name . ' instanceof \\think\\Collection || ' . $name . ' instanceof \\think\\Paginator ) && ' . $name . '->isEmpty()))): ?>' . $content . '<?php endif; ?>';$/;"	v
parseStr	thinkphp\library\think\template\taglib\Cx.php	/^        $parseStr = '<?php if(!defined("' . $name . '")): ?>' . $content . '<?php endif; ?>';$/;"	v
parseStr	thinkphp\library\think\template\taglib\Cx.php	/^        $parseStr = '<?php if(!isset(' . $name . ')): ?>' . $content . '<?php endif; ?>';$/;"	v
parseStr	thinkphp\library\think\template\taglib\Cx.php	/^        $parseStr = '<?php if(' . $name . ' ' . $type . ' ' . $value . '): ?>' . $content . '<?php endif; ?>';$/;"	v
parseStr	thinkphp\library\think\template\taglib\Cx.php	/^        $parseStr = '<?php if(defined("' . $name . '")): ?>' . $content . '<?php endif; ?>';$/;"	v
parseStr	thinkphp\library\think\template\taglib\Cx.php	/^        $parseStr = '<?php if(empty(' . $name . ') || ((' . $name . ' instanceof \\think\\Collection || ' . $name . ' instanceof \\think\\Paginator ) && ' . $name . '->isEmpty())): ?>' . $content . '<?php endif; ?>';$/;"	v
parseStr	thinkphp\library\think\template\taglib\Cx.php	/^        $parseStr = '<?php if(isset(' . $name . ')): ?>' . $content . '<?php endif; ?>';$/;"	v
parseStr	thinkphp\library\think\template\taglib\Cx.php	/^        $parseStr = '<?php switch(' . $name . '): ?>' . $content . '<?php endswitch; ?>';$/;"	v
rand	thinkphp\library\think\template\taglib\Cx.php	/^        $rand       = rand(); \/\/添加随机数，防止嵌套变量冲突$/;"	v
start	thinkphp\library\think\template\taglib\Cx.php	/^                    $start = $value;$/;"	v
start	thinkphp\library\think\template\taglib\Cx.php	/^        $start      = 0;$/;"	v
step	thinkphp\library\think\template\taglib\Cx.php	/^                    $step = $value;$/;"	v
step	thinkphp\library\think\template\taglib\Cx.php	/^        $step       = 1;$/;"	v
str	thinkphp\library\think\template\taglib\Cx.php	/^            $str   = 'explode(\\',\\',' . $value . ')';$/;"	v
str	thinkphp\library\think\template\taglib\Cx.php	/^            $str   = 'is_array(' . $value . ')?' . $value . ':explode(\\',\\',' . $value . ')';$/;"	v
suffix	thinkphp\library\think\template\taglib\Cx.php	/^        $suffix = isset($tag['suffix']) ? $tag['suffix'] : 'true';$/;"	v
tagAssign	thinkphp\library\think\template\taglib\Cx.php	/^    public function tagAssign($tag, $content)$/;"	f
tagCase	thinkphp\library\think\template\taglib\Cx.php	/^    public function tagCase($tag, $content)$/;"	f
tagCompare	thinkphp\library\think\template\taglib\Cx.php	/^    public function tagCompare($tag, $content)$/;"	f
tagDefault	thinkphp\library\think\template\taglib\Cx.php	/^    public function tagDefault($tag)$/;"	f
tagDefine	thinkphp\library\think\template\taglib\Cx.php	/^    public function tagDefine($tag, $content)$/;"	f
tagDefined	thinkphp\library\think\template\taglib\Cx.php	/^    public function tagDefined($tag, $content)$/;"	f
tagElse	thinkphp\library\think\template\taglib\Cx.php	/^    public function tagElse($tag)$/;"	f
tagElseif	thinkphp\library\think\template\taglib\Cx.php	/^    public function tagElseif($tag, $content)$/;"	f
tagEmpty	thinkphp\library\think\template\taglib\Cx.php	/^    public function tagEmpty($tag, $content)$/;"	f
tagFor	thinkphp\library\think\template\taglib\Cx.php	/^    public function tagFor($tag, $content)$/;"	f
tagForeach	thinkphp\library\think\template\taglib\Cx.php	/^    public function tagForeach($tag, $content)$/;"	f
tagFunction	thinkphp\library\think\template\taglib\Cx.php	/^    public function tagFunction($tag, $content)$/;"	f
tagIf	thinkphp\library\think\template\taglib\Cx.php	/^    public function tagIf($tag, $content)$/;"	f
tagLoad	thinkphp\library\think\template\taglib\Cx.php	/^    public function tagLoad($tag, $content)$/;"	f
tagNotdefined	thinkphp\library\think\template\taglib\Cx.php	/^    public function tagNotdefined($tag, $content)$/;"	f
tagNotempty	thinkphp\library\think\template\taglib\Cx.php	/^    public function tagNotempty($tag, $content)$/;"	f
tagNotpresent	thinkphp\library\think\template\taglib\Cx.php	/^    public function tagNotpresent($tag, $content)$/;"	f
tagPhp	thinkphp\library\think\template\taglib\Cx.php	/^    public function tagPhp($tag, $content)$/;"	f
tagPresent	thinkphp\library\think\template\taglib\Cx.php	/^    public function tagPresent($tag, $content)$/;"	f
tagRange	thinkphp\library\think\template\taglib\Cx.php	/^    public function tagRange($tag, $content)$/;"	f
tagSwitch	thinkphp\library\think\template\taglib\Cx.php	/^    public function tagSwitch($tag, $content)$/;"	f
tagUrl	thinkphp\library\think\template\taglib\Cx.php	/^    public function tagUrl($tag, $content)$/;"	f
tagVolist	thinkphp\library\think\template\taglib\Cx.php	/^    public function tagVolist($tag, $content)$/;"	f
tags	thinkphp\library\think\template\taglib\Cx.php	/^    protected $tags = [$/;"	v
type	thinkphp\library\think\template\taglib\Cx.php	/^                $type = 'eq';$/;"	v
type	thinkphp\library\think\template\taglib\Cx.php	/^                $type = 'neq';$/;"	v
type	thinkphp\library\think\template\taglib\Cx.php	/^            $type = strtolower(substr(strrchr($val, '.'), 1));$/;"	v
type	thinkphp\library\think\template\taglib\Cx.php	/^        $type     = $this->parseCondition(' ' . $type . ' ');$/;"	v
type	thinkphp\library\think\template\taglib\Cx.php	/^        $type  = isset($tag['type']) ? $tag['type'] : 'eq'; \/\/ 比较类型$/;"	v
type	thinkphp\library\think\template\taglib\Cx.php	/^        $type  = isset($tag['type']) ? $tag['type'] : 'in'; \/\/ 比较类型$/;"	v
type	thinkphp\library\think\template\taglib\Cx.php	/^        $type = isset($tag['type']) ? strtolower($tag['type']) : '';$/;"	v
url	thinkphp\library\think\template\taglib\Cx.php	/^        $url    = isset($tag['link']) ? $tag['link'] : '';$/;"	v
use	thinkphp\library\think\template\taglib\Cx.php	/^        $use  = ['&$' . $name];$/;"	v
value	thinkphp\library\think\template\taglib\Cx.php	/^                $value = $this->autoBuildVar($value);$/;"	v
value	thinkphp\library\think\template\taglib\Cx.php	/^            $value  = '';$/;"	v
value	thinkphp\library\think\template\taglib\Cx.php	/^            $value = $this->autoBuildVar($tag['value']);$/;"	v
value	thinkphp\library\think\template\taglib\Cx.php	/^            $value = $this->autoBuildVar($value);$/;"	v
value	thinkphp\library\think\template\taglib\Cx.php	/^            $value = '"' . $value . '"';$/;"	v
value	thinkphp\library\think\template\taglib\Cx.php	/^            $value = '\\'' . $tag['value'] . '\\'';$/;"	v
value	thinkphp\library\think\template\taglib\Cx.php	/^            $value = '\\'' . $value . '\\'';$/;"	v
value	thinkphp\library\think\template\taglib\Cx.php	/^            $value = 'case "' . $value . '":';$/;"	v
value	thinkphp\library\think\template\taglib\Cx.php	/^            $value = 'case ' . $value . ':';$/;"	v
value	thinkphp\library\think\template\taglib\Cx.php	/^            $value = trim($value);$/;"	v
value	thinkphp\library\think\template\taglib\Cx.php	/^        $value = !empty($tag['expression']) ? $tag['expression'] : $tag['value'];$/;"	v
value	thinkphp\library\think\template\taglib\Cx.php	/^        $value = $tag['value'];$/;"	v
values	thinkphp\library\think\template\taglib\Cx.php	/^            $values = explode('|', $value);$/;"	v
var	thinkphp\library\think\template\taglib\Cx.php	/^                $var = '$_' . uniqid();$/;"	v
var	thinkphp\library\think\template\taglib\Cx.php	/^            $var  = '$_' . uniqid();$/;"	v
var	thinkphp\library\think\template\taglib\Cx.php	/^            $var = &$name;$/;"	v
vars	thinkphp\library\think\template\taglib\Cx.php	/^        $vars   = isset($tag['vars']) ? $tag['vars'] : '';$/;"	v
vars	thinkphp\library\think\template\taglib\Cx.php	/^        $vars = !empty($tag['vars']) ? $tag['vars'] : '';$/;"	v
ValidateRule	thinkphp\library\think\validate\ValidateRule.php	/^class ValidateRule$/;"	c
__call	thinkphp\library\think\validate\ValidateRule.php	/^    public function __call($method, $args)$/;"	f
__callStatic	thinkphp\library\think\validate\ValidateRule.php	/^    public static function __callStatic($method, $args)$/;"	f
addItem	thinkphp\library\think\validate\ValidateRule.php	/^    protected function addItem($name, $rule = null, $msg = '')$/;"	f
getMsg	thinkphp\library\think\validate\ValidateRule.php	/^    public function getMsg()$/;"	f
getRule	thinkphp\library\think\validate\ValidateRule.php	/^    public function getRule()$/;"	f
getTitle	thinkphp\library\think\validate\ValidateRule.php	/^    public function getTitle()$/;"	f
message	thinkphp\library\think\validate\ValidateRule.php	/^    protected $message = [];$/;"	v
method	thinkphp\library\think\validate\ValidateRule.php	/^            $method = substr($method, 2);$/;"	v
msg	thinkphp\library\think\validate\ValidateRule.php	/^ * @method ValidateRule activeUrl(mixed $rule, string $msg = '') static 验证是否为合格的域名或者IP$/;"	v
msg	thinkphp\library\think\validate\ValidateRule.php	/^ * @method ValidateRule after(mixed $rule, string $msg = '') static 验证日期$/;"	v
msg	thinkphp\library\think\validate\ValidateRule.php	/^ * @method ValidateRule allowIp(mixed $rule, string $msg = '') static 验证IP许可$/;"	v
msg	thinkphp\library\think\validate\ValidateRule.php	/^ * @method ValidateRule before(mixed $rule, string $msg = '') static 验证日期$/;"	v
msg	thinkphp\library\think\validate\ValidateRule.php	/^ * @method ValidateRule behavior(mixed $rule, string $msg = '') static 使用行为类验证$/;"	v
msg	thinkphp\library\think\validate\ValidateRule.php	/^ * @method ValidateRule between(mixed $rule, string $msg = '') static 验证是否在某个区间$/;"	v
msg	thinkphp\library\think\validate\ValidateRule.php	/^ * @method ValidateRule confirm(mixed $rule, string $msg = '') static 验证是否和某个字段的值一致$/;"	v
msg	thinkphp\library\think\validate\ValidateRule.php	/^ * @method ValidateRule dateFormat(mixed $rule, string $msg = '') static 验证时间和日期是否符合指定格式$/;"	v
msg	thinkphp\library\think\validate\ValidateRule.php	/^ * @method ValidateRule denyIp(mixed $rule, string $msg = '') static 验证IP禁用$/;"	v
msg	thinkphp\library\think\validate\ValidateRule.php	/^ * @method ValidateRule different(mixed $rule, string $msg = '') static 验证是否和某个字段的值是否不同$/;"	v
msg	thinkphp\library\think\validate\ValidateRule.php	/^ * @method ValidateRule eg(mixed $rule, string $msg = '') static 验证是否等于某个值$/;"	v
msg	thinkphp\library\think\validate\ValidateRule.php	/^ * @method ValidateRule egt(mixed $rule, string $msg = '') static 验证是否大于等于某个值$/;"	v
msg	thinkphp\library\think\validate\ValidateRule.php	/^ * @method ValidateRule elt(mixed $rule, string $msg = '') static 验证是否小于等于某个值$/;"	v
msg	thinkphp\library\think\validate\ValidateRule.php	/^ * @method ValidateRule expire(mixed $rule, string $msg = '') static 验证有效期$/;"	v
msg	thinkphp\library\think\validate\ValidateRule.php	/^ * @method ValidateRule fileExt(mixed $rule, string $msg = '') static 验证文件后缀$/;"	v
msg	thinkphp\library\think\validate\ValidateRule.php	/^ * @method ValidateRule fileMime(mixed $rule, string $msg = '') static 验证文件类型$/;"	v
msg	thinkphp\library\think\validate\ValidateRule.php	/^ * @method ValidateRule fileSize(mixed $rule, string $msg = '') static 验证文件大小$/;"	v
msg	thinkphp\library\think\validate\ValidateRule.php	/^ * @method ValidateRule filter(mixed $rule, string $msg = '') static 使用filter_var方式验证$/;"	v
msg	thinkphp\library\think\validate\ValidateRule.php	/^ * @method ValidateRule gt(mixed $rule, string $msg = '') static 验证是否大于某个值$/;"	v
msg	thinkphp\library\think\validate\ValidateRule.php	/^ * @method ValidateRule image(mixed $rule, string $msg = '') static 验证图像文件$/;"	v
msg	thinkphp\library\think\validate\ValidateRule.php	/^ * @method ValidateRule in(mixed $rule, string $msg = '') static 验证是否在范围内$/;"	v
msg	thinkphp\library\think\validate\ValidateRule.php	/^ * @method ValidateRule ip(mixed $rule, string $msg = '') static 验证是否有效IP$/;"	v
msg	thinkphp\library\think\validate\ValidateRule.php	/^ * @method ValidateRule is(mixed $rule, string $msg = '') static 验证字段值是否为有效格式$/;"	v
msg	thinkphp\library\think\validate\ValidateRule.php	/^ * @method ValidateRule isAccepted(mixed $rule, string $msg = '') static 验证字段值是否为yes, on, 或是 1$/;"	v
msg	thinkphp\library\think\validate\ValidateRule.php	/^ * @method ValidateRule isAlpha(mixed $rule, string $msg = '') static 验证字段值是否为字母$/;"	v
msg	thinkphp\library\think\validate\ValidateRule.php	/^ * @method ValidateRule isAlphaDash(mixed $rule, string $msg = '') static 验证字段值是否为字母和下划线$/;"	v
msg	thinkphp\library\think\validate\ValidateRule.php	/^ * @method ValidateRule isAlphaNum(mixed $rule, string $msg = '') static 验证字段值是否为字母和数字$/;"	v
msg	thinkphp\library\think\validate\ValidateRule.php	/^ * @method ValidateRule isArray(mixed $rule, string $msg = '') static 验证字段值是否为数组$/;"	v
msg	thinkphp\library\think\validate\ValidateRule.php	/^ * @method ValidateRule isBool(mixed $rule, string $msg = '') static 验证字段值是否为布尔值$/;"	v
msg	thinkphp\library\think\validate\ValidateRule.php	/^ * @method ValidateRule isChs(mixed $rule, string $msg = '') static 验证字段值是否为中文$/;"	v
msg	thinkphp\library\think\validate\ValidateRule.php	/^ * @method ValidateRule isChsAlpha(mixed $rule, string $msg = '') static 验证字段值是否为中文和字母$/;"	v
msg	thinkphp\library\think\validate\ValidateRule.php	/^ * @method ValidateRule isChsAlphaNum(mixed $rule, string $msg = '') static 验证字段值是否为中文字母和数字$/;"	v
msg	thinkphp\library\think\validate\ValidateRule.php	/^ * @method ValidateRule isChsDash(mixed $rule, string $msg = '') static 验证字段值是否为中文字母及下划线$/;"	v
msg	thinkphp\library\think\validate\ValidateRule.php	/^ * @method ValidateRule isDate(mixed $rule, string $msg = '') static 验证字段值是否为有效格式$/;"	v
msg	thinkphp\library\think\validate\ValidateRule.php	/^ * @method ValidateRule isEmail(mixed $rule, string $msg = '') static 验证字段值是否为有效邮箱格式$/;"	v
msg	thinkphp\library\think\validate\ValidateRule.php	/^ * @method ValidateRule isFloat(mixed $rule, string $msg = '') static 验证字段值是否为浮点数$/;"	v
msg	thinkphp\library\think\validate\ValidateRule.php	/^ * @method ValidateRule isIdCard(mixed $rule, string $msg = '') static 验证字段值是否为身份证号码$/;"	v
msg	thinkphp\library\think\validate\ValidateRule.php	/^ * @method ValidateRule isInteger(mixed $rule, string $msg = '') static 验证字段值是否为整形$/;"	v
msg	thinkphp\library\think\validate\ValidateRule.php	/^ * @method ValidateRule isMobile(mixed $rule, string $msg = '') static 验证字段值是否为手机$/;"	v
msg	thinkphp\library\think\validate\ValidateRule.php	/^ * @method ValidateRule isNumber(mixed $rule, string $msg = '') static 验证字段值是否为数字$/;"	v
msg	thinkphp\library\think\validate\ValidateRule.php	/^ * @method ValidateRule isRequire(mixed $rule, string $msg = '') static 验证字段必须$/;"	v
msg	thinkphp\library\think\validate\ValidateRule.php	/^ * @method ValidateRule isUrl(mixed $rule, string $msg = '') static 验证字段值是否为有效URL地址$/;"	v
msg	thinkphp\library\think\validate\ValidateRule.php	/^ * @method ValidateRule length(mixed $rule, string $msg = '') static 验证数据长度$/;"	v
msg	thinkphp\library\think\validate\ValidateRule.php	/^ * @method ValidateRule lt(mixed $rule, string $msg = '') static 验证是否小于某个值$/;"	v
msg	thinkphp\library\think\validate\ValidateRule.php	/^ * @method ValidateRule max(mixed $rule, string $msg = '') static 验证数据最大长度$/;"	v
msg	thinkphp\library\think\validate\ValidateRule.php	/^ * @method ValidateRule method(mixed $rule, string $msg = '') static 验证请求类型$/;"	v
msg	thinkphp\library\think\validate\ValidateRule.php	/^ * @method ValidateRule min(mixed $rule, string $msg = '') static 验证数据最小长度$/;"	v
msg	thinkphp\library\think\validate\ValidateRule.php	/^ * @method ValidateRule notBetween(mixed $rule, string $msg = '') static 验证是否不在某个区间$/;"	v
msg	thinkphp\library\think\validate\ValidateRule.php	/^ * @method ValidateRule notIn(mixed $rule, string $msg = '') static 验证是否不在某个范围$/;"	v
msg	thinkphp\library\think\validate\ValidateRule.php	/^ * @method ValidateRule regex(mixed $rule, string $msg = '') static 使用正则验证数据$/;"	v
msg	thinkphp\library\think\validate\ValidateRule.php	/^ * @method ValidateRule requireCallback(mixed $rule, string $msg = '') static 通过回调方法验证某个字段是否必须$/;"	v
msg	thinkphp\library\think\validate\ValidateRule.php	/^ * @method ValidateRule requireIf(mixed $rule, string $msg = '') static 验证某个字段等于某个值的时候必须$/;"	v
msg	thinkphp\library\think\validate\ValidateRule.php	/^ * @method ValidateRule requireWith(mixed $rule, string $msg = '') static 验证某个字段有值的情况下必须$/;"	v
msg	thinkphp\library\think\validate\ValidateRule.php	/^ * @method ValidateRule unique(mixed $rule, string $msg = '') static 验证是否唯一$/;"	v
rule	thinkphp\library\think\validate\ValidateRule.php	/^        $rule = new static();$/;"	v
rule	thinkphp\library\think\validate\ValidateRule.php	/^    protected $rule = [];$/;"	v
rule	thinkphp\library\think\validate\ValidateRule.php	/^    protected function addItem($name, $rule = null, $msg = '')$/;"	v
rule	thinkphp\library\think\validate\ValidateRule.php	/^ * @method ValidateRule must(mixed $rule=null, string $msg = '') static 必须验证$/;"	v
rule	thinkphp\library\think\validate\ValidateRule.php	/^ * @method ValidateRule token(mixed $rule='__token__', string $msg = '') static 验证表单令牌$/;"	v
title	thinkphp\library\think\validate\ValidateRule.php	/^        $this->title = $title;$/;"	v
title	thinkphp\library\think\validate\ValidateRule.php	/^    protected $title;$/;"	v
title	thinkphp\library\think\validate\ValidateRule.php	/^    public function title($title)$/;"	f
Php	thinkphp\library\think\view\driver\Php.php	/^class Php$/;"	c
__construct	thinkphp\library\think\view\driver\Php.php	/^    public function __construct($config = [])$/;"	f
__content__	thinkphp\library\think\view\driver\Php.php	/^            $__content__ = $content;$/;"	v
__template__	thinkphp\library\think\view\driver\Php.php	/^            $__template__ = $template;$/;"	v
config	thinkphp\library\think\view\driver\Php.php	/^            $this->config = array_merge($this->config, $name);$/;"	v
config	thinkphp\library\think\view\driver\Php.php	/^        $this->config = array_merge($this->config, (array) $config);$/;"	v
config	thinkphp\library\think\view\driver\Php.php	/^    protected $config = [$/;"	v
config	thinkphp\library\think\view\driver\Php.php	/^    public function config($name, $value = null)$/;"	f
controller	thinkphp\library\think\view\driver\Php.php	/^            $controller = Loader::parseName($request->controller());$/;"	v
data	thinkphp\library\think\view\driver\Php.php	/^    public function display($content, $data = [])$/;"	v
data	thinkphp\library\think\view\driver\Php.php	/^    public function fetch($template, $data = [])$/;"	v
depr	thinkphp\library\think\view\driver\Php.php	/^        $depr = $this->config['view_depr'];$/;"	v
display	thinkphp\library\think\view\driver\Php.php	/^    public function display($content, $data = [])$/;"	f
exists	thinkphp\library\think\view\driver\Php.php	/^    public function exists($template)$/;"	f
fetch	thinkphp\library\think\view\driver\Php.php	/^    public function fetch($template, $data = [])$/;"	f
module	thinkphp\library\think\view\driver\Php.php	/^            $module = isset($module) ? $module : $request->module();$/;"	v
parseTemplate	thinkphp\library\think\view\driver\Php.php	/^    private function parseTemplate($template)$/;"	f
path	thinkphp\library\think\view\driver\Php.php	/^            $path   = $this->config['view_base'] . ($module ? $module . DIRECTORY_SEPARATOR : '');$/;"	v
path	thinkphp\library\think\view\driver\Php.php	/^            $path = isset($module) ? Container::get('app')->getAppPath() . $module . DIRECTORY_SEPARATOR . 'view' . DIRECTORY_SEPARATOR : $this->config['view_path'];$/;"	v
request	thinkphp\library\think\view\driver\Php.php	/^        $request = Container::get('request');$/;"	v
template	thinkphp\library\think\view\driver\Php.php	/^                    $template = str_replace('.', DIRECTORY_SEPARATOR, $controller) . $depr . $request->action();$/;"	v
template	thinkphp\library\think\view\driver\Php.php	/^                    $template = str_replace('.', DIRECTORY_SEPARATOR, $controller) . $depr . $template;$/;"	v
template	thinkphp\library\think\view\driver\Php.php	/^            $template   = str_replace(['\/', ':'], $depr, $template);$/;"	v
template	thinkphp\library\think\view\driver\Php.php	/^            $template = $this->parseTemplate($template);$/;"	v
template	thinkphp\library\think\view\driver\Php.php	/^            $template = str_replace(['\/', ':'], $depr, substr($template, 1));$/;"	v
value	thinkphp\library\think\view\driver\Php.php	/^    public function config($name, $value = null)$/;"	v
Think	thinkphp\library\think\view\driver\Think.php	/^class Think$/;"	c
__call	thinkphp\library\think\view\driver\Think.php	/^    public function __call($method, $params)$/;"	f
__construct	thinkphp\library\think\view\driver\Think.php	/^    public function __construct($config = [])$/;"	f
config	thinkphp\library\think\view\driver\Think.php	/^            $this->config = array_merge($this->config, $name);$/;"	v
config	thinkphp\library\think\view\driver\Think.php	/^        $this->config = array_merge($this->config, (array) $config);$/;"	v
config	thinkphp\library\think\view\driver\Think.php	/^    protected $config = [$/;"	v
config	thinkphp\library\think\view\driver\Think.php	/^    public function config($name, $value = null)$/;"	f
controller	thinkphp\library\think\view\driver\Think.php	/^            $controller = Loader::parseName($request->controller());$/;"	v
data	thinkphp\library\think\view\driver\Think.php	/^    public function display($template, $data = [], $config = [])$/;"	v
data	thinkphp\library\think\view\driver\Think.php	/^    public function fetch($template, $data = [], $config = [])$/;"	v
depr	thinkphp\library\think\view\driver\Think.php	/^        $depr = $this->config['view_depr'];$/;"	v
display	thinkphp\library\think\view\driver\Think.php	/^    public function display($template, $data = [], $config = [])$/;"	f
exists	thinkphp\library\think\view\driver\Think.php	/^    public function exists($template)$/;"	f
fetch	thinkphp\library\think\view\driver\Think.php	/^    public function fetch($template, $data = [], $config = [])$/;"	f
module	thinkphp\library\think\view\driver\Think.php	/^            $module = isset($module) ? $module : $request->module();$/;"	v
parseTemplate	thinkphp\library\think\view\driver\Think.php	/^    private function parseTemplate($template)$/;"	f
path	thinkphp\library\think\view\driver\Think.php	/^            $path   = $this->config['view_base'] . ($module ? $module . DIRECTORY_SEPARATOR : '');$/;"	v
path	thinkphp\library\think\view\driver\Think.php	/^            $path = isset($module) ? Container::get('app')->getAppPath() . $module . DIRECTORY_SEPARATOR . 'view' . DIRECTORY_SEPARATOR : $this->config['view_path'];$/;"	v
request	thinkphp\library\think\view\driver\Think.php	/^        $request = Container::get('request');$/;"	v
template	thinkphp\library\think\view\driver\Think.php	/^                    $template = str_replace('.', DIRECTORY_SEPARATOR, $controller) . $depr . $request->action();$/;"	v
template	thinkphp\library\think\view\driver\Think.php	/^                    $template = str_replace('.', DIRECTORY_SEPARATOR, $controller) . $depr . $template;$/;"	v
template	thinkphp\library\think\view\driver\Think.php	/^            $template   = str_replace(['\/', ':'], $depr, $template);$/;"	v
template	thinkphp\library\think\view\driver\Think.php	/^            $template = $this->parseTemplate($template);$/;"	v
template	thinkphp\library\think\view\driver\Think.php	/^            $template = str_replace(['\/', ':'], $depr, substr($template, 1));$/;"	v
template	thinkphp\library\think\view\driver\Think.php	/^        $this->template = new Template($this->config);$/;"	v
template	thinkphp\library\think\view\driver\Think.php	/^    private $template;$/;"	v
value	thinkphp\library\think\view\driver\Think.php	/^    public function config($name, $value = null)$/;"	v
code	thinkphp\library\traits\controller\Jump.php	/^            $code   = $params;$/;"	v
code	thinkphp\library\traits\controller\Jump.php	/^    protected function result($data, $code = 0, $msg = '', $type = '', array $header = [])$/;"	v
config	thinkphp\library\traits\controller\Jump.php	/^            $config = Container::get('config');$/;"	v
config	thinkphp\library\traits\controller\Jump.php	/^        $config = Container::get('config');$/;"	v
error	thinkphp\library\traits\controller\Jump.php	/^    protected function error($msg = '', $url = null, $data = '', $wait = 3, array $header = [])$/;"	f
getResponseType	thinkphp\library\traits\controller\Jump.php	/^    protected function getResponseType()$/;"	f
index	thinkphp\library\traits\controller\Jump.php	/^ *     public function index(){$/;"	f
index	thinkphp\library\traits\controller\Jump.php	/^ * class index$/;"	c
isAjax	thinkphp\library\traits\controller\Jump.php	/^        $isAjax = Container::get('request')->isAjax();$/;"	v
params	thinkphp\library\traits\controller\Jump.php	/^            $params = [];$/;"	v
params	thinkphp\library\traits\controller\Jump.php	/^    protected function redirect($url, $params = [], $code = 302, $with = [])$/;"	v
redirect	thinkphp\library\traits\controller\Jump.php	/^    protected function redirect($url, $params = [], $code = 302, $with = [])$/;"	f
response	thinkphp\library\traits\controller\Jump.php	/^        $response = Response::create($result, $type)->header($header);$/;"	v
response	thinkphp\library\traits\controller\Jump.php	/^        $response = new Redirect($url);$/;"	v
result	thinkphp\library\traits\controller\Jump.php	/^            $result = Container::get('view')$/;"	v
result	thinkphp\library\traits\controller\Jump.php	/^        $result = [$/;"	v
result	thinkphp\library\traits\controller\Jump.php	/^    protected function result($data, $code = 0, $msg = '', $type = '', array $header = [])$/;"	f
success	thinkphp\library\traits\controller\Jump.php	/^    protected function success($msg = '', $url = null, $data = '', $wait = 3, array $header = [])$/;"	f
type	thinkphp\library\traits\controller\Jump.php	/^        $type     = $type ?: $this->getResponseType();$/;"	v
type	thinkphp\library\traits\controller\Jump.php	/^        $type = $this->getResponseType();$/;"	v
url	thinkphp\library\traits\controller\Jump.php	/^            $url = $_SERVER["HTTP_REFERER"];$/;"	v
url	thinkphp\library\traits\controller\Jump.php	/^            $url = (strpos($url, ':\/\/') || 0 === strpos($url, '\/')) ? $url : Container::get('url')->build($url);$/;"	v
url	thinkphp\library\traits\controller\Jump.php	/^            $url = Container::get('request')->isAjax() ? '' : 'javascript:history.back(-1);';$/;"	v
url	thinkphp\library\traits\controller\Jump.php	/^    protected function error($msg = '', $url = null, $data = '', $wait = 3, array $header = [])$/;"	v
url	thinkphp\library\traits\controller\Jump.php	/^    protected function success($msg = '', $url = null, $data = '', $wait = 3, array $header = [])$/;"	v
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_PROGRAM_VERSION	5.8	//
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
